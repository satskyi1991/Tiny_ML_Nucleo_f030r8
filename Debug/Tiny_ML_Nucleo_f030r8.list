
Tiny_ML_Nucleo_f030r8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084e4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001070  080085b0  080085b0  000095b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009620  08009620  0000b2dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08009620  08009620  0000b2dc  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08009620  08009620  0000b2dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009620  08009620  0000a620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009628  08009628  0000a628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002dc  20000000  0800962c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  200002dc  08009908  0000b2dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d0  08009908  0000b5d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b2dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d308  00000000  00000000  0000b304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fa9  00000000  00000000  0002860c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  0002b5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000089d  00000000  00000000  0002c0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003c64  00000000  00000000  0002c995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000120e4  00000000  00000000  000305f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083969  00000000  00000000  000426dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6046  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003798  00000000  00000000  000c608c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000c9824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200002dc 	.word	0x200002dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800858c 	.word	0x0800858c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200002e0 	.word	0x200002e0
 8000104:	0800858c 	.word	0x0800858c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 faa3 	bl	8001988 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f9e7 	bl	8001820 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fa95 	bl	8001988 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fa8b 	bl	8001988 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fa11 	bl	80018a8 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fa07 	bl	80018a8 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__clzsi2>:
 80004a8:	211c      	movs	r1, #28
 80004aa:	2301      	movs	r3, #1
 80004ac:	041b      	lsls	r3, r3, #16
 80004ae:	4298      	cmp	r0, r3
 80004b0:	d301      	bcc.n	80004b6 <__clzsi2+0xe>
 80004b2:	0c00      	lsrs	r0, r0, #16
 80004b4:	3910      	subs	r1, #16
 80004b6:	0a1b      	lsrs	r3, r3, #8
 80004b8:	4298      	cmp	r0, r3
 80004ba:	d301      	bcc.n	80004c0 <__clzsi2+0x18>
 80004bc:	0a00      	lsrs	r0, r0, #8
 80004be:	3908      	subs	r1, #8
 80004c0:	091b      	lsrs	r3, r3, #4
 80004c2:	4298      	cmp	r0, r3
 80004c4:	d301      	bcc.n	80004ca <__clzsi2+0x22>
 80004c6:	0900      	lsrs	r0, r0, #4
 80004c8:	3904      	subs	r1, #4
 80004ca:	a202      	add	r2, pc, #8	@ (adr r2, 80004d4 <__clzsi2+0x2c>)
 80004cc:	5c10      	ldrb	r0, [r2, r0]
 80004ce:	1840      	adds	r0, r0, r1
 80004d0:	4770      	bx	lr
 80004d2:	46c0      	nop			@ (mov r8, r8)
 80004d4:	02020304 	.word	0x02020304
 80004d8:	01010101 	.word	0x01010101
	...

080004e4 <__aeabi_fdiv>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	4646      	mov	r6, r8
 80004e8:	464f      	mov	r7, r9
 80004ea:	46d6      	mov	lr, sl
 80004ec:	0245      	lsls	r5, r0, #9
 80004ee:	b5c0      	push	{r6, r7, lr}
 80004f0:	0fc3      	lsrs	r3, r0, #31
 80004f2:	0047      	lsls	r7, r0, #1
 80004f4:	4698      	mov	r8, r3
 80004f6:	1c0e      	adds	r6, r1, #0
 80004f8:	0a6d      	lsrs	r5, r5, #9
 80004fa:	0e3f      	lsrs	r7, r7, #24
 80004fc:	d05b      	beq.n	80005b6 <__aeabi_fdiv+0xd2>
 80004fe:	2fff      	cmp	r7, #255	@ 0xff
 8000500:	d021      	beq.n	8000546 <__aeabi_fdiv+0x62>
 8000502:	2380      	movs	r3, #128	@ 0x80
 8000504:	00ed      	lsls	r5, r5, #3
 8000506:	04db      	lsls	r3, r3, #19
 8000508:	431d      	orrs	r5, r3
 800050a:	2300      	movs	r3, #0
 800050c:	4699      	mov	r9, r3
 800050e:	469a      	mov	sl, r3
 8000510:	3f7f      	subs	r7, #127	@ 0x7f
 8000512:	0274      	lsls	r4, r6, #9
 8000514:	0073      	lsls	r3, r6, #1
 8000516:	0a64      	lsrs	r4, r4, #9
 8000518:	0e1b      	lsrs	r3, r3, #24
 800051a:	0ff6      	lsrs	r6, r6, #31
 800051c:	2b00      	cmp	r3, #0
 800051e:	d020      	beq.n	8000562 <__aeabi_fdiv+0x7e>
 8000520:	2bff      	cmp	r3, #255	@ 0xff
 8000522:	d043      	beq.n	80005ac <__aeabi_fdiv+0xc8>
 8000524:	2280      	movs	r2, #128	@ 0x80
 8000526:	2000      	movs	r0, #0
 8000528:	00e4      	lsls	r4, r4, #3
 800052a:	04d2      	lsls	r2, r2, #19
 800052c:	4314      	orrs	r4, r2
 800052e:	3b7f      	subs	r3, #127	@ 0x7f
 8000530:	4642      	mov	r2, r8
 8000532:	1aff      	subs	r7, r7, r3
 8000534:	464b      	mov	r3, r9
 8000536:	4072      	eors	r2, r6
 8000538:	2b0f      	cmp	r3, #15
 800053a:	d900      	bls.n	800053e <__aeabi_fdiv+0x5a>
 800053c:	e09d      	b.n	800067a <__aeabi_fdiv+0x196>
 800053e:	4971      	ldr	r1, [pc, #452]	@ (8000704 <__aeabi_fdiv+0x220>)
 8000540:	009b      	lsls	r3, r3, #2
 8000542:	58cb      	ldr	r3, [r1, r3]
 8000544:	469f      	mov	pc, r3
 8000546:	2d00      	cmp	r5, #0
 8000548:	d15a      	bne.n	8000600 <__aeabi_fdiv+0x11c>
 800054a:	2308      	movs	r3, #8
 800054c:	4699      	mov	r9, r3
 800054e:	3b06      	subs	r3, #6
 8000550:	0274      	lsls	r4, r6, #9
 8000552:	469a      	mov	sl, r3
 8000554:	0073      	lsls	r3, r6, #1
 8000556:	27ff      	movs	r7, #255	@ 0xff
 8000558:	0a64      	lsrs	r4, r4, #9
 800055a:	0e1b      	lsrs	r3, r3, #24
 800055c:	0ff6      	lsrs	r6, r6, #31
 800055e:	2b00      	cmp	r3, #0
 8000560:	d1de      	bne.n	8000520 <__aeabi_fdiv+0x3c>
 8000562:	2c00      	cmp	r4, #0
 8000564:	d13b      	bne.n	80005de <__aeabi_fdiv+0xfa>
 8000566:	2301      	movs	r3, #1
 8000568:	4642      	mov	r2, r8
 800056a:	4649      	mov	r1, r9
 800056c:	4072      	eors	r2, r6
 800056e:	4319      	orrs	r1, r3
 8000570:	290e      	cmp	r1, #14
 8000572:	d818      	bhi.n	80005a6 <__aeabi_fdiv+0xc2>
 8000574:	4864      	ldr	r0, [pc, #400]	@ (8000708 <__aeabi_fdiv+0x224>)
 8000576:	0089      	lsls	r1, r1, #2
 8000578:	5841      	ldr	r1, [r0, r1]
 800057a:	468f      	mov	pc, r1
 800057c:	4653      	mov	r3, sl
 800057e:	2b02      	cmp	r3, #2
 8000580:	d100      	bne.n	8000584 <__aeabi_fdiv+0xa0>
 8000582:	e0b8      	b.n	80006f6 <__aeabi_fdiv+0x212>
 8000584:	2b03      	cmp	r3, #3
 8000586:	d06e      	beq.n	8000666 <__aeabi_fdiv+0x182>
 8000588:	4642      	mov	r2, r8
 800058a:	002c      	movs	r4, r5
 800058c:	2b01      	cmp	r3, #1
 800058e:	d140      	bne.n	8000612 <__aeabi_fdiv+0x12e>
 8000590:	2000      	movs	r0, #0
 8000592:	2400      	movs	r4, #0
 8000594:	05c0      	lsls	r0, r0, #23
 8000596:	4320      	orrs	r0, r4
 8000598:	07d2      	lsls	r2, r2, #31
 800059a:	4310      	orrs	r0, r2
 800059c:	bce0      	pop	{r5, r6, r7}
 800059e:	46ba      	mov	sl, r7
 80005a0:	46b1      	mov	r9, r6
 80005a2:	46a8      	mov	r8, r5
 80005a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005a6:	20ff      	movs	r0, #255	@ 0xff
 80005a8:	2400      	movs	r4, #0
 80005aa:	e7f3      	b.n	8000594 <__aeabi_fdiv+0xb0>
 80005ac:	2c00      	cmp	r4, #0
 80005ae:	d120      	bne.n	80005f2 <__aeabi_fdiv+0x10e>
 80005b0:	2302      	movs	r3, #2
 80005b2:	3fff      	subs	r7, #255	@ 0xff
 80005b4:	e7d8      	b.n	8000568 <__aeabi_fdiv+0x84>
 80005b6:	2d00      	cmp	r5, #0
 80005b8:	d105      	bne.n	80005c6 <__aeabi_fdiv+0xe2>
 80005ba:	2304      	movs	r3, #4
 80005bc:	4699      	mov	r9, r3
 80005be:	3b03      	subs	r3, #3
 80005c0:	2700      	movs	r7, #0
 80005c2:	469a      	mov	sl, r3
 80005c4:	e7a5      	b.n	8000512 <__aeabi_fdiv+0x2e>
 80005c6:	0028      	movs	r0, r5
 80005c8:	f7ff ff6e 	bl	80004a8 <__clzsi2>
 80005cc:	2776      	movs	r7, #118	@ 0x76
 80005ce:	1f43      	subs	r3, r0, #5
 80005d0:	409d      	lsls	r5, r3
 80005d2:	2300      	movs	r3, #0
 80005d4:	427f      	negs	r7, r7
 80005d6:	4699      	mov	r9, r3
 80005d8:	469a      	mov	sl, r3
 80005da:	1a3f      	subs	r7, r7, r0
 80005dc:	e799      	b.n	8000512 <__aeabi_fdiv+0x2e>
 80005de:	0020      	movs	r0, r4
 80005e0:	f7ff ff62 	bl	80004a8 <__clzsi2>
 80005e4:	1f43      	subs	r3, r0, #5
 80005e6:	409c      	lsls	r4, r3
 80005e8:	2376      	movs	r3, #118	@ 0x76
 80005ea:	425b      	negs	r3, r3
 80005ec:	1a1b      	subs	r3, r3, r0
 80005ee:	2000      	movs	r0, #0
 80005f0:	e79e      	b.n	8000530 <__aeabi_fdiv+0x4c>
 80005f2:	2303      	movs	r3, #3
 80005f4:	464a      	mov	r2, r9
 80005f6:	431a      	orrs	r2, r3
 80005f8:	4691      	mov	r9, r2
 80005fa:	2003      	movs	r0, #3
 80005fc:	33fc      	adds	r3, #252	@ 0xfc
 80005fe:	e797      	b.n	8000530 <__aeabi_fdiv+0x4c>
 8000600:	230c      	movs	r3, #12
 8000602:	4699      	mov	r9, r3
 8000604:	3b09      	subs	r3, #9
 8000606:	27ff      	movs	r7, #255	@ 0xff
 8000608:	469a      	mov	sl, r3
 800060a:	e782      	b.n	8000512 <__aeabi_fdiv+0x2e>
 800060c:	2803      	cmp	r0, #3
 800060e:	d02c      	beq.n	800066a <__aeabi_fdiv+0x186>
 8000610:	0032      	movs	r2, r6
 8000612:	0038      	movs	r0, r7
 8000614:	307f      	adds	r0, #127	@ 0x7f
 8000616:	2800      	cmp	r0, #0
 8000618:	dd47      	ble.n	80006aa <__aeabi_fdiv+0x1c6>
 800061a:	0763      	lsls	r3, r4, #29
 800061c:	d004      	beq.n	8000628 <__aeabi_fdiv+0x144>
 800061e:	230f      	movs	r3, #15
 8000620:	4023      	ands	r3, r4
 8000622:	2b04      	cmp	r3, #4
 8000624:	d000      	beq.n	8000628 <__aeabi_fdiv+0x144>
 8000626:	3404      	adds	r4, #4
 8000628:	0123      	lsls	r3, r4, #4
 800062a:	d503      	bpl.n	8000634 <__aeabi_fdiv+0x150>
 800062c:	0038      	movs	r0, r7
 800062e:	4b37      	ldr	r3, [pc, #220]	@ (800070c <__aeabi_fdiv+0x228>)
 8000630:	3080      	adds	r0, #128	@ 0x80
 8000632:	401c      	ands	r4, r3
 8000634:	28fe      	cmp	r0, #254	@ 0xfe
 8000636:	dcb6      	bgt.n	80005a6 <__aeabi_fdiv+0xc2>
 8000638:	01a4      	lsls	r4, r4, #6
 800063a:	0a64      	lsrs	r4, r4, #9
 800063c:	b2c0      	uxtb	r0, r0
 800063e:	e7a9      	b.n	8000594 <__aeabi_fdiv+0xb0>
 8000640:	2480      	movs	r4, #128	@ 0x80
 8000642:	2200      	movs	r2, #0
 8000644:	20ff      	movs	r0, #255	@ 0xff
 8000646:	03e4      	lsls	r4, r4, #15
 8000648:	e7a4      	b.n	8000594 <__aeabi_fdiv+0xb0>
 800064a:	2380      	movs	r3, #128	@ 0x80
 800064c:	03db      	lsls	r3, r3, #15
 800064e:	421d      	tst	r5, r3
 8000650:	d001      	beq.n	8000656 <__aeabi_fdiv+0x172>
 8000652:	421c      	tst	r4, r3
 8000654:	d00b      	beq.n	800066e <__aeabi_fdiv+0x18a>
 8000656:	2480      	movs	r4, #128	@ 0x80
 8000658:	03e4      	lsls	r4, r4, #15
 800065a:	432c      	orrs	r4, r5
 800065c:	0264      	lsls	r4, r4, #9
 800065e:	4642      	mov	r2, r8
 8000660:	20ff      	movs	r0, #255	@ 0xff
 8000662:	0a64      	lsrs	r4, r4, #9
 8000664:	e796      	b.n	8000594 <__aeabi_fdiv+0xb0>
 8000666:	4646      	mov	r6, r8
 8000668:	002c      	movs	r4, r5
 800066a:	2380      	movs	r3, #128	@ 0x80
 800066c:	03db      	lsls	r3, r3, #15
 800066e:	431c      	orrs	r4, r3
 8000670:	0264      	lsls	r4, r4, #9
 8000672:	0032      	movs	r2, r6
 8000674:	20ff      	movs	r0, #255	@ 0xff
 8000676:	0a64      	lsrs	r4, r4, #9
 8000678:	e78c      	b.n	8000594 <__aeabi_fdiv+0xb0>
 800067a:	016d      	lsls	r5, r5, #5
 800067c:	0160      	lsls	r0, r4, #5
 800067e:	4285      	cmp	r5, r0
 8000680:	d22d      	bcs.n	80006de <__aeabi_fdiv+0x1fa>
 8000682:	231b      	movs	r3, #27
 8000684:	2400      	movs	r4, #0
 8000686:	3f01      	subs	r7, #1
 8000688:	2601      	movs	r6, #1
 800068a:	0029      	movs	r1, r5
 800068c:	0064      	lsls	r4, r4, #1
 800068e:	006d      	lsls	r5, r5, #1
 8000690:	2900      	cmp	r1, #0
 8000692:	db01      	blt.n	8000698 <__aeabi_fdiv+0x1b4>
 8000694:	4285      	cmp	r5, r0
 8000696:	d301      	bcc.n	800069c <__aeabi_fdiv+0x1b8>
 8000698:	1a2d      	subs	r5, r5, r0
 800069a:	4334      	orrs	r4, r6
 800069c:	3b01      	subs	r3, #1
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d1f3      	bne.n	800068a <__aeabi_fdiv+0x1a6>
 80006a2:	1e6b      	subs	r3, r5, #1
 80006a4:	419d      	sbcs	r5, r3
 80006a6:	432c      	orrs	r4, r5
 80006a8:	e7b3      	b.n	8000612 <__aeabi_fdiv+0x12e>
 80006aa:	2301      	movs	r3, #1
 80006ac:	1a1b      	subs	r3, r3, r0
 80006ae:	2b1b      	cmp	r3, #27
 80006b0:	dd00      	ble.n	80006b4 <__aeabi_fdiv+0x1d0>
 80006b2:	e76d      	b.n	8000590 <__aeabi_fdiv+0xac>
 80006b4:	0021      	movs	r1, r4
 80006b6:	379e      	adds	r7, #158	@ 0x9e
 80006b8:	40d9      	lsrs	r1, r3
 80006ba:	40bc      	lsls	r4, r7
 80006bc:	000b      	movs	r3, r1
 80006be:	1e61      	subs	r1, r4, #1
 80006c0:	418c      	sbcs	r4, r1
 80006c2:	4323      	orrs	r3, r4
 80006c4:	0759      	lsls	r1, r3, #29
 80006c6:	d004      	beq.n	80006d2 <__aeabi_fdiv+0x1ee>
 80006c8:	210f      	movs	r1, #15
 80006ca:	4019      	ands	r1, r3
 80006cc:	2904      	cmp	r1, #4
 80006ce:	d000      	beq.n	80006d2 <__aeabi_fdiv+0x1ee>
 80006d0:	3304      	adds	r3, #4
 80006d2:	0159      	lsls	r1, r3, #5
 80006d4:	d413      	bmi.n	80006fe <__aeabi_fdiv+0x21a>
 80006d6:	019b      	lsls	r3, r3, #6
 80006d8:	2000      	movs	r0, #0
 80006da:	0a5c      	lsrs	r4, r3, #9
 80006dc:	e75a      	b.n	8000594 <__aeabi_fdiv+0xb0>
 80006de:	231a      	movs	r3, #26
 80006e0:	2401      	movs	r4, #1
 80006e2:	1a2d      	subs	r5, r5, r0
 80006e4:	e7d0      	b.n	8000688 <__aeabi_fdiv+0x1a4>
 80006e6:	1e98      	subs	r0, r3, #2
 80006e8:	4243      	negs	r3, r0
 80006ea:	4158      	adcs	r0, r3
 80006ec:	4240      	negs	r0, r0
 80006ee:	0032      	movs	r2, r6
 80006f0:	2400      	movs	r4, #0
 80006f2:	b2c0      	uxtb	r0, r0
 80006f4:	e74e      	b.n	8000594 <__aeabi_fdiv+0xb0>
 80006f6:	4642      	mov	r2, r8
 80006f8:	20ff      	movs	r0, #255	@ 0xff
 80006fa:	2400      	movs	r4, #0
 80006fc:	e74a      	b.n	8000594 <__aeabi_fdiv+0xb0>
 80006fe:	2001      	movs	r0, #1
 8000700:	2400      	movs	r4, #0
 8000702:	e747      	b.n	8000594 <__aeabi_fdiv+0xb0>
 8000704:	080085d0 	.word	0x080085d0
 8000708:	08008610 	.word	0x08008610
 800070c:	f7ffffff 	.word	0xf7ffffff

08000710 <__aeabi_fmul>:
 8000710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000712:	464f      	mov	r7, r9
 8000714:	4646      	mov	r6, r8
 8000716:	46d6      	mov	lr, sl
 8000718:	0044      	lsls	r4, r0, #1
 800071a:	b5c0      	push	{r6, r7, lr}
 800071c:	0246      	lsls	r6, r0, #9
 800071e:	1c0f      	adds	r7, r1, #0
 8000720:	0a76      	lsrs	r6, r6, #9
 8000722:	0e24      	lsrs	r4, r4, #24
 8000724:	0fc5      	lsrs	r5, r0, #31
 8000726:	2c00      	cmp	r4, #0
 8000728:	d100      	bne.n	800072c <__aeabi_fmul+0x1c>
 800072a:	e0da      	b.n	80008e2 <__aeabi_fmul+0x1d2>
 800072c:	2cff      	cmp	r4, #255	@ 0xff
 800072e:	d074      	beq.n	800081a <__aeabi_fmul+0x10a>
 8000730:	2380      	movs	r3, #128	@ 0x80
 8000732:	00f6      	lsls	r6, r6, #3
 8000734:	04db      	lsls	r3, r3, #19
 8000736:	431e      	orrs	r6, r3
 8000738:	2300      	movs	r3, #0
 800073a:	4699      	mov	r9, r3
 800073c:	469a      	mov	sl, r3
 800073e:	3c7f      	subs	r4, #127	@ 0x7f
 8000740:	027b      	lsls	r3, r7, #9
 8000742:	0a5b      	lsrs	r3, r3, #9
 8000744:	4698      	mov	r8, r3
 8000746:	007b      	lsls	r3, r7, #1
 8000748:	0e1b      	lsrs	r3, r3, #24
 800074a:	0fff      	lsrs	r7, r7, #31
 800074c:	2b00      	cmp	r3, #0
 800074e:	d074      	beq.n	800083a <__aeabi_fmul+0x12a>
 8000750:	2bff      	cmp	r3, #255	@ 0xff
 8000752:	d100      	bne.n	8000756 <__aeabi_fmul+0x46>
 8000754:	e08e      	b.n	8000874 <__aeabi_fmul+0x164>
 8000756:	4642      	mov	r2, r8
 8000758:	2180      	movs	r1, #128	@ 0x80
 800075a:	00d2      	lsls	r2, r2, #3
 800075c:	04c9      	lsls	r1, r1, #19
 800075e:	4311      	orrs	r1, r2
 8000760:	3b7f      	subs	r3, #127	@ 0x7f
 8000762:	002a      	movs	r2, r5
 8000764:	18e4      	adds	r4, r4, r3
 8000766:	464b      	mov	r3, r9
 8000768:	407a      	eors	r2, r7
 800076a:	4688      	mov	r8, r1
 800076c:	b2d2      	uxtb	r2, r2
 800076e:	2b0a      	cmp	r3, #10
 8000770:	dc75      	bgt.n	800085e <__aeabi_fmul+0x14e>
 8000772:	464b      	mov	r3, r9
 8000774:	2000      	movs	r0, #0
 8000776:	2b02      	cmp	r3, #2
 8000778:	dd0f      	ble.n	800079a <__aeabi_fmul+0x8a>
 800077a:	4649      	mov	r1, r9
 800077c:	2301      	movs	r3, #1
 800077e:	408b      	lsls	r3, r1
 8000780:	21a6      	movs	r1, #166	@ 0xa6
 8000782:	00c9      	lsls	r1, r1, #3
 8000784:	420b      	tst	r3, r1
 8000786:	d169      	bne.n	800085c <__aeabi_fmul+0x14c>
 8000788:	2190      	movs	r1, #144	@ 0x90
 800078a:	0089      	lsls	r1, r1, #2
 800078c:	420b      	tst	r3, r1
 800078e:	d000      	beq.n	8000792 <__aeabi_fmul+0x82>
 8000790:	e100      	b.n	8000994 <__aeabi_fmul+0x284>
 8000792:	2188      	movs	r1, #136	@ 0x88
 8000794:	4219      	tst	r1, r3
 8000796:	d000      	beq.n	800079a <__aeabi_fmul+0x8a>
 8000798:	e0f5      	b.n	8000986 <__aeabi_fmul+0x276>
 800079a:	4641      	mov	r1, r8
 800079c:	0409      	lsls	r1, r1, #16
 800079e:	0c09      	lsrs	r1, r1, #16
 80007a0:	4643      	mov	r3, r8
 80007a2:	0008      	movs	r0, r1
 80007a4:	0c35      	lsrs	r5, r6, #16
 80007a6:	0436      	lsls	r6, r6, #16
 80007a8:	0c1b      	lsrs	r3, r3, #16
 80007aa:	0c36      	lsrs	r6, r6, #16
 80007ac:	4370      	muls	r0, r6
 80007ae:	4369      	muls	r1, r5
 80007b0:	435e      	muls	r6, r3
 80007b2:	435d      	muls	r5, r3
 80007b4:	1876      	adds	r6, r6, r1
 80007b6:	0c03      	lsrs	r3, r0, #16
 80007b8:	199b      	adds	r3, r3, r6
 80007ba:	4299      	cmp	r1, r3
 80007bc:	d903      	bls.n	80007c6 <__aeabi_fmul+0xb6>
 80007be:	2180      	movs	r1, #128	@ 0x80
 80007c0:	0249      	lsls	r1, r1, #9
 80007c2:	468c      	mov	ip, r1
 80007c4:	4465      	add	r5, ip
 80007c6:	0400      	lsls	r0, r0, #16
 80007c8:	0419      	lsls	r1, r3, #16
 80007ca:	0c00      	lsrs	r0, r0, #16
 80007cc:	1809      	adds	r1, r1, r0
 80007ce:	018e      	lsls	r6, r1, #6
 80007d0:	1e70      	subs	r0, r6, #1
 80007d2:	4186      	sbcs	r6, r0
 80007d4:	0c1b      	lsrs	r3, r3, #16
 80007d6:	0e89      	lsrs	r1, r1, #26
 80007d8:	195b      	adds	r3, r3, r5
 80007da:	430e      	orrs	r6, r1
 80007dc:	019b      	lsls	r3, r3, #6
 80007de:	431e      	orrs	r6, r3
 80007e0:	011b      	lsls	r3, r3, #4
 80007e2:	d46c      	bmi.n	80008be <__aeabi_fmul+0x1ae>
 80007e4:	0023      	movs	r3, r4
 80007e6:	337f      	adds	r3, #127	@ 0x7f
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	dc00      	bgt.n	80007ee <__aeabi_fmul+0xde>
 80007ec:	e0b1      	b.n	8000952 <__aeabi_fmul+0x242>
 80007ee:	0015      	movs	r5, r2
 80007f0:	0771      	lsls	r1, r6, #29
 80007f2:	d00b      	beq.n	800080c <__aeabi_fmul+0xfc>
 80007f4:	200f      	movs	r0, #15
 80007f6:	0021      	movs	r1, r4
 80007f8:	4030      	ands	r0, r6
 80007fa:	2804      	cmp	r0, #4
 80007fc:	d006      	beq.n	800080c <__aeabi_fmul+0xfc>
 80007fe:	3604      	adds	r6, #4
 8000800:	0132      	lsls	r2, r6, #4
 8000802:	d503      	bpl.n	800080c <__aeabi_fmul+0xfc>
 8000804:	4b6e      	ldr	r3, [pc, #440]	@ (80009c0 <__aeabi_fmul+0x2b0>)
 8000806:	401e      	ands	r6, r3
 8000808:	000b      	movs	r3, r1
 800080a:	3380      	adds	r3, #128	@ 0x80
 800080c:	2bfe      	cmp	r3, #254	@ 0xfe
 800080e:	dd00      	ble.n	8000812 <__aeabi_fmul+0x102>
 8000810:	e0bd      	b.n	800098e <__aeabi_fmul+0x27e>
 8000812:	01b2      	lsls	r2, r6, #6
 8000814:	0a52      	lsrs	r2, r2, #9
 8000816:	b2db      	uxtb	r3, r3
 8000818:	e048      	b.n	80008ac <__aeabi_fmul+0x19c>
 800081a:	2e00      	cmp	r6, #0
 800081c:	d000      	beq.n	8000820 <__aeabi_fmul+0x110>
 800081e:	e092      	b.n	8000946 <__aeabi_fmul+0x236>
 8000820:	2308      	movs	r3, #8
 8000822:	4699      	mov	r9, r3
 8000824:	3b06      	subs	r3, #6
 8000826:	469a      	mov	sl, r3
 8000828:	027b      	lsls	r3, r7, #9
 800082a:	0a5b      	lsrs	r3, r3, #9
 800082c:	4698      	mov	r8, r3
 800082e:	007b      	lsls	r3, r7, #1
 8000830:	24ff      	movs	r4, #255	@ 0xff
 8000832:	0e1b      	lsrs	r3, r3, #24
 8000834:	0fff      	lsrs	r7, r7, #31
 8000836:	2b00      	cmp	r3, #0
 8000838:	d18a      	bne.n	8000750 <__aeabi_fmul+0x40>
 800083a:	4642      	mov	r2, r8
 800083c:	2a00      	cmp	r2, #0
 800083e:	d164      	bne.n	800090a <__aeabi_fmul+0x1fa>
 8000840:	4649      	mov	r1, r9
 8000842:	3201      	adds	r2, #1
 8000844:	4311      	orrs	r1, r2
 8000846:	4689      	mov	r9, r1
 8000848:	290a      	cmp	r1, #10
 800084a:	dc08      	bgt.n	800085e <__aeabi_fmul+0x14e>
 800084c:	407d      	eors	r5, r7
 800084e:	2001      	movs	r0, #1
 8000850:	b2ea      	uxtb	r2, r5
 8000852:	2902      	cmp	r1, #2
 8000854:	dc91      	bgt.n	800077a <__aeabi_fmul+0x6a>
 8000856:	0015      	movs	r5, r2
 8000858:	2200      	movs	r2, #0
 800085a:	e027      	b.n	80008ac <__aeabi_fmul+0x19c>
 800085c:	0015      	movs	r5, r2
 800085e:	4653      	mov	r3, sl
 8000860:	2b02      	cmp	r3, #2
 8000862:	d100      	bne.n	8000866 <__aeabi_fmul+0x156>
 8000864:	e093      	b.n	800098e <__aeabi_fmul+0x27e>
 8000866:	2b03      	cmp	r3, #3
 8000868:	d01a      	beq.n	80008a0 <__aeabi_fmul+0x190>
 800086a:	2b01      	cmp	r3, #1
 800086c:	d12c      	bne.n	80008c8 <__aeabi_fmul+0x1b8>
 800086e:	2300      	movs	r3, #0
 8000870:	2200      	movs	r2, #0
 8000872:	e01b      	b.n	80008ac <__aeabi_fmul+0x19c>
 8000874:	4643      	mov	r3, r8
 8000876:	34ff      	adds	r4, #255	@ 0xff
 8000878:	2b00      	cmp	r3, #0
 800087a:	d055      	beq.n	8000928 <__aeabi_fmul+0x218>
 800087c:	2103      	movs	r1, #3
 800087e:	464b      	mov	r3, r9
 8000880:	430b      	orrs	r3, r1
 8000882:	0019      	movs	r1, r3
 8000884:	2b0a      	cmp	r3, #10
 8000886:	dc00      	bgt.n	800088a <__aeabi_fmul+0x17a>
 8000888:	e092      	b.n	80009b0 <__aeabi_fmul+0x2a0>
 800088a:	2b0f      	cmp	r3, #15
 800088c:	d000      	beq.n	8000890 <__aeabi_fmul+0x180>
 800088e:	e08c      	b.n	80009aa <__aeabi_fmul+0x29a>
 8000890:	2280      	movs	r2, #128	@ 0x80
 8000892:	03d2      	lsls	r2, r2, #15
 8000894:	4216      	tst	r6, r2
 8000896:	d003      	beq.n	80008a0 <__aeabi_fmul+0x190>
 8000898:	4643      	mov	r3, r8
 800089a:	4213      	tst	r3, r2
 800089c:	d100      	bne.n	80008a0 <__aeabi_fmul+0x190>
 800089e:	e07d      	b.n	800099c <__aeabi_fmul+0x28c>
 80008a0:	2280      	movs	r2, #128	@ 0x80
 80008a2:	03d2      	lsls	r2, r2, #15
 80008a4:	4332      	orrs	r2, r6
 80008a6:	0252      	lsls	r2, r2, #9
 80008a8:	0a52      	lsrs	r2, r2, #9
 80008aa:	23ff      	movs	r3, #255	@ 0xff
 80008ac:	05d8      	lsls	r0, r3, #23
 80008ae:	07ed      	lsls	r5, r5, #31
 80008b0:	4310      	orrs	r0, r2
 80008b2:	4328      	orrs	r0, r5
 80008b4:	bce0      	pop	{r5, r6, r7}
 80008b6:	46ba      	mov	sl, r7
 80008b8:	46b1      	mov	r9, r6
 80008ba:	46a8      	mov	r8, r5
 80008bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008be:	2301      	movs	r3, #1
 80008c0:	0015      	movs	r5, r2
 80008c2:	0871      	lsrs	r1, r6, #1
 80008c4:	401e      	ands	r6, r3
 80008c6:	430e      	orrs	r6, r1
 80008c8:	0023      	movs	r3, r4
 80008ca:	3380      	adds	r3, #128	@ 0x80
 80008cc:	1c61      	adds	r1, r4, #1
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	dd41      	ble.n	8000956 <__aeabi_fmul+0x246>
 80008d2:	0772      	lsls	r2, r6, #29
 80008d4:	d094      	beq.n	8000800 <__aeabi_fmul+0xf0>
 80008d6:	220f      	movs	r2, #15
 80008d8:	4032      	ands	r2, r6
 80008da:	2a04      	cmp	r2, #4
 80008dc:	d000      	beq.n	80008e0 <__aeabi_fmul+0x1d0>
 80008de:	e78e      	b.n	80007fe <__aeabi_fmul+0xee>
 80008e0:	e78e      	b.n	8000800 <__aeabi_fmul+0xf0>
 80008e2:	2e00      	cmp	r6, #0
 80008e4:	d105      	bne.n	80008f2 <__aeabi_fmul+0x1e2>
 80008e6:	2304      	movs	r3, #4
 80008e8:	4699      	mov	r9, r3
 80008ea:	3b03      	subs	r3, #3
 80008ec:	2400      	movs	r4, #0
 80008ee:	469a      	mov	sl, r3
 80008f0:	e726      	b.n	8000740 <__aeabi_fmul+0x30>
 80008f2:	0030      	movs	r0, r6
 80008f4:	f7ff fdd8 	bl	80004a8 <__clzsi2>
 80008f8:	2476      	movs	r4, #118	@ 0x76
 80008fa:	1f43      	subs	r3, r0, #5
 80008fc:	409e      	lsls	r6, r3
 80008fe:	2300      	movs	r3, #0
 8000900:	4264      	negs	r4, r4
 8000902:	4699      	mov	r9, r3
 8000904:	469a      	mov	sl, r3
 8000906:	1a24      	subs	r4, r4, r0
 8000908:	e71a      	b.n	8000740 <__aeabi_fmul+0x30>
 800090a:	4640      	mov	r0, r8
 800090c:	f7ff fdcc 	bl	80004a8 <__clzsi2>
 8000910:	464b      	mov	r3, r9
 8000912:	1a24      	subs	r4, r4, r0
 8000914:	3c76      	subs	r4, #118	@ 0x76
 8000916:	2b0a      	cmp	r3, #10
 8000918:	dca1      	bgt.n	800085e <__aeabi_fmul+0x14e>
 800091a:	4643      	mov	r3, r8
 800091c:	3805      	subs	r0, #5
 800091e:	4083      	lsls	r3, r0
 8000920:	407d      	eors	r5, r7
 8000922:	4698      	mov	r8, r3
 8000924:	b2ea      	uxtb	r2, r5
 8000926:	e724      	b.n	8000772 <__aeabi_fmul+0x62>
 8000928:	464a      	mov	r2, r9
 800092a:	3302      	adds	r3, #2
 800092c:	4313      	orrs	r3, r2
 800092e:	002a      	movs	r2, r5
 8000930:	407a      	eors	r2, r7
 8000932:	b2d2      	uxtb	r2, r2
 8000934:	2b0a      	cmp	r3, #10
 8000936:	dc92      	bgt.n	800085e <__aeabi_fmul+0x14e>
 8000938:	4649      	mov	r1, r9
 800093a:	0015      	movs	r5, r2
 800093c:	2900      	cmp	r1, #0
 800093e:	d026      	beq.n	800098e <__aeabi_fmul+0x27e>
 8000940:	4699      	mov	r9, r3
 8000942:	2002      	movs	r0, #2
 8000944:	e719      	b.n	800077a <__aeabi_fmul+0x6a>
 8000946:	230c      	movs	r3, #12
 8000948:	4699      	mov	r9, r3
 800094a:	3b09      	subs	r3, #9
 800094c:	24ff      	movs	r4, #255	@ 0xff
 800094e:	469a      	mov	sl, r3
 8000950:	e6f6      	b.n	8000740 <__aeabi_fmul+0x30>
 8000952:	0015      	movs	r5, r2
 8000954:	0021      	movs	r1, r4
 8000956:	2201      	movs	r2, #1
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	2b1b      	cmp	r3, #27
 800095c:	dd00      	ble.n	8000960 <__aeabi_fmul+0x250>
 800095e:	e786      	b.n	800086e <__aeabi_fmul+0x15e>
 8000960:	319e      	adds	r1, #158	@ 0x9e
 8000962:	0032      	movs	r2, r6
 8000964:	408e      	lsls	r6, r1
 8000966:	40da      	lsrs	r2, r3
 8000968:	1e73      	subs	r3, r6, #1
 800096a:	419e      	sbcs	r6, r3
 800096c:	4332      	orrs	r2, r6
 800096e:	0753      	lsls	r3, r2, #29
 8000970:	d004      	beq.n	800097c <__aeabi_fmul+0x26c>
 8000972:	230f      	movs	r3, #15
 8000974:	4013      	ands	r3, r2
 8000976:	2b04      	cmp	r3, #4
 8000978:	d000      	beq.n	800097c <__aeabi_fmul+0x26c>
 800097a:	3204      	adds	r2, #4
 800097c:	0153      	lsls	r3, r2, #5
 800097e:	d510      	bpl.n	80009a2 <__aeabi_fmul+0x292>
 8000980:	2301      	movs	r3, #1
 8000982:	2200      	movs	r2, #0
 8000984:	e792      	b.n	80008ac <__aeabi_fmul+0x19c>
 8000986:	003d      	movs	r5, r7
 8000988:	4646      	mov	r6, r8
 800098a:	4682      	mov	sl, r0
 800098c:	e767      	b.n	800085e <__aeabi_fmul+0x14e>
 800098e:	23ff      	movs	r3, #255	@ 0xff
 8000990:	2200      	movs	r2, #0
 8000992:	e78b      	b.n	80008ac <__aeabi_fmul+0x19c>
 8000994:	2280      	movs	r2, #128	@ 0x80
 8000996:	2500      	movs	r5, #0
 8000998:	03d2      	lsls	r2, r2, #15
 800099a:	e786      	b.n	80008aa <__aeabi_fmul+0x19a>
 800099c:	003d      	movs	r5, r7
 800099e:	431a      	orrs	r2, r3
 80009a0:	e783      	b.n	80008aa <__aeabi_fmul+0x19a>
 80009a2:	0192      	lsls	r2, r2, #6
 80009a4:	2300      	movs	r3, #0
 80009a6:	0a52      	lsrs	r2, r2, #9
 80009a8:	e780      	b.n	80008ac <__aeabi_fmul+0x19c>
 80009aa:	003d      	movs	r5, r7
 80009ac:	4646      	mov	r6, r8
 80009ae:	e777      	b.n	80008a0 <__aeabi_fmul+0x190>
 80009b0:	002a      	movs	r2, r5
 80009b2:	2301      	movs	r3, #1
 80009b4:	407a      	eors	r2, r7
 80009b6:	408b      	lsls	r3, r1
 80009b8:	2003      	movs	r0, #3
 80009ba:	b2d2      	uxtb	r2, r2
 80009bc:	e6e9      	b.n	8000792 <__aeabi_fmul+0x82>
 80009be:	46c0      	nop			@ (mov r8, r8)
 80009c0:	f7ffffff 	.word	0xf7ffffff

080009c4 <__aeabi_i2f>:
 80009c4:	b570      	push	{r4, r5, r6, lr}
 80009c6:	2800      	cmp	r0, #0
 80009c8:	d012      	beq.n	80009f0 <__aeabi_i2f+0x2c>
 80009ca:	17c3      	asrs	r3, r0, #31
 80009cc:	18c5      	adds	r5, r0, r3
 80009ce:	405d      	eors	r5, r3
 80009d0:	0fc4      	lsrs	r4, r0, #31
 80009d2:	0028      	movs	r0, r5
 80009d4:	f7ff fd68 	bl	80004a8 <__clzsi2>
 80009d8:	239e      	movs	r3, #158	@ 0x9e
 80009da:	1a1b      	subs	r3, r3, r0
 80009dc:	2b96      	cmp	r3, #150	@ 0x96
 80009de:	dc0f      	bgt.n	8000a00 <__aeabi_i2f+0x3c>
 80009e0:	2808      	cmp	r0, #8
 80009e2:	d038      	beq.n	8000a56 <__aeabi_i2f+0x92>
 80009e4:	3808      	subs	r0, #8
 80009e6:	4085      	lsls	r5, r0
 80009e8:	026d      	lsls	r5, r5, #9
 80009ea:	0a6d      	lsrs	r5, r5, #9
 80009ec:	b2d8      	uxtb	r0, r3
 80009ee:	e002      	b.n	80009f6 <__aeabi_i2f+0x32>
 80009f0:	2400      	movs	r4, #0
 80009f2:	2000      	movs	r0, #0
 80009f4:	2500      	movs	r5, #0
 80009f6:	05c0      	lsls	r0, r0, #23
 80009f8:	4328      	orrs	r0, r5
 80009fa:	07e4      	lsls	r4, r4, #31
 80009fc:	4320      	orrs	r0, r4
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	2b99      	cmp	r3, #153	@ 0x99
 8000a02:	dc14      	bgt.n	8000a2e <__aeabi_i2f+0x6a>
 8000a04:	1f42      	subs	r2, r0, #5
 8000a06:	4095      	lsls	r5, r2
 8000a08:	002a      	movs	r2, r5
 8000a0a:	4915      	ldr	r1, [pc, #84]	@ (8000a60 <__aeabi_i2f+0x9c>)
 8000a0c:	4011      	ands	r1, r2
 8000a0e:	0755      	lsls	r5, r2, #29
 8000a10:	d01c      	beq.n	8000a4c <__aeabi_i2f+0x88>
 8000a12:	250f      	movs	r5, #15
 8000a14:	402a      	ands	r2, r5
 8000a16:	2a04      	cmp	r2, #4
 8000a18:	d018      	beq.n	8000a4c <__aeabi_i2f+0x88>
 8000a1a:	3104      	adds	r1, #4
 8000a1c:	08ca      	lsrs	r2, r1, #3
 8000a1e:	0149      	lsls	r1, r1, #5
 8000a20:	d515      	bpl.n	8000a4e <__aeabi_i2f+0x8a>
 8000a22:	239f      	movs	r3, #159	@ 0x9f
 8000a24:	0252      	lsls	r2, r2, #9
 8000a26:	1a18      	subs	r0, r3, r0
 8000a28:	0a55      	lsrs	r5, r2, #9
 8000a2a:	b2c0      	uxtb	r0, r0
 8000a2c:	e7e3      	b.n	80009f6 <__aeabi_i2f+0x32>
 8000a2e:	2205      	movs	r2, #5
 8000a30:	0029      	movs	r1, r5
 8000a32:	1a12      	subs	r2, r2, r0
 8000a34:	40d1      	lsrs	r1, r2
 8000a36:	0002      	movs	r2, r0
 8000a38:	321b      	adds	r2, #27
 8000a3a:	4095      	lsls	r5, r2
 8000a3c:	002a      	movs	r2, r5
 8000a3e:	1e55      	subs	r5, r2, #1
 8000a40:	41aa      	sbcs	r2, r5
 8000a42:	430a      	orrs	r2, r1
 8000a44:	4906      	ldr	r1, [pc, #24]	@ (8000a60 <__aeabi_i2f+0x9c>)
 8000a46:	4011      	ands	r1, r2
 8000a48:	0755      	lsls	r5, r2, #29
 8000a4a:	d1e2      	bne.n	8000a12 <__aeabi_i2f+0x4e>
 8000a4c:	08ca      	lsrs	r2, r1, #3
 8000a4e:	0252      	lsls	r2, r2, #9
 8000a50:	0a55      	lsrs	r5, r2, #9
 8000a52:	b2d8      	uxtb	r0, r3
 8000a54:	e7cf      	b.n	80009f6 <__aeabi_i2f+0x32>
 8000a56:	026d      	lsls	r5, r5, #9
 8000a58:	0a6d      	lsrs	r5, r5, #9
 8000a5a:	308e      	adds	r0, #142	@ 0x8e
 8000a5c:	e7cb      	b.n	80009f6 <__aeabi_i2f+0x32>
 8000a5e:	46c0      	nop			@ (mov r8, r8)
 8000a60:	fbffffff 	.word	0xfbffffff

08000a64 <__aeabi_dadd>:
 8000a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a66:	464f      	mov	r7, r9
 8000a68:	4646      	mov	r6, r8
 8000a6a:	46d6      	mov	lr, sl
 8000a6c:	b5c0      	push	{r6, r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	9000      	str	r0, [sp, #0]
 8000a72:	9101      	str	r1, [sp, #4]
 8000a74:	030e      	lsls	r6, r1, #12
 8000a76:	004c      	lsls	r4, r1, #1
 8000a78:	0fcd      	lsrs	r5, r1, #31
 8000a7a:	0a71      	lsrs	r1, r6, #9
 8000a7c:	9e00      	ldr	r6, [sp, #0]
 8000a7e:	005f      	lsls	r7, r3, #1
 8000a80:	0f76      	lsrs	r6, r6, #29
 8000a82:	430e      	orrs	r6, r1
 8000a84:	9900      	ldr	r1, [sp, #0]
 8000a86:	9200      	str	r2, [sp, #0]
 8000a88:	9301      	str	r3, [sp, #4]
 8000a8a:	00c9      	lsls	r1, r1, #3
 8000a8c:	4689      	mov	r9, r1
 8000a8e:	0319      	lsls	r1, r3, #12
 8000a90:	0d7b      	lsrs	r3, r7, #21
 8000a92:	4698      	mov	r8, r3
 8000a94:	9b01      	ldr	r3, [sp, #4]
 8000a96:	0a49      	lsrs	r1, r1, #9
 8000a98:	0fdb      	lsrs	r3, r3, #31
 8000a9a:	469c      	mov	ip, r3
 8000a9c:	9b00      	ldr	r3, [sp, #0]
 8000a9e:	9a00      	ldr	r2, [sp, #0]
 8000aa0:	0f5b      	lsrs	r3, r3, #29
 8000aa2:	430b      	orrs	r3, r1
 8000aa4:	4641      	mov	r1, r8
 8000aa6:	0d64      	lsrs	r4, r4, #21
 8000aa8:	00d2      	lsls	r2, r2, #3
 8000aaa:	1a61      	subs	r1, r4, r1
 8000aac:	4565      	cmp	r5, ip
 8000aae:	d100      	bne.n	8000ab2 <__aeabi_dadd+0x4e>
 8000ab0:	e0a6      	b.n	8000c00 <__aeabi_dadd+0x19c>
 8000ab2:	2900      	cmp	r1, #0
 8000ab4:	dd72      	ble.n	8000b9c <__aeabi_dadd+0x138>
 8000ab6:	4647      	mov	r7, r8
 8000ab8:	2f00      	cmp	r7, #0
 8000aba:	d100      	bne.n	8000abe <__aeabi_dadd+0x5a>
 8000abc:	e0dd      	b.n	8000c7a <__aeabi_dadd+0x216>
 8000abe:	4fcc      	ldr	r7, [pc, #816]	@ (8000df0 <__aeabi_dadd+0x38c>)
 8000ac0:	42bc      	cmp	r4, r7
 8000ac2:	d100      	bne.n	8000ac6 <__aeabi_dadd+0x62>
 8000ac4:	e19a      	b.n	8000dfc <__aeabi_dadd+0x398>
 8000ac6:	2701      	movs	r7, #1
 8000ac8:	2938      	cmp	r1, #56	@ 0x38
 8000aca:	dc17      	bgt.n	8000afc <__aeabi_dadd+0x98>
 8000acc:	2780      	movs	r7, #128	@ 0x80
 8000ace:	043f      	lsls	r7, r7, #16
 8000ad0:	433b      	orrs	r3, r7
 8000ad2:	291f      	cmp	r1, #31
 8000ad4:	dd00      	ble.n	8000ad8 <__aeabi_dadd+0x74>
 8000ad6:	e1dd      	b.n	8000e94 <__aeabi_dadd+0x430>
 8000ad8:	2720      	movs	r7, #32
 8000ada:	1a78      	subs	r0, r7, r1
 8000adc:	001f      	movs	r7, r3
 8000ade:	4087      	lsls	r7, r0
 8000ae0:	46ba      	mov	sl, r7
 8000ae2:	0017      	movs	r7, r2
 8000ae4:	40cf      	lsrs	r7, r1
 8000ae6:	4684      	mov	ip, r0
 8000ae8:	0038      	movs	r0, r7
 8000aea:	4657      	mov	r7, sl
 8000aec:	4307      	orrs	r7, r0
 8000aee:	4660      	mov	r0, ip
 8000af0:	4082      	lsls	r2, r0
 8000af2:	40cb      	lsrs	r3, r1
 8000af4:	1e50      	subs	r0, r2, #1
 8000af6:	4182      	sbcs	r2, r0
 8000af8:	1af6      	subs	r6, r6, r3
 8000afa:	4317      	orrs	r7, r2
 8000afc:	464b      	mov	r3, r9
 8000afe:	1bdf      	subs	r7, r3, r7
 8000b00:	45b9      	cmp	r9, r7
 8000b02:	4180      	sbcs	r0, r0
 8000b04:	4240      	negs	r0, r0
 8000b06:	1a36      	subs	r6, r6, r0
 8000b08:	0233      	lsls	r3, r6, #8
 8000b0a:	d400      	bmi.n	8000b0e <__aeabi_dadd+0xaa>
 8000b0c:	e0ff      	b.n	8000d0e <__aeabi_dadd+0x2aa>
 8000b0e:	0276      	lsls	r6, r6, #9
 8000b10:	0a76      	lsrs	r6, r6, #9
 8000b12:	2e00      	cmp	r6, #0
 8000b14:	d100      	bne.n	8000b18 <__aeabi_dadd+0xb4>
 8000b16:	e13c      	b.n	8000d92 <__aeabi_dadd+0x32e>
 8000b18:	0030      	movs	r0, r6
 8000b1a:	f7ff fcc5 	bl	80004a8 <__clzsi2>
 8000b1e:	0003      	movs	r3, r0
 8000b20:	3b08      	subs	r3, #8
 8000b22:	2120      	movs	r1, #32
 8000b24:	0038      	movs	r0, r7
 8000b26:	1aca      	subs	r2, r1, r3
 8000b28:	40d0      	lsrs	r0, r2
 8000b2a:	409e      	lsls	r6, r3
 8000b2c:	0002      	movs	r2, r0
 8000b2e:	409f      	lsls	r7, r3
 8000b30:	4332      	orrs	r2, r6
 8000b32:	429c      	cmp	r4, r3
 8000b34:	dd00      	ble.n	8000b38 <__aeabi_dadd+0xd4>
 8000b36:	e1a6      	b.n	8000e86 <__aeabi_dadd+0x422>
 8000b38:	1b18      	subs	r0, r3, r4
 8000b3a:	3001      	adds	r0, #1
 8000b3c:	1a09      	subs	r1, r1, r0
 8000b3e:	003e      	movs	r6, r7
 8000b40:	408f      	lsls	r7, r1
 8000b42:	40c6      	lsrs	r6, r0
 8000b44:	1e7b      	subs	r3, r7, #1
 8000b46:	419f      	sbcs	r7, r3
 8000b48:	0013      	movs	r3, r2
 8000b4a:	408b      	lsls	r3, r1
 8000b4c:	4337      	orrs	r7, r6
 8000b4e:	431f      	orrs	r7, r3
 8000b50:	40c2      	lsrs	r2, r0
 8000b52:	003b      	movs	r3, r7
 8000b54:	0016      	movs	r6, r2
 8000b56:	2400      	movs	r4, #0
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_dadd+0xfa>
 8000b5c:	e1df      	b.n	8000f1e <__aeabi_dadd+0x4ba>
 8000b5e:	077b      	lsls	r3, r7, #29
 8000b60:	d100      	bne.n	8000b64 <__aeabi_dadd+0x100>
 8000b62:	e332      	b.n	80011ca <__aeabi_dadd+0x766>
 8000b64:	230f      	movs	r3, #15
 8000b66:	003a      	movs	r2, r7
 8000b68:	403b      	ands	r3, r7
 8000b6a:	2b04      	cmp	r3, #4
 8000b6c:	d004      	beq.n	8000b78 <__aeabi_dadd+0x114>
 8000b6e:	1d3a      	adds	r2, r7, #4
 8000b70:	42ba      	cmp	r2, r7
 8000b72:	41bf      	sbcs	r7, r7
 8000b74:	427f      	negs	r7, r7
 8000b76:	19f6      	adds	r6, r6, r7
 8000b78:	0233      	lsls	r3, r6, #8
 8000b7a:	d400      	bmi.n	8000b7e <__aeabi_dadd+0x11a>
 8000b7c:	e323      	b.n	80011c6 <__aeabi_dadd+0x762>
 8000b7e:	4b9c      	ldr	r3, [pc, #624]	@ (8000df0 <__aeabi_dadd+0x38c>)
 8000b80:	3401      	adds	r4, #1
 8000b82:	429c      	cmp	r4, r3
 8000b84:	d100      	bne.n	8000b88 <__aeabi_dadd+0x124>
 8000b86:	e0b4      	b.n	8000cf2 <__aeabi_dadd+0x28e>
 8000b88:	4b9a      	ldr	r3, [pc, #616]	@ (8000df4 <__aeabi_dadd+0x390>)
 8000b8a:	0564      	lsls	r4, r4, #21
 8000b8c:	401e      	ands	r6, r3
 8000b8e:	0d64      	lsrs	r4, r4, #21
 8000b90:	0777      	lsls	r7, r6, #29
 8000b92:	08d2      	lsrs	r2, r2, #3
 8000b94:	0276      	lsls	r6, r6, #9
 8000b96:	4317      	orrs	r7, r2
 8000b98:	0b36      	lsrs	r6, r6, #12
 8000b9a:	e0ac      	b.n	8000cf6 <__aeabi_dadd+0x292>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	d100      	bne.n	8000ba2 <__aeabi_dadd+0x13e>
 8000ba0:	e07e      	b.n	8000ca0 <__aeabi_dadd+0x23c>
 8000ba2:	4641      	mov	r1, r8
 8000ba4:	1b09      	subs	r1, r1, r4
 8000ba6:	2c00      	cmp	r4, #0
 8000ba8:	d000      	beq.n	8000bac <__aeabi_dadd+0x148>
 8000baa:	e160      	b.n	8000e6e <__aeabi_dadd+0x40a>
 8000bac:	0034      	movs	r4, r6
 8000bae:	4648      	mov	r0, r9
 8000bb0:	4304      	orrs	r4, r0
 8000bb2:	d100      	bne.n	8000bb6 <__aeabi_dadd+0x152>
 8000bb4:	e1c9      	b.n	8000f4a <__aeabi_dadd+0x4e6>
 8000bb6:	1e4c      	subs	r4, r1, #1
 8000bb8:	2901      	cmp	r1, #1
 8000bba:	d100      	bne.n	8000bbe <__aeabi_dadd+0x15a>
 8000bbc:	e22e      	b.n	800101c <__aeabi_dadd+0x5b8>
 8000bbe:	4d8c      	ldr	r5, [pc, #560]	@ (8000df0 <__aeabi_dadd+0x38c>)
 8000bc0:	42a9      	cmp	r1, r5
 8000bc2:	d100      	bne.n	8000bc6 <__aeabi_dadd+0x162>
 8000bc4:	e224      	b.n	8001010 <__aeabi_dadd+0x5ac>
 8000bc6:	2701      	movs	r7, #1
 8000bc8:	2c38      	cmp	r4, #56	@ 0x38
 8000bca:	dc11      	bgt.n	8000bf0 <__aeabi_dadd+0x18c>
 8000bcc:	0021      	movs	r1, r4
 8000bce:	291f      	cmp	r1, #31
 8000bd0:	dd00      	ble.n	8000bd4 <__aeabi_dadd+0x170>
 8000bd2:	e20b      	b.n	8000fec <__aeabi_dadd+0x588>
 8000bd4:	2420      	movs	r4, #32
 8000bd6:	0037      	movs	r7, r6
 8000bd8:	4648      	mov	r0, r9
 8000bda:	1a64      	subs	r4, r4, r1
 8000bdc:	40a7      	lsls	r7, r4
 8000bde:	40c8      	lsrs	r0, r1
 8000be0:	4307      	orrs	r7, r0
 8000be2:	4648      	mov	r0, r9
 8000be4:	40a0      	lsls	r0, r4
 8000be6:	40ce      	lsrs	r6, r1
 8000be8:	1e44      	subs	r4, r0, #1
 8000bea:	41a0      	sbcs	r0, r4
 8000bec:	1b9b      	subs	r3, r3, r6
 8000bee:	4307      	orrs	r7, r0
 8000bf0:	1bd7      	subs	r7, r2, r7
 8000bf2:	42ba      	cmp	r2, r7
 8000bf4:	4192      	sbcs	r2, r2
 8000bf6:	4252      	negs	r2, r2
 8000bf8:	4665      	mov	r5, ip
 8000bfa:	4644      	mov	r4, r8
 8000bfc:	1a9e      	subs	r6, r3, r2
 8000bfe:	e783      	b.n	8000b08 <__aeabi_dadd+0xa4>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	dc00      	bgt.n	8000c06 <__aeabi_dadd+0x1a2>
 8000c04:	e09c      	b.n	8000d40 <__aeabi_dadd+0x2dc>
 8000c06:	4647      	mov	r7, r8
 8000c08:	2f00      	cmp	r7, #0
 8000c0a:	d167      	bne.n	8000cdc <__aeabi_dadd+0x278>
 8000c0c:	001f      	movs	r7, r3
 8000c0e:	4317      	orrs	r7, r2
 8000c10:	d100      	bne.n	8000c14 <__aeabi_dadd+0x1b0>
 8000c12:	e0e4      	b.n	8000dde <__aeabi_dadd+0x37a>
 8000c14:	1e48      	subs	r0, r1, #1
 8000c16:	2901      	cmp	r1, #1
 8000c18:	d100      	bne.n	8000c1c <__aeabi_dadd+0x1b8>
 8000c1a:	e19b      	b.n	8000f54 <__aeabi_dadd+0x4f0>
 8000c1c:	4f74      	ldr	r7, [pc, #464]	@ (8000df0 <__aeabi_dadd+0x38c>)
 8000c1e:	42b9      	cmp	r1, r7
 8000c20:	d100      	bne.n	8000c24 <__aeabi_dadd+0x1c0>
 8000c22:	e0eb      	b.n	8000dfc <__aeabi_dadd+0x398>
 8000c24:	2701      	movs	r7, #1
 8000c26:	0001      	movs	r1, r0
 8000c28:	2838      	cmp	r0, #56	@ 0x38
 8000c2a:	dc11      	bgt.n	8000c50 <__aeabi_dadd+0x1ec>
 8000c2c:	291f      	cmp	r1, #31
 8000c2e:	dd00      	ble.n	8000c32 <__aeabi_dadd+0x1ce>
 8000c30:	e1c7      	b.n	8000fc2 <__aeabi_dadd+0x55e>
 8000c32:	2720      	movs	r7, #32
 8000c34:	1a78      	subs	r0, r7, r1
 8000c36:	001f      	movs	r7, r3
 8000c38:	4684      	mov	ip, r0
 8000c3a:	4087      	lsls	r7, r0
 8000c3c:	0010      	movs	r0, r2
 8000c3e:	40c8      	lsrs	r0, r1
 8000c40:	4307      	orrs	r7, r0
 8000c42:	4660      	mov	r0, ip
 8000c44:	4082      	lsls	r2, r0
 8000c46:	40cb      	lsrs	r3, r1
 8000c48:	1e50      	subs	r0, r2, #1
 8000c4a:	4182      	sbcs	r2, r0
 8000c4c:	18f6      	adds	r6, r6, r3
 8000c4e:	4317      	orrs	r7, r2
 8000c50:	444f      	add	r7, r9
 8000c52:	454f      	cmp	r7, r9
 8000c54:	4180      	sbcs	r0, r0
 8000c56:	4240      	negs	r0, r0
 8000c58:	1836      	adds	r6, r6, r0
 8000c5a:	0233      	lsls	r3, r6, #8
 8000c5c:	d557      	bpl.n	8000d0e <__aeabi_dadd+0x2aa>
 8000c5e:	4b64      	ldr	r3, [pc, #400]	@ (8000df0 <__aeabi_dadd+0x38c>)
 8000c60:	3401      	adds	r4, #1
 8000c62:	429c      	cmp	r4, r3
 8000c64:	d045      	beq.n	8000cf2 <__aeabi_dadd+0x28e>
 8000c66:	2101      	movs	r1, #1
 8000c68:	4b62      	ldr	r3, [pc, #392]	@ (8000df4 <__aeabi_dadd+0x390>)
 8000c6a:	087a      	lsrs	r2, r7, #1
 8000c6c:	401e      	ands	r6, r3
 8000c6e:	4039      	ands	r1, r7
 8000c70:	430a      	orrs	r2, r1
 8000c72:	07f7      	lsls	r7, r6, #31
 8000c74:	4317      	orrs	r7, r2
 8000c76:	0876      	lsrs	r6, r6, #1
 8000c78:	e771      	b.n	8000b5e <__aeabi_dadd+0xfa>
 8000c7a:	001f      	movs	r7, r3
 8000c7c:	4317      	orrs	r7, r2
 8000c7e:	d100      	bne.n	8000c82 <__aeabi_dadd+0x21e>
 8000c80:	e0ad      	b.n	8000dde <__aeabi_dadd+0x37a>
 8000c82:	1e4f      	subs	r7, r1, #1
 8000c84:	46bc      	mov	ip, r7
 8000c86:	2901      	cmp	r1, #1
 8000c88:	d100      	bne.n	8000c8c <__aeabi_dadd+0x228>
 8000c8a:	e182      	b.n	8000f92 <__aeabi_dadd+0x52e>
 8000c8c:	4f58      	ldr	r7, [pc, #352]	@ (8000df0 <__aeabi_dadd+0x38c>)
 8000c8e:	42b9      	cmp	r1, r7
 8000c90:	d100      	bne.n	8000c94 <__aeabi_dadd+0x230>
 8000c92:	e190      	b.n	8000fb6 <__aeabi_dadd+0x552>
 8000c94:	4661      	mov	r1, ip
 8000c96:	2701      	movs	r7, #1
 8000c98:	2938      	cmp	r1, #56	@ 0x38
 8000c9a:	dd00      	ble.n	8000c9e <__aeabi_dadd+0x23a>
 8000c9c:	e72e      	b.n	8000afc <__aeabi_dadd+0x98>
 8000c9e:	e718      	b.n	8000ad2 <__aeabi_dadd+0x6e>
 8000ca0:	4f55      	ldr	r7, [pc, #340]	@ (8000df8 <__aeabi_dadd+0x394>)
 8000ca2:	1c61      	adds	r1, r4, #1
 8000ca4:	4239      	tst	r1, r7
 8000ca6:	d000      	beq.n	8000caa <__aeabi_dadd+0x246>
 8000ca8:	e0d0      	b.n	8000e4c <__aeabi_dadd+0x3e8>
 8000caa:	0031      	movs	r1, r6
 8000cac:	4648      	mov	r0, r9
 8000cae:	001f      	movs	r7, r3
 8000cb0:	4301      	orrs	r1, r0
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	2c00      	cmp	r4, #0
 8000cb6:	d000      	beq.n	8000cba <__aeabi_dadd+0x256>
 8000cb8:	e13d      	b.n	8000f36 <__aeabi_dadd+0x4d2>
 8000cba:	2900      	cmp	r1, #0
 8000cbc:	d100      	bne.n	8000cc0 <__aeabi_dadd+0x25c>
 8000cbe:	e1bc      	b.n	800103a <__aeabi_dadd+0x5d6>
 8000cc0:	2f00      	cmp	r7, #0
 8000cc2:	d000      	beq.n	8000cc6 <__aeabi_dadd+0x262>
 8000cc4:	e1bf      	b.n	8001046 <__aeabi_dadd+0x5e2>
 8000cc6:	464b      	mov	r3, r9
 8000cc8:	2100      	movs	r1, #0
 8000cca:	08d8      	lsrs	r0, r3, #3
 8000ccc:	0777      	lsls	r7, r6, #29
 8000cce:	4307      	orrs	r7, r0
 8000cd0:	08f0      	lsrs	r0, r6, #3
 8000cd2:	0306      	lsls	r6, r0, #12
 8000cd4:	054c      	lsls	r4, r1, #21
 8000cd6:	0b36      	lsrs	r6, r6, #12
 8000cd8:	0d64      	lsrs	r4, r4, #21
 8000cda:	e00c      	b.n	8000cf6 <__aeabi_dadd+0x292>
 8000cdc:	4f44      	ldr	r7, [pc, #272]	@ (8000df0 <__aeabi_dadd+0x38c>)
 8000cde:	42bc      	cmp	r4, r7
 8000ce0:	d100      	bne.n	8000ce4 <__aeabi_dadd+0x280>
 8000ce2:	e08b      	b.n	8000dfc <__aeabi_dadd+0x398>
 8000ce4:	2701      	movs	r7, #1
 8000ce6:	2938      	cmp	r1, #56	@ 0x38
 8000ce8:	dcb2      	bgt.n	8000c50 <__aeabi_dadd+0x1ec>
 8000cea:	2780      	movs	r7, #128	@ 0x80
 8000cec:	043f      	lsls	r7, r7, #16
 8000cee:	433b      	orrs	r3, r7
 8000cf0:	e79c      	b.n	8000c2c <__aeabi_dadd+0x1c8>
 8000cf2:	2600      	movs	r6, #0
 8000cf4:	2700      	movs	r7, #0
 8000cf6:	0524      	lsls	r4, r4, #20
 8000cf8:	4334      	orrs	r4, r6
 8000cfa:	07ed      	lsls	r5, r5, #31
 8000cfc:	432c      	orrs	r4, r5
 8000cfe:	0038      	movs	r0, r7
 8000d00:	0021      	movs	r1, r4
 8000d02:	b002      	add	sp, #8
 8000d04:	bce0      	pop	{r5, r6, r7}
 8000d06:	46ba      	mov	sl, r7
 8000d08:	46b1      	mov	r9, r6
 8000d0a:	46a8      	mov	r8, r5
 8000d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d0e:	077b      	lsls	r3, r7, #29
 8000d10:	d004      	beq.n	8000d1c <__aeabi_dadd+0x2b8>
 8000d12:	230f      	movs	r3, #15
 8000d14:	403b      	ands	r3, r7
 8000d16:	2b04      	cmp	r3, #4
 8000d18:	d000      	beq.n	8000d1c <__aeabi_dadd+0x2b8>
 8000d1a:	e728      	b.n	8000b6e <__aeabi_dadd+0x10a>
 8000d1c:	08f8      	lsrs	r0, r7, #3
 8000d1e:	4b34      	ldr	r3, [pc, #208]	@ (8000df0 <__aeabi_dadd+0x38c>)
 8000d20:	0777      	lsls	r7, r6, #29
 8000d22:	4307      	orrs	r7, r0
 8000d24:	08f0      	lsrs	r0, r6, #3
 8000d26:	429c      	cmp	r4, r3
 8000d28:	d000      	beq.n	8000d2c <__aeabi_dadd+0x2c8>
 8000d2a:	e24a      	b.n	80011c2 <__aeabi_dadd+0x75e>
 8000d2c:	003b      	movs	r3, r7
 8000d2e:	4303      	orrs	r3, r0
 8000d30:	d059      	beq.n	8000de6 <__aeabi_dadd+0x382>
 8000d32:	2680      	movs	r6, #128	@ 0x80
 8000d34:	0336      	lsls	r6, r6, #12
 8000d36:	4306      	orrs	r6, r0
 8000d38:	0336      	lsls	r6, r6, #12
 8000d3a:	4c2d      	ldr	r4, [pc, #180]	@ (8000df0 <__aeabi_dadd+0x38c>)
 8000d3c:	0b36      	lsrs	r6, r6, #12
 8000d3e:	e7da      	b.n	8000cf6 <__aeabi_dadd+0x292>
 8000d40:	2900      	cmp	r1, #0
 8000d42:	d061      	beq.n	8000e08 <__aeabi_dadd+0x3a4>
 8000d44:	4641      	mov	r1, r8
 8000d46:	1b09      	subs	r1, r1, r4
 8000d48:	2c00      	cmp	r4, #0
 8000d4a:	d100      	bne.n	8000d4e <__aeabi_dadd+0x2ea>
 8000d4c:	e0b9      	b.n	8000ec2 <__aeabi_dadd+0x45e>
 8000d4e:	4c28      	ldr	r4, [pc, #160]	@ (8000df0 <__aeabi_dadd+0x38c>)
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	d100      	bne.n	8000d56 <__aeabi_dadd+0x2f2>
 8000d54:	e1a5      	b.n	80010a2 <__aeabi_dadd+0x63e>
 8000d56:	2701      	movs	r7, #1
 8000d58:	2938      	cmp	r1, #56	@ 0x38
 8000d5a:	dc13      	bgt.n	8000d84 <__aeabi_dadd+0x320>
 8000d5c:	2480      	movs	r4, #128	@ 0x80
 8000d5e:	0424      	lsls	r4, r4, #16
 8000d60:	4326      	orrs	r6, r4
 8000d62:	291f      	cmp	r1, #31
 8000d64:	dd00      	ble.n	8000d68 <__aeabi_dadd+0x304>
 8000d66:	e1c8      	b.n	80010fa <__aeabi_dadd+0x696>
 8000d68:	2420      	movs	r4, #32
 8000d6a:	0037      	movs	r7, r6
 8000d6c:	4648      	mov	r0, r9
 8000d6e:	1a64      	subs	r4, r4, r1
 8000d70:	40a7      	lsls	r7, r4
 8000d72:	40c8      	lsrs	r0, r1
 8000d74:	4307      	orrs	r7, r0
 8000d76:	4648      	mov	r0, r9
 8000d78:	40a0      	lsls	r0, r4
 8000d7a:	40ce      	lsrs	r6, r1
 8000d7c:	1e44      	subs	r4, r0, #1
 8000d7e:	41a0      	sbcs	r0, r4
 8000d80:	199b      	adds	r3, r3, r6
 8000d82:	4307      	orrs	r7, r0
 8000d84:	18bf      	adds	r7, r7, r2
 8000d86:	4297      	cmp	r7, r2
 8000d88:	4192      	sbcs	r2, r2
 8000d8a:	4252      	negs	r2, r2
 8000d8c:	4644      	mov	r4, r8
 8000d8e:	18d6      	adds	r6, r2, r3
 8000d90:	e763      	b.n	8000c5a <__aeabi_dadd+0x1f6>
 8000d92:	0038      	movs	r0, r7
 8000d94:	f7ff fb88 	bl	80004a8 <__clzsi2>
 8000d98:	0003      	movs	r3, r0
 8000d9a:	3318      	adds	r3, #24
 8000d9c:	2b1f      	cmp	r3, #31
 8000d9e:	dc00      	bgt.n	8000da2 <__aeabi_dadd+0x33e>
 8000da0:	e6bf      	b.n	8000b22 <__aeabi_dadd+0xbe>
 8000da2:	003a      	movs	r2, r7
 8000da4:	3808      	subs	r0, #8
 8000da6:	4082      	lsls	r2, r0
 8000da8:	429c      	cmp	r4, r3
 8000daa:	dd00      	ble.n	8000dae <__aeabi_dadd+0x34a>
 8000dac:	e083      	b.n	8000eb6 <__aeabi_dadd+0x452>
 8000dae:	1b1b      	subs	r3, r3, r4
 8000db0:	1c58      	adds	r0, r3, #1
 8000db2:	281f      	cmp	r0, #31
 8000db4:	dc00      	bgt.n	8000db8 <__aeabi_dadd+0x354>
 8000db6:	e1b4      	b.n	8001122 <__aeabi_dadd+0x6be>
 8000db8:	0017      	movs	r7, r2
 8000dba:	3b1f      	subs	r3, #31
 8000dbc:	40df      	lsrs	r7, r3
 8000dbe:	2820      	cmp	r0, #32
 8000dc0:	d005      	beq.n	8000dce <__aeabi_dadd+0x36a>
 8000dc2:	2340      	movs	r3, #64	@ 0x40
 8000dc4:	1a1b      	subs	r3, r3, r0
 8000dc6:	409a      	lsls	r2, r3
 8000dc8:	1e53      	subs	r3, r2, #1
 8000dca:	419a      	sbcs	r2, r3
 8000dcc:	4317      	orrs	r7, r2
 8000dce:	2400      	movs	r4, #0
 8000dd0:	2f00      	cmp	r7, #0
 8000dd2:	d00a      	beq.n	8000dea <__aeabi_dadd+0x386>
 8000dd4:	077b      	lsls	r3, r7, #29
 8000dd6:	d000      	beq.n	8000dda <__aeabi_dadd+0x376>
 8000dd8:	e6c4      	b.n	8000b64 <__aeabi_dadd+0x100>
 8000dda:	0026      	movs	r6, r4
 8000ddc:	e79e      	b.n	8000d1c <__aeabi_dadd+0x2b8>
 8000dde:	464b      	mov	r3, r9
 8000de0:	000c      	movs	r4, r1
 8000de2:	08d8      	lsrs	r0, r3, #3
 8000de4:	e79b      	b.n	8000d1e <__aeabi_dadd+0x2ba>
 8000de6:	2700      	movs	r7, #0
 8000de8:	4c01      	ldr	r4, [pc, #4]	@ (8000df0 <__aeabi_dadd+0x38c>)
 8000dea:	2600      	movs	r6, #0
 8000dec:	e783      	b.n	8000cf6 <__aeabi_dadd+0x292>
 8000dee:	46c0      	nop			@ (mov r8, r8)
 8000df0:	000007ff 	.word	0x000007ff
 8000df4:	ff7fffff 	.word	0xff7fffff
 8000df8:	000007fe 	.word	0x000007fe
 8000dfc:	464b      	mov	r3, r9
 8000dfe:	0777      	lsls	r7, r6, #29
 8000e00:	08d8      	lsrs	r0, r3, #3
 8000e02:	4307      	orrs	r7, r0
 8000e04:	08f0      	lsrs	r0, r6, #3
 8000e06:	e791      	b.n	8000d2c <__aeabi_dadd+0x2c8>
 8000e08:	4fcd      	ldr	r7, [pc, #820]	@ (8001140 <__aeabi_dadd+0x6dc>)
 8000e0a:	1c61      	adds	r1, r4, #1
 8000e0c:	4239      	tst	r1, r7
 8000e0e:	d16b      	bne.n	8000ee8 <__aeabi_dadd+0x484>
 8000e10:	0031      	movs	r1, r6
 8000e12:	4648      	mov	r0, r9
 8000e14:	4301      	orrs	r1, r0
 8000e16:	2c00      	cmp	r4, #0
 8000e18:	d000      	beq.n	8000e1c <__aeabi_dadd+0x3b8>
 8000e1a:	e14b      	b.n	80010b4 <__aeabi_dadd+0x650>
 8000e1c:	001f      	movs	r7, r3
 8000e1e:	4317      	orrs	r7, r2
 8000e20:	2900      	cmp	r1, #0
 8000e22:	d100      	bne.n	8000e26 <__aeabi_dadd+0x3c2>
 8000e24:	e181      	b.n	800112a <__aeabi_dadd+0x6c6>
 8000e26:	2f00      	cmp	r7, #0
 8000e28:	d100      	bne.n	8000e2c <__aeabi_dadd+0x3c8>
 8000e2a:	e74c      	b.n	8000cc6 <__aeabi_dadd+0x262>
 8000e2c:	444a      	add	r2, r9
 8000e2e:	454a      	cmp	r2, r9
 8000e30:	4180      	sbcs	r0, r0
 8000e32:	18f6      	adds	r6, r6, r3
 8000e34:	4240      	negs	r0, r0
 8000e36:	1836      	adds	r6, r6, r0
 8000e38:	0233      	lsls	r3, r6, #8
 8000e3a:	d500      	bpl.n	8000e3e <__aeabi_dadd+0x3da>
 8000e3c:	e1b0      	b.n	80011a0 <__aeabi_dadd+0x73c>
 8000e3e:	0017      	movs	r7, r2
 8000e40:	4691      	mov	r9, r2
 8000e42:	4337      	orrs	r7, r6
 8000e44:	d000      	beq.n	8000e48 <__aeabi_dadd+0x3e4>
 8000e46:	e73e      	b.n	8000cc6 <__aeabi_dadd+0x262>
 8000e48:	2600      	movs	r6, #0
 8000e4a:	e754      	b.n	8000cf6 <__aeabi_dadd+0x292>
 8000e4c:	4649      	mov	r1, r9
 8000e4e:	1a89      	subs	r1, r1, r2
 8000e50:	4688      	mov	r8, r1
 8000e52:	45c1      	cmp	r9, r8
 8000e54:	41bf      	sbcs	r7, r7
 8000e56:	1af1      	subs	r1, r6, r3
 8000e58:	427f      	negs	r7, r7
 8000e5a:	1bc9      	subs	r1, r1, r7
 8000e5c:	020f      	lsls	r7, r1, #8
 8000e5e:	d461      	bmi.n	8000f24 <__aeabi_dadd+0x4c0>
 8000e60:	4647      	mov	r7, r8
 8000e62:	430f      	orrs	r7, r1
 8000e64:	d100      	bne.n	8000e68 <__aeabi_dadd+0x404>
 8000e66:	e0bd      	b.n	8000fe4 <__aeabi_dadd+0x580>
 8000e68:	000e      	movs	r6, r1
 8000e6a:	4647      	mov	r7, r8
 8000e6c:	e651      	b.n	8000b12 <__aeabi_dadd+0xae>
 8000e6e:	4cb5      	ldr	r4, [pc, #724]	@ (8001144 <__aeabi_dadd+0x6e0>)
 8000e70:	45a0      	cmp	r8, r4
 8000e72:	d100      	bne.n	8000e76 <__aeabi_dadd+0x412>
 8000e74:	e100      	b.n	8001078 <__aeabi_dadd+0x614>
 8000e76:	2701      	movs	r7, #1
 8000e78:	2938      	cmp	r1, #56	@ 0x38
 8000e7a:	dd00      	ble.n	8000e7e <__aeabi_dadd+0x41a>
 8000e7c:	e6b8      	b.n	8000bf0 <__aeabi_dadd+0x18c>
 8000e7e:	2480      	movs	r4, #128	@ 0x80
 8000e80:	0424      	lsls	r4, r4, #16
 8000e82:	4326      	orrs	r6, r4
 8000e84:	e6a3      	b.n	8000bce <__aeabi_dadd+0x16a>
 8000e86:	4eb0      	ldr	r6, [pc, #704]	@ (8001148 <__aeabi_dadd+0x6e4>)
 8000e88:	1ae4      	subs	r4, r4, r3
 8000e8a:	4016      	ands	r6, r2
 8000e8c:	077b      	lsls	r3, r7, #29
 8000e8e:	d000      	beq.n	8000e92 <__aeabi_dadd+0x42e>
 8000e90:	e73f      	b.n	8000d12 <__aeabi_dadd+0x2ae>
 8000e92:	e743      	b.n	8000d1c <__aeabi_dadd+0x2b8>
 8000e94:	000f      	movs	r7, r1
 8000e96:	0018      	movs	r0, r3
 8000e98:	3f20      	subs	r7, #32
 8000e9a:	40f8      	lsrs	r0, r7
 8000e9c:	4684      	mov	ip, r0
 8000e9e:	2920      	cmp	r1, #32
 8000ea0:	d003      	beq.n	8000eaa <__aeabi_dadd+0x446>
 8000ea2:	2740      	movs	r7, #64	@ 0x40
 8000ea4:	1a79      	subs	r1, r7, r1
 8000ea6:	408b      	lsls	r3, r1
 8000ea8:	431a      	orrs	r2, r3
 8000eaa:	1e53      	subs	r3, r2, #1
 8000eac:	419a      	sbcs	r2, r3
 8000eae:	4663      	mov	r3, ip
 8000eb0:	0017      	movs	r7, r2
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	e622      	b.n	8000afc <__aeabi_dadd+0x98>
 8000eb6:	48a4      	ldr	r0, [pc, #656]	@ (8001148 <__aeabi_dadd+0x6e4>)
 8000eb8:	1ae1      	subs	r1, r4, r3
 8000eba:	4010      	ands	r0, r2
 8000ebc:	0747      	lsls	r7, r0, #29
 8000ebe:	08c0      	lsrs	r0, r0, #3
 8000ec0:	e707      	b.n	8000cd2 <__aeabi_dadd+0x26e>
 8000ec2:	0034      	movs	r4, r6
 8000ec4:	4648      	mov	r0, r9
 8000ec6:	4304      	orrs	r4, r0
 8000ec8:	d100      	bne.n	8000ecc <__aeabi_dadd+0x468>
 8000eca:	e0fa      	b.n	80010c2 <__aeabi_dadd+0x65e>
 8000ecc:	1e4c      	subs	r4, r1, #1
 8000ece:	2901      	cmp	r1, #1
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_dadd+0x470>
 8000ed2:	e0d7      	b.n	8001084 <__aeabi_dadd+0x620>
 8000ed4:	4f9b      	ldr	r7, [pc, #620]	@ (8001144 <__aeabi_dadd+0x6e0>)
 8000ed6:	42b9      	cmp	r1, r7
 8000ed8:	d100      	bne.n	8000edc <__aeabi_dadd+0x478>
 8000eda:	e0e2      	b.n	80010a2 <__aeabi_dadd+0x63e>
 8000edc:	2701      	movs	r7, #1
 8000ede:	2c38      	cmp	r4, #56	@ 0x38
 8000ee0:	dd00      	ble.n	8000ee4 <__aeabi_dadd+0x480>
 8000ee2:	e74f      	b.n	8000d84 <__aeabi_dadd+0x320>
 8000ee4:	0021      	movs	r1, r4
 8000ee6:	e73c      	b.n	8000d62 <__aeabi_dadd+0x2fe>
 8000ee8:	4c96      	ldr	r4, [pc, #600]	@ (8001144 <__aeabi_dadd+0x6e0>)
 8000eea:	42a1      	cmp	r1, r4
 8000eec:	d100      	bne.n	8000ef0 <__aeabi_dadd+0x48c>
 8000eee:	e0dd      	b.n	80010ac <__aeabi_dadd+0x648>
 8000ef0:	444a      	add	r2, r9
 8000ef2:	454a      	cmp	r2, r9
 8000ef4:	4180      	sbcs	r0, r0
 8000ef6:	18f3      	adds	r3, r6, r3
 8000ef8:	4240      	negs	r0, r0
 8000efa:	1818      	adds	r0, r3, r0
 8000efc:	07c7      	lsls	r7, r0, #31
 8000efe:	0852      	lsrs	r2, r2, #1
 8000f00:	4317      	orrs	r7, r2
 8000f02:	0846      	lsrs	r6, r0, #1
 8000f04:	0752      	lsls	r2, r2, #29
 8000f06:	d005      	beq.n	8000f14 <__aeabi_dadd+0x4b0>
 8000f08:	220f      	movs	r2, #15
 8000f0a:	000c      	movs	r4, r1
 8000f0c:	403a      	ands	r2, r7
 8000f0e:	2a04      	cmp	r2, #4
 8000f10:	d000      	beq.n	8000f14 <__aeabi_dadd+0x4b0>
 8000f12:	e62c      	b.n	8000b6e <__aeabi_dadd+0x10a>
 8000f14:	0776      	lsls	r6, r6, #29
 8000f16:	08ff      	lsrs	r7, r7, #3
 8000f18:	4337      	orrs	r7, r6
 8000f1a:	0900      	lsrs	r0, r0, #4
 8000f1c:	e6d9      	b.n	8000cd2 <__aeabi_dadd+0x26e>
 8000f1e:	2700      	movs	r7, #0
 8000f20:	2600      	movs	r6, #0
 8000f22:	e6e8      	b.n	8000cf6 <__aeabi_dadd+0x292>
 8000f24:	4649      	mov	r1, r9
 8000f26:	1a57      	subs	r7, r2, r1
 8000f28:	42ba      	cmp	r2, r7
 8000f2a:	4192      	sbcs	r2, r2
 8000f2c:	1b9e      	subs	r6, r3, r6
 8000f2e:	4252      	negs	r2, r2
 8000f30:	4665      	mov	r5, ip
 8000f32:	1ab6      	subs	r6, r6, r2
 8000f34:	e5ed      	b.n	8000b12 <__aeabi_dadd+0xae>
 8000f36:	2900      	cmp	r1, #0
 8000f38:	d000      	beq.n	8000f3c <__aeabi_dadd+0x4d8>
 8000f3a:	e0c6      	b.n	80010ca <__aeabi_dadd+0x666>
 8000f3c:	2f00      	cmp	r7, #0
 8000f3e:	d167      	bne.n	8001010 <__aeabi_dadd+0x5ac>
 8000f40:	2680      	movs	r6, #128	@ 0x80
 8000f42:	2500      	movs	r5, #0
 8000f44:	4c7f      	ldr	r4, [pc, #508]	@ (8001144 <__aeabi_dadd+0x6e0>)
 8000f46:	0336      	lsls	r6, r6, #12
 8000f48:	e6d5      	b.n	8000cf6 <__aeabi_dadd+0x292>
 8000f4a:	4665      	mov	r5, ip
 8000f4c:	000c      	movs	r4, r1
 8000f4e:	001e      	movs	r6, r3
 8000f50:	08d0      	lsrs	r0, r2, #3
 8000f52:	e6e4      	b.n	8000d1e <__aeabi_dadd+0x2ba>
 8000f54:	444a      	add	r2, r9
 8000f56:	454a      	cmp	r2, r9
 8000f58:	4180      	sbcs	r0, r0
 8000f5a:	18f3      	adds	r3, r6, r3
 8000f5c:	4240      	negs	r0, r0
 8000f5e:	1818      	adds	r0, r3, r0
 8000f60:	0011      	movs	r1, r2
 8000f62:	0203      	lsls	r3, r0, #8
 8000f64:	d400      	bmi.n	8000f68 <__aeabi_dadd+0x504>
 8000f66:	e096      	b.n	8001096 <__aeabi_dadd+0x632>
 8000f68:	4b77      	ldr	r3, [pc, #476]	@ (8001148 <__aeabi_dadd+0x6e4>)
 8000f6a:	0849      	lsrs	r1, r1, #1
 8000f6c:	4018      	ands	r0, r3
 8000f6e:	07c3      	lsls	r3, r0, #31
 8000f70:	430b      	orrs	r3, r1
 8000f72:	0844      	lsrs	r4, r0, #1
 8000f74:	0749      	lsls	r1, r1, #29
 8000f76:	d100      	bne.n	8000f7a <__aeabi_dadd+0x516>
 8000f78:	e129      	b.n	80011ce <__aeabi_dadd+0x76a>
 8000f7a:	220f      	movs	r2, #15
 8000f7c:	401a      	ands	r2, r3
 8000f7e:	2a04      	cmp	r2, #4
 8000f80:	d100      	bne.n	8000f84 <__aeabi_dadd+0x520>
 8000f82:	e0ea      	b.n	800115a <__aeabi_dadd+0x6f6>
 8000f84:	1d1f      	adds	r7, r3, #4
 8000f86:	429f      	cmp	r7, r3
 8000f88:	41b6      	sbcs	r6, r6
 8000f8a:	4276      	negs	r6, r6
 8000f8c:	1936      	adds	r6, r6, r4
 8000f8e:	2402      	movs	r4, #2
 8000f90:	e6c4      	b.n	8000d1c <__aeabi_dadd+0x2b8>
 8000f92:	4649      	mov	r1, r9
 8000f94:	1a8f      	subs	r7, r1, r2
 8000f96:	45b9      	cmp	r9, r7
 8000f98:	4180      	sbcs	r0, r0
 8000f9a:	1af6      	subs	r6, r6, r3
 8000f9c:	4240      	negs	r0, r0
 8000f9e:	1a36      	subs	r6, r6, r0
 8000fa0:	0233      	lsls	r3, r6, #8
 8000fa2:	d406      	bmi.n	8000fb2 <__aeabi_dadd+0x54e>
 8000fa4:	0773      	lsls	r3, r6, #29
 8000fa6:	08ff      	lsrs	r7, r7, #3
 8000fa8:	2101      	movs	r1, #1
 8000faa:	431f      	orrs	r7, r3
 8000fac:	08f0      	lsrs	r0, r6, #3
 8000fae:	e690      	b.n	8000cd2 <__aeabi_dadd+0x26e>
 8000fb0:	4665      	mov	r5, ip
 8000fb2:	2401      	movs	r4, #1
 8000fb4:	e5ab      	b.n	8000b0e <__aeabi_dadd+0xaa>
 8000fb6:	464b      	mov	r3, r9
 8000fb8:	0777      	lsls	r7, r6, #29
 8000fba:	08d8      	lsrs	r0, r3, #3
 8000fbc:	4307      	orrs	r7, r0
 8000fbe:	08f0      	lsrs	r0, r6, #3
 8000fc0:	e6b4      	b.n	8000d2c <__aeabi_dadd+0x2c8>
 8000fc2:	000f      	movs	r7, r1
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	3f20      	subs	r7, #32
 8000fc8:	40f8      	lsrs	r0, r7
 8000fca:	4684      	mov	ip, r0
 8000fcc:	2920      	cmp	r1, #32
 8000fce:	d003      	beq.n	8000fd8 <__aeabi_dadd+0x574>
 8000fd0:	2740      	movs	r7, #64	@ 0x40
 8000fd2:	1a79      	subs	r1, r7, r1
 8000fd4:	408b      	lsls	r3, r1
 8000fd6:	431a      	orrs	r2, r3
 8000fd8:	1e53      	subs	r3, r2, #1
 8000fda:	419a      	sbcs	r2, r3
 8000fdc:	4663      	mov	r3, ip
 8000fde:	0017      	movs	r7, r2
 8000fe0:	431f      	orrs	r7, r3
 8000fe2:	e635      	b.n	8000c50 <__aeabi_dadd+0x1ec>
 8000fe4:	2500      	movs	r5, #0
 8000fe6:	2400      	movs	r4, #0
 8000fe8:	2600      	movs	r6, #0
 8000fea:	e684      	b.n	8000cf6 <__aeabi_dadd+0x292>
 8000fec:	000c      	movs	r4, r1
 8000fee:	0035      	movs	r5, r6
 8000ff0:	3c20      	subs	r4, #32
 8000ff2:	40e5      	lsrs	r5, r4
 8000ff4:	2920      	cmp	r1, #32
 8000ff6:	d005      	beq.n	8001004 <__aeabi_dadd+0x5a0>
 8000ff8:	2440      	movs	r4, #64	@ 0x40
 8000ffa:	1a61      	subs	r1, r4, r1
 8000ffc:	408e      	lsls	r6, r1
 8000ffe:	4649      	mov	r1, r9
 8001000:	4331      	orrs	r1, r6
 8001002:	4689      	mov	r9, r1
 8001004:	4648      	mov	r0, r9
 8001006:	1e41      	subs	r1, r0, #1
 8001008:	4188      	sbcs	r0, r1
 800100a:	0007      	movs	r7, r0
 800100c:	432f      	orrs	r7, r5
 800100e:	e5ef      	b.n	8000bf0 <__aeabi_dadd+0x18c>
 8001010:	08d2      	lsrs	r2, r2, #3
 8001012:	075f      	lsls	r7, r3, #29
 8001014:	4665      	mov	r5, ip
 8001016:	4317      	orrs	r7, r2
 8001018:	08d8      	lsrs	r0, r3, #3
 800101a:	e687      	b.n	8000d2c <__aeabi_dadd+0x2c8>
 800101c:	1a17      	subs	r7, r2, r0
 800101e:	42ba      	cmp	r2, r7
 8001020:	4192      	sbcs	r2, r2
 8001022:	1b9e      	subs	r6, r3, r6
 8001024:	4252      	negs	r2, r2
 8001026:	1ab6      	subs	r6, r6, r2
 8001028:	0233      	lsls	r3, r6, #8
 800102a:	d4c1      	bmi.n	8000fb0 <__aeabi_dadd+0x54c>
 800102c:	0773      	lsls	r3, r6, #29
 800102e:	08ff      	lsrs	r7, r7, #3
 8001030:	4665      	mov	r5, ip
 8001032:	2101      	movs	r1, #1
 8001034:	431f      	orrs	r7, r3
 8001036:	08f0      	lsrs	r0, r6, #3
 8001038:	e64b      	b.n	8000cd2 <__aeabi_dadd+0x26e>
 800103a:	2f00      	cmp	r7, #0
 800103c:	d07b      	beq.n	8001136 <__aeabi_dadd+0x6d2>
 800103e:	4665      	mov	r5, ip
 8001040:	001e      	movs	r6, r3
 8001042:	4691      	mov	r9, r2
 8001044:	e63f      	b.n	8000cc6 <__aeabi_dadd+0x262>
 8001046:	1a81      	subs	r1, r0, r2
 8001048:	4688      	mov	r8, r1
 800104a:	45c1      	cmp	r9, r8
 800104c:	41a4      	sbcs	r4, r4
 800104e:	1af1      	subs	r1, r6, r3
 8001050:	4264      	negs	r4, r4
 8001052:	1b09      	subs	r1, r1, r4
 8001054:	2480      	movs	r4, #128	@ 0x80
 8001056:	0424      	lsls	r4, r4, #16
 8001058:	4221      	tst	r1, r4
 800105a:	d077      	beq.n	800114c <__aeabi_dadd+0x6e8>
 800105c:	1a10      	subs	r0, r2, r0
 800105e:	4282      	cmp	r2, r0
 8001060:	4192      	sbcs	r2, r2
 8001062:	0007      	movs	r7, r0
 8001064:	1b9e      	subs	r6, r3, r6
 8001066:	4252      	negs	r2, r2
 8001068:	1ab6      	subs	r6, r6, r2
 800106a:	4337      	orrs	r7, r6
 800106c:	d000      	beq.n	8001070 <__aeabi_dadd+0x60c>
 800106e:	e0a0      	b.n	80011b2 <__aeabi_dadd+0x74e>
 8001070:	4665      	mov	r5, ip
 8001072:	2400      	movs	r4, #0
 8001074:	2600      	movs	r6, #0
 8001076:	e63e      	b.n	8000cf6 <__aeabi_dadd+0x292>
 8001078:	075f      	lsls	r7, r3, #29
 800107a:	08d2      	lsrs	r2, r2, #3
 800107c:	4665      	mov	r5, ip
 800107e:	4317      	orrs	r7, r2
 8001080:	08d8      	lsrs	r0, r3, #3
 8001082:	e653      	b.n	8000d2c <__aeabi_dadd+0x2c8>
 8001084:	1881      	adds	r1, r0, r2
 8001086:	4291      	cmp	r1, r2
 8001088:	4192      	sbcs	r2, r2
 800108a:	18f0      	adds	r0, r6, r3
 800108c:	4252      	negs	r2, r2
 800108e:	1880      	adds	r0, r0, r2
 8001090:	0203      	lsls	r3, r0, #8
 8001092:	d500      	bpl.n	8001096 <__aeabi_dadd+0x632>
 8001094:	e768      	b.n	8000f68 <__aeabi_dadd+0x504>
 8001096:	0747      	lsls	r7, r0, #29
 8001098:	08c9      	lsrs	r1, r1, #3
 800109a:	430f      	orrs	r7, r1
 800109c:	08c0      	lsrs	r0, r0, #3
 800109e:	2101      	movs	r1, #1
 80010a0:	e617      	b.n	8000cd2 <__aeabi_dadd+0x26e>
 80010a2:	08d2      	lsrs	r2, r2, #3
 80010a4:	075f      	lsls	r7, r3, #29
 80010a6:	4317      	orrs	r7, r2
 80010a8:	08d8      	lsrs	r0, r3, #3
 80010aa:	e63f      	b.n	8000d2c <__aeabi_dadd+0x2c8>
 80010ac:	000c      	movs	r4, r1
 80010ae:	2600      	movs	r6, #0
 80010b0:	2700      	movs	r7, #0
 80010b2:	e620      	b.n	8000cf6 <__aeabi_dadd+0x292>
 80010b4:	2900      	cmp	r1, #0
 80010b6:	d156      	bne.n	8001166 <__aeabi_dadd+0x702>
 80010b8:	075f      	lsls	r7, r3, #29
 80010ba:	08d2      	lsrs	r2, r2, #3
 80010bc:	4317      	orrs	r7, r2
 80010be:	08d8      	lsrs	r0, r3, #3
 80010c0:	e634      	b.n	8000d2c <__aeabi_dadd+0x2c8>
 80010c2:	000c      	movs	r4, r1
 80010c4:	001e      	movs	r6, r3
 80010c6:	08d0      	lsrs	r0, r2, #3
 80010c8:	e629      	b.n	8000d1e <__aeabi_dadd+0x2ba>
 80010ca:	08c1      	lsrs	r1, r0, #3
 80010cc:	0770      	lsls	r0, r6, #29
 80010ce:	4301      	orrs	r1, r0
 80010d0:	08f0      	lsrs	r0, r6, #3
 80010d2:	2f00      	cmp	r7, #0
 80010d4:	d062      	beq.n	800119c <__aeabi_dadd+0x738>
 80010d6:	2480      	movs	r4, #128	@ 0x80
 80010d8:	0324      	lsls	r4, r4, #12
 80010da:	4220      	tst	r0, r4
 80010dc:	d007      	beq.n	80010ee <__aeabi_dadd+0x68a>
 80010de:	08de      	lsrs	r6, r3, #3
 80010e0:	4226      	tst	r6, r4
 80010e2:	d104      	bne.n	80010ee <__aeabi_dadd+0x68a>
 80010e4:	4665      	mov	r5, ip
 80010e6:	0030      	movs	r0, r6
 80010e8:	08d1      	lsrs	r1, r2, #3
 80010ea:	075b      	lsls	r3, r3, #29
 80010ec:	4319      	orrs	r1, r3
 80010ee:	0f4f      	lsrs	r7, r1, #29
 80010f0:	00c9      	lsls	r1, r1, #3
 80010f2:	08c9      	lsrs	r1, r1, #3
 80010f4:	077f      	lsls	r7, r7, #29
 80010f6:	430f      	orrs	r7, r1
 80010f8:	e618      	b.n	8000d2c <__aeabi_dadd+0x2c8>
 80010fa:	000c      	movs	r4, r1
 80010fc:	0030      	movs	r0, r6
 80010fe:	3c20      	subs	r4, #32
 8001100:	40e0      	lsrs	r0, r4
 8001102:	4684      	mov	ip, r0
 8001104:	2920      	cmp	r1, #32
 8001106:	d005      	beq.n	8001114 <__aeabi_dadd+0x6b0>
 8001108:	2440      	movs	r4, #64	@ 0x40
 800110a:	1a61      	subs	r1, r4, r1
 800110c:	408e      	lsls	r6, r1
 800110e:	4649      	mov	r1, r9
 8001110:	4331      	orrs	r1, r6
 8001112:	4689      	mov	r9, r1
 8001114:	4648      	mov	r0, r9
 8001116:	1e41      	subs	r1, r0, #1
 8001118:	4188      	sbcs	r0, r1
 800111a:	4661      	mov	r1, ip
 800111c:	0007      	movs	r7, r0
 800111e:	430f      	orrs	r7, r1
 8001120:	e630      	b.n	8000d84 <__aeabi_dadd+0x320>
 8001122:	2120      	movs	r1, #32
 8001124:	2700      	movs	r7, #0
 8001126:	1a09      	subs	r1, r1, r0
 8001128:	e50e      	b.n	8000b48 <__aeabi_dadd+0xe4>
 800112a:	001e      	movs	r6, r3
 800112c:	2f00      	cmp	r7, #0
 800112e:	d000      	beq.n	8001132 <__aeabi_dadd+0x6ce>
 8001130:	e522      	b.n	8000b78 <__aeabi_dadd+0x114>
 8001132:	2400      	movs	r4, #0
 8001134:	e758      	b.n	8000fe8 <__aeabi_dadd+0x584>
 8001136:	2500      	movs	r5, #0
 8001138:	2400      	movs	r4, #0
 800113a:	2600      	movs	r6, #0
 800113c:	e5db      	b.n	8000cf6 <__aeabi_dadd+0x292>
 800113e:	46c0      	nop			@ (mov r8, r8)
 8001140:	000007fe 	.word	0x000007fe
 8001144:	000007ff 	.word	0x000007ff
 8001148:	ff7fffff 	.word	0xff7fffff
 800114c:	4647      	mov	r7, r8
 800114e:	430f      	orrs	r7, r1
 8001150:	d100      	bne.n	8001154 <__aeabi_dadd+0x6f0>
 8001152:	e747      	b.n	8000fe4 <__aeabi_dadd+0x580>
 8001154:	000e      	movs	r6, r1
 8001156:	46c1      	mov	r9, r8
 8001158:	e5b5      	b.n	8000cc6 <__aeabi_dadd+0x262>
 800115a:	08df      	lsrs	r7, r3, #3
 800115c:	0764      	lsls	r4, r4, #29
 800115e:	2102      	movs	r1, #2
 8001160:	4327      	orrs	r7, r4
 8001162:	0900      	lsrs	r0, r0, #4
 8001164:	e5b5      	b.n	8000cd2 <__aeabi_dadd+0x26e>
 8001166:	0019      	movs	r1, r3
 8001168:	08c0      	lsrs	r0, r0, #3
 800116a:	0777      	lsls	r7, r6, #29
 800116c:	4307      	orrs	r7, r0
 800116e:	4311      	orrs	r1, r2
 8001170:	08f0      	lsrs	r0, r6, #3
 8001172:	2900      	cmp	r1, #0
 8001174:	d100      	bne.n	8001178 <__aeabi_dadd+0x714>
 8001176:	e5d9      	b.n	8000d2c <__aeabi_dadd+0x2c8>
 8001178:	2180      	movs	r1, #128	@ 0x80
 800117a:	0309      	lsls	r1, r1, #12
 800117c:	4208      	tst	r0, r1
 800117e:	d007      	beq.n	8001190 <__aeabi_dadd+0x72c>
 8001180:	08dc      	lsrs	r4, r3, #3
 8001182:	420c      	tst	r4, r1
 8001184:	d104      	bne.n	8001190 <__aeabi_dadd+0x72c>
 8001186:	08d2      	lsrs	r2, r2, #3
 8001188:	075b      	lsls	r3, r3, #29
 800118a:	431a      	orrs	r2, r3
 800118c:	0017      	movs	r7, r2
 800118e:	0020      	movs	r0, r4
 8001190:	0f7b      	lsrs	r3, r7, #29
 8001192:	00ff      	lsls	r7, r7, #3
 8001194:	08ff      	lsrs	r7, r7, #3
 8001196:	075b      	lsls	r3, r3, #29
 8001198:	431f      	orrs	r7, r3
 800119a:	e5c7      	b.n	8000d2c <__aeabi_dadd+0x2c8>
 800119c:	000f      	movs	r7, r1
 800119e:	e5c5      	b.n	8000d2c <__aeabi_dadd+0x2c8>
 80011a0:	4b12      	ldr	r3, [pc, #72]	@ (80011ec <__aeabi_dadd+0x788>)
 80011a2:	08d2      	lsrs	r2, r2, #3
 80011a4:	4033      	ands	r3, r6
 80011a6:	075f      	lsls	r7, r3, #29
 80011a8:	025b      	lsls	r3, r3, #9
 80011aa:	2401      	movs	r4, #1
 80011ac:	4317      	orrs	r7, r2
 80011ae:	0b1e      	lsrs	r6, r3, #12
 80011b0:	e5a1      	b.n	8000cf6 <__aeabi_dadd+0x292>
 80011b2:	4226      	tst	r6, r4
 80011b4:	d012      	beq.n	80011dc <__aeabi_dadd+0x778>
 80011b6:	4b0d      	ldr	r3, [pc, #52]	@ (80011ec <__aeabi_dadd+0x788>)
 80011b8:	4665      	mov	r5, ip
 80011ba:	0002      	movs	r2, r0
 80011bc:	2401      	movs	r4, #1
 80011be:	401e      	ands	r6, r3
 80011c0:	e4e6      	b.n	8000b90 <__aeabi_dadd+0x12c>
 80011c2:	0021      	movs	r1, r4
 80011c4:	e585      	b.n	8000cd2 <__aeabi_dadd+0x26e>
 80011c6:	0017      	movs	r7, r2
 80011c8:	e5a8      	b.n	8000d1c <__aeabi_dadd+0x2b8>
 80011ca:	003a      	movs	r2, r7
 80011cc:	e4d4      	b.n	8000b78 <__aeabi_dadd+0x114>
 80011ce:	08db      	lsrs	r3, r3, #3
 80011d0:	0764      	lsls	r4, r4, #29
 80011d2:	431c      	orrs	r4, r3
 80011d4:	0027      	movs	r7, r4
 80011d6:	2102      	movs	r1, #2
 80011d8:	0900      	lsrs	r0, r0, #4
 80011da:	e57a      	b.n	8000cd2 <__aeabi_dadd+0x26e>
 80011dc:	08c0      	lsrs	r0, r0, #3
 80011de:	0777      	lsls	r7, r6, #29
 80011e0:	4307      	orrs	r7, r0
 80011e2:	4665      	mov	r5, ip
 80011e4:	2100      	movs	r1, #0
 80011e6:	08f0      	lsrs	r0, r6, #3
 80011e8:	e573      	b.n	8000cd2 <__aeabi_dadd+0x26e>
 80011ea:	46c0      	nop			@ (mov r8, r8)
 80011ec:	ff7fffff 	.word	0xff7fffff

080011f0 <__aeabi_ddiv>:
 80011f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011f2:	46de      	mov	lr, fp
 80011f4:	4645      	mov	r5, r8
 80011f6:	4657      	mov	r7, sl
 80011f8:	464e      	mov	r6, r9
 80011fa:	b5e0      	push	{r5, r6, r7, lr}
 80011fc:	b087      	sub	sp, #28
 80011fe:	9200      	str	r2, [sp, #0]
 8001200:	9301      	str	r3, [sp, #4]
 8001202:	030b      	lsls	r3, r1, #12
 8001204:	0b1b      	lsrs	r3, r3, #12
 8001206:	469b      	mov	fp, r3
 8001208:	0fca      	lsrs	r2, r1, #31
 800120a:	004b      	lsls	r3, r1, #1
 800120c:	0004      	movs	r4, r0
 800120e:	4680      	mov	r8, r0
 8001210:	0d5b      	lsrs	r3, r3, #21
 8001212:	9202      	str	r2, [sp, #8]
 8001214:	d100      	bne.n	8001218 <__aeabi_ddiv+0x28>
 8001216:	e098      	b.n	800134a <__aeabi_ddiv+0x15a>
 8001218:	4a7c      	ldr	r2, [pc, #496]	@ (800140c <__aeabi_ddiv+0x21c>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d037      	beq.n	800128e <__aeabi_ddiv+0x9e>
 800121e:	4659      	mov	r1, fp
 8001220:	0f42      	lsrs	r2, r0, #29
 8001222:	00c9      	lsls	r1, r1, #3
 8001224:	430a      	orrs	r2, r1
 8001226:	2180      	movs	r1, #128	@ 0x80
 8001228:	0409      	lsls	r1, r1, #16
 800122a:	4311      	orrs	r1, r2
 800122c:	00c2      	lsls	r2, r0, #3
 800122e:	4690      	mov	r8, r2
 8001230:	4a77      	ldr	r2, [pc, #476]	@ (8001410 <__aeabi_ddiv+0x220>)
 8001232:	4689      	mov	r9, r1
 8001234:	4692      	mov	sl, r2
 8001236:	449a      	add	sl, r3
 8001238:	2300      	movs	r3, #0
 800123a:	2400      	movs	r4, #0
 800123c:	9303      	str	r3, [sp, #12]
 800123e:	9e00      	ldr	r6, [sp, #0]
 8001240:	9f01      	ldr	r7, [sp, #4]
 8001242:	033b      	lsls	r3, r7, #12
 8001244:	0b1b      	lsrs	r3, r3, #12
 8001246:	469b      	mov	fp, r3
 8001248:	007b      	lsls	r3, r7, #1
 800124a:	0030      	movs	r0, r6
 800124c:	0d5b      	lsrs	r3, r3, #21
 800124e:	0ffd      	lsrs	r5, r7, #31
 8001250:	2b00      	cmp	r3, #0
 8001252:	d059      	beq.n	8001308 <__aeabi_ddiv+0x118>
 8001254:	4a6d      	ldr	r2, [pc, #436]	@ (800140c <__aeabi_ddiv+0x21c>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d048      	beq.n	80012ec <__aeabi_ddiv+0xfc>
 800125a:	4659      	mov	r1, fp
 800125c:	0f72      	lsrs	r2, r6, #29
 800125e:	00c9      	lsls	r1, r1, #3
 8001260:	430a      	orrs	r2, r1
 8001262:	2180      	movs	r1, #128	@ 0x80
 8001264:	0409      	lsls	r1, r1, #16
 8001266:	4311      	orrs	r1, r2
 8001268:	468b      	mov	fp, r1
 800126a:	4969      	ldr	r1, [pc, #420]	@ (8001410 <__aeabi_ddiv+0x220>)
 800126c:	00f2      	lsls	r2, r6, #3
 800126e:	468c      	mov	ip, r1
 8001270:	4651      	mov	r1, sl
 8001272:	4463      	add	r3, ip
 8001274:	1acb      	subs	r3, r1, r3
 8001276:	469a      	mov	sl, r3
 8001278:	2100      	movs	r1, #0
 800127a:	9e02      	ldr	r6, [sp, #8]
 800127c:	406e      	eors	r6, r5
 800127e:	b2f6      	uxtb	r6, r6
 8001280:	2c0f      	cmp	r4, #15
 8001282:	d900      	bls.n	8001286 <__aeabi_ddiv+0x96>
 8001284:	e0ce      	b.n	8001424 <__aeabi_ddiv+0x234>
 8001286:	4b63      	ldr	r3, [pc, #396]	@ (8001414 <__aeabi_ddiv+0x224>)
 8001288:	00a4      	lsls	r4, r4, #2
 800128a:	591b      	ldr	r3, [r3, r4]
 800128c:	469f      	mov	pc, r3
 800128e:	465a      	mov	r2, fp
 8001290:	4302      	orrs	r2, r0
 8001292:	4691      	mov	r9, r2
 8001294:	d000      	beq.n	8001298 <__aeabi_ddiv+0xa8>
 8001296:	e090      	b.n	80013ba <__aeabi_ddiv+0x1ca>
 8001298:	469a      	mov	sl, r3
 800129a:	2302      	movs	r3, #2
 800129c:	4690      	mov	r8, r2
 800129e:	2408      	movs	r4, #8
 80012a0:	9303      	str	r3, [sp, #12]
 80012a2:	e7cc      	b.n	800123e <__aeabi_ddiv+0x4e>
 80012a4:	46cb      	mov	fp, r9
 80012a6:	4642      	mov	r2, r8
 80012a8:	9d02      	ldr	r5, [sp, #8]
 80012aa:	9903      	ldr	r1, [sp, #12]
 80012ac:	2902      	cmp	r1, #2
 80012ae:	d100      	bne.n	80012b2 <__aeabi_ddiv+0xc2>
 80012b0:	e1de      	b.n	8001670 <__aeabi_ddiv+0x480>
 80012b2:	2903      	cmp	r1, #3
 80012b4:	d100      	bne.n	80012b8 <__aeabi_ddiv+0xc8>
 80012b6:	e08d      	b.n	80013d4 <__aeabi_ddiv+0x1e4>
 80012b8:	2901      	cmp	r1, #1
 80012ba:	d000      	beq.n	80012be <__aeabi_ddiv+0xce>
 80012bc:	e179      	b.n	80015b2 <__aeabi_ddiv+0x3c2>
 80012be:	002e      	movs	r6, r5
 80012c0:	2200      	movs	r2, #0
 80012c2:	2300      	movs	r3, #0
 80012c4:	2400      	movs	r4, #0
 80012c6:	4690      	mov	r8, r2
 80012c8:	051b      	lsls	r3, r3, #20
 80012ca:	4323      	orrs	r3, r4
 80012cc:	07f6      	lsls	r6, r6, #31
 80012ce:	4333      	orrs	r3, r6
 80012d0:	4640      	mov	r0, r8
 80012d2:	0019      	movs	r1, r3
 80012d4:	b007      	add	sp, #28
 80012d6:	bcf0      	pop	{r4, r5, r6, r7}
 80012d8:	46bb      	mov	fp, r7
 80012da:	46b2      	mov	sl, r6
 80012dc:	46a9      	mov	r9, r5
 80012de:	46a0      	mov	r8, r4
 80012e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012e2:	2200      	movs	r2, #0
 80012e4:	2400      	movs	r4, #0
 80012e6:	4690      	mov	r8, r2
 80012e8:	4b48      	ldr	r3, [pc, #288]	@ (800140c <__aeabi_ddiv+0x21c>)
 80012ea:	e7ed      	b.n	80012c8 <__aeabi_ddiv+0xd8>
 80012ec:	465a      	mov	r2, fp
 80012ee:	9b00      	ldr	r3, [sp, #0]
 80012f0:	431a      	orrs	r2, r3
 80012f2:	4b49      	ldr	r3, [pc, #292]	@ (8001418 <__aeabi_ddiv+0x228>)
 80012f4:	469c      	mov	ip, r3
 80012f6:	44e2      	add	sl, ip
 80012f8:	2a00      	cmp	r2, #0
 80012fa:	d159      	bne.n	80013b0 <__aeabi_ddiv+0x1c0>
 80012fc:	2302      	movs	r3, #2
 80012fe:	431c      	orrs	r4, r3
 8001300:	2300      	movs	r3, #0
 8001302:	2102      	movs	r1, #2
 8001304:	469b      	mov	fp, r3
 8001306:	e7b8      	b.n	800127a <__aeabi_ddiv+0x8a>
 8001308:	465a      	mov	r2, fp
 800130a:	9b00      	ldr	r3, [sp, #0]
 800130c:	431a      	orrs	r2, r3
 800130e:	d049      	beq.n	80013a4 <__aeabi_ddiv+0x1b4>
 8001310:	465b      	mov	r3, fp
 8001312:	2b00      	cmp	r3, #0
 8001314:	d100      	bne.n	8001318 <__aeabi_ddiv+0x128>
 8001316:	e19c      	b.n	8001652 <__aeabi_ddiv+0x462>
 8001318:	4658      	mov	r0, fp
 800131a:	f7ff f8c5 	bl	80004a8 <__clzsi2>
 800131e:	0002      	movs	r2, r0
 8001320:	0003      	movs	r3, r0
 8001322:	3a0b      	subs	r2, #11
 8001324:	271d      	movs	r7, #29
 8001326:	9e00      	ldr	r6, [sp, #0]
 8001328:	1aba      	subs	r2, r7, r2
 800132a:	0019      	movs	r1, r3
 800132c:	4658      	mov	r0, fp
 800132e:	40d6      	lsrs	r6, r2
 8001330:	3908      	subs	r1, #8
 8001332:	4088      	lsls	r0, r1
 8001334:	0032      	movs	r2, r6
 8001336:	4302      	orrs	r2, r0
 8001338:	4693      	mov	fp, r2
 800133a:	9a00      	ldr	r2, [sp, #0]
 800133c:	408a      	lsls	r2, r1
 800133e:	4937      	ldr	r1, [pc, #220]	@ (800141c <__aeabi_ddiv+0x22c>)
 8001340:	4453      	add	r3, sl
 8001342:	468a      	mov	sl, r1
 8001344:	2100      	movs	r1, #0
 8001346:	449a      	add	sl, r3
 8001348:	e797      	b.n	800127a <__aeabi_ddiv+0x8a>
 800134a:	465b      	mov	r3, fp
 800134c:	4303      	orrs	r3, r0
 800134e:	4699      	mov	r9, r3
 8001350:	d021      	beq.n	8001396 <__aeabi_ddiv+0x1a6>
 8001352:	465b      	mov	r3, fp
 8001354:	2b00      	cmp	r3, #0
 8001356:	d100      	bne.n	800135a <__aeabi_ddiv+0x16a>
 8001358:	e169      	b.n	800162e <__aeabi_ddiv+0x43e>
 800135a:	4658      	mov	r0, fp
 800135c:	f7ff f8a4 	bl	80004a8 <__clzsi2>
 8001360:	230b      	movs	r3, #11
 8001362:	425b      	negs	r3, r3
 8001364:	469c      	mov	ip, r3
 8001366:	0002      	movs	r2, r0
 8001368:	4484      	add	ip, r0
 800136a:	4666      	mov	r6, ip
 800136c:	231d      	movs	r3, #29
 800136e:	1b9b      	subs	r3, r3, r6
 8001370:	0026      	movs	r6, r4
 8001372:	0011      	movs	r1, r2
 8001374:	4658      	mov	r0, fp
 8001376:	40de      	lsrs	r6, r3
 8001378:	3908      	subs	r1, #8
 800137a:	4088      	lsls	r0, r1
 800137c:	0033      	movs	r3, r6
 800137e:	4303      	orrs	r3, r0
 8001380:	4699      	mov	r9, r3
 8001382:	0023      	movs	r3, r4
 8001384:	408b      	lsls	r3, r1
 8001386:	4698      	mov	r8, r3
 8001388:	4b25      	ldr	r3, [pc, #148]	@ (8001420 <__aeabi_ddiv+0x230>)
 800138a:	2400      	movs	r4, #0
 800138c:	1a9b      	subs	r3, r3, r2
 800138e:	469a      	mov	sl, r3
 8001390:	2300      	movs	r3, #0
 8001392:	9303      	str	r3, [sp, #12]
 8001394:	e753      	b.n	800123e <__aeabi_ddiv+0x4e>
 8001396:	2300      	movs	r3, #0
 8001398:	4698      	mov	r8, r3
 800139a:	469a      	mov	sl, r3
 800139c:	3301      	adds	r3, #1
 800139e:	2404      	movs	r4, #4
 80013a0:	9303      	str	r3, [sp, #12]
 80013a2:	e74c      	b.n	800123e <__aeabi_ddiv+0x4e>
 80013a4:	2301      	movs	r3, #1
 80013a6:	431c      	orrs	r4, r3
 80013a8:	2300      	movs	r3, #0
 80013aa:	2101      	movs	r1, #1
 80013ac:	469b      	mov	fp, r3
 80013ae:	e764      	b.n	800127a <__aeabi_ddiv+0x8a>
 80013b0:	2303      	movs	r3, #3
 80013b2:	0032      	movs	r2, r6
 80013b4:	2103      	movs	r1, #3
 80013b6:	431c      	orrs	r4, r3
 80013b8:	e75f      	b.n	800127a <__aeabi_ddiv+0x8a>
 80013ba:	469a      	mov	sl, r3
 80013bc:	2303      	movs	r3, #3
 80013be:	46d9      	mov	r9, fp
 80013c0:	240c      	movs	r4, #12
 80013c2:	9303      	str	r3, [sp, #12]
 80013c4:	e73b      	b.n	800123e <__aeabi_ddiv+0x4e>
 80013c6:	2300      	movs	r3, #0
 80013c8:	2480      	movs	r4, #128	@ 0x80
 80013ca:	4698      	mov	r8, r3
 80013cc:	2600      	movs	r6, #0
 80013ce:	4b0f      	ldr	r3, [pc, #60]	@ (800140c <__aeabi_ddiv+0x21c>)
 80013d0:	0324      	lsls	r4, r4, #12
 80013d2:	e779      	b.n	80012c8 <__aeabi_ddiv+0xd8>
 80013d4:	2480      	movs	r4, #128	@ 0x80
 80013d6:	465b      	mov	r3, fp
 80013d8:	0324      	lsls	r4, r4, #12
 80013da:	431c      	orrs	r4, r3
 80013dc:	0324      	lsls	r4, r4, #12
 80013de:	002e      	movs	r6, r5
 80013e0:	4690      	mov	r8, r2
 80013e2:	4b0a      	ldr	r3, [pc, #40]	@ (800140c <__aeabi_ddiv+0x21c>)
 80013e4:	0b24      	lsrs	r4, r4, #12
 80013e6:	e76f      	b.n	80012c8 <__aeabi_ddiv+0xd8>
 80013e8:	2480      	movs	r4, #128	@ 0x80
 80013ea:	464b      	mov	r3, r9
 80013ec:	0324      	lsls	r4, r4, #12
 80013ee:	4223      	tst	r3, r4
 80013f0:	d002      	beq.n	80013f8 <__aeabi_ddiv+0x208>
 80013f2:	465b      	mov	r3, fp
 80013f4:	4223      	tst	r3, r4
 80013f6:	d0f0      	beq.n	80013da <__aeabi_ddiv+0x1ea>
 80013f8:	2480      	movs	r4, #128	@ 0x80
 80013fa:	464b      	mov	r3, r9
 80013fc:	0324      	lsls	r4, r4, #12
 80013fe:	431c      	orrs	r4, r3
 8001400:	0324      	lsls	r4, r4, #12
 8001402:	9e02      	ldr	r6, [sp, #8]
 8001404:	4b01      	ldr	r3, [pc, #4]	@ (800140c <__aeabi_ddiv+0x21c>)
 8001406:	0b24      	lsrs	r4, r4, #12
 8001408:	e75e      	b.n	80012c8 <__aeabi_ddiv+0xd8>
 800140a:	46c0      	nop			@ (mov r8, r8)
 800140c:	000007ff 	.word	0x000007ff
 8001410:	fffffc01 	.word	0xfffffc01
 8001414:	0800864c 	.word	0x0800864c
 8001418:	fffff801 	.word	0xfffff801
 800141c:	000003f3 	.word	0x000003f3
 8001420:	fffffc0d 	.word	0xfffffc0d
 8001424:	45cb      	cmp	fp, r9
 8001426:	d200      	bcs.n	800142a <__aeabi_ddiv+0x23a>
 8001428:	e0f8      	b.n	800161c <__aeabi_ddiv+0x42c>
 800142a:	d100      	bne.n	800142e <__aeabi_ddiv+0x23e>
 800142c:	e0f3      	b.n	8001616 <__aeabi_ddiv+0x426>
 800142e:	2301      	movs	r3, #1
 8001430:	425b      	negs	r3, r3
 8001432:	469c      	mov	ip, r3
 8001434:	4644      	mov	r4, r8
 8001436:	4648      	mov	r0, r9
 8001438:	2500      	movs	r5, #0
 800143a:	44e2      	add	sl, ip
 800143c:	465b      	mov	r3, fp
 800143e:	0e17      	lsrs	r7, r2, #24
 8001440:	021b      	lsls	r3, r3, #8
 8001442:	431f      	orrs	r7, r3
 8001444:	0c19      	lsrs	r1, r3, #16
 8001446:	043b      	lsls	r3, r7, #16
 8001448:	0212      	lsls	r2, r2, #8
 800144a:	9700      	str	r7, [sp, #0]
 800144c:	0c1f      	lsrs	r7, r3, #16
 800144e:	4691      	mov	r9, r2
 8001450:	9102      	str	r1, [sp, #8]
 8001452:	9703      	str	r7, [sp, #12]
 8001454:	f7fe fefa 	bl	800024c <__aeabi_uidivmod>
 8001458:	0002      	movs	r2, r0
 800145a:	437a      	muls	r2, r7
 800145c:	040b      	lsls	r3, r1, #16
 800145e:	0c21      	lsrs	r1, r4, #16
 8001460:	4680      	mov	r8, r0
 8001462:	4319      	orrs	r1, r3
 8001464:	428a      	cmp	r2, r1
 8001466:	d909      	bls.n	800147c <__aeabi_ddiv+0x28c>
 8001468:	9f00      	ldr	r7, [sp, #0]
 800146a:	2301      	movs	r3, #1
 800146c:	46bc      	mov	ip, r7
 800146e:	425b      	negs	r3, r3
 8001470:	4461      	add	r1, ip
 8001472:	469c      	mov	ip, r3
 8001474:	44e0      	add	r8, ip
 8001476:	428f      	cmp	r7, r1
 8001478:	d800      	bhi.n	800147c <__aeabi_ddiv+0x28c>
 800147a:	e15c      	b.n	8001736 <__aeabi_ddiv+0x546>
 800147c:	1a88      	subs	r0, r1, r2
 800147e:	9902      	ldr	r1, [sp, #8]
 8001480:	f7fe fee4 	bl	800024c <__aeabi_uidivmod>
 8001484:	9a03      	ldr	r2, [sp, #12]
 8001486:	0424      	lsls	r4, r4, #16
 8001488:	4342      	muls	r2, r0
 800148a:	0409      	lsls	r1, r1, #16
 800148c:	0c24      	lsrs	r4, r4, #16
 800148e:	0003      	movs	r3, r0
 8001490:	430c      	orrs	r4, r1
 8001492:	42a2      	cmp	r2, r4
 8001494:	d906      	bls.n	80014a4 <__aeabi_ddiv+0x2b4>
 8001496:	9900      	ldr	r1, [sp, #0]
 8001498:	3b01      	subs	r3, #1
 800149a:	468c      	mov	ip, r1
 800149c:	4464      	add	r4, ip
 800149e:	42a1      	cmp	r1, r4
 80014a0:	d800      	bhi.n	80014a4 <__aeabi_ddiv+0x2b4>
 80014a2:	e142      	b.n	800172a <__aeabi_ddiv+0x53a>
 80014a4:	1aa0      	subs	r0, r4, r2
 80014a6:	4642      	mov	r2, r8
 80014a8:	0412      	lsls	r2, r2, #16
 80014aa:	431a      	orrs	r2, r3
 80014ac:	4693      	mov	fp, r2
 80014ae:	464b      	mov	r3, r9
 80014b0:	4659      	mov	r1, fp
 80014b2:	0c1b      	lsrs	r3, r3, #16
 80014b4:	001f      	movs	r7, r3
 80014b6:	9304      	str	r3, [sp, #16]
 80014b8:	040b      	lsls	r3, r1, #16
 80014ba:	4649      	mov	r1, r9
 80014bc:	0409      	lsls	r1, r1, #16
 80014be:	0c09      	lsrs	r1, r1, #16
 80014c0:	000c      	movs	r4, r1
 80014c2:	0c1b      	lsrs	r3, r3, #16
 80014c4:	435c      	muls	r4, r3
 80014c6:	0c12      	lsrs	r2, r2, #16
 80014c8:	437b      	muls	r3, r7
 80014ca:	4688      	mov	r8, r1
 80014cc:	4351      	muls	r1, r2
 80014ce:	437a      	muls	r2, r7
 80014d0:	0c27      	lsrs	r7, r4, #16
 80014d2:	46bc      	mov	ip, r7
 80014d4:	185b      	adds	r3, r3, r1
 80014d6:	4463      	add	r3, ip
 80014d8:	4299      	cmp	r1, r3
 80014da:	d903      	bls.n	80014e4 <__aeabi_ddiv+0x2f4>
 80014dc:	2180      	movs	r1, #128	@ 0x80
 80014de:	0249      	lsls	r1, r1, #9
 80014e0:	468c      	mov	ip, r1
 80014e2:	4462      	add	r2, ip
 80014e4:	0c19      	lsrs	r1, r3, #16
 80014e6:	0424      	lsls	r4, r4, #16
 80014e8:	041b      	lsls	r3, r3, #16
 80014ea:	0c24      	lsrs	r4, r4, #16
 80014ec:	188a      	adds	r2, r1, r2
 80014ee:	191c      	adds	r4, r3, r4
 80014f0:	4290      	cmp	r0, r2
 80014f2:	d302      	bcc.n	80014fa <__aeabi_ddiv+0x30a>
 80014f4:	d116      	bne.n	8001524 <__aeabi_ddiv+0x334>
 80014f6:	42a5      	cmp	r5, r4
 80014f8:	d214      	bcs.n	8001524 <__aeabi_ddiv+0x334>
 80014fa:	465b      	mov	r3, fp
 80014fc:	9f00      	ldr	r7, [sp, #0]
 80014fe:	3b01      	subs	r3, #1
 8001500:	444d      	add	r5, r9
 8001502:	9305      	str	r3, [sp, #20]
 8001504:	454d      	cmp	r5, r9
 8001506:	419b      	sbcs	r3, r3
 8001508:	46bc      	mov	ip, r7
 800150a:	425b      	negs	r3, r3
 800150c:	4463      	add	r3, ip
 800150e:	18c0      	adds	r0, r0, r3
 8001510:	4287      	cmp	r7, r0
 8001512:	d300      	bcc.n	8001516 <__aeabi_ddiv+0x326>
 8001514:	e102      	b.n	800171c <__aeabi_ddiv+0x52c>
 8001516:	4282      	cmp	r2, r0
 8001518:	d900      	bls.n	800151c <__aeabi_ddiv+0x32c>
 800151a:	e129      	b.n	8001770 <__aeabi_ddiv+0x580>
 800151c:	d100      	bne.n	8001520 <__aeabi_ddiv+0x330>
 800151e:	e124      	b.n	800176a <__aeabi_ddiv+0x57a>
 8001520:	9b05      	ldr	r3, [sp, #20]
 8001522:	469b      	mov	fp, r3
 8001524:	1b2c      	subs	r4, r5, r4
 8001526:	42a5      	cmp	r5, r4
 8001528:	41ad      	sbcs	r5, r5
 800152a:	9b00      	ldr	r3, [sp, #0]
 800152c:	1a80      	subs	r0, r0, r2
 800152e:	426d      	negs	r5, r5
 8001530:	1b40      	subs	r0, r0, r5
 8001532:	4283      	cmp	r3, r0
 8001534:	d100      	bne.n	8001538 <__aeabi_ddiv+0x348>
 8001536:	e10f      	b.n	8001758 <__aeabi_ddiv+0x568>
 8001538:	9902      	ldr	r1, [sp, #8]
 800153a:	f7fe fe87 	bl	800024c <__aeabi_uidivmod>
 800153e:	9a03      	ldr	r2, [sp, #12]
 8001540:	040b      	lsls	r3, r1, #16
 8001542:	4342      	muls	r2, r0
 8001544:	0c21      	lsrs	r1, r4, #16
 8001546:	0005      	movs	r5, r0
 8001548:	4319      	orrs	r1, r3
 800154a:	428a      	cmp	r2, r1
 800154c:	d900      	bls.n	8001550 <__aeabi_ddiv+0x360>
 800154e:	e0cb      	b.n	80016e8 <__aeabi_ddiv+0x4f8>
 8001550:	1a88      	subs	r0, r1, r2
 8001552:	9902      	ldr	r1, [sp, #8]
 8001554:	f7fe fe7a 	bl	800024c <__aeabi_uidivmod>
 8001558:	9a03      	ldr	r2, [sp, #12]
 800155a:	0424      	lsls	r4, r4, #16
 800155c:	4342      	muls	r2, r0
 800155e:	0409      	lsls	r1, r1, #16
 8001560:	0c24      	lsrs	r4, r4, #16
 8001562:	0003      	movs	r3, r0
 8001564:	430c      	orrs	r4, r1
 8001566:	42a2      	cmp	r2, r4
 8001568:	d900      	bls.n	800156c <__aeabi_ddiv+0x37c>
 800156a:	e0ca      	b.n	8001702 <__aeabi_ddiv+0x512>
 800156c:	4641      	mov	r1, r8
 800156e:	1aa4      	subs	r4, r4, r2
 8001570:	042a      	lsls	r2, r5, #16
 8001572:	431a      	orrs	r2, r3
 8001574:	9f04      	ldr	r7, [sp, #16]
 8001576:	0413      	lsls	r3, r2, #16
 8001578:	0c1b      	lsrs	r3, r3, #16
 800157a:	4359      	muls	r1, r3
 800157c:	4640      	mov	r0, r8
 800157e:	437b      	muls	r3, r7
 8001580:	469c      	mov	ip, r3
 8001582:	0c15      	lsrs	r5, r2, #16
 8001584:	4368      	muls	r0, r5
 8001586:	0c0b      	lsrs	r3, r1, #16
 8001588:	4484      	add	ip, r0
 800158a:	4463      	add	r3, ip
 800158c:	437d      	muls	r5, r7
 800158e:	4298      	cmp	r0, r3
 8001590:	d903      	bls.n	800159a <__aeabi_ddiv+0x3aa>
 8001592:	2080      	movs	r0, #128	@ 0x80
 8001594:	0240      	lsls	r0, r0, #9
 8001596:	4684      	mov	ip, r0
 8001598:	4465      	add	r5, ip
 800159a:	0c18      	lsrs	r0, r3, #16
 800159c:	0409      	lsls	r1, r1, #16
 800159e:	041b      	lsls	r3, r3, #16
 80015a0:	0c09      	lsrs	r1, r1, #16
 80015a2:	1940      	adds	r0, r0, r5
 80015a4:	185b      	adds	r3, r3, r1
 80015a6:	4284      	cmp	r4, r0
 80015a8:	d327      	bcc.n	80015fa <__aeabi_ddiv+0x40a>
 80015aa:	d023      	beq.n	80015f4 <__aeabi_ddiv+0x404>
 80015ac:	2301      	movs	r3, #1
 80015ae:	0035      	movs	r5, r6
 80015b0:	431a      	orrs	r2, r3
 80015b2:	4b94      	ldr	r3, [pc, #592]	@ (8001804 <__aeabi_ddiv+0x614>)
 80015b4:	4453      	add	r3, sl
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	dd60      	ble.n	800167c <__aeabi_ddiv+0x48c>
 80015ba:	0751      	lsls	r1, r2, #29
 80015bc:	d000      	beq.n	80015c0 <__aeabi_ddiv+0x3d0>
 80015be:	e086      	b.n	80016ce <__aeabi_ddiv+0x4de>
 80015c0:	002e      	movs	r6, r5
 80015c2:	08d1      	lsrs	r1, r2, #3
 80015c4:	465a      	mov	r2, fp
 80015c6:	01d2      	lsls	r2, r2, #7
 80015c8:	d506      	bpl.n	80015d8 <__aeabi_ddiv+0x3e8>
 80015ca:	465a      	mov	r2, fp
 80015cc:	4b8e      	ldr	r3, [pc, #568]	@ (8001808 <__aeabi_ddiv+0x618>)
 80015ce:	401a      	ands	r2, r3
 80015d0:	2380      	movs	r3, #128	@ 0x80
 80015d2:	4693      	mov	fp, r2
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	4453      	add	r3, sl
 80015d8:	4a8c      	ldr	r2, [pc, #560]	@ (800180c <__aeabi_ddiv+0x61c>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	dd00      	ble.n	80015e0 <__aeabi_ddiv+0x3f0>
 80015de:	e680      	b.n	80012e2 <__aeabi_ddiv+0xf2>
 80015e0:	465a      	mov	r2, fp
 80015e2:	0752      	lsls	r2, r2, #29
 80015e4:	430a      	orrs	r2, r1
 80015e6:	4690      	mov	r8, r2
 80015e8:	465a      	mov	r2, fp
 80015ea:	055b      	lsls	r3, r3, #21
 80015ec:	0254      	lsls	r4, r2, #9
 80015ee:	0b24      	lsrs	r4, r4, #12
 80015f0:	0d5b      	lsrs	r3, r3, #21
 80015f2:	e669      	b.n	80012c8 <__aeabi_ddiv+0xd8>
 80015f4:	0035      	movs	r5, r6
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d0db      	beq.n	80015b2 <__aeabi_ddiv+0x3c2>
 80015fa:	9d00      	ldr	r5, [sp, #0]
 80015fc:	1e51      	subs	r1, r2, #1
 80015fe:	46ac      	mov	ip, r5
 8001600:	4464      	add	r4, ip
 8001602:	42ac      	cmp	r4, r5
 8001604:	d200      	bcs.n	8001608 <__aeabi_ddiv+0x418>
 8001606:	e09e      	b.n	8001746 <__aeabi_ddiv+0x556>
 8001608:	4284      	cmp	r4, r0
 800160a:	d200      	bcs.n	800160e <__aeabi_ddiv+0x41e>
 800160c:	e0e1      	b.n	80017d2 <__aeabi_ddiv+0x5e2>
 800160e:	d100      	bne.n	8001612 <__aeabi_ddiv+0x422>
 8001610:	e0ee      	b.n	80017f0 <__aeabi_ddiv+0x600>
 8001612:	000a      	movs	r2, r1
 8001614:	e7ca      	b.n	80015ac <__aeabi_ddiv+0x3bc>
 8001616:	4542      	cmp	r2, r8
 8001618:	d900      	bls.n	800161c <__aeabi_ddiv+0x42c>
 800161a:	e708      	b.n	800142e <__aeabi_ddiv+0x23e>
 800161c:	464b      	mov	r3, r9
 800161e:	07dc      	lsls	r4, r3, #31
 8001620:	0858      	lsrs	r0, r3, #1
 8001622:	4643      	mov	r3, r8
 8001624:	085b      	lsrs	r3, r3, #1
 8001626:	431c      	orrs	r4, r3
 8001628:	4643      	mov	r3, r8
 800162a:	07dd      	lsls	r5, r3, #31
 800162c:	e706      	b.n	800143c <__aeabi_ddiv+0x24c>
 800162e:	f7fe ff3b 	bl	80004a8 <__clzsi2>
 8001632:	2315      	movs	r3, #21
 8001634:	469c      	mov	ip, r3
 8001636:	4484      	add	ip, r0
 8001638:	0002      	movs	r2, r0
 800163a:	4663      	mov	r3, ip
 800163c:	3220      	adds	r2, #32
 800163e:	2b1c      	cmp	r3, #28
 8001640:	dc00      	bgt.n	8001644 <__aeabi_ddiv+0x454>
 8001642:	e692      	b.n	800136a <__aeabi_ddiv+0x17a>
 8001644:	0023      	movs	r3, r4
 8001646:	3808      	subs	r0, #8
 8001648:	4083      	lsls	r3, r0
 800164a:	4699      	mov	r9, r3
 800164c:	2300      	movs	r3, #0
 800164e:	4698      	mov	r8, r3
 8001650:	e69a      	b.n	8001388 <__aeabi_ddiv+0x198>
 8001652:	f7fe ff29 	bl	80004a8 <__clzsi2>
 8001656:	0002      	movs	r2, r0
 8001658:	0003      	movs	r3, r0
 800165a:	3215      	adds	r2, #21
 800165c:	3320      	adds	r3, #32
 800165e:	2a1c      	cmp	r2, #28
 8001660:	dc00      	bgt.n	8001664 <__aeabi_ddiv+0x474>
 8001662:	e65f      	b.n	8001324 <__aeabi_ddiv+0x134>
 8001664:	9900      	ldr	r1, [sp, #0]
 8001666:	3808      	subs	r0, #8
 8001668:	4081      	lsls	r1, r0
 800166a:	2200      	movs	r2, #0
 800166c:	468b      	mov	fp, r1
 800166e:	e666      	b.n	800133e <__aeabi_ddiv+0x14e>
 8001670:	2200      	movs	r2, #0
 8001672:	002e      	movs	r6, r5
 8001674:	2400      	movs	r4, #0
 8001676:	4690      	mov	r8, r2
 8001678:	4b65      	ldr	r3, [pc, #404]	@ (8001810 <__aeabi_ddiv+0x620>)
 800167a:	e625      	b.n	80012c8 <__aeabi_ddiv+0xd8>
 800167c:	002e      	movs	r6, r5
 800167e:	2101      	movs	r1, #1
 8001680:	1ac9      	subs	r1, r1, r3
 8001682:	2938      	cmp	r1, #56	@ 0x38
 8001684:	dd00      	ble.n	8001688 <__aeabi_ddiv+0x498>
 8001686:	e61b      	b.n	80012c0 <__aeabi_ddiv+0xd0>
 8001688:	291f      	cmp	r1, #31
 800168a:	dc7e      	bgt.n	800178a <__aeabi_ddiv+0x59a>
 800168c:	4861      	ldr	r0, [pc, #388]	@ (8001814 <__aeabi_ddiv+0x624>)
 800168e:	0014      	movs	r4, r2
 8001690:	4450      	add	r0, sl
 8001692:	465b      	mov	r3, fp
 8001694:	4082      	lsls	r2, r0
 8001696:	4083      	lsls	r3, r0
 8001698:	40cc      	lsrs	r4, r1
 800169a:	1e50      	subs	r0, r2, #1
 800169c:	4182      	sbcs	r2, r0
 800169e:	4323      	orrs	r3, r4
 80016a0:	431a      	orrs	r2, r3
 80016a2:	465b      	mov	r3, fp
 80016a4:	40cb      	lsrs	r3, r1
 80016a6:	0751      	lsls	r1, r2, #29
 80016a8:	d009      	beq.n	80016be <__aeabi_ddiv+0x4ce>
 80016aa:	210f      	movs	r1, #15
 80016ac:	4011      	ands	r1, r2
 80016ae:	2904      	cmp	r1, #4
 80016b0:	d005      	beq.n	80016be <__aeabi_ddiv+0x4ce>
 80016b2:	1d11      	adds	r1, r2, #4
 80016b4:	4291      	cmp	r1, r2
 80016b6:	4192      	sbcs	r2, r2
 80016b8:	4252      	negs	r2, r2
 80016ba:	189b      	adds	r3, r3, r2
 80016bc:	000a      	movs	r2, r1
 80016be:	0219      	lsls	r1, r3, #8
 80016c0:	d400      	bmi.n	80016c4 <__aeabi_ddiv+0x4d4>
 80016c2:	e09b      	b.n	80017fc <__aeabi_ddiv+0x60c>
 80016c4:	2200      	movs	r2, #0
 80016c6:	2301      	movs	r3, #1
 80016c8:	2400      	movs	r4, #0
 80016ca:	4690      	mov	r8, r2
 80016cc:	e5fc      	b.n	80012c8 <__aeabi_ddiv+0xd8>
 80016ce:	210f      	movs	r1, #15
 80016d0:	4011      	ands	r1, r2
 80016d2:	2904      	cmp	r1, #4
 80016d4:	d100      	bne.n	80016d8 <__aeabi_ddiv+0x4e8>
 80016d6:	e773      	b.n	80015c0 <__aeabi_ddiv+0x3d0>
 80016d8:	1d11      	adds	r1, r2, #4
 80016da:	4291      	cmp	r1, r2
 80016dc:	4192      	sbcs	r2, r2
 80016de:	4252      	negs	r2, r2
 80016e0:	002e      	movs	r6, r5
 80016e2:	08c9      	lsrs	r1, r1, #3
 80016e4:	4493      	add	fp, r2
 80016e6:	e76d      	b.n	80015c4 <__aeabi_ddiv+0x3d4>
 80016e8:	9b00      	ldr	r3, [sp, #0]
 80016ea:	3d01      	subs	r5, #1
 80016ec:	469c      	mov	ip, r3
 80016ee:	4461      	add	r1, ip
 80016f0:	428b      	cmp	r3, r1
 80016f2:	d900      	bls.n	80016f6 <__aeabi_ddiv+0x506>
 80016f4:	e72c      	b.n	8001550 <__aeabi_ddiv+0x360>
 80016f6:	428a      	cmp	r2, r1
 80016f8:	d800      	bhi.n	80016fc <__aeabi_ddiv+0x50c>
 80016fa:	e729      	b.n	8001550 <__aeabi_ddiv+0x360>
 80016fc:	1e85      	subs	r5, r0, #2
 80016fe:	4461      	add	r1, ip
 8001700:	e726      	b.n	8001550 <__aeabi_ddiv+0x360>
 8001702:	9900      	ldr	r1, [sp, #0]
 8001704:	3b01      	subs	r3, #1
 8001706:	468c      	mov	ip, r1
 8001708:	4464      	add	r4, ip
 800170a:	42a1      	cmp	r1, r4
 800170c:	d900      	bls.n	8001710 <__aeabi_ddiv+0x520>
 800170e:	e72d      	b.n	800156c <__aeabi_ddiv+0x37c>
 8001710:	42a2      	cmp	r2, r4
 8001712:	d800      	bhi.n	8001716 <__aeabi_ddiv+0x526>
 8001714:	e72a      	b.n	800156c <__aeabi_ddiv+0x37c>
 8001716:	1e83      	subs	r3, r0, #2
 8001718:	4464      	add	r4, ip
 800171a:	e727      	b.n	800156c <__aeabi_ddiv+0x37c>
 800171c:	4287      	cmp	r7, r0
 800171e:	d000      	beq.n	8001722 <__aeabi_ddiv+0x532>
 8001720:	e6fe      	b.n	8001520 <__aeabi_ddiv+0x330>
 8001722:	45a9      	cmp	r9, r5
 8001724:	d900      	bls.n	8001728 <__aeabi_ddiv+0x538>
 8001726:	e6fb      	b.n	8001520 <__aeabi_ddiv+0x330>
 8001728:	e6f5      	b.n	8001516 <__aeabi_ddiv+0x326>
 800172a:	42a2      	cmp	r2, r4
 800172c:	d800      	bhi.n	8001730 <__aeabi_ddiv+0x540>
 800172e:	e6b9      	b.n	80014a4 <__aeabi_ddiv+0x2b4>
 8001730:	1e83      	subs	r3, r0, #2
 8001732:	4464      	add	r4, ip
 8001734:	e6b6      	b.n	80014a4 <__aeabi_ddiv+0x2b4>
 8001736:	428a      	cmp	r2, r1
 8001738:	d800      	bhi.n	800173c <__aeabi_ddiv+0x54c>
 800173a:	e69f      	b.n	800147c <__aeabi_ddiv+0x28c>
 800173c:	46bc      	mov	ip, r7
 800173e:	1e83      	subs	r3, r0, #2
 8001740:	4698      	mov	r8, r3
 8001742:	4461      	add	r1, ip
 8001744:	e69a      	b.n	800147c <__aeabi_ddiv+0x28c>
 8001746:	000a      	movs	r2, r1
 8001748:	4284      	cmp	r4, r0
 800174a:	d000      	beq.n	800174e <__aeabi_ddiv+0x55e>
 800174c:	e72e      	b.n	80015ac <__aeabi_ddiv+0x3bc>
 800174e:	454b      	cmp	r3, r9
 8001750:	d000      	beq.n	8001754 <__aeabi_ddiv+0x564>
 8001752:	e72b      	b.n	80015ac <__aeabi_ddiv+0x3bc>
 8001754:	0035      	movs	r5, r6
 8001756:	e72c      	b.n	80015b2 <__aeabi_ddiv+0x3c2>
 8001758:	4b2a      	ldr	r3, [pc, #168]	@ (8001804 <__aeabi_ddiv+0x614>)
 800175a:	4a2f      	ldr	r2, [pc, #188]	@ (8001818 <__aeabi_ddiv+0x628>)
 800175c:	4453      	add	r3, sl
 800175e:	4592      	cmp	sl, r2
 8001760:	db43      	blt.n	80017ea <__aeabi_ddiv+0x5fa>
 8001762:	2201      	movs	r2, #1
 8001764:	2100      	movs	r1, #0
 8001766:	4493      	add	fp, r2
 8001768:	e72c      	b.n	80015c4 <__aeabi_ddiv+0x3d4>
 800176a:	42ac      	cmp	r4, r5
 800176c:	d800      	bhi.n	8001770 <__aeabi_ddiv+0x580>
 800176e:	e6d7      	b.n	8001520 <__aeabi_ddiv+0x330>
 8001770:	2302      	movs	r3, #2
 8001772:	425b      	negs	r3, r3
 8001774:	469c      	mov	ip, r3
 8001776:	9900      	ldr	r1, [sp, #0]
 8001778:	444d      	add	r5, r9
 800177a:	454d      	cmp	r5, r9
 800177c:	419b      	sbcs	r3, r3
 800177e:	44e3      	add	fp, ip
 8001780:	468c      	mov	ip, r1
 8001782:	425b      	negs	r3, r3
 8001784:	4463      	add	r3, ip
 8001786:	18c0      	adds	r0, r0, r3
 8001788:	e6cc      	b.n	8001524 <__aeabi_ddiv+0x334>
 800178a:	201f      	movs	r0, #31
 800178c:	4240      	negs	r0, r0
 800178e:	1ac3      	subs	r3, r0, r3
 8001790:	4658      	mov	r0, fp
 8001792:	40d8      	lsrs	r0, r3
 8001794:	2920      	cmp	r1, #32
 8001796:	d004      	beq.n	80017a2 <__aeabi_ddiv+0x5b2>
 8001798:	4659      	mov	r1, fp
 800179a:	4b20      	ldr	r3, [pc, #128]	@ (800181c <__aeabi_ddiv+0x62c>)
 800179c:	4453      	add	r3, sl
 800179e:	4099      	lsls	r1, r3
 80017a0:	430a      	orrs	r2, r1
 80017a2:	1e53      	subs	r3, r2, #1
 80017a4:	419a      	sbcs	r2, r3
 80017a6:	2307      	movs	r3, #7
 80017a8:	0019      	movs	r1, r3
 80017aa:	4302      	orrs	r2, r0
 80017ac:	2400      	movs	r4, #0
 80017ae:	4011      	ands	r1, r2
 80017b0:	4213      	tst	r3, r2
 80017b2:	d009      	beq.n	80017c8 <__aeabi_ddiv+0x5d8>
 80017b4:	3308      	adds	r3, #8
 80017b6:	4013      	ands	r3, r2
 80017b8:	2b04      	cmp	r3, #4
 80017ba:	d01d      	beq.n	80017f8 <__aeabi_ddiv+0x608>
 80017bc:	1d13      	adds	r3, r2, #4
 80017be:	4293      	cmp	r3, r2
 80017c0:	4189      	sbcs	r1, r1
 80017c2:	001a      	movs	r2, r3
 80017c4:	4249      	negs	r1, r1
 80017c6:	0749      	lsls	r1, r1, #29
 80017c8:	08d2      	lsrs	r2, r2, #3
 80017ca:	430a      	orrs	r2, r1
 80017cc:	4690      	mov	r8, r2
 80017ce:	2300      	movs	r3, #0
 80017d0:	e57a      	b.n	80012c8 <__aeabi_ddiv+0xd8>
 80017d2:	4649      	mov	r1, r9
 80017d4:	9f00      	ldr	r7, [sp, #0]
 80017d6:	004d      	lsls	r5, r1, #1
 80017d8:	454d      	cmp	r5, r9
 80017da:	4189      	sbcs	r1, r1
 80017dc:	46bc      	mov	ip, r7
 80017de:	4249      	negs	r1, r1
 80017e0:	4461      	add	r1, ip
 80017e2:	46a9      	mov	r9, r5
 80017e4:	3a02      	subs	r2, #2
 80017e6:	1864      	adds	r4, r4, r1
 80017e8:	e7ae      	b.n	8001748 <__aeabi_ddiv+0x558>
 80017ea:	2201      	movs	r2, #1
 80017ec:	4252      	negs	r2, r2
 80017ee:	e746      	b.n	800167e <__aeabi_ddiv+0x48e>
 80017f0:	4599      	cmp	r9, r3
 80017f2:	d3ee      	bcc.n	80017d2 <__aeabi_ddiv+0x5e2>
 80017f4:	000a      	movs	r2, r1
 80017f6:	e7aa      	b.n	800174e <__aeabi_ddiv+0x55e>
 80017f8:	2100      	movs	r1, #0
 80017fa:	e7e5      	b.n	80017c8 <__aeabi_ddiv+0x5d8>
 80017fc:	0759      	lsls	r1, r3, #29
 80017fe:	025b      	lsls	r3, r3, #9
 8001800:	0b1c      	lsrs	r4, r3, #12
 8001802:	e7e1      	b.n	80017c8 <__aeabi_ddiv+0x5d8>
 8001804:	000003ff 	.word	0x000003ff
 8001808:	feffffff 	.word	0xfeffffff
 800180c:	000007fe 	.word	0x000007fe
 8001810:	000007ff 	.word	0x000007ff
 8001814:	0000041e 	.word	0x0000041e
 8001818:	fffffc02 	.word	0xfffffc02
 800181c:	0000043e 	.word	0x0000043e

08001820 <__eqdf2>:
 8001820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001822:	4657      	mov	r7, sl
 8001824:	46de      	mov	lr, fp
 8001826:	464e      	mov	r6, r9
 8001828:	4645      	mov	r5, r8
 800182a:	b5e0      	push	{r5, r6, r7, lr}
 800182c:	000d      	movs	r5, r1
 800182e:	0004      	movs	r4, r0
 8001830:	0fe8      	lsrs	r0, r5, #31
 8001832:	4683      	mov	fp, r0
 8001834:	0309      	lsls	r1, r1, #12
 8001836:	0fd8      	lsrs	r0, r3, #31
 8001838:	0b09      	lsrs	r1, r1, #12
 800183a:	4682      	mov	sl, r0
 800183c:	4819      	ldr	r0, [pc, #100]	@ (80018a4 <__eqdf2+0x84>)
 800183e:	468c      	mov	ip, r1
 8001840:	031f      	lsls	r7, r3, #12
 8001842:	0069      	lsls	r1, r5, #1
 8001844:	005e      	lsls	r6, r3, #1
 8001846:	0d49      	lsrs	r1, r1, #21
 8001848:	0b3f      	lsrs	r7, r7, #12
 800184a:	0d76      	lsrs	r6, r6, #21
 800184c:	4281      	cmp	r1, r0
 800184e:	d018      	beq.n	8001882 <__eqdf2+0x62>
 8001850:	4286      	cmp	r6, r0
 8001852:	d00f      	beq.n	8001874 <__eqdf2+0x54>
 8001854:	2001      	movs	r0, #1
 8001856:	42b1      	cmp	r1, r6
 8001858:	d10d      	bne.n	8001876 <__eqdf2+0x56>
 800185a:	45bc      	cmp	ip, r7
 800185c:	d10b      	bne.n	8001876 <__eqdf2+0x56>
 800185e:	4294      	cmp	r4, r2
 8001860:	d109      	bne.n	8001876 <__eqdf2+0x56>
 8001862:	45d3      	cmp	fp, sl
 8001864:	d01c      	beq.n	80018a0 <__eqdf2+0x80>
 8001866:	2900      	cmp	r1, #0
 8001868:	d105      	bne.n	8001876 <__eqdf2+0x56>
 800186a:	4660      	mov	r0, ip
 800186c:	4320      	orrs	r0, r4
 800186e:	1e43      	subs	r3, r0, #1
 8001870:	4198      	sbcs	r0, r3
 8001872:	e000      	b.n	8001876 <__eqdf2+0x56>
 8001874:	2001      	movs	r0, #1
 8001876:	bcf0      	pop	{r4, r5, r6, r7}
 8001878:	46bb      	mov	fp, r7
 800187a:	46b2      	mov	sl, r6
 800187c:	46a9      	mov	r9, r5
 800187e:	46a0      	mov	r8, r4
 8001880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001882:	2001      	movs	r0, #1
 8001884:	428e      	cmp	r6, r1
 8001886:	d1f6      	bne.n	8001876 <__eqdf2+0x56>
 8001888:	4661      	mov	r1, ip
 800188a:	4339      	orrs	r1, r7
 800188c:	000f      	movs	r7, r1
 800188e:	4317      	orrs	r7, r2
 8001890:	4327      	orrs	r7, r4
 8001892:	d1f0      	bne.n	8001876 <__eqdf2+0x56>
 8001894:	465b      	mov	r3, fp
 8001896:	4652      	mov	r2, sl
 8001898:	1a98      	subs	r0, r3, r2
 800189a:	1e43      	subs	r3, r0, #1
 800189c:	4198      	sbcs	r0, r3
 800189e:	e7ea      	b.n	8001876 <__eqdf2+0x56>
 80018a0:	2000      	movs	r0, #0
 80018a2:	e7e8      	b.n	8001876 <__eqdf2+0x56>
 80018a4:	000007ff 	.word	0x000007ff

080018a8 <__gedf2>:
 80018a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018aa:	4657      	mov	r7, sl
 80018ac:	464e      	mov	r6, r9
 80018ae:	4645      	mov	r5, r8
 80018b0:	46de      	mov	lr, fp
 80018b2:	b5e0      	push	{r5, r6, r7, lr}
 80018b4:	000d      	movs	r5, r1
 80018b6:	030e      	lsls	r6, r1, #12
 80018b8:	0049      	lsls	r1, r1, #1
 80018ba:	0d49      	lsrs	r1, r1, #21
 80018bc:	468a      	mov	sl, r1
 80018be:	0fdf      	lsrs	r7, r3, #31
 80018c0:	0fe9      	lsrs	r1, r5, #31
 80018c2:	46bc      	mov	ip, r7
 80018c4:	b083      	sub	sp, #12
 80018c6:	4f2f      	ldr	r7, [pc, #188]	@ (8001984 <__gedf2+0xdc>)
 80018c8:	0004      	movs	r4, r0
 80018ca:	4680      	mov	r8, r0
 80018cc:	9101      	str	r1, [sp, #4]
 80018ce:	0058      	lsls	r0, r3, #1
 80018d0:	0319      	lsls	r1, r3, #12
 80018d2:	4691      	mov	r9, r2
 80018d4:	0b36      	lsrs	r6, r6, #12
 80018d6:	0b09      	lsrs	r1, r1, #12
 80018d8:	0d40      	lsrs	r0, r0, #21
 80018da:	45ba      	cmp	sl, r7
 80018dc:	d01d      	beq.n	800191a <__gedf2+0x72>
 80018de:	42b8      	cmp	r0, r7
 80018e0:	d00d      	beq.n	80018fe <__gedf2+0x56>
 80018e2:	4657      	mov	r7, sl
 80018e4:	2f00      	cmp	r7, #0
 80018e6:	d12a      	bne.n	800193e <__gedf2+0x96>
 80018e8:	4334      	orrs	r4, r6
 80018ea:	2800      	cmp	r0, #0
 80018ec:	d124      	bne.n	8001938 <__gedf2+0x90>
 80018ee:	430a      	orrs	r2, r1
 80018f0:	d036      	beq.n	8001960 <__gedf2+0xb8>
 80018f2:	2c00      	cmp	r4, #0
 80018f4:	d141      	bne.n	800197a <__gedf2+0xd2>
 80018f6:	4663      	mov	r3, ip
 80018f8:	0058      	lsls	r0, r3, #1
 80018fa:	3801      	subs	r0, #1
 80018fc:	e015      	b.n	800192a <__gedf2+0x82>
 80018fe:	4311      	orrs	r1, r2
 8001900:	d138      	bne.n	8001974 <__gedf2+0xcc>
 8001902:	4653      	mov	r3, sl
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <__gedf2+0x64>
 8001908:	4326      	orrs	r6, r4
 800190a:	d0f4      	beq.n	80018f6 <__gedf2+0x4e>
 800190c:	9b01      	ldr	r3, [sp, #4]
 800190e:	4563      	cmp	r3, ip
 8001910:	d107      	bne.n	8001922 <__gedf2+0x7a>
 8001912:	9b01      	ldr	r3, [sp, #4]
 8001914:	0058      	lsls	r0, r3, #1
 8001916:	3801      	subs	r0, #1
 8001918:	e007      	b.n	800192a <__gedf2+0x82>
 800191a:	4326      	orrs	r6, r4
 800191c:	d12a      	bne.n	8001974 <__gedf2+0xcc>
 800191e:	4550      	cmp	r0, sl
 8001920:	d021      	beq.n	8001966 <__gedf2+0xbe>
 8001922:	2001      	movs	r0, #1
 8001924:	9b01      	ldr	r3, [sp, #4]
 8001926:	425f      	negs	r7, r3
 8001928:	4338      	orrs	r0, r7
 800192a:	b003      	add	sp, #12
 800192c:	bcf0      	pop	{r4, r5, r6, r7}
 800192e:	46bb      	mov	fp, r7
 8001930:	46b2      	mov	sl, r6
 8001932:	46a9      	mov	r9, r5
 8001934:	46a0      	mov	r8, r4
 8001936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001938:	2c00      	cmp	r4, #0
 800193a:	d0dc      	beq.n	80018f6 <__gedf2+0x4e>
 800193c:	e7e6      	b.n	800190c <__gedf2+0x64>
 800193e:	2800      	cmp	r0, #0
 8001940:	d0ef      	beq.n	8001922 <__gedf2+0x7a>
 8001942:	9b01      	ldr	r3, [sp, #4]
 8001944:	4563      	cmp	r3, ip
 8001946:	d1ec      	bne.n	8001922 <__gedf2+0x7a>
 8001948:	4582      	cmp	sl, r0
 800194a:	dcea      	bgt.n	8001922 <__gedf2+0x7a>
 800194c:	dbe1      	blt.n	8001912 <__gedf2+0x6a>
 800194e:	428e      	cmp	r6, r1
 8001950:	d8e7      	bhi.n	8001922 <__gedf2+0x7a>
 8001952:	d1de      	bne.n	8001912 <__gedf2+0x6a>
 8001954:	45c8      	cmp	r8, r9
 8001956:	d8e4      	bhi.n	8001922 <__gedf2+0x7a>
 8001958:	2000      	movs	r0, #0
 800195a:	45c8      	cmp	r8, r9
 800195c:	d2e5      	bcs.n	800192a <__gedf2+0x82>
 800195e:	e7d8      	b.n	8001912 <__gedf2+0x6a>
 8001960:	2c00      	cmp	r4, #0
 8001962:	d0e2      	beq.n	800192a <__gedf2+0x82>
 8001964:	e7dd      	b.n	8001922 <__gedf2+0x7a>
 8001966:	4311      	orrs	r1, r2
 8001968:	d104      	bne.n	8001974 <__gedf2+0xcc>
 800196a:	9b01      	ldr	r3, [sp, #4]
 800196c:	4563      	cmp	r3, ip
 800196e:	d1d8      	bne.n	8001922 <__gedf2+0x7a>
 8001970:	2000      	movs	r0, #0
 8001972:	e7da      	b.n	800192a <__gedf2+0x82>
 8001974:	2002      	movs	r0, #2
 8001976:	4240      	negs	r0, r0
 8001978:	e7d7      	b.n	800192a <__gedf2+0x82>
 800197a:	9b01      	ldr	r3, [sp, #4]
 800197c:	4563      	cmp	r3, ip
 800197e:	d0e6      	beq.n	800194e <__gedf2+0xa6>
 8001980:	e7cf      	b.n	8001922 <__gedf2+0x7a>
 8001982:	46c0      	nop			@ (mov r8, r8)
 8001984:	000007ff 	.word	0x000007ff

08001988 <__ledf2>:
 8001988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800198a:	4657      	mov	r7, sl
 800198c:	464e      	mov	r6, r9
 800198e:	4645      	mov	r5, r8
 8001990:	46de      	mov	lr, fp
 8001992:	b5e0      	push	{r5, r6, r7, lr}
 8001994:	000d      	movs	r5, r1
 8001996:	030e      	lsls	r6, r1, #12
 8001998:	0049      	lsls	r1, r1, #1
 800199a:	0d49      	lsrs	r1, r1, #21
 800199c:	468a      	mov	sl, r1
 800199e:	0fdf      	lsrs	r7, r3, #31
 80019a0:	0fe9      	lsrs	r1, r5, #31
 80019a2:	46bc      	mov	ip, r7
 80019a4:	b083      	sub	sp, #12
 80019a6:	4f2e      	ldr	r7, [pc, #184]	@ (8001a60 <__ledf2+0xd8>)
 80019a8:	0004      	movs	r4, r0
 80019aa:	4680      	mov	r8, r0
 80019ac:	9101      	str	r1, [sp, #4]
 80019ae:	0058      	lsls	r0, r3, #1
 80019b0:	0319      	lsls	r1, r3, #12
 80019b2:	4691      	mov	r9, r2
 80019b4:	0b36      	lsrs	r6, r6, #12
 80019b6:	0b09      	lsrs	r1, r1, #12
 80019b8:	0d40      	lsrs	r0, r0, #21
 80019ba:	45ba      	cmp	sl, r7
 80019bc:	d01e      	beq.n	80019fc <__ledf2+0x74>
 80019be:	42b8      	cmp	r0, r7
 80019c0:	d00d      	beq.n	80019de <__ledf2+0x56>
 80019c2:	4657      	mov	r7, sl
 80019c4:	2f00      	cmp	r7, #0
 80019c6:	d127      	bne.n	8001a18 <__ledf2+0x90>
 80019c8:	4334      	orrs	r4, r6
 80019ca:	2800      	cmp	r0, #0
 80019cc:	d133      	bne.n	8001a36 <__ledf2+0xae>
 80019ce:	430a      	orrs	r2, r1
 80019d0:	d034      	beq.n	8001a3c <__ledf2+0xb4>
 80019d2:	2c00      	cmp	r4, #0
 80019d4:	d140      	bne.n	8001a58 <__ledf2+0xd0>
 80019d6:	4663      	mov	r3, ip
 80019d8:	0058      	lsls	r0, r3, #1
 80019da:	3801      	subs	r0, #1
 80019dc:	e015      	b.n	8001a0a <__ledf2+0x82>
 80019de:	4311      	orrs	r1, r2
 80019e0:	d112      	bne.n	8001a08 <__ledf2+0x80>
 80019e2:	4653      	mov	r3, sl
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d101      	bne.n	80019ec <__ledf2+0x64>
 80019e8:	4326      	orrs	r6, r4
 80019ea:	d0f4      	beq.n	80019d6 <__ledf2+0x4e>
 80019ec:	9b01      	ldr	r3, [sp, #4]
 80019ee:	4563      	cmp	r3, ip
 80019f0:	d01d      	beq.n	8001a2e <__ledf2+0xa6>
 80019f2:	2001      	movs	r0, #1
 80019f4:	9b01      	ldr	r3, [sp, #4]
 80019f6:	425f      	negs	r7, r3
 80019f8:	4338      	orrs	r0, r7
 80019fa:	e006      	b.n	8001a0a <__ledf2+0x82>
 80019fc:	4326      	orrs	r6, r4
 80019fe:	d103      	bne.n	8001a08 <__ledf2+0x80>
 8001a00:	4550      	cmp	r0, sl
 8001a02:	d1f6      	bne.n	80019f2 <__ledf2+0x6a>
 8001a04:	4311      	orrs	r1, r2
 8001a06:	d01c      	beq.n	8001a42 <__ledf2+0xba>
 8001a08:	2002      	movs	r0, #2
 8001a0a:	b003      	add	sp, #12
 8001a0c:	bcf0      	pop	{r4, r5, r6, r7}
 8001a0e:	46bb      	mov	fp, r7
 8001a10:	46b2      	mov	sl, r6
 8001a12:	46a9      	mov	r9, r5
 8001a14:	46a0      	mov	r8, r4
 8001a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a18:	2800      	cmp	r0, #0
 8001a1a:	d0ea      	beq.n	80019f2 <__ledf2+0x6a>
 8001a1c:	9b01      	ldr	r3, [sp, #4]
 8001a1e:	4563      	cmp	r3, ip
 8001a20:	d1e7      	bne.n	80019f2 <__ledf2+0x6a>
 8001a22:	4582      	cmp	sl, r0
 8001a24:	dce5      	bgt.n	80019f2 <__ledf2+0x6a>
 8001a26:	db02      	blt.n	8001a2e <__ledf2+0xa6>
 8001a28:	428e      	cmp	r6, r1
 8001a2a:	d8e2      	bhi.n	80019f2 <__ledf2+0x6a>
 8001a2c:	d00e      	beq.n	8001a4c <__ledf2+0xc4>
 8001a2e:	9b01      	ldr	r3, [sp, #4]
 8001a30:	0058      	lsls	r0, r3, #1
 8001a32:	3801      	subs	r0, #1
 8001a34:	e7e9      	b.n	8001a0a <__ledf2+0x82>
 8001a36:	2c00      	cmp	r4, #0
 8001a38:	d0cd      	beq.n	80019d6 <__ledf2+0x4e>
 8001a3a:	e7d7      	b.n	80019ec <__ledf2+0x64>
 8001a3c:	2c00      	cmp	r4, #0
 8001a3e:	d0e4      	beq.n	8001a0a <__ledf2+0x82>
 8001a40:	e7d7      	b.n	80019f2 <__ledf2+0x6a>
 8001a42:	9b01      	ldr	r3, [sp, #4]
 8001a44:	2000      	movs	r0, #0
 8001a46:	4563      	cmp	r3, ip
 8001a48:	d0df      	beq.n	8001a0a <__ledf2+0x82>
 8001a4a:	e7d2      	b.n	80019f2 <__ledf2+0x6a>
 8001a4c:	45c8      	cmp	r8, r9
 8001a4e:	d8d0      	bhi.n	80019f2 <__ledf2+0x6a>
 8001a50:	2000      	movs	r0, #0
 8001a52:	45c8      	cmp	r8, r9
 8001a54:	d2d9      	bcs.n	8001a0a <__ledf2+0x82>
 8001a56:	e7ea      	b.n	8001a2e <__ledf2+0xa6>
 8001a58:	9b01      	ldr	r3, [sp, #4]
 8001a5a:	4563      	cmp	r3, ip
 8001a5c:	d0e4      	beq.n	8001a28 <__ledf2+0xa0>
 8001a5e:	e7c8      	b.n	80019f2 <__ledf2+0x6a>
 8001a60:	000007ff 	.word	0x000007ff

08001a64 <__aeabi_dmul>:
 8001a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a66:	4657      	mov	r7, sl
 8001a68:	464e      	mov	r6, r9
 8001a6a:	46de      	mov	lr, fp
 8001a6c:	4645      	mov	r5, r8
 8001a6e:	b5e0      	push	{r5, r6, r7, lr}
 8001a70:	001f      	movs	r7, r3
 8001a72:	030b      	lsls	r3, r1, #12
 8001a74:	0b1b      	lsrs	r3, r3, #12
 8001a76:	0016      	movs	r6, r2
 8001a78:	469a      	mov	sl, r3
 8001a7a:	0fca      	lsrs	r2, r1, #31
 8001a7c:	004b      	lsls	r3, r1, #1
 8001a7e:	0004      	movs	r4, r0
 8001a80:	4691      	mov	r9, r2
 8001a82:	b085      	sub	sp, #20
 8001a84:	0d5b      	lsrs	r3, r3, #21
 8001a86:	d100      	bne.n	8001a8a <__aeabi_dmul+0x26>
 8001a88:	e1cf      	b.n	8001e2a <__aeabi_dmul+0x3c6>
 8001a8a:	4acd      	ldr	r2, [pc, #820]	@ (8001dc0 <__aeabi_dmul+0x35c>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d055      	beq.n	8001b3c <__aeabi_dmul+0xd8>
 8001a90:	4651      	mov	r1, sl
 8001a92:	0f42      	lsrs	r2, r0, #29
 8001a94:	00c9      	lsls	r1, r1, #3
 8001a96:	430a      	orrs	r2, r1
 8001a98:	2180      	movs	r1, #128	@ 0x80
 8001a9a:	0409      	lsls	r1, r1, #16
 8001a9c:	4311      	orrs	r1, r2
 8001a9e:	00c2      	lsls	r2, r0, #3
 8001aa0:	4690      	mov	r8, r2
 8001aa2:	4ac8      	ldr	r2, [pc, #800]	@ (8001dc4 <__aeabi_dmul+0x360>)
 8001aa4:	468a      	mov	sl, r1
 8001aa6:	4693      	mov	fp, r2
 8001aa8:	449b      	add	fp, r3
 8001aaa:	2300      	movs	r3, #0
 8001aac:	2500      	movs	r5, #0
 8001aae:	9302      	str	r3, [sp, #8]
 8001ab0:	033c      	lsls	r4, r7, #12
 8001ab2:	007b      	lsls	r3, r7, #1
 8001ab4:	0ffa      	lsrs	r2, r7, #31
 8001ab6:	9601      	str	r6, [sp, #4]
 8001ab8:	0b24      	lsrs	r4, r4, #12
 8001aba:	0d5b      	lsrs	r3, r3, #21
 8001abc:	9200      	str	r2, [sp, #0]
 8001abe:	d100      	bne.n	8001ac2 <__aeabi_dmul+0x5e>
 8001ac0:	e188      	b.n	8001dd4 <__aeabi_dmul+0x370>
 8001ac2:	4abf      	ldr	r2, [pc, #764]	@ (8001dc0 <__aeabi_dmul+0x35c>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dmul+0x66>
 8001ac8:	e092      	b.n	8001bf0 <__aeabi_dmul+0x18c>
 8001aca:	4abe      	ldr	r2, [pc, #760]	@ (8001dc4 <__aeabi_dmul+0x360>)
 8001acc:	4694      	mov	ip, r2
 8001ace:	4463      	add	r3, ip
 8001ad0:	449b      	add	fp, r3
 8001ad2:	2d0a      	cmp	r5, #10
 8001ad4:	dc42      	bgt.n	8001b5c <__aeabi_dmul+0xf8>
 8001ad6:	00e4      	lsls	r4, r4, #3
 8001ad8:	0f73      	lsrs	r3, r6, #29
 8001ada:	4323      	orrs	r3, r4
 8001adc:	2480      	movs	r4, #128	@ 0x80
 8001ade:	4649      	mov	r1, r9
 8001ae0:	0424      	lsls	r4, r4, #16
 8001ae2:	431c      	orrs	r4, r3
 8001ae4:	00f3      	lsls	r3, r6, #3
 8001ae6:	9301      	str	r3, [sp, #4]
 8001ae8:	9b00      	ldr	r3, [sp, #0]
 8001aea:	2000      	movs	r0, #0
 8001aec:	4059      	eors	r1, r3
 8001aee:	b2cb      	uxtb	r3, r1
 8001af0:	9303      	str	r3, [sp, #12]
 8001af2:	2d02      	cmp	r5, #2
 8001af4:	dc00      	bgt.n	8001af8 <__aeabi_dmul+0x94>
 8001af6:	e094      	b.n	8001c22 <__aeabi_dmul+0x1be>
 8001af8:	2301      	movs	r3, #1
 8001afa:	40ab      	lsls	r3, r5
 8001afc:	001d      	movs	r5, r3
 8001afe:	23a6      	movs	r3, #166	@ 0xa6
 8001b00:	002a      	movs	r2, r5
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	401a      	ands	r2, r3
 8001b06:	421d      	tst	r5, r3
 8001b08:	d000      	beq.n	8001b0c <__aeabi_dmul+0xa8>
 8001b0a:	e229      	b.n	8001f60 <__aeabi_dmul+0x4fc>
 8001b0c:	2390      	movs	r3, #144	@ 0x90
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	421d      	tst	r5, r3
 8001b12:	d100      	bne.n	8001b16 <__aeabi_dmul+0xb2>
 8001b14:	e24d      	b.n	8001fb2 <__aeabi_dmul+0x54e>
 8001b16:	2300      	movs	r3, #0
 8001b18:	2480      	movs	r4, #128	@ 0x80
 8001b1a:	4699      	mov	r9, r3
 8001b1c:	0324      	lsls	r4, r4, #12
 8001b1e:	4ba8      	ldr	r3, [pc, #672]	@ (8001dc0 <__aeabi_dmul+0x35c>)
 8001b20:	0010      	movs	r0, r2
 8001b22:	464a      	mov	r2, r9
 8001b24:	051b      	lsls	r3, r3, #20
 8001b26:	4323      	orrs	r3, r4
 8001b28:	07d2      	lsls	r2, r2, #31
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	0019      	movs	r1, r3
 8001b2e:	b005      	add	sp, #20
 8001b30:	bcf0      	pop	{r4, r5, r6, r7}
 8001b32:	46bb      	mov	fp, r7
 8001b34:	46b2      	mov	sl, r6
 8001b36:	46a9      	mov	r9, r5
 8001b38:	46a0      	mov	r8, r4
 8001b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b3c:	4652      	mov	r2, sl
 8001b3e:	4302      	orrs	r2, r0
 8001b40:	4690      	mov	r8, r2
 8001b42:	d000      	beq.n	8001b46 <__aeabi_dmul+0xe2>
 8001b44:	e1ac      	b.n	8001ea0 <__aeabi_dmul+0x43c>
 8001b46:	469b      	mov	fp, r3
 8001b48:	2302      	movs	r3, #2
 8001b4a:	4692      	mov	sl, r2
 8001b4c:	2508      	movs	r5, #8
 8001b4e:	9302      	str	r3, [sp, #8]
 8001b50:	e7ae      	b.n	8001ab0 <__aeabi_dmul+0x4c>
 8001b52:	9b00      	ldr	r3, [sp, #0]
 8001b54:	46a2      	mov	sl, r4
 8001b56:	4699      	mov	r9, r3
 8001b58:	9b01      	ldr	r3, [sp, #4]
 8001b5a:	4698      	mov	r8, r3
 8001b5c:	9b02      	ldr	r3, [sp, #8]
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d100      	bne.n	8001b64 <__aeabi_dmul+0x100>
 8001b62:	e1ca      	b.n	8001efa <__aeabi_dmul+0x496>
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dmul+0x106>
 8001b68:	e192      	b.n	8001e90 <__aeabi_dmul+0x42c>
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d110      	bne.n	8001b90 <__aeabi_dmul+0x12c>
 8001b6e:	2300      	movs	r3, #0
 8001b70:	2400      	movs	r4, #0
 8001b72:	2200      	movs	r2, #0
 8001b74:	e7d4      	b.n	8001b20 <__aeabi_dmul+0xbc>
 8001b76:	2201      	movs	r2, #1
 8001b78:	087b      	lsrs	r3, r7, #1
 8001b7a:	403a      	ands	r2, r7
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	4652      	mov	r2, sl
 8001b80:	07d2      	lsls	r2, r2, #31
 8001b82:	4313      	orrs	r3, r2
 8001b84:	4698      	mov	r8, r3
 8001b86:	4653      	mov	r3, sl
 8001b88:	085b      	lsrs	r3, r3, #1
 8001b8a:	469a      	mov	sl, r3
 8001b8c:	9b03      	ldr	r3, [sp, #12]
 8001b8e:	4699      	mov	r9, r3
 8001b90:	465b      	mov	r3, fp
 8001b92:	1c58      	adds	r0, r3, #1
 8001b94:	2380      	movs	r3, #128	@ 0x80
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	445b      	add	r3, fp
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	dc00      	bgt.n	8001ba0 <__aeabi_dmul+0x13c>
 8001b9e:	e1b1      	b.n	8001f04 <__aeabi_dmul+0x4a0>
 8001ba0:	4642      	mov	r2, r8
 8001ba2:	0752      	lsls	r2, r2, #29
 8001ba4:	d00b      	beq.n	8001bbe <__aeabi_dmul+0x15a>
 8001ba6:	220f      	movs	r2, #15
 8001ba8:	4641      	mov	r1, r8
 8001baa:	400a      	ands	r2, r1
 8001bac:	2a04      	cmp	r2, #4
 8001bae:	d006      	beq.n	8001bbe <__aeabi_dmul+0x15a>
 8001bb0:	4642      	mov	r2, r8
 8001bb2:	1d11      	adds	r1, r2, #4
 8001bb4:	4541      	cmp	r1, r8
 8001bb6:	4192      	sbcs	r2, r2
 8001bb8:	4688      	mov	r8, r1
 8001bba:	4252      	negs	r2, r2
 8001bbc:	4492      	add	sl, r2
 8001bbe:	4652      	mov	r2, sl
 8001bc0:	01d2      	lsls	r2, r2, #7
 8001bc2:	d506      	bpl.n	8001bd2 <__aeabi_dmul+0x16e>
 8001bc4:	4652      	mov	r2, sl
 8001bc6:	4b80      	ldr	r3, [pc, #512]	@ (8001dc8 <__aeabi_dmul+0x364>)
 8001bc8:	401a      	ands	r2, r3
 8001bca:	2380      	movs	r3, #128	@ 0x80
 8001bcc:	4692      	mov	sl, r2
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	18c3      	adds	r3, r0, r3
 8001bd2:	4a7e      	ldr	r2, [pc, #504]	@ (8001dcc <__aeabi_dmul+0x368>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	dd00      	ble.n	8001bda <__aeabi_dmul+0x176>
 8001bd8:	e18f      	b.n	8001efa <__aeabi_dmul+0x496>
 8001bda:	4642      	mov	r2, r8
 8001bdc:	08d1      	lsrs	r1, r2, #3
 8001bde:	4652      	mov	r2, sl
 8001be0:	0752      	lsls	r2, r2, #29
 8001be2:	430a      	orrs	r2, r1
 8001be4:	4651      	mov	r1, sl
 8001be6:	055b      	lsls	r3, r3, #21
 8001be8:	024c      	lsls	r4, r1, #9
 8001bea:	0b24      	lsrs	r4, r4, #12
 8001bec:	0d5b      	lsrs	r3, r3, #21
 8001bee:	e797      	b.n	8001b20 <__aeabi_dmul+0xbc>
 8001bf0:	4b73      	ldr	r3, [pc, #460]	@ (8001dc0 <__aeabi_dmul+0x35c>)
 8001bf2:	4326      	orrs	r6, r4
 8001bf4:	469c      	mov	ip, r3
 8001bf6:	44e3      	add	fp, ip
 8001bf8:	2e00      	cmp	r6, #0
 8001bfa:	d100      	bne.n	8001bfe <__aeabi_dmul+0x19a>
 8001bfc:	e16f      	b.n	8001ede <__aeabi_dmul+0x47a>
 8001bfe:	2303      	movs	r3, #3
 8001c00:	4649      	mov	r1, r9
 8001c02:	431d      	orrs	r5, r3
 8001c04:	9b00      	ldr	r3, [sp, #0]
 8001c06:	4059      	eors	r1, r3
 8001c08:	b2cb      	uxtb	r3, r1
 8001c0a:	9303      	str	r3, [sp, #12]
 8001c0c:	2d0a      	cmp	r5, #10
 8001c0e:	dd00      	ble.n	8001c12 <__aeabi_dmul+0x1ae>
 8001c10:	e133      	b.n	8001e7a <__aeabi_dmul+0x416>
 8001c12:	2301      	movs	r3, #1
 8001c14:	40ab      	lsls	r3, r5
 8001c16:	001d      	movs	r5, r3
 8001c18:	2303      	movs	r3, #3
 8001c1a:	9302      	str	r3, [sp, #8]
 8001c1c:	2288      	movs	r2, #136	@ 0x88
 8001c1e:	422a      	tst	r2, r5
 8001c20:	d197      	bne.n	8001b52 <__aeabi_dmul+0xee>
 8001c22:	4642      	mov	r2, r8
 8001c24:	4643      	mov	r3, r8
 8001c26:	0412      	lsls	r2, r2, #16
 8001c28:	0c12      	lsrs	r2, r2, #16
 8001c2a:	0016      	movs	r6, r2
 8001c2c:	9801      	ldr	r0, [sp, #4]
 8001c2e:	0c1d      	lsrs	r5, r3, #16
 8001c30:	0c03      	lsrs	r3, r0, #16
 8001c32:	0400      	lsls	r0, r0, #16
 8001c34:	0c00      	lsrs	r0, r0, #16
 8001c36:	4346      	muls	r6, r0
 8001c38:	46b4      	mov	ip, r6
 8001c3a:	001e      	movs	r6, r3
 8001c3c:	436e      	muls	r6, r5
 8001c3e:	9600      	str	r6, [sp, #0]
 8001c40:	0016      	movs	r6, r2
 8001c42:	0007      	movs	r7, r0
 8001c44:	435e      	muls	r6, r3
 8001c46:	4661      	mov	r1, ip
 8001c48:	46b0      	mov	r8, r6
 8001c4a:	436f      	muls	r7, r5
 8001c4c:	0c0e      	lsrs	r6, r1, #16
 8001c4e:	44b8      	add	r8, r7
 8001c50:	4446      	add	r6, r8
 8001c52:	42b7      	cmp	r7, r6
 8001c54:	d905      	bls.n	8001c62 <__aeabi_dmul+0x1fe>
 8001c56:	2180      	movs	r1, #128	@ 0x80
 8001c58:	0249      	lsls	r1, r1, #9
 8001c5a:	4688      	mov	r8, r1
 8001c5c:	9f00      	ldr	r7, [sp, #0]
 8001c5e:	4447      	add	r7, r8
 8001c60:	9700      	str	r7, [sp, #0]
 8001c62:	4661      	mov	r1, ip
 8001c64:	0409      	lsls	r1, r1, #16
 8001c66:	0c09      	lsrs	r1, r1, #16
 8001c68:	0c37      	lsrs	r7, r6, #16
 8001c6a:	0436      	lsls	r6, r6, #16
 8001c6c:	468c      	mov	ip, r1
 8001c6e:	0031      	movs	r1, r6
 8001c70:	4461      	add	r1, ip
 8001c72:	9101      	str	r1, [sp, #4]
 8001c74:	0011      	movs	r1, r2
 8001c76:	0c26      	lsrs	r6, r4, #16
 8001c78:	0424      	lsls	r4, r4, #16
 8001c7a:	0c24      	lsrs	r4, r4, #16
 8001c7c:	4361      	muls	r1, r4
 8001c7e:	468c      	mov	ip, r1
 8001c80:	0021      	movs	r1, r4
 8001c82:	4369      	muls	r1, r5
 8001c84:	4689      	mov	r9, r1
 8001c86:	4661      	mov	r1, ip
 8001c88:	0c09      	lsrs	r1, r1, #16
 8001c8a:	4688      	mov	r8, r1
 8001c8c:	4372      	muls	r2, r6
 8001c8e:	444a      	add	r2, r9
 8001c90:	4442      	add	r2, r8
 8001c92:	4375      	muls	r5, r6
 8001c94:	4591      	cmp	r9, r2
 8001c96:	d903      	bls.n	8001ca0 <__aeabi_dmul+0x23c>
 8001c98:	2180      	movs	r1, #128	@ 0x80
 8001c9a:	0249      	lsls	r1, r1, #9
 8001c9c:	4688      	mov	r8, r1
 8001c9e:	4445      	add	r5, r8
 8001ca0:	0c11      	lsrs	r1, r2, #16
 8001ca2:	4688      	mov	r8, r1
 8001ca4:	4661      	mov	r1, ip
 8001ca6:	0409      	lsls	r1, r1, #16
 8001ca8:	0c09      	lsrs	r1, r1, #16
 8001caa:	468c      	mov	ip, r1
 8001cac:	0412      	lsls	r2, r2, #16
 8001cae:	4462      	add	r2, ip
 8001cb0:	18b9      	adds	r1, r7, r2
 8001cb2:	9102      	str	r1, [sp, #8]
 8001cb4:	4651      	mov	r1, sl
 8001cb6:	0c09      	lsrs	r1, r1, #16
 8001cb8:	468c      	mov	ip, r1
 8001cba:	4651      	mov	r1, sl
 8001cbc:	040f      	lsls	r7, r1, #16
 8001cbe:	0c3f      	lsrs	r7, r7, #16
 8001cc0:	0039      	movs	r1, r7
 8001cc2:	4341      	muls	r1, r0
 8001cc4:	4445      	add	r5, r8
 8001cc6:	4688      	mov	r8, r1
 8001cc8:	4661      	mov	r1, ip
 8001cca:	4341      	muls	r1, r0
 8001ccc:	468a      	mov	sl, r1
 8001cce:	4641      	mov	r1, r8
 8001cd0:	4660      	mov	r0, ip
 8001cd2:	0c09      	lsrs	r1, r1, #16
 8001cd4:	4689      	mov	r9, r1
 8001cd6:	4358      	muls	r0, r3
 8001cd8:	437b      	muls	r3, r7
 8001cda:	4453      	add	r3, sl
 8001cdc:	444b      	add	r3, r9
 8001cde:	459a      	cmp	sl, r3
 8001ce0:	d903      	bls.n	8001cea <__aeabi_dmul+0x286>
 8001ce2:	2180      	movs	r1, #128	@ 0x80
 8001ce4:	0249      	lsls	r1, r1, #9
 8001ce6:	4689      	mov	r9, r1
 8001ce8:	4448      	add	r0, r9
 8001cea:	0c19      	lsrs	r1, r3, #16
 8001cec:	4689      	mov	r9, r1
 8001cee:	4641      	mov	r1, r8
 8001cf0:	0409      	lsls	r1, r1, #16
 8001cf2:	0c09      	lsrs	r1, r1, #16
 8001cf4:	4688      	mov	r8, r1
 8001cf6:	0039      	movs	r1, r7
 8001cf8:	4361      	muls	r1, r4
 8001cfa:	041b      	lsls	r3, r3, #16
 8001cfc:	4443      	add	r3, r8
 8001cfe:	4688      	mov	r8, r1
 8001d00:	4661      	mov	r1, ip
 8001d02:	434c      	muls	r4, r1
 8001d04:	4371      	muls	r1, r6
 8001d06:	468c      	mov	ip, r1
 8001d08:	4641      	mov	r1, r8
 8001d0a:	4377      	muls	r7, r6
 8001d0c:	0c0e      	lsrs	r6, r1, #16
 8001d0e:	193f      	adds	r7, r7, r4
 8001d10:	19f6      	adds	r6, r6, r7
 8001d12:	4448      	add	r0, r9
 8001d14:	42b4      	cmp	r4, r6
 8001d16:	d903      	bls.n	8001d20 <__aeabi_dmul+0x2bc>
 8001d18:	2180      	movs	r1, #128	@ 0x80
 8001d1a:	0249      	lsls	r1, r1, #9
 8001d1c:	4689      	mov	r9, r1
 8001d1e:	44cc      	add	ip, r9
 8001d20:	9902      	ldr	r1, [sp, #8]
 8001d22:	9f00      	ldr	r7, [sp, #0]
 8001d24:	4689      	mov	r9, r1
 8001d26:	0431      	lsls	r1, r6, #16
 8001d28:	444f      	add	r7, r9
 8001d2a:	4689      	mov	r9, r1
 8001d2c:	4641      	mov	r1, r8
 8001d2e:	4297      	cmp	r7, r2
 8001d30:	4192      	sbcs	r2, r2
 8001d32:	040c      	lsls	r4, r1, #16
 8001d34:	0c24      	lsrs	r4, r4, #16
 8001d36:	444c      	add	r4, r9
 8001d38:	18ff      	adds	r7, r7, r3
 8001d3a:	4252      	negs	r2, r2
 8001d3c:	1964      	adds	r4, r4, r5
 8001d3e:	18a1      	adds	r1, r4, r2
 8001d40:	429f      	cmp	r7, r3
 8001d42:	419b      	sbcs	r3, r3
 8001d44:	4688      	mov	r8, r1
 8001d46:	4682      	mov	sl, r0
 8001d48:	425b      	negs	r3, r3
 8001d4a:	4699      	mov	r9, r3
 8001d4c:	4590      	cmp	r8, r2
 8001d4e:	4192      	sbcs	r2, r2
 8001d50:	42ac      	cmp	r4, r5
 8001d52:	41a4      	sbcs	r4, r4
 8001d54:	44c2      	add	sl, r8
 8001d56:	44d1      	add	r9, sl
 8001d58:	4252      	negs	r2, r2
 8001d5a:	4264      	negs	r4, r4
 8001d5c:	4314      	orrs	r4, r2
 8001d5e:	4599      	cmp	r9, r3
 8001d60:	419b      	sbcs	r3, r3
 8001d62:	4582      	cmp	sl, r0
 8001d64:	4192      	sbcs	r2, r2
 8001d66:	425b      	negs	r3, r3
 8001d68:	4252      	negs	r2, r2
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	464a      	mov	r2, r9
 8001d6e:	0c36      	lsrs	r6, r6, #16
 8001d70:	19a4      	adds	r4, r4, r6
 8001d72:	18e3      	adds	r3, r4, r3
 8001d74:	4463      	add	r3, ip
 8001d76:	025b      	lsls	r3, r3, #9
 8001d78:	0dd2      	lsrs	r2, r2, #23
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	9901      	ldr	r1, [sp, #4]
 8001d7e:	4692      	mov	sl, r2
 8001d80:	027a      	lsls	r2, r7, #9
 8001d82:	430a      	orrs	r2, r1
 8001d84:	1e50      	subs	r0, r2, #1
 8001d86:	4182      	sbcs	r2, r0
 8001d88:	0dff      	lsrs	r7, r7, #23
 8001d8a:	4317      	orrs	r7, r2
 8001d8c:	464a      	mov	r2, r9
 8001d8e:	0252      	lsls	r2, r2, #9
 8001d90:	4317      	orrs	r7, r2
 8001d92:	46b8      	mov	r8, r7
 8001d94:	01db      	lsls	r3, r3, #7
 8001d96:	d500      	bpl.n	8001d9a <__aeabi_dmul+0x336>
 8001d98:	e6ed      	b.n	8001b76 <__aeabi_dmul+0x112>
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd0 <__aeabi_dmul+0x36c>)
 8001d9c:	9a03      	ldr	r2, [sp, #12]
 8001d9e:	445b      	add	r3, fp
 8001da0:	4691      	mov	r9, r2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	dc00      	bgt.n	8001da8 <__aeabi_dmul+0x344>
 8001da6:	e0ac      	b.n	8001f02 <__aeabi_dmul+0x49e>
 8001da8:	003a      	movs	r2, r7
 8001daa:	0752      	lsls	r2, r2, #29
 8001dac:	d100      	bne.n	8001db0 <__aeabi_dmul+0x34c>
 8001dae:	e710      	b.n	8001bd2 <__aeabi_dmul+0x16e>
 8001db0:	220f      	movs	r2, #15
 8001db2:	4658      	mov	r0, fp
 8001db4:	403a      	ands	r2, r7
 8001db6:	2a04      	cmp	r2, #4
 8001db8:	d000      	beq.n	8001dbc <__aeabi_dmul+0x358>
 8001dba:	e6f9      	b.n	8001bb0 <__aeabi_dmul+0x14c>
 8001dbc:	e709      	b.n	8001bd2 <__aeabi_dmul+0x16e>
 8001dbe:	46c0      	nop			@ (mov r8, r8)
 8001dc0:	000007ff 	.word	0x000007ff
 8001dc4:	fffffc01 	.word	0xfffffc01
 8001dc8:	feffffff 	.word	0xfeffffff
 8001dcc:	000007fe 	.word	0x000007fe
 8001dd0:	000003ff 	.word	0x000003ff
 8001dd4:	0022      	movs	r2, r4
 8001dd6:	4332      	orrs	r2, r6
 8001dd8:	d06f      	beq.n	8001eba <__aeabi_dmul+0x456>
 8001dda:	2c00      	cmp	r4, #0
 8001ddc:	d100      	bne.n	8001de0 <__aeabi_dmul+0x37c>
 8001dde:	e0c2      	b.n	8001f66 <__aeabi_dmul+0x502>
 8001de0:	0020      	movs	r0, r4
 8001de2:	f7fe fb61 	bl	80004a8 <__clzsi2>
 8001de6:	0002      	movs	r2, r0
 8001de8:	0003      	movs	r3, r0
 8001dea:	3a0b      	subs	r2, #11
 8001dec:	201d      	movs	r0, #29
 8001dee:	1a82      	subs	r2, r0, r2
 8001df0:	0030      	movs	r0, r6
 8001df2:	0019      	movs	r1, r3
 8001df4:	40d0      	lsrs	r0, r2
 8001df6:	3908      	subs	r1, #8
 8001df8:	408c      	lsls	r4, r1
 8001dfa:	0002      	movs	r2, r0
 8001dfc:	4322      	orrs	r2, r4
 8001dfe:	0034      	movs	r4, r6
 8001e00:	408c      	lsls	r4, r1
 8001e02:	4659      	mov	r1, fp
 8001e04:	1acb      	subs	r3, r1, r3
 8001e06:	4986      	ldr	r1, [pc, #536]	@ (8002020 <__aeabi_dmul+0x5bc>)
 8001e08:	468b      	mov	fp, r1
 8001e0a:	449b      	add	fp, r3
 8001e0c:	2d0a      	cmp	r5, #10
 8001e0e:	dd00      	ble.n	8001e12 <__aeabi_dmul+0x3ae>
 8001e10:	e6a4      	b.n	8001b5c <__aeabi_dmul+0xf8>
 8001e12:	4649      	mov	r1, r9
 8001e14:	9b00      	ldr	r3, [sp, #0]
 8001e16:	9401      	str	r4, [sp, #4]
 8001e18:	4059      	eors	r1, r3
 8001e1a:	b2cb      	uxtb	r3, r1
 8001e1c:	0014      	movs	r4, r2
 8001e1e:	2000      	movs	r0, #0
 8001e20:	9303      	str	r3, [sp, #12]
 8001e22:	2d02      	cmp	r5, #2
 8001e24:	dd00      	ble.n	8001e28 <__aeabi_dmul+0x3c4>
 8001e26:	e667      	b.n	8001af8 <__aeabi_dmul+0x94>
 8001e28:	e6fb      	b.n	8001c22 <__aeabi_dmul+0x1be>
 8001e2a:	4653      	mov	r3, sl
 8001e2c:	4303      	orrs	r3, r0
 8001e2e:	4698      	mov	r8, r3
 8001e30:	d03c      	beq.n	8001eac <__aeabi_dmul+0x448>
 8001e32:	4653      	mov	r3, sl
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d100      	bne.n	8001e3a <__aeabi_dmul+0x3d6>
 8001e38:	e0a3      	b.n	8001f82 <__aeabi_dmul+0x51e>
 8001e3a:	4650      	mov	r0, sl
 8001e3c:	f7fe fb34 	bl	80004a8 <__clzsi2>
 8001e40:	230b      	movs	r3, #11
 8001e42:	425b      	negs	r3, r3
 8001e44:	469c      	mov	ip, r3
 8001e46:	0002      	movs	r2, r0
 8001e48:	4484      	add	ip, r0
 8001e4a:	0011      	movs	r1, r2
 8001e4c:	4650      	mov	r0, sl
 8001e4e:	3908      	subs	r1, #8
 8001e50:	4088      	lsls	r0, r1
 8001e52:	231d      	movs	r3, #29
 8001e54:	4680      	mov	r8, r0
 8001e56:	4660      	mov	r0, ip
 8001e58:	1a1b      	subs	r3, r3, r0
 8001e5a:	0020      	movs	r0, r4
 8001e5c:	40d8      	lsrs	r0, r3
 8001e5e:	0003      	movs	r3, r0
 8001e60:	4640      	mov	r0, r8
 8001e62:	4303      	orrs	r3, r0
 8001e64:	469a      	mov	sl, r3
 8001e66:	0023      	movs	r3, r4
 8001e68:	408b      	lsls	r3, r1
 8001e6a:	4698      	mov	r8, r3
 8001e6c:	4b6c      	ldr	r3, [pc, #432]	@ (8002020 <__aeabi_dmul+0x5bc>)
 8001e6e:	2500      	movs	r5, #0
 8001e70:	1a9b      	subs	r3, r3, r2
 8001e72:	469b      	mov	fp, r3
 8001e74:	2300      	movs	r3, #0
 8001e76:	9302      	str	r3, [sp, #8]
 8001e78:	e61a      	b.n	8001ab0 <__aeabi_dmul+0x4c>
 8001e7a:	2d0f      	cmp	r5, #15
 8001e7c:	d000      	beq.n	8001e80 <__aeabi_dmul+0x41c>
 8001e7e:	e0c9      	b.n	8002014 <__aeabi_dmul+0x5b0>
 8001e80:	2380      	movs	r3, #128	@ 0x80
 8001e82:	4652      	mov	r2, sl
 8001e84:	031b      	lsls	r3, r3, #12
 8001e86:	421a      	tst	r2, r3
 8001e88:	d002      	beq.n	8001e90 <__aeabi_dmul+0x42c>
 8001e8a:	421c      	tst	r4, r3
 8001e8c:	d100      	bne.n	8001e90 <__aeabi_dmul+0x42c>
 8001e8e:	e092      	b.n	8001fb6 <__aeabi_dmul+0x552>
 8001e90:	2480      	movs	r4, #128	@ 0x80
 8001e92:	4653      	mov	r3, sl
 8001e94:	0324      	lsls	r4, r4, #12
 8001e96:	431c      	orrs	r4, r3
 8001e98:	0324      	lsls	r4, r4, #12
 8001e9a:	4642      	mov	r2, r8
 8001e9c:	0b24      	lsrs	r4, r4, #12
 8001e9e:	e63e      	b.n	8001b1e <__aeabi_dmul+0xba>
 8001ea0:	469b      	mov	fp, r3
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	4680      	mov	r8, r0
 8001ea6:	250c      	movs	r5, #12
 8001ea8:	9302      	str	r3, [sp, #8]
 8001eaa:	e601      	b.n	8001ab0 <__aeabi_dmul+0x4c>
 8001eac:	2300      	movs	r3, #0
 8001eae:	469a      	mov	sl, r3
 8001eb0:	469b      	mov	fp, r3
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	2504      	movs	r5, #4
 8001eb6:	9302      	str	r3, [sp, #8]
 8001eb8:	e5fa      	b.n	8001ab0 <__aeabi_dmul+0x4c>
 8001eba:	2101      	movs	r1, #1
 8001ebc:	430d      	orrs	r5, r1
 8001ebe:	2d0a      	cmp	r5, #10
 8001ec0:	dd00      	ble.n	8001ec4 <__aeabi_dmul+0x460>
 8001ec2:	e64b      	b.n	8001b5c <__aeabi_dmul+0xf8>
 8001ec4:	4649      	mov	r1, r9
 8001ec6:	9800      	ldr	r0, [sp, #0]
 8001ec8:	4041      	eors	r1, r0
 8001eca:	b2c9      	uxtb	r1, r1
 8001ecc:	9103      	str	r1, [sp, #12]
 8001ece:	2d02      	cmp	r5, #2
 8001ed0:	dc00      	bgt.n	8001ed4 <__aeabi_dmul+0x470>
 8001ed2:	e096      	b.n	8002002 <__aeabi_dmul+0x59e>
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	2400      	movs	r4, #0
 8001ed8:	2001      	movs	r0, #1
 8001eda:	9301      	str	r3, [sp, #4]
 8001edc:	e60c      	b.n	8001af8 <__aeabi_dmul+0x94>
 8001ede:	4649      	mov	r1, r9
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	9a00      	ldr	r2, [sp, #0]
 8001ee4:	432b      	orrs	r3, r5
 8001ee6:	4051      	eors	r1, r2
 8001ee8:	b2ca      	uxtb	r2, r1
 8001eea:	9203      	str	r2, [sp, #12]
 8001eec:	2b0a      	cmp	r3, #10
 8001eee:	dd00      	ble.n	8001ef2 <__aeabi_dmul+0x48e>
 8001ef0:	e634      	b.n	8001b5c <__aeabi_dmul+0xf8>
 8001ef2:	2d00      	cmp	r5, #0
 8001ef4:	d157      	bne.n	8001fa6 <__aeabi_dmul+0x542>
 8001ef6:	9b03      	ldr	r3, [sp, #12]
 8001ef8:	4699      	mov	r9, r3
 8001efa:	2400      	movs	r4, #0
 8001efc:	2200      	movs	r2, #0
 8001efe:	4b49      	ldr	r3, [pc, #292]	@ (8002024 <__aeabi_dmul+0x5c0>)
 8001f00:	e60e      	b.n	8001b20 <__aeabi_dmul+0xbc>
 8001f02:	4658      	mov	r0, fp
 8001f04:	2101      	movs	r1, #1
 8001f06:	1ac9      	subs	r1, r1, r3
 8001f08:	2938      	cmp	r1, #56	@ 0x38
 8001f0a:	dd00      	ble.n	8001f0e <__aeabi_dmul+0x4aa>
 8001f0c:	e62f      	b.n	8001b6e <__aeabi_dmul+0x10a>
 8001f0e:	291f      	cmp	r1, #31
 8001f10:	dd56      	ble.n	8001fc0 <__aeabi_dmul+0x55c>
 8001f12:	221f      	movs	r2, #31
 8001f14:	4654      	mov	r4, sl
 8001f16:	4252      	negs	r2, r2
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	40dc      	lsrs	r4, r3
 8001f1c:	2920      	cmp	r1, #32
 8001f1e:	d007      	beq.n	8001f30 <__aeabi_dmul+0x4cc>
 8001f20:	4b41      	ldr	r3, [pc, #260]	@ (8002028 <__aeabi_dmul+0x5c4>)
 8001f22:	4642      	mov	r2, r8
 8001f24:	469c      	mov	ip, r3
 8001f26:	4653      	mov	r3, sl
 8001f28:	4460      	add	r0, ip
 8001f2a:	4083      	lsls	r3, r0
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	4690      	mov	r8, r2
 8001f30:	4642      	mov	r2, r8
 8001f32:	2107      	movs	r1, #7
 8001f34:	1e53      	subs	r3, r2, #1
 8001f36:	419a      	sbcs	r2, r3
 8001f38:	000b      	movs	r3, r1
 8001f3a:	4322      	orrs	r2, r4
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	2400      	movs	r4, #0
 8001f40:	4211      	tst	r1, r2
 8001f42:	d009      	beq.n	8001f58 <__aeabi_dmul+0x4f4>
 8001f44:	230f      	movs	r3, #15
 8001f46:	4013      	ands	r3, r2
 8001f48:	2b04      	cmp	r3, #4
 8001f4a:	d05d      	beq.n	8002008 <__aeabi_dmul+0x5a4>
 8001f4c:	1d11      	adds	r1, r2, #4
 8001f4e:	4291      	cmp	r1, r2
 8001f50:	419b      	sbcs	r3, r3
 8001f52:	000a      	movs	r2, r1
 8001f54:	425b      	negs	r3, r3
 8001f56:	075b      	lsls	r3, r3, #29
 8001f58:	08d2      	lsrs	r2, r2, #3
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	e5df      	b.n	8001b20 <__aeabi_dmul+0xbc>
 8001f60:	9b03      	ldr	r3, [sp, #12]
 8001f62:	4699      	mov	r9, r3
 8001f64:	e5fa      	b.n	8001b5c <__aeabi_dmul+0xf8>
 8001f66:	9801      	ldr	r0, [sp, #4]
 8001f68:	f7fe fa9e 	bl	80004a8 <__clzsi2>
 8001f6c:	0002      	movs	r2, r0
 8001f6e:	0003      	movs	r3, r0
 8001f70:	3215      	adds	r2, #21
 8001f72:	3320      	adds	r3, #32
 8001f74:	2a1c      	cmp	r2, #28
 8001f76:	dc00      	bgt.n	8001f7a <__aeabi_dmul+0x516>
 8001f78:	e738      	b.n	8001dec <__aeabi_dmul+0x388>
 8001f7a:	9a01      	ldr	r2, [sp, #4]
 8001f7c:	3808      	subs	r0, #8
 8001f7e:	4082      	lsls	r2, r0
 8001f80:	e73f      	b.n	8001e02 <__aeabi_dmul+0x39e>
 8001f82:	f7fe fa91 	bl	80004a8 <__clzsi2>
 8001f86:	2315      	movs	r3, #21
 8001f88:	469c      	mov	ip, r3
 8001f8a:	4484      	add	ip, r0
 8001f8c:	0002      	movs	r2, r0
 8001f8e:	4663      	mov	r3, ip
 8001f90:	3220      	adds	r2, #32
 8001f92:	2b1c      	cmp	r3, #28
 8001f94:	dc00      	bgt.n	8001f98 <__aeabi_dmul+0x534>
 8001f96:	e758      	b.n	8001e4a <__aeabi_dmul+0x3e6>
 8001f98:	2300      	movs	r3, #0
 8001f9a:	4698      	mov	r8, r3
 8001f9c:	0023      	movs	r3, r4
 8001f9e:	3808      	subs	r0, #8
 8001fa0:	4083      	lsls	r3, r0
 8001fa2:	469a      	mov	sl, r3
 8001fa4:	e762      	b.n	8001e6c <__aeabi_dmul+0x408>
 8001fa6:	001d      	movs	r5, r3
 8001fa8:	2300      	movs	r3, #0
 8001faa:	2400      	movs	r4, #0
 8001fac:	2002      	movs	r0, #2
 8001fae:	9301      	str	r3, [sp, #4]
 8001fb0:	e5a2      	b.n	8001af8 <__aeabi_dmul+0x94>
 8001fb2:	9002      	str	r0, [sp, #8]
 8001fb4:	e632      	b.n	8001c1c <__aeabi_dmul+0x1b8>
 8001fb6:	431c      	orrs	r4, r3
 8001fb8:	9b00      	ldr	r3, [sp, #0]
 8001fba:	9a01      	ldr	r2, [sp, #4]
 8001fbc:	4699      	mov	r9, r3
 8001fbe:	e5ae      	b.n	8001b1e <__aeabi_dmul+0xba>
 8001fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800202c <__aeabi_dmul+0x5c8>)
 8001fc2:	4652      	mov	r2, sl
 8001fc4:	18c3      	adds	r3, r0, r3
 8001fc6:	4640      	mov	r0, r8
 8001fc8:	409a      	lsls	r2, r3
 8001fca:	40c8      	lsrs	r0, r1
 8001fcc:	4302      	orrs	r2, r0
 8001fce:	4640      	mov	r0, r8
 8001fd0:	4098      	lsls	r0, r3
 8001fd2:	0003      	movs	r3, r0
 8001fd4:	1e58      	subs	r0, r3, #1
 8001fd6:	4183      	sbcs	r3, r0
 8001fd8:	4654      	mov	r4, sl
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	40cc      	lsrs	r4, r1
 8001fde:	0753      	lsls	r3, r2, #29
 8001fe0:	d009      	beq.n	8001ff6 <__aeabi_dmul+0x592>
 8001fe2:	230f      	movs	r3, #15
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	d005      	beq.n	8001ff6 <__aeabi_dmul+0x592>
 8001fea:	1d13      	adds	r3, r2, #4
 8001fec:	4293      	cmp	r3, r2
 8001fee:	4192      	sbcs	r2, r2
 8001ff0:	4252      	negs	r2, r2
 8001ff2:	18a4      	adds	r4, r4, r2
 8001ff4:	001a      	movs	r2, r3
 8001ff6:	0223      	lsls	r3, r4, #8
 8001ff8:	d508      	bpl.n	800200c <__aeabi_dmul+0x5a8>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	2400      	movs	r4, #0
 8001ffe:	2200      	movs	r2, #0
 8002000:	e58e      	b.n	8001b20 <__aeabi_dmul+0xbc>
 8002002:	4689      	mov	r9, r1
 8002004:	2400      	movs	r4, #0
 8002006:	e58b      	b.n	8001b20 <__aeabi_dmul+0xbc>
 8002008:	2300      	movs	r3, #0
 800200a:	e7a5      	b.n	8001f58 <__aeabi_dmul+0x4f4>
 800200c:	0763      	lsls	r3, r4, #29
 800200e:	0264      	lsls	r4, r4, #9
 8002010:	0b24      	lsrs	r4, r4, #12
 8002012:	e7a1      	b.n	8001f58 <__aeabi_dmul+0x4f4>
 8002014:	9b00      	ldr	r3, [sp, #0]
 8002016:	46a2      	mov	sl, r4
 8002018:	4699      	mov	r9, r3
 800201a:	9b01      	ldr	r3, [sp, #4]
 800201c:	4698      	mov	r8, r3
 800201e:	e737      	b.n	8001e90 <__aeabi_dmul+0x42c>
 8002020:	fffffc0d 	.word	0xfffffc0d
 8002024:	000007ff 	.word	0x000007ff
 8002028:	0000043e 	.word	0x0000043e
 800202c:	0000041e 	.word	0x0000041e

08002030 <__aeabi_dsub>:
 8002030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002032:	4657      	mov	r7, sl
 8002034:	464e      	mov	r6, r9
 8002036:	4645      	mov	r5, r8
 8002038:	46de      	mov	lr, fp
 800203a:	b5e0      	push	{r5, r6, r7, lr}
 800203c:	b083      	sub	sp, #12
 800203e:	9000      	str	r0, [sp, #0]
 8002040:	9101      	str	r1, [sp, #4]
 8002042:	030c      	lsls	r4, r1, #12
 8002044:	004d      	lsls	r5, r1, #1
 8002046:	0fce      	lsrs	r6, r1, #31
 8002048:	0a61      	lsrs	r1, r4, #9
 800204a:	9c00      	ldr	r4, [sp, #0]
 800204c:	005f      	lsls	r7, r3, #1
 800204e:	0f64      	lsrs	r4, r4, #29
 8002050:	430c      	orrs	r4, r1
 8002052:	9900      	ldr	r1, [sp, #0]
 8002054:	9200      	str	r2, [sp, #0]
 8002056:	9301      	str	r3, [sp, #4]
 8002058:	00c8      	lsls	r0, r1, #3
 800205a:	0319      	lsls	r1, r3, #12
 800205c:	0d7b      	lsrs	r3, r7, #21
 800205e:	4699      	mov	r9, r3
 8002060:	9b01      	ldr	r3, [sp, #4]
 8002062:	4fcc      	ldr	r7, [pc, #816]	@ (8002394 <__aeabi_dsub+0x364>)
 8002064:	0fdb      	lsrs	r3, r3, #31
 8002066:	469c      	mov	ip, r3
 8002068:	0a4b      	lsrs	r3, r1, #9
 800206a:	9900      	ldr	r1, [sp, #0]
 800206c:	4680      	mov	r8, r0
 800206e:	0f49      	lsrs	r1, r1, #29
 8002070:	4319      	orrs	r1, r3
 8002072:	9b00      	ldr	r3, [sp, #0]
 8002074:	468b      	mov	fp, r1
 8002076:	00da      	lsls	r2, r3, #3
 8002078:	4692      	mov	sl, r2
 800207a:	0d6d      	lsrs	r5, r5, #21
 800207c:	45b9      	cmp	r9, r7
 800207e:	d100      	bne.n	8002082 <__aeabi_dsub+0x52>
 8002080:	e0bf      	b.n	8002202 <__aeabi_dsub+0x1d2>
 8002082:	2301      	movs	r3, #1
 8002084:	4661      	mov	r1, ip
 8002086:	4059      	eors	r1, r3
 8002088:	464b      	mov	r3, r9
 800208a:	468c      	mov	ip, r1
 800208c:	1aeb      	subs	r3, r5, r3
 800208e:	428e      	cmp	r6, r1
 8002090:	d075      	beq.n	800217e <__aeabi_dsub+0x14e>
 8002092:	2b00      	cmp	r3, #0
 8002094:	dc00      	bgt.n	8002098 <__aeabi_dsub+0x68>
 8002096:	e2a3      	b.n	80025e0 <__aeabi_dsub+0x5b0>
 8002098:	4649      	mov	r1, r9
 800209a:	2900      	cmp	r1, #0
 800209c:	d100      	bne.n	80020a0 <__aeabi_dsub+0x70>
 800209e:	e0ce      	b.n	800223e <__aeabi_dsub+0x20e>
 80020a0:	42bd      	cmp	r5, r7
 80020a2:	d100      	bne.n	80020a6 <__aeabi_dsub+0x76>
 80020a4:	e200      	b.n	80024a8 <__aeabi_dsub+0x478>
 80020a6:	2701      	movs	r7, #1
 80020a8:	2b38      	cmp	r3, #56	@ 0x38
 80020aa:	dc19      	bgt.n	80020e0 <__aeabi_dsub+0xb0>
 80020ac:	2780      	movs	r7, #128	@ 0x80
 80020ae:	4659      	mov	r1, fp
 80020b0:	043f      	lsls	r7, r7, #16
 80020b2:	4339      	orrs	r1, r7
 80020b4:	468b      	mov	fp, r1
 80020b6:	2b1f      	cmp	r3, #31
 80020b8:	dd00      	ble.n	80020bc <__aeabi_dsub+0x8c>
 80020ba:	e1fa      	b.n	80024b2 <__aeabi_dsub+0x482>
 80020bc:	2720      	movs	r7, #32
 80020be:	1af9      	subs	r1, r7, r3
 80020c0:	468c      	mov	ip, r1
 80020c2:	4659      	mov	r1, fp
 80020c4:	4667      	mov	r7, ip
 80020c6:	40b9      	lsls	r1, r7
 80020c8:	000f      	movs	r7, r1
 80020ca:	0011      	movs	r1, r2
 80020cc:	40d9      	lsrs	r1, r3
 80020ce:	430f      	orrs	r7, r1
 80020d0:	4661      	mov	r1, ip
 80020d2:	408a      	lsls	r2, r1
 80020d4:	1e51      	subs	r1, r2, #1
 80020d6:	418a      	sbcs	r2, r1
 80020d8:	4659      	mov	r1, fp
 80020da:	40d9      	lsrs	r1, r3
 80020dc:	4317      	orrs	r7, r2
 80020de:	1a64      	subs	r4, r4, r1
 80020e0:	1bc7      	subs	r7, r0, r7
 80020e2:	42b8      	cmp	r0, r7
 80020e4:	4180      	sbcs	r0, r0
 80020e6:	4240      	negs	r0, r0
 80020e8:	1a24      	subs	r4, r4, r0
 80020ea:	0223      	lsls	r3, r4, #8
 80020ec:	d400      	bmi.n	80020f0 <__aeabi_dsub+0xc0>
 80020ee:	e140      	b.n	8002372 <__aeabi_dsub+0x342>
 80020f0:	0264      	lsls	r4, r4, #9
 80020f2:	0a64      	lsrs	r4, r4, #9
 80020f4:	2c00      	cmp	r4, #0
 80020f6:	d100      	bne.n	80020fa <__aeabi_dsub+0xca>
 80020f8:	e154      	b.n	80023a4 <__aeabi_dsub+0x374>
 80020fa:	0020      	movs	r0, r4
 80020fc:	f7fe f9d4 	bl	80004a8 <__clzsi2>
 8002100:	0003      	movs	r3, r0
 8002102:	3b08      	subs	r3, #8
 8002104:	2120      	movs	r1, #32
 8002106:	0038      	movs	r0, r7
 8002108:	1aca      	subs	r2, r1, r3
 800210a:	40d0      	lsrs	r0, r2
 800210c:	409c      	lsls	r4, r3
 800210e:	0002      	movs	r2, r0
 8002110:	409f      	lsls	r7, r3
 8002112:	4322      	orrs	r2, r4
 8002114:	429d      	cmp	r5, r3
 8002116:	dd00      	ble.n	800211a <__aeabi_dsub+0xea>
 8002118:	e1a6      	b.n	8002468 <__aeabi_dsub+0x438>
 800211a:	1b58      	subs	r0, r3, r5
 800211c:	3001      	adds	r0, #1
 800211e:	1a09      	subs	r1, r1, r0
 8002120:	003c      	movs	r4, r7
 8002122:	408f      	lsls	r7, r1
 8002124:	40c4      	lsrs	r4, r0
 8002126:	1e7b      	subs	r3, r7, #1
 8002128:	419f      	sbcs	r7, r3
 800212a:	0013      	movs	r3, r2
 800212c:	408b      	lsls	r3, r1
 800212e:	4327      	orrs	r7, r4
 8002130:	431f      	orrs	r7, r3
 8002132:	40c2      	lsrs	r2, r0
 8002134:	003b      	movs	r3, r7
 8002136:	0014      	movs	r4, r2
 8002138:	2500      	movs	r5, #0
 800213a:	4313      	orrs	r3, r2
 800213c:	d100      	bne.n	8002140 <__aeabi_dsub+0x110>
 800213e:	e1f7      	b.n	8002530 <__aeabi_dsub+0x500>
 8002140:	077b      	lsls	r3, r7, #29
 8002142:	d100      	bne.n	8002146 <__aeabi_dsub+0x116>
 8002144:	e377      	b.n	8002836 <__aeabi_dsub+0x806>
 8002146:	230f      	movs	r3, #15
 8002148:	0038      	movs	r0, r7
 800214a:	403b      	ands	r3, r7
 800214c:	2b04      	cmp	r3, #4
 800214e:	d004      	beq.n	800215a <__aeabi_dsub+0x12a>
 8002150:	1d38      	adds	r0, r7, #4
 8002152:	42b8      	cmp	r0, r7
 8002154:	41bf      	sbcs	r7, r7
 8002156:	427f      	negs	r7, r7
 8002158:	19e4      	adds	r4, r4, r7
 800215a:	0223      	lsls	r3, r4, #8
 800215c:	d400      	bmi.n	8002160 <__aeabi_dsub+0x130>
 800215e:	e368      	b.n	8002832 <__aeabi_dsub+0x802>
 8002160:	4b8c      	ldr	r3, [pc, #560]	@ (8002394 <__aeabi_dsub+0x364>)
 8002162:	3501      	adds	r5, #1
 8002164:	429d      	cmp	r5, r3
 8002166:	d100      	bne.n	800216a <__aeabi_dsub+0x13a>
 8002168:	e0f4      	b.n	8002354 <__aeabi_dsub+0x324>
 800216a:	4b8b      	ldr	r3, [pc, #556]	@ (8002398 <__aeabi_dsub+0x368>)
 800216c:	056d      	lsls	r5, r5, #21
 800216e:	401c      	ands	r4, r3
 8002170:	0d6d      	lsrs	r5, r5, #21
 8002172:	0767      	lsls	r7, r4, #29
 8002174:	08c0      	lsrs	r0, r0, #3
 8002176:	0264      	lsls	r4, r4, #9
 8002178:	4307      	orrs	r7, r0
 800217a:	0b24      	lsrs	r4, r4, #12
 800217c:	e0ec      	b.n	8002358 <__aeabi_dsub+0x328>
 800217e:	2b00      	cmp	r3, #0
 8002180:	dc00      	bgt.n	8002184 <__aeabi_dsub+0x154>
 8002182:	e329      	b.n	80027d8 <__aeabi_dsub+0x7a8>
 8002184:	4649      	mov	r1, r9
 8002186:	2900      	cmp	r1, #0
 8002188:	d000      	beq.n	800218c <__aeabi_dsub+0x15c>
 800218a:	e0d6      	b.n	800233a <__aeabi_dsub+0x30a>
 800218c:	4659      	mov	r1, fp
 800218e:	4311      	orrs	r1, r2
 8002190:	d100      	bne.n	8002194 <__aeabi_dsub+0x164>
 8002192:	e12e      	b.n	80023f2 <__aeabi_dsub+0x3c2>
 8002194:	1e59      	subs	r1, r3, #1
 8002196:	2b01      	cmp	r3, #1
 8002198:	d100      	bne.n	800219c <__aeabi_dsub+0x16c>
 800219a:	e1e6      	b.n	800256a <__aeabi_dsub+0x53a>
 800219c:	42bb      	cmp	r3, r7
 800219e:	d100      	bne.n	80021a2 <__aeabi_dsub+0x172>
 80021a0:	e182      	b.n	80024a8 <__aeabi_dsub+0x478>
 80021a2:	2701      	movs	r7, #1
 80021a4:	000b      	movs	r3, r1
 80021a6:	2938      	cmp	r1, #56	@ 0x38
 80021a8:	dc14      	bgt.n	80021d4 <__aeabi_dsub+0x1a4>
 80021aa:	2b1f      	cmp	r3, #31
 80021ac:	dd00      	ble.n	80021b0 <__aeabi_dsub+0x180>
 80021ae:	e23c      	b.n	800262a <__aeabi_dsub+0x5fa>
 80021b0:	2720      	movs	r7, #32
 80021b2:	1af9      	subs	r1, r7, r3
 80021b4:	468c      	mov	ip, r1
 80021b6:	4659      	mov	r1, fp
 80021b8:	4667      	mov	r7, ip
 80021ba:	40b9      	lsls	r1, r7
 80021bc:	000f      	movs	r7, r1
 80021be:	0011      	movs	r1, r2
 80021c0:	40d9      	lsrs	r1, r3
 80021c2:	430f      	orrs	r7, r1
 80021c4:	4661      	mov	r1, ip
 80021c6:	408a      	lsls	r2, r1
 80021c8:	1e51      	subs	r1, r2, #1
 80021ca:	418a      	sbcs	r2, r1
 80021cc:	4659      	mov	r1, fp
 80021ce:	40d9      	lsrs	r1, r3
 80021d0:	4317      	orrs	r7, r2
 80021d2:	1864      	adds	r4, r4, r1
 80021d4:	183f      	adds	r7, r7, r0
 80021d6:	4287      	cmp	r7, r0
 80021d8:	4180      	sbcs	r0, r0
 80021da:	4240      	negs	r0, r0
 80021dc:	1824      	adds	r4, r4, r0
 80021de:	0223      	lsls	r3, r4, #8
 80021e0:	d400      	bmi.n	80021e4 <__aeabi_dsub+0x1b4>
 80021e2:	e0c6      	b.n	8002372 <__aeabi_dsub+0x342>
 80021e4:	4b6b      	ldr	r3, [pc, #428]	@ (8002394 <__aeabi_dsub+0x364>)
 80021e6:	3501      	adds	r5, #1
 80021e8:	429d      	cmp	r5, r3
 80021ea:	d100      	bne.n	80021ee <__aeabi_dsub+0x1be>
 80021ec:	e0b2      	b.n	8002354 <__aeabi_dsub+0x324>
 80021ee:	2101      	movs	r1, #1
 80021f0:	4b69      	ldr	r3, [pc, #420]	@ (8002398 <__aeabi_dsub+0x368>)
 80021f2:	087a      	lsrs	r2, r7, #1
 80021f4:	401c      	ands	r4, r3
 80021f6:	4039      	ands	r1, r7
 80021f8:	430a      	orrs	r2, r1
 80021fa:	07e7      	lsls	r7, r4, #31
 80021fc:	4317      	orrs	r7, r2
 80021fe:	0864      	lsrs	r4, r4, #1
 8002200:	e79e      	b.n	8002140 <__aeabi_dsub+0x110>
 8002202:	4b66      	ldr	r3, [pc, #408]	@ (800239c <__aeabi_dsub+0x36c>)
 8002204:	4311      	orrs	r1, r2
 8002206:	468a      	mov	sl, r1
 8002208:	18eb      	adds	r3, r5, r3
 800220a:	2900      	cmp	r1, #0
 800220c:	d028      	beq.n	8002260 <__aeabi_dsub+0x230>
 800220e:	4566      	cmp	r6, ip
 8002210:	d02c      	beq.n	800226c <__aeabi_dsub+0x23c>
 8002212:	2b00      	cmp	r3, #0
 8002214:	d05b      	beq.n	80022ce <__aeabi_dsub+0x29e>
 8002216:	2d00      	cmp	r5, #0
 8002218:	d100      	bne.n	800221c <__aeabi_dsub+0x1ec>
 800221a:	e12c      	b.n	8002476 <__aeabi_dsub+0x446>
 800221c:	465b      	mov	r3, fp
 800221e:	4666      	mov	r6, ip
 8002220:	075f      	lsls	r7, r3, #29
 8002222:	08d2      	lsrs	r2, r2, #3
 8002224:	4317      	orrs	r7, r2
 8002226:	08dd      	lsrs	r5, r3, #3
 8002228:	003b      	movs	r3, r7
 800222a:	432b      	orrs	r3, r5
 800222c:	d100      	bne.n	8002230 <__aeabi_dsub+0x200>
 800222e:	e0e2      	b.n	80023f6 <__aeabi_dsub+0x3c6>
 8002230:	2480      	movs	r4, #128	@ 0x80
 8002232:	0324      	lsls	r4, r4, #12
 8002234:	432c      	orrs	r4, r5
 8002236:	0324      	lsls	r4, r4, #12
 8002238:	4d56      	ldr	r5, [pc, #344]	@ (8002394 <__aeabi_dsub+0x364>)
 800223a:	0b24      	lsrs	r4, r4, #12
 800223c:	e08c      	b.n	8002358 <__aeabi_dsub+0x328>
 800223e:	4659      	mov	r1, fp
 8002240:	4311      	orrs	r1, r2
 8002242:	d100      	bne.n	8002246 <__aeabi_dsub+0x216>
 8002244:	e0d5      	b.n	80023f2 <__aeabi_dsub+0x3c2>
 8002246:	1e59      	subs	r1, r3, #1
 8002248:	2b01      	cmp	r3, #1
 800224a:	d100      	bne.n	800224e <__aeabi_dsub+0x21e>
 800224c:	e1b9      	b.n	80025c2 <__aeabi_dsub+0x592>
 800224e:	42bb      	cmp	r3, r7
 8002250:	d100      	bne.n	8002254 <__aeabi_dsub+0x224>
 8002252:	e1b1      	b.n	80025b8 <__aeabi_dsub+0x588>
 8002254:	2701      	movs	r7, #1
 8002256:	000b      	movs	r3, r1
 8002258:	2938      	cmp	r1, #56	@ 0x38
 800225a:	dd00      	ble.n	800225e <__aeabi_dsub+0x22e>
 800225c:	e740      	b.n	80020e0 <__aeabi_dsub+0xb0>
 800225e:	e72a      	b.n	80020b6 <__aeabi_dsub+0x86>
 8002260:	4661      	mov	r1, ip
 8002262:	2701      	movs	r7, #1
 8002264:	4079      	eors	r1, r7
 8002266:	468c      	mov	ip, r1
 8002268:	4566      	cmp	r6, ip
 800226a:	d1d2      	bne.n	8002212 <__aeabi_dsub+0x1e2>
 800226c:	2b00      	cmp	r3, #0
 800226e:	d100      	bne.n	8002272 <__aeabi_dsub+0x242>
 8002270:	e0c5      	b.n	80023fe <__aeabi_dsub+0x3ce>
 8002272:	2d00      	cmp	r5, #0
 8002274:	d000      	beq.n	8002278 <__aeabi_dsub+0x248>
 8002276:	e155      	b.n	8002524 <__aeabi_dsub+0x4f4>
 8002278:	464b      	mov	r3, r9
 800227a:	0025      	movs	r5, r4
 800227c:	4305      	orrs	r5, r0
 800227e:	d100      	bne.n	8002282 <__aeabi_dsub+0x252>
 8002280:	e212      	b.n	80026a8 <__aeabi_dsub+0x678>
 8002282:	1e59      	subs	r1, r3, #1
 8002284:	468c      	mov	ip, r1
 8002286:	2b01      	cmp	r3, #1
 8002288:	d100      	bne.n	800228c <__aeabi_dsub+0x25c>
 800228a:	e249      	b.n	8002720 <__aeabi_dsub+0x6f0>
 800228c:	4d41      	ldr	r5, [pc, #260]	@ (8002394 <__aeabi_dsub+0x364>)
 800228e:	42ab      	cmp	r3, r5
 8002290:	d100      	bne.n	8002294 <__aeabi_dsub+0x264>
 8002292:	e28f      	b.n	80027b4 <__aeabi_dsub+0x784>
 8002294:	2701      	movs	r7, #1
 8002296:	2938      	cmp	r1, #56	@ 0x38
 8002298:	dc11      	bgt.n	80022be <__aeabi_dsub+0x28e>
 800229a:	4663      	mov	r3, ip
 800229c:	2b1f      	cmp	r3, #31
 800229e:	dd00      	ble.n	80022a2 <__aeabi_dsub+0x272>
 80022a0:	e25b      	b.n	800275a <__aeabi_dsub+0x72a>
 80022a2:	4661      	mov	r1, ip
 80022a4:	2320      	movs	r3, #32
 80022a6:	0027      	movs	r7, r4
 80022a8:	1a5b      	subs	r3, r3, r1
 80022aa:	0005      	movs	r5, r0
 80022ac:	4098      	lsls	r0, r3
 80022ae:	409f      	lsls	r7, r3
 80022b0:	40cd      	lsrs	r5, r1
 80022b2:	1e43      	subs	r3, r0, #1
 80022b4:	4198      	sbcs	r0, r3
 80022b6:	40cc      	lsrs	r4, r1
 80022b8:	432f      	orrs	r7, r5
 80022ba:	4307      	orrs	r7, r0
 80022bc:	44a3      	add	fp, r4
 80022be:	18bf      	adds	r7, r7, r2
 80022c0:	4297      	cmp	r7, r2
 80022c2:	4192      	sbcs	r2, r2
 80022c4:	4252      	negs	r2, r2
 80022c6:	445a      	add	r2, fp
 80022c8:	0014      	movs	r4, r2
 80022ca:	464d      	mov	r5, r9
 80022cc:	e787      	b.n	80021de <__aeabi_dsub+0x1ae>
 80022ce:	4f34      	ldr	r7, [pc, #208]	@ (80023a0 <__aeabi_dsub+0x370>)
 80022d0:	1c6b      	adds	r3, r5, #1
 80022d2:	423b      	tst	r3, r7
 80022d4:	d000      	beq.n	80022d8 <__aeabi_dsub+0x2a8>
 80022d6:	e0b6      	b.n	8002446 <__aeabi_dsub+0x416>
 80022d8:	4659      	mov	r1, fp
 80022da:	0023      	movs	r3, r4
 80022dc:	4311      	orrs	r1, r2
 80022de:	000f      	movs	r7, r1
 80022e0:	4303      	orrs	r3, r0
 80022e2:	2d00      	cmp	r5, #0
 80022e4:	d000      	beq.n	80022e8 <__aeabi_dsub+0x2b8>
 80022e6:	e126      	b.n	8002536 <__aeabi_dsub+0x506>
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d100      	bne.n	80022ee <__aeabi_dsub+0x2be>
 80022ec:	e1c0      	b.n	8002670 <__aeabi_dsub+0x640>
 80022ee:	2900      	cmp	r1, #0
 80022f0:	d100      	bne.n	80022f4 <__aeabi_dsub+0x2c4>
 80022f2:	e0a1      	b.n	8002438 <__aeabi_dsub+0x408>
 80022f4:	1a83      	subs	r3, r0, r2
 80022f6:	4698      	mov	r8, r3
 80022f8:	465b      	mov	r3, fp
 80022fa:	4540      	cmp	r0, r8
 80022fc:	41ad      	sbcs	r5, r5
 80022fe:	1ae3      	subs	r3, r4, r3
 8002300:	426d      	negs	r5, r5
 8002302:	1b5b      	subs	r3, r3, r5
 8002304:	2580      	movs	r5, #128	@ 0x80
 8002306:	042d      	lsls	r5, r5, #16
 8002308:	422b      	tst	r3, r5
 800230a:	d100      	bne.n	800230e <__aeabi_dsub+0x2de>
 800230c:	e14b      	b.n	80025a6 <__aeabi_dsub+0x576>
 800230e:	465b      	mov	r3, fp
 8002310:	1a10      	subs	r0, r2, r0
 8002312:	4282      	cmp	r2, r0
 8002314:	4192      	sbcs	r2, r2
 8002316:	1b1c      	subs	r4, r3, r4
 8002318:	0007      	movs	r7, r0
 800231a:	2601      	movs	r6, #1
 800231c:	4663      	mov	r3, ip
 800231e:	4252      	negs	r2, r2
 8002320:	1aa4      	subs	r4, r4, r2
 8002322:	4327      	orrs	r7, r4
 8002324:	401e      	ands	r6, r3
 8002326:	2f00      	cmp	r7, #0
 8002328:	d100      	bne.n	800232c <__aeabi_dsub+0x2fc>
 800232a:	e142      	b.n	80025b2 <__aeabi_dsub+0x582>
 800232c:	422c      	tst	r4, r5
 800232e:	d100      	bne.n	8002332 <__aeabi_dsub+0x302>
 8002330:	e26d      	b.n	800280e <__aeabi_dsub+0x7de>
 8002332:	4b19      	ldr	r3, [pc, #100]	@ (8002398 <__aeabi_dsub+0x368>)
 8002334:	2501      	movs	r5, #1
 8002336:	401c      	ands	r4, r3
 8002338:	e71b      	b.n	8002172 <__aeabi_dsub+0x142>
 800233a:	42bd      	cmp	r5, r7
 800233c:	d100      	bne.n	8002340 <__aeabi_dsub+0x310>
 800233e:	e13b      	b.n	80025b8 <__aeabi_dsub+0x588>
 8002340:	2701      	movs	r7, #1
 8002342:	2b38      	cmp	r3, #56	@ 0x38
 8002344:	dd00      	ble.n	8002348 <__aeabi_dsub+0x318>
 8002346:	e745      	b.n	80021d4 <__aeabi_dsub+0x1a4>
 8002348:	2780      	movs	r7, #128	@ 0x80
 800234a:	4659      	mov	r1, fp
 800234c:	043f      	lsls	r7, r7, #16
 800234e:	4339      	orrs	r1, r7
 8002350:	468b      	mov	fp, r1
 8002352:	e72a      	b.n	80021aa <__aeabi_dsub+0x17a>
 8002354:	2400      	movs	r4, #0
 8002356:	2700      	movs	r7, #0
 8002358:	052d      	lsls	r5, r5, #20
 800235a:	4325      	orrs	r5, r4
 800235c:	07f6      	lsls	r6, r6, #31
 800235e:	4335      	orrs	r5, r6
 8002360:	0038      	movs	r0, r7
 8002362:	0029      	movs	r1, r5
 8002364:	b003      	add	sp, #12
 8002366:	bcf0      	pop	{r4, r5, r6, r7}
 8002368:	46bb      	mov	fp, r7
 800236a:	46b2      	mov	sl, r6
 800236c:	46a9      	mov	r9, r5
 800236e:	46a0      	mov	r8, r4
 8002370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002372:	077b      	lsls	r3, r7, #29
 8002374:	d004      	beq.n	8002380 <__aeabi_dsub+0x350>
 8002376:	230f      	movs	r3, #15
 8002378:	403b      	ands	r3, r7
 800237a:	2b04      	cmp	r3, #4
 800237c:	d000      	beq.n	8002380 <__aeabi_dsub+0x350>
 800237e:	e6e7      	b.n	8002150 <__aeabi_dsub+0x120>
 8002380:	002b      	movs	r3, r5
 8002382:	08f8      	lsrs	r0, r7, #3
 8002384:	4a03      	ldr	r2, [pc, #12]	@ (8002394 <__aeabi_dsub+0x364>)
 8002386:	0767      	lsls	r7, r4, #29
 8002388:	4307      	orrs	r7, r0
 800238a:	08e5      	lsrs	r5, r4, #3
 800238c:	4293      	cmp	r3, r2
 800238e:	d100      	bne.n	8002392 <__aeabi_dsub+0x362>
 8002390:	e74a      	b.n	8002228 <__aeabi_dsub+0x1f8>
 8002392:	e0a5      	b.n	80024e0 <__aeabi_dsub+0x4b0>
 8002394:	000007ff 	.word	0x000007ff
 8002398:	ff7fffff 	.word	0xff7fffff
 800239c:	fffff801 	.word	0xfffff801
 80023a0:	000007fe 	.word	0x000007fe
 80023a4:	0038      	movs	r0, r7
 80023a6:	f7fe f87f 	bl	80004a8 <__clzsi2>
 80023aa:	0003      	movs	r3, r0
 80023ac:	3318      	adds	r3, #24
 80023ae:	2b1f      	cmp	r3, #31
 80023b0:	dc00      	bgt.n	80023b4 <__aeabi_dsub+0x384>
 80023b2:	e6a7      	b.n	8002104 <__aeabi_dsub+0xd4>
 80023b4:	003a      	movs	r2, r7
 80023b6:	3808      	subs	r0, #8
 80023b8:	4082      	lsls	r2, r0
 80023ba:	429d      	cmp	r5, r3
 80023bc:	dd00      	ble.n	80023c0 <__aeabi_dsub+0x390>
 80023be:	e08a      	b.n	80024d6 <__aeabi_dsub+0x4a6>
 80023c0:	1b5b      	subs	r3, r3, r5
 80023c2:	1c58      	adds	r0, r3, #1
 80023c4:	281f      	cmp	r0, #31
 80023c6:	dc00      	bgt.n	80023ca <__aeabi_dsub+0x39a>
 80023c8:	e1d8      	b.n	800277c <__aeabi_dsub+0x74c>
 80023ca:	0017      	movs	r7, r2
 80023cc:	3b1f      	subs	r3, #31
 80023ce:	40df      	lsrs	r7, r3
 80023d0:	2820      	cmp	r0, #32
 80023d2:	d005      	beq.n	80023e0 <__aeabi_dsub+0x3b0>
 80023d4:	2340      	movs	r3, #64	@ 0x40
 80023d6:	1a1b      	subs	r3, r3, r0
 80023d8:	409a      	lsls	r2, r3
 80023da:	1e53      	subs	r3, r2, #1
 80023dc:	419a      	sbcs	r2, r3
 80023de:	4317      	orrs	r7, r2
 80023e0:	2500      	movs	r5, #0
 80023e2:	2f00      	cmp	r7, #0
 80023e4:	d100      	bne.n	80023e8 <__aeabi_dsub+0x3b8>
 80023e6:	e0e5      	b.n	80025b4 <__aeabi_dsub+0x584>
 80023e8:	077b      	lsls	r3, r7, #29
 80023ea:	d000      	beq.n	80023ee <__aeabi_dsub+0x3be>
 80023ec:	e6ab      	b.n	8002146 <__aeabi_dsub+0x116>
 80023ee:	002c      	movs	r4, r5
 80023f0:	e7c6      	b.n	8002380 <__aeabi_dsub+0x350>
 80023f2:	08c0      	lsrs	r0, r0, #3
 80023f4:	e7c6      	b.n	8002384 <__aeabi_dsub+0x354>
 80023f6:	2700      	movs	r7, #0
 80023f8:	2400      	movs	r4, #0
 80023fa:	4dd1      	ldr	r5, [pc, #836]	@ (8002740 <__aeabi_dsub+0x710>)
 80023fc:	e7ac      	b.n	8002358 <__aeabi_dsub+0x328>
 80023fe:	4fd1      	ldr	r7, [pc, #836]	@ (8002744 <__aeabi_dsub+0x714>)
 8002400:	1c6b      	adds	r3, r5, #1
 8002402:	423b      	tst	r3, r7
 8002404:	d171      	bne.n	80024ea <__aeabi_dsub+0x4ba>
 8002406:	0023      	movs	r3, r4
 8002408:	4303      	orrs	r3, r0
 800240a:	2d00      	cmp	r5, #0
 800240c:	d000      	beq.n	8002410 <__aeabi_dsub+0x3e0>
 800240e:	e14e      	b.n	80026ae <__aeabi_dsub+0x67e>
 8002410:	4657      	mov	r7, sl
 8002412:	2b00      	cmp	r3, #0
 8002414:	d100      	bne.n	8002418 <__aeabi_dsub+0x3e8>
 8002416:	e1b5      	b.n	8002784 <__aeabi_dsub+0x754>
 8002418:	2f00      	cmp	r7, #0
 800241a:	d00d      	beq.n	8002438 <__aeabi_dsub+0x408>
 800241c:	1883      	adds	r3, r0, r2
 800241e:	4283      	cmp	r3, r0
 8002420:	4180      	sbcs	r0, r0
 8002422:	445c      	add	r4, fp
 8002424:	4240      	negs	r0, r0
 8002426:	1824      	adds	r4, r4, r0
 8002428:	0222      	lsls	r2, r4, #8
 800242a:	d500      	bpl.n	800242e <__aeabi_dsub+0x3fe>
 800242c:	e1c8      	b.n	80027c0 <__aeabi_dsub+0x790>
 800242e:	001f      	movs	r7, r3
 8002430:	4698      	mov	r8, r3
 8002432:	4327      	orrs	r7, r4
 8002434:	d100      	bne.n	8002438 <__aeabi_dsub+0x408>
 8002436:	e0bc      	b.n	80025b2 <__aeabi_dsub+0x582>
 8002438:	4643      	mov	r3, r8
 800243a:	0767      	lsls	r7, r4, #29
 800243c:	08db      	lsrs	r3, r3, #3
 800243e:	431f      	orrs	r7, r3
 8002440:	08e5      	lsrs	r5, r4, #3
 8002442:	2300      	movs	r3, #0
 8002444:	e04c      	b.n	80024e0 <__aeabi_dsub+0x4b0>
 8002446:	1a83      	subs	r3, r0, r2
 8002448:	4698      	mov	r8, r3
 800244a:	465b      	mov	r3, fp
 800244c:	4540      	cmp	r0, r8
 800244e:	41bf      	sbcs	r7, r7
 8002450:	1ae3      	subs	r3, r4, r3
 8002452:	427f      	negs	r7, r7
 8002454:	1bdb      	subs	r3, r3, r7
 8002456:	021f      	lsls	r7, r3, #8
 8002458:	d47c      	bmi.n	8002554 <__aeabi_dsub+0x524>
 800245a:	4647      	mov	r7, r8
 800245c:	431f      	orrs	r7, r3
 800245e:	d100      	bne.n	8002462 <__aeabi_dsub+0x432>
 8002460:	e0a6      	b.n	80025b0 <__aeabi_dsub+0x580>
 8002462:	001c      	movs	r4, r3
 8002464:	4647      	mov	r7, r8
 8002466:	e645      	b.n	80020f4 <__aeabi_dsub+0xc4>
 8002468:	4cb7      	ldr	r4, [pc, #732]	@ (8002748 <__aeabi_dsub+0x718>)
 800246a:	1aed      	subs	r5, r5, r3
 800246c:	4014      	ands	r4, r2
 800246e:	077b      	lsls	r3, r7, #29
 8002470:	d000      	beq.n	8002474 <__aeabi_dsub+0x444>
 8002472:	e780      	b.n	8002376 <__aeabi_dsub+0x346>
 8002474:	e784      	b.n	8002380 <__aeabi_dsub+0x350>
 8002476:	464b      	mov	r3, r9
 8002478:	0025      	movs	r5, r4
 800247a:	4305      	orrs	r5, r0
 800247c:	d066      	beq.n	800254c <__aeabi_dsub+0x51c>
 800247e:	1e5f      	subs	r7, r3, #1
 8002480:	2b01      	cmp	r3, #1
 8002482:	d100      	bne.n	8002486 <__aeabi_dsub+0x456>
 8002484:	e0fc      	b.n	8002680 <__aeabi_dsub+0x650>
 8002486:	4dae      	ldr	r5, [pc, #696]	@ (8002740 <__aeabi_dsub+0x710>)
 8002488:	42ab      	cmp	r3, r5
 800248a:	d100      	bne.n	800248e <__aeabi_dsub+0x45e>
 800248c:	e15e      	b.n	800274c <__aeabi_dsub+0x71c>
 800248e:	4666      	mov	r6, ip
 8002490:	2f38      	cmp	r7, #56	@ 0x38
 8002492:	dc00      	bgt.n	8002496 <__aeabi_dsub+0x466>
 8002494:	e0b4      	b.n	8002600 <__aeabi_dsub+0x5d0>
 8002496:	2001      	movs	r0, #1
 8002498:	1a17      	subs	r7, r2, r0
 800249a:	42ba      	cmp	r2, r7
 800249c:	4192      	sbcs	r2, r2
 800249e:	465b      	mov	r3, fp
 80024a0:	4252      	negs	r2, r2
 80024a2:	464d      	mov	r5, r9
 80024a4:	1a9c      	subs	r4, r3, r2
 80024a6:	e620      	b.n	80020ea <__aeabi_dsub+0xba>
 80024a8:	0767      	lsls	r7, r4, #29
 80024aa:	08c0      	lsrs	r0, r0, #3
 80024ac:	4307      	orrs	r7, r0
 80024ae:	08e5      	lsrs	r5, r4, #3
 80024b0:	e6ba      	b.n	8002228 <__aeabi_dsub+0x1f8>
 80024b2:	001f      	movs	r7, r3
 80024b4:	4659      	mov	r1, fp
 80024b6:	3f20      	subs	r7, #32
 80024b8:	40f9      	lsrs	r1, r7
 80024ba:	000f      	movs	r7, r1
 80024bc:	2b20      	cmp	r3, #32
 80024be:	d005      	beq.n	80024cc <__aeabi_dsub+0x49c>
 80024c0:	2140      	movs	r1, #64	@ 0x40
 80024c2:	1acb      	subs	r3, r1, r3
 80024c4:	4659      	mov	r1, fp
 80024c6:	4099      	lsls	r1, r3
 80024c8:	430a      	orrs	r2, r1
 80024ca:	4692      	mov	sl, r2
 80024cc:	4653      	mov	r3, sl
 80024ce:	1e5a      	subs	r2, r3, #1
 80024d0:	4193      	sbcs	r3, r2
 80024d2:	431f      	orrs	r7, r3
 80024d4:	e604      	b.n	80020e0 <__aeabi_dsub+0xb0>
 80024d6:	1aeb      	subs	r3, r5, r3
 80024d8:	4d9b      	ldr	r5, [pc, #620]	@ (8002748 <__aeabi_dsub+0x718>)
 80024da:	4015      	ands	r5, r2
 80024dc:	076f      	lsls	r7, r5, #29
 80024de:	08ed      	lsrs	r5, r5, #3
 80024e0:	032c      	lsls	r4, r5, #12
 80024e2:	055d      	lsls	r5, r3, #21
 80024e4:	0b24      	lsrs	r4, r4, #12
 80024e6:	0d6d      	lsrs	r5, r5, #21
 80024e8:	e736      	b.n	8002358 <__aeabi_dsub+0x328>
 80024ea:	4d95      	ldr	r5, [pc, #596]	@ (8002740 <__aeabi_dsub+0x710>)
 80024ec:	42ab      	cmp	r3, r5
 80024ee:	d100      	bne.n	80024f2 <__aeabi_dsub+0x4c2>
 80024f0:	e0d6      	b.n	80026a0 <__aeabi_dsub+0x670>
 80024f2:	1882      	adds	r2, r0, r2
 80024f4:	0021      	movs	r1, r4
 80024f6:	4282      	cmp	r2, r0
 80024f8:	4180      	sbcs	r0, r0
 80024fa:	4459      	add	r1, fp
 80024fc:	4240      	negs	r0, r0
 80024fe:	1808      	adds	r0, r1, r0
 8002500:	07c7      	lsls	r7, r0, #31
 8002502:	0852      	lsrs	r2, r2, #1
 8002504:	4317      	orrs	r7, r2
 8002506:	0844      	lsrs	r4, r0, #1
 8002508:	0752      	lsls	r2, r2, #29
 800250a:	d400      	bmi.n	800250e <__aeabi_dsub+0x4de>
 800250c:	e185      	b.n	800281a <__aeabi_dsub+0x7ea>
 800250e:	220f      	movs	r2, #15
 8002510:	001d      	movs	r5, r3
 8002512:	403a      	ands	r2, r7
 8002514:	2a04      	cmp	r2, #4
 8002516:	d000      	beq.n	800251a <__aeabi_dsub+0x4ea>
 8002518:	e61a      	b.n	8002150 <__aeabi_dsub+0x120>
 800251a:	08ff      	lsrs	r7, r7, #3
 800251c:	0764      	lsls	r4, r4, #29
 800251e:	4327      	orrs	r7, r4
 8002520:	0905      	lsrs	r5, r0, #4
 8002522:	e7dd      	b.n	80024e0 <__aeabi_dsub+0x4b0>
 8002524:	465b      	mov	r3, fp
 8002526:	08d2      	lsrs	r2, r2, #3
 8002528:	075f      	lsls	r7, r3, #29
 800252a:	4317      	orrs	r7, r2
 800252c:	08dd      	lsrs	r5, r3, #3
 800252e:	e67b      	b.n	8002228 <__aeabi_dsub+0x1f8>
 8002530:	2700      	movs	r7, #0
 8002532:	2400      	movs	r4, #0
 8002534:	e710      	b.n	8002358 <__aeabi_dsub+0x328>
 8002536:	2b00      	cmp	r3, #0
 8002538:	d000      	beq.n	800253c <__aeabi_dsub+0x50c>
 800253a:	e0d6      	b.n	80026ea <__aeabi_dsub+0x6ba>
 800253c:	2900      	cmp	r1, #0
 800253e:	d000      	beq.n	8002542 <__aeabi_dsub+0x512>
 8002540:	e12f      	b.n	80027a2 <__aeabi_dsub+0x772>
 8002542:	2480      	movs	r4, #128	@ 0x80
 8002544:	2600      	movs	r6, #0
 8002546:	4d7e      	ldr	r5, [pc, #504]	@ (8002740 <__aeabi_dsub+0x710>)
 8002548:	0324      	lsls	r4, r4, #12
 800254a:	e705      	b.n	8002358 <__aeabi_dsub+0x328>
 800254c:	4666      	mov	r6, ip
 800254e:	465c      	mov	r4, fp
 8002550:	08d0      	lsrs	r0, r2, #3
 8002552:	e717      	b.n	8002384 <__aeabi_dsub+0x354>
 8002554:	465b      	mov	r3, fp
 8002556:	1a17      	subs	r7, r2, r0
 8002558:	42ba      	cmp	r2, r7
 800255a:	4192      	sbcs	r2, r2
 800255c:	1b1c      	subs	r4, r3, r4
 800255e:	2601      	movs	r6, #1
 8002560:	4663      	mov	r3, ip
 8002562:	4252      	negs	r2, r2
 8002564:	1aa4      	subs	r4, r4, r2
 8002566:	401e      	ands	r6, r3
 8002568:	e5c4      	b.n	80020f4 <__aeabi_dsub+0xc4>
 800256a:	1883      	adds	r3, r0, r2
 800256c:	4283      	cmp	r3, r0
 800256e:	4180      	sbcs	r0, r0
 8002570:	445c      	add	r4, fp
 8002572:	4240      	negs	r0, r0
 8002574:	1825      	adds	r5, r4, r0
 8002576:	022a      	lsls	r2, r5, #8
 8002578:	d400      	bmi.n	800257c <__aeabi_dsub+0x54c>
 800257a:	e0da      	b.n	8002732 <__aeabi_dsub+0x702>
 800257c:	4a72      	ldr	r2, [pc, #456]	@ (8002748 <__aeabi_dsub+0x718>)
 800257e:	085b      	lsrs	r3, r3, #1
 8002580:	4015      	ands	r5, r2
 8002582:	07ea      	lsls	r2, r5, #31
 8002584:	431a      	orrs	r2, r3
 8002586:	0869      	lsrs	r1, r5, #1
 8002588:	075b      	lsls	r3, r3, #29
 800258a:	d400      	bmi.n	800258e <__aeabi_dsub+0x55e>
 800258c:	e14a      	b.n	8002824 <__aeabi_dsub+0x7f4>
 800258e:	230f      	movs	r3, #15
 8002590:	4013      	ands	r3, r2
 8002592:	2b04      	cmp	r3, #4
 8002594:	d100      	bne.n	8002598 <__aeabi_dsub+0x568>
 8002596:	e0fc      	b.n	8002792 <__aeabi_dsub+0x762>
 8002598:	1d17      	adds	r7, r2, #4
 800259a:	4297      	cmp	r7, r2
 800259c:	41a4      	sbcs	r4, r4
 800259e:	4264      	negs	r4, r4
 80025a0:	2502      	movs	r5, #2
 80025a2:	1864      	adds	r4, r4, r1
 80025a4:	e6ec      	b.n	8002380 <__aeabi_dsub+0x350>
 80025a6:	4647      	mov	r7, r8
 80025a8:	001c      	movs	r4, r3
 80025aa:	431f      	orrs	r7, r3
 80025ac:	d000      	beq.n	80025b0 <__aeabi_dsub+0x580>
 80025ae:	e743      	b.n	8002438 <__aeabi_dsub+0x408>
 80025b0:	2600      	movs	r6, #0
 80025b2:	2500      	movs	r5, #0
 80025b4:	2400      	movs	r4, #0
 80025b6:	e6cf      	b.n	8002358 <__aeabi_dsub+0x328>
 80025b8:	08c0      	lsrs	r0, r0, #3
 80025ba:	0767      	lsls	r7, r4, #29
 80025bc:	4307      	orrs	r7, r0
 80025be:	08e5      	lsrs	r5, r4, #3
 80025c0:	e632      	b.n	8002228 <__aeabi_dsub+0x1f8>
 80025c2:	1a87      	subs	r7, r0, r2
 80025c4:	465b      	mov	r3, fp
 80025c6:	42b8      	cmp	r0, r7
 80025c8:	4180      	sbcs	r0, r0
 80025ca:	1ae4      	subs	r4, r4, r3
 80025cc:	4240      	negs	r0, r0
 80025ce:	1a24      	subs	r4, r4, r0
 80025d0:	0223      	lsls	r3, r4, #8
 80025d2:	d428      	bmi.n	8002626 <__aeabi_dsub+0x5f6>
 80025d4:	0763      	lsls	r3, r4, #29
 80025d6:	08ff      	lsrs	r7, r7, #3
 80025d8:	431f      	orrs	r7, r3
 80025da:	08e5      	lsrs	r5, r4, #3
 80025dc:	2301      	movs	r3, #1
 80025de:	e77f      	b.n	80024e0 <__aeabi_dsub+0x4b0>
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d100      	bne.n	80025e6 <__aeabi_dsub+0x5b6>
 80025e4:	e673      	b.n	80022ce <__aeabi_dsub+0x29e>
 80025e6:	464b      	mov	r3, r9
 80025e8:	1b5f      	subs	r7, r3, r5
 80025ea:	003b      	movs	r3, r7
 80025ec:	2d00      	cmp	r5, #0
 80025ee:	d100      	bne.n	80025f2 <__aeabi_dsub+0x5c2>
 80025f0:	e742      	b.n	8002478 <__aeabi_dsub+0x448>
 80025f2:	2f38      	cmp	r7, #56	@ 0x38
 80025f4:	dd00      	ble.n	80025f8 <__aeabi_dsub+0x5c8>
 80025f6:	e0ec      	b.n	80027d2 <__aeabi_dsub+0x7a2>
 80025f8:	2380      	movs	r3, #128	@ 0x80
 80025fa:	000e      	movs	r6, r1
 80025fc:	041b      	lsls	r3, r3, #16
 80025fe:	431c      	orrs	r4, r3
 8002600:	2f1f      	cmp	r7, #31
 8002602:	dc25      	bgt.n	8002650 <__aeabi_dsub+0x620>
 8002604:	2520      	movs	r5, #32
 8002606:	0023      	movs	r3, r4
 8002608:	1bed      	subs	r5, r5, r7
 800260a:	0001      	movs	r1, r0
 800260c:	40a8      	lsls	r0, r5
 800260e:	40ab      	lsls	r3, r5
 8002610:	40f9      	lsrs	r1, r7
 8002612:	1e45      	subs	r5, r0, #1
 8002614:	41a8      	sbcs	r0, r5
 8002616:	430b      	orrs	r3, r1
 8002618:	40fc      	lsrs	r4, r7
 800261a:	4318      	orrs	r0, r3
 800261c:	465b      	mov	r3, fp
 800261e:	1b1b      	subs	r3, r3, r4
 8002620:	469b      	mov	fp, r3
 8002622:	e739      	b.n	8002498 <__aeabi_dsub+0x468>
 8002624:	4666      	mov	r6, ip
 8002626:	2501      	movs	r5, #1
 8002628:	e562      	b.n	80020f0 <__aeabi_dsub+0xc0>
 800262a:	001f      	movs	r7, r3
 800262c:	4659      	mov	r1, fp
 800262e:	3f20      	subs	r7, #32
 8002630:	40f9      	lsrs	r1, r7
 8002632:	468c      	mov	ip, r1
 8002634:	2b20      	cmp	r3, #32
 8002636:	d005      	beq.n	8002644 <__aeabi_dsub+0x614>
 8002638:	2740      	movs	r7, #64	@ 0x40
 800263a:	4659      	mov	r1, fp
 800263c:	1afb      	subs	r3, r7, r3
 800263e:	4099      	lsls	r1, r3
 8002640:	430a      	orrs	r2, r1
 8002642:	4692      	mov	sl, r2
 8002644:	4657      	mov	r7, sl
 8002646:	1e7b      	subs	r3, r7, #1
 8002648:	419f      	sbcs	r7, r3
 800264a:	4663      	mov	r3, ip
 800264c:	431f      	orrs	r7, r3
 800264e:	e5c1      	b.n	80021d4 <__aeabi_dsub+0x1a4>
 8002650:	003b      	movs	r3, r7
 8002652:	0025      	movs	r5, r4
 8002654:	3b20      	subs	r3, #32
 8002656:	40dd      	lsrs	r5, r3
 8002658:	2f20      	cmp	r7, #32
 800265a:	d004      	beq.n	8002666 <__aeabi_dsub+0x636>
 800265c:	2340      	movs	r3, #64	@ 0x40
 800265e:	1bdb      	subs	r3, r3, r7
 8002660:	409c      	lsls	r4, r3
 8002662:	4320      	orrs	r0, r4
 8002664:	4680      	mov	r8, r0
 8002666:	4640      	mov	r0, r8
 8002668:	1e43      	subs	r3, r0, #1
 800266a:	4198      	sbcs	r0, r3
 800266c:	4328      	orrs	r0, r5
 800266e:	e713      	b.n	8002498 <__aeabi_dsub+0x468>
 8002670:	2900      	cmp	r1, #0
 8002672:	d09d      	beq.n	80025b0 <__aeabi_dsub+0x580>
 8002674:	2601      	movs	r6, #1
 8002676:	4663      	mov	r3, ip
 8002678:	465c      	mov	r4, fp
 800267a:	4690      	mov	r8, r2
 800267c:	401e      	ands	r6, r3
 800267e:	e6db      	b.n	8002438 <__aeabi_dsub+0x408>
 8002680:	1a17      	subs	r7, r2, r0
 8002682:	465b      	mov	r3, fp
 8002684:	42ba      	cmp	r2, r7
 8002686:	4192      	sbcs	r2, r2
 8002688:	1b1c      	subs	r4, r3, r4
 800268a:	4252      	negs	r2, r2
 800268c:	1aa4      	subs	r4, r4, r2
 800268e:	0223      	lsls	r3, r4, #8
 8002690:	d4c8      	bmi.n	8002624 <__aeabi_dsub+0x5f4>
 8002692:	0763      	lsls	r3, r4, #29
 8002694:	08ff      	lsrs	r7, r7, #3
 8002696:	431f      	orrs	r7, r3
 8002698:	4666      	mov	r6, ip
 800269a:	2301      	movs	r3, #1
 800269c:	08e5      	lsrs	r5, r4, #3
 800269e:	e71f      	b.n	80024e0 <__aeabi_dsub+0x4b0>
 80026a0:	001d      	movs	r5, r3
 80026a2:	2400      	movs	r4, #0
 80026a4:	2700      	movs	r7, #0
 80026a6:	e657      	b.n	8002358 <__aeabi_dsub+0x328>
 80026a8:	465c      	mov	r4, fp
 80026aa:	08d0      	lsrs	r0, r2, #3
 80026ac:	e66a      	b.n	8002384 <__aeabi_dsub+0x354>
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d100      	bne.n	80026b4 <__aeabi_dsub+0x684>
 80026b2:	e737      	b.n	8002524 <__aeabi_dsub+0x4f4>
 80026b4:	4653      	mov	r3, sl
 80026b6:	08c0      	lsrs	r0, r0, #3
 80026b8:	0767      	lsls	r7, r4, #29
 80026ba:	4307      	orrs	r7, r0
 80026bc:	08e5      	lsrs	r5, r4, #3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d100      	bne.n	80026c4 <__aeabi_dsub+0x694>
 80026c2:	e5b1      	b.n	8002228 <__aeabi_dsub+0x1f8>
 80026c4:	2380      	movs	r3, #128	@ 0x80
 80026c6:	031b      	lsls	r3, r3, #12
 80026c8:	421d      	tst	r5, r3
 80026ca:	d008      	beq.n	80026de <__aeabi_dsub+0x6ae>
 80026cc:	4659      	mov	r1, fp
 80026ce:	08c8      	lsrs	r0, r1, #3
 80026d0:	4218      	tst	r0, r3
 80026d2:	d104      	bne.n	80026de <__aeabi_dsub+0x6ae>
 80026d4:	08d2      	lsrs	r2, r2, #3
 80026d6:	0749      	lsls	r1, r1, #29
 80026d8:	430a      	orrs	r2, r1
 80026da:	0017      	movs	r7, r2
 80026dc:	0005      	movs	r5, r0
 80026de:	0f7b      	lsrs	r3, r7, #29
 80026e0:	00ff      	lsls	r7, r7, #3
 80026e2:	08ff      	lsrs	r7, r7, #3
 80026e4:	075b      	lsls	r3, r3, #29
 80026e6:	431f      	orrs	r7, r3
 80026e8:	e59e      	b.n	8002228 <__aeabi_dsub+0x1f8>
 80026ea:	08c0      	lsrs	r0, r0, #3
 80026ec:	0763      	lsls	r3, r4, #29
 80026ee:	4318      	orrs	r0, r3
 80026f0:	08e5      	lsrs	r5, r4, #3
 80026f2:	2900      	cmp	r1, #0
 80026f4:	d053      	beq.n	800279e <__aeabi_dsub+0x76e>
 80026f6:	2380      	movs	r3, #128	@ 0x80
 80026f8:	031b      	lsls	r3, r3, #12
 80026fa:	421d      	tst	r5, r3
 80026fc:	d00a      	beq.n	8002714 <__aeabi_dsub+0x6e4>
 80026fe:	4659      	mov	r1, fp
 8002700:	08cc      	lsrs	r4, r1, #3
 8002702:	421c      	tst	r4, r3
 8002704:	d106      	bne.n	8002714 <__aeabi_dsub+0x6e4>
 8002706:	2601      	movs	r6, #1
 8002708:	4663      	mov	r3, ip
 800270a:	0025      	movs	r5, r4
 800270c:	08d0      	lsrs	r0, r2, #3
 800270e:	0749      	lsls	r1, r1, #29
 8002710:	4308      	orrs	r0, r1
 8002712:	401e      	ands	r6, r3
 8002714:	0f47      	lsrs	r7, r0, #29
 8002716:	00c0      	lsls	r0, r0, #3
 8002718:	08c0      	lsrs	r0, r0, #3
 800271a:	077f      	lsls	r7, r7, #29
 800271c:	4307      	orrs	r7, r0
 800271e:	e583      	b.n	8002228 <__aeabi_dsub+0x1f8>
 8002720:	1883      	adds	r3, r0, r2
 8002722:	4293      	cmp	r3, r2
 8002724:	4192      	sbcs	r2, r2
 8002726:	445c      	add	r4, fp
 8002728:	4252      	negs	r2, r2
 800272a:	18a5      	adds	r5, r4, r2
 800272c:	022a      	lsls	r2, r5, #8
 800272e:	d500      	bpl.n	8002732 <__aeabi_dsub+0x702>
 8002730:	e724      	b.n	800257c <__aeabi_dsub+0x54c>
 8002732:	076f      	lsls	r7, r5, #29
 8002734:	08db      	lsrs	r3, r3, #3
 8002736:	431f      	orrs	r7, r3
 8002738:	08ed      	lsrs	r5, r5, #3
 800273a:	2301      	movs	r3, #1
 800273c:	e6d0      	b.n	80024e0 <__aeabi_dsub+0x4b0>
 800273e:	46c0      	nop			@ (mov r8, r8)
 8002740:	000007ff 	.word	0x000007ff
 8002744:	000007fe 	.word	0x000007fe
 8002748:	ff7fffff 	.word	0xff7fffff
 800274c:	465b      	mov	r3, fp
 800274e:	08d2      	lsrs	r2, r2, #3
 8002750:	075f      	lsls	r7, r3, #29
 8002752:	4666      	mov	r6, ip
 8002754:	4317      	orrs	r7, r2
 8002756:	08dd      	lsrs	r5, r3, #3
 8002758:	e566      	b.n	8002228 <__aeabi_dsub+0x1f8>
 800275a:	0025      	movs	r5, r4
 800275c:	3b20      	subs	r3, #32
 800275e:	40dd      	lsrs	r5, r3
 8002760:	4663      	mov	r3, ip
 8002762:	2b20      	cmp	r3, #32
 8002764:	d005      	beq.n	8002772 <__aeabi_dsub+0x742>
 8002766:	2340      	movs	r3, #64	@ 0x40
 8002768:	4661      	mov	r1, ip
 800276a:	1a5b      	subs	r3, r3, r1
 800276c:	409c      	lsls	r4, r3
 800276e:	4320      	orrs	r0, r4
 8002770:	4680      	mov	r8, r0
 8002772:	4647      	mov	r7, r8
 8002774:	1e7b      	subs	r3, r7, #1
 8002776:	419f      	sbcs	r7, r3
 8002778:	432f      	orrs	r7, r5
 800277a:	e5a0      	b.n	80022be <__aeabi_dsub+0x28e>
 800277c:	2120      	movs	r1, #32
 800277e:	2700      	movs	r7, #0
 8002780:	1a09      	subs	r1, r1, r0
 8002782:	e4d2      	b.n	800212a <__aeabi_dsub+0xfa>
 8002784:	2f00      	cmp	r7, #0
 8002786:	d100      	bne.n	800278a <__aeabi_dsub+0x75a>
 8002788:	e713      	b.n	80025b2 <__aeabi_dsub+0x582>
 800278a:	465c      	mov	r4, fp
 800278c:	0017      	movs	r7, r2
 800278e:	2500      	movs	r5, #0
 8002790:	e5f6      	b.n	8002380 <__aeabi_dsub+0x350>
 8002792:	08d7      	lsrs	r7, r2, #3
 8002794:	0749      	lsls	r1, r1, #29
 8002796:	2302      	movs	r3, #2
 8002798:	430f      	orrs	r7, r1
 800279a:	092d      	lsrs	r5, r5, #4
 800279c:	e6a0      	b.n	80024e0 <__aeabi_dsub+0x4b0>
 800279e:	0007      	movs	r7, r0
 80027a0:	e542      	b.n	8002228 <__aeabi_dsub+0x1f8>
 80027a2:	465b      	mov	r3, fp
 80027a4:	2601      	movs	r6, #1
 80027a6:	075f      	lsls	r7, r3, #29
 80027a8:	08dd      	lsrs	r5, r3, #3
 80027aa:	4663      	mov	r3, ip
 80027ac:	08d2      	lsrs	r2, r2, #3
 80027ae:	4317      	orrs	r7, r2
 80027b0:	401e      	ands	r6, r3
 80027b2:	e539      	b.n	8002228 <__aeabi_dsub+0x1f8>
 80027b4:	465b      	mov	r3, fp
 80027b6:	08d2      	lsrs	r2, r2, #3
 80027b8:	075f      	lsls	r7, r3, #29
 80027ba:	4317      	orrs	r7, r2
 80027bc:	08dd      	lsrs	r5, r3, #3
 80027be:	e533      	b.n	8002228 <__aeabi_dsub+0x1f8>
 80027c0:	4a1e      	ldr	r2, [pc, #120]	@ (800283c <__aeabi_dsub+0x80c>)
 80027c2:	08db      	lsrs	r3, r3, #3
 80027c4:	4022      	ands	r2, r4
 80027c6:	0757      	lsls	r7, r2, #29
 80027c8:	0252      	lsls	r2, r2, #9
 80027ca:	2501      	movs	r5, #1
 80027cc:	431f      	orrs	r7, r3
 80027ce:	0b14      	lsrs	r4, r2, #12
 80027d0:	e5c2      	b.n	8002358 <__aeabi_dsub+0x328>
 80027d2:	000e      	movs	r6, r1
 80027d4:	2001      	movs	r0, #1
 80027d6:	e65f      	b.n	8002498 <__aeabi_dsub+0x468>
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00d      	beq.n	80027f8 <__aeabi_dsub+0x7c8>
 80027dc:	464b      	mov	r3, r9
 80027de:	1b5b      	subs	r3, r3, r5
 80027e0:	469c      	mov	ip, r3
 80027e2:	2d00      	cmp	r5, #0
 80027e4:	d100      	bne.n	80027e8 <__aeabi_dsub+0x7b8>
 80027e6:	e548      	b.n	800227a <__aeabi_dsub+0x24a>
 80027e8:	2701      	movs	r7, #1
 80027ea:	2b38      	cmp	r3, #56	@ 0x38
 80027ec:	dd00      	ble.n	80027f0 <__aeabi_dsub+0x7c0>
 80027ee:	e566      	b.n	80022be <__aeabi_dsub+0x28e>
 80027f0:	2380      	movs	r3, #128	@ 0x80
 80027f2:	041b      	lsls	r3, r3, #16
 80027f4:	431c      	orrs	r4, r3
 80027f6:	e550      	b.n	800229a <__aeabi_dsub+0x26a>
 80027f8:	1c6b      	adds	r3, r5, #1
 80027fa:	4d11      	ldr	r5, [pc, #68]	@ (8002840 <__aeabi_dsub+0x810>)
 80027fc:	422b      	tst	r3, r5
 80027fe:	d000      	beq.n	8002802 <__aeabi_dsub+0x7d2>
 8002800:	e673      	b.n	80024ea <__aeabi_dsub+0x4ba>
 8002802:	4659      	mov	r1, fp
 8002804:	0023      	movs	r3, r4
 8002806:	4311      	orrs	r1, r2
 8002808:	468a      	mov	sl, r1
 800280a:	4303      	orrs	r3, r0
 800280c:	e600      	b.n	8002410 <__aeabi_dsub+0x3e0>
 800280e:	0767      	lsls	r7, r4, #29
 8002810:	08c0      	lsrs	r0, r0, #3
 8002812:	2300      	movs	r3, #0
 8002814:	4307      	orrs	r7, r0
 8002816:	08e5      	lsrs	r5, r4, #3
 8002818:	e662      	b.n	80024e0 <__aeabi_dsub+0x4b0>
 800281a:	0764      	lsls	r4, r4, #29
 800281c:	08ff      	lsrs	r7, r7, #3
 800281e:	4327      	orrs	r7, r4
 8002820:	0905      	lsrs	r5, r0, #4
 8002822:	e65d      	b.n	80024e0 <__aeabi_dsub+0x4b0>
 8002824:	08d2      	lsrs	r2, r2, #3
 8002826:	0749      	lsls	r1, r1, #29
 8002828:	4311      	orrs	r1, r2
 800282a:	000f      	movs	r7, r1
 800282c:	2302      	movs	r3, #2
 800282e:	092d      	lsrs	r5, r5, #4
 8002830:	e656      	b.n	80024e0 <__aeabi_dsub+0x4b0>
 8002832:	0007      	movs	r7, r0
 8002834:	e5a4      	b.n	8002380 <__aeabi_dsub+0x350>
 8002836:	0038      	movs	r0, r7
 8002838:	e48f      	b.n	800215a <__aeabi_dsub+0x12a>
 800283a:	46c0      	nop			@ (mov r8, r8)
 800283c:	ff7fffff 	.word	0xff7fffff
 8002840:	000007fe 	.word	0x000007fe

08002844 <__aeabi_dcmpun>:
 8002844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002846:	46c6      	mov	lr, r8
 8002848:	031e      	lsls	r6, r3, #12
 800284a:	0b36      	lsrs	r6, r6, #12
 800284c:	46b0      	mov	r8, r6
 800284e:	4e0d      	ldr	r6, [pc, #52]	@ (8002884 <__aeabi_dcmpun+0x40>)
 8002850:	030c      	lsls	r4, r1, #12
 8002852:	004d      	lsls	r5, r1, #1
 8002854:	005f      	lsls	r7, r3, #1
 8002856:	b500      	push	{lr}
 8002858:	0b24      	lsrs	r4, r4, #12
 800285a:	0d6d      	lsrs	r5, r5, #21
 800285c:	0d7f      	lsrs	r7, r7, #21
 800285e:	42b5      	cmp	r5, r6
 8002860:	d00b      	beq.n	800287a <__aeabi_dcmpun+0x36>
 8002862:	4908      	ldr	r1, [pc, #32]	@ (8002884 <__aeabi_dcmpun+0x40>)
 8002864:	2000      	movs	r0, #0
 8002866:	428f      	cmp	r7, r1
 8002868:	d104      	bne.n	8002874 <__aeabi_dcmpun+0x30>
 800286a:	4646      	mov	r6, r8
 800286c:	4316      	orrs	r6, r2
 800286e:	0030      	movs	r0, r6
 8002870:	1e43      	subs	r3, r0, #1
 8002872:	4198      	sbcs	r0, r3
 8002874:	bc80      	pop	{r7}
 8002876:	46b8      	mov	r8, r7
 8002878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800287a:	4304      	orrs	r4, r0
 800287c:	2001      	movs	r0, #1
 800287e:	2c00      	cmp	r4, #0
 8002880:	d1f8      	bne.n	8002874 <__aeabi_dcmpun+0x30>
 8002882:	e7ee      	b.n	8002862 <__aeabi_dcmpun+0x1e>
 8002884:	000007ff 	.word	0x000007ff

08002888 <__aeabi_d2iz>:
 8002888:	000b      	movs	r3, r1
 800288a:	0002      	movs	r2, r0
 800288c:	b570      	push	{r4, r5, r6, lr}
 800288e:	4d16      	ldr	r5, [pc, #88]	@ (80028e8 <__aeabi_d2iz+0x60>)
 8002890:	030c      	lsls	r4, r1, #12
 8002892:	b082      	sub	sp, #8
 8002894:	0049      	lsls	r1, r1, #1
 8002896:	2000      	movs	r0, #0
 8002898:	9200      	str	r2, [sp, #0]
 800289a:	9301      	str	r3, [sp, #4]
 800289c:	0b24      	lsrs	r4, r4, #12
 800289e:	0d49      	lsrs	r1, r1, #21
 80028a0:	0fde      	lsrs	r6, r3, #31
 80028a2:	42a9      	cmp	r1, r5
 80028a4:	dd04      	ble.n	80028b0 <__aeabi_d2iz+0x28>
 80028a6:	4811      	ldr	r0, [pc, #68]	@ (80028ec <__aeabi_d2iz+0x64>)
 80028a8:	4281      	cmp	r1, r0
 80028aa:	dd03      	ble.n	80028b4 <__aeabi_d2iz+0x2c>
 80028ac:	4b10      	ldr	r3, [pc, #64]	@ (80028f0 <__aeabi_d2iz+0x68>)
 80028ae:	18f0      	adds	r0, r6, r3
 80028b0:	b002      	add	sp, #8
 80028b2:	bd70      	pop	{r4, r5, r6, pc}
 80028b4:	2080      	movs	r0, #128	@ 0x80
 80028b6:	0340      	lsls	r0, r0, #13
 80028b8:	4320      	orrs	r0, r4
 80028ba:	4c0e      	ldr	r4, [pc, #56]	@ (80028f4 <__aeabi_d2iz+0x6c>)
 80028bc:	1a64      	subs	r4, r4, r1
 80028be:	2c1f      	cmp	r4, #31
 80028c0:	dd08      	ble.n	80028d4 <__aeabi_d2iz+0x4c>
 80028c2:	4b0d      	ldr	r3, [pc, #52]	@ (80028f8 <__aeabi_d2iz+0x70>)
 80028c4:	1a5b      	subs	r3, r3, r1
 80028c6:	40d8      	lsrs	r0, r3
 80028c8:	0003      	movs	r3, r0
 80028ca:	4258      	negs	r0, r3
 80028cc:	2e00      	cmp	r6, #0
 80028ce:	d1ef      	bne.n	80028b0 <__aeabi_d2iz+0x28>
 80028d0:	0018      	movs	r0, r3
 80028d2:	e7ed      	b.n	80028b0 <__aeabi_d2iz+0x28>
 80028d4:	4b09      	ldr	r3, [pc, #36]	@ (80028fc <__aeabi_d2iz+0x74>)
 80028d6:	9a00      	ldr	r2, [sp, #0]
 80028d8:	469c      	mov	ip, r3
 80028da:	0003      	movs	r3, r0
 80028dc:	4461      	add	r1, ip
 80028de:	408b      	lsls	r3, r1
 80028e0:	40e2      	lsrs	r2, r4
 80028e2:	4313      	orrs	r3, r2
 80028e4:	e7f1      	b.n	80028ca <__aeabi_d2iz+0x42>
 80028e6:	46c0      	nop			@ (mov r8, r8)
 80028e8:	000003fe 	.word	0x000003fe
 80028ec:	0000041d 	.word	0x0000041d
 80028f0:	7fffffff 	.word	0x7fffffff
 80028f4:	00000433 	.word	0x00000433
 80028f8:	00000413 	.word	0x00000413
 80028fc:	fffffbed 	.word	0xfffffbed

08002900 <__aeabi_i2d>:
 8002900:	b570      	push	{r4, r5, r6, lr}
 8002902:	2800      	cmp	r0, #0
 8002904:	d016      	beq.n	8002934 <__aeabi_i2d+0x34>
 8002906:	17c3      	asrs	r3, r0, #31
 8002908:	18c5      	adds	r5, r0, r3
 800290a:	405d      	eors	r5, r3
 800290c:	0fc4      	lsrs	r4, r0, #31
 800290e:	0028      	movs	r0, r5
 8002910:	f7fd fdca 	bl	80004a8 <__clzsi2>
 8002914:	4b10      	ldr	r3, [pc, #64]	@ (8002958 <__aeabi_i2d+0x58>)
 8002916:	1a1b      	subs	r3, r3, r0
 8002918:	055b      	lsls	r3, r3, #21
 800291a:	0d5b      	lsrs	r3, r3, #21
 800291c:	280a      	cmp	r0, #10
 800291e:	dc14      	bgt.n	800294a <__aeabi_i2d+0x4a>
 8002920:	0002      	movs	r2, r0
 8002922:	002e      	movs	r6, r5
 8002924:	3215      	adds	r2, #21
 8002926:	4096      	lsls	r6, r2
 8002928:	220b      	movs	r2, #11
 800292a:	1a12      	subs	r2, r2, r0
 800292c:	40d5      	lsrs	r5, r2
 800292e:	032d      	lsls	r5, r5, #12
 8002930:	0b2d      	lsrs	r5, r5, #12
 8002932:	e003      	b.n	800293c <__aeabi_i2d+0x3c>
 8002934:	2400      	movs	r4, #0
 8002936:	2300      	movs	r3, #0
 8002938:	2500      	movs	r5, #0
 800293a:	2600      	movs	r6, #0
 800293c:	051b      	lsls	r3, r3, #20
 800293e:	432b      	orrs	r3, r5
 8002940:	07e4      	lsls	r4, r4, #31
 8002942:	4323      	orrs	r3, r4
 8002944:	0030      	movs	r0, r6
 8002946:	0019      	movs	r1, r3
 8002948:	bd70      	pop	{r4, r5, r6, pc}
 800294a:	380b      	subs	r0, #11
 800294c:	4085      	lsls	r5, r0
 800294e:	032d      	lsls	r5, r5, #12
 8002950:	2600      	movs	r6, #0
 8002952:	0b2d      	lsrs	r5, r5, #12
 8002954:	e7f2      	b.n	800293c <__aeabi_i2d+0x3c>
 8002956:	46c0      	nop			@ (mov r8, r8)
 8002958:	0000041e 	.word	0x0000041e

0800295c <__aeabi_ui2d>:
 800295c:	b510      	push	{r4, lr}
 800295e:	1e04      	subs	r4, r0, #0
 8002960:	d010      	beq.n	8002984 <__aeabi_ui2d+0x28>
 8002962:	f7fd fda1 	bl	80004a8 <__clzsi2>
 8002966:	4b0e      	ldr	r3, [pc, #56]	@ (80029a0 <__aeabi_ui2d+0x44>)
 8002968:	1a1b      	subs	r3, r3, r0
 800296a:	055b      	lsls	r3, r3, #21
 800296c:	0d5b      	lsrs	r3, r3, #21
 800296e:	280a      	cmp	r0, #10
 8002970:	dc0f      	bgt.n	8002992 <__aeabi_ui2d+0x36>
 8002972:	220b      	movs	r2, #11
 8002974:	0021      	movs	r1, r4
 8002976:	1a12      	subs	r2, r2, r0
 8002978:	40d1      	lsrs	r1, r2
 800297a:	3015      	adds	r0, #21
 800297c:	030a      	lsls	r2, r1, #12
 800297e:	4084      	lsls	r4, r0
 8002980:	0b12      	lsrs	r2, r2, #12
 8002982:	e001      	b.n	8002988 <__aeabi_ui2d+0x2c>
 8002984:	2300      	movs	r3, #0
 8002986:	2200      	movs	r2, #0
 8002988:	051b      	lsls	r3, r3, #20
 800298a:	4313      	orrs	r3, r2
 800298c:	0020      	movs	r0, r4
 800298e:	0019      	movs	r1, r3
 8002990:	bd10      	pop	{r4, pc}
 8002992:	0022      	movs	r2, r4
 8002994:	380b      	subs	r0, #11
 8002996:	4082      	lsls	r2, r0
 8002998:	0312      	lsls	r2, r2, #12
 800299a:	2400      	movs	r4, #0
 800299c:	0b12      	lsrs	r2, r2, #12
 800299e:	e7f3      	b.n	8002988 <__aeabi_ui2d+0x2c>
 80029a0:	0000041e 	.word	0x0000041e

080029a4 <__aeabi_f2d>:
 80029a4:	b570      	push	{r4, r5, r6, lr}
 80029a6:	0242      	lsls	r2, r0, #9
 80029a8:	0043      	lsls	r3, r0, #1
 80029aa:	0fc4      	lsrs	r4, r0, #31
 80029ac:	20fe      	movs	r0, #254	@ 0xfe
 80029ae:	0e1b      	lsrs	r3, r3, #24
 80029b0:	1c59      	adds	r1, r3, #1
 80029b2:	0a55      	lsrs	r5, r2, #9
 80029b4:	4208      	tst	r0, r1
 80029b6:	d00c      	beq.n	80029d2 <__aeabi_f2d+0x2e>
 80029b8:	21e0      	movs	r1, #224	@ 0xe0
 80029ba:	0089      	lsls	r1, r1, #2
 80029bc:	468c      	mov	ip, r1
 80029be:	076d      	lsls	r5, r5, #29
 80029c0:	0b12      	lsrs	r2, r2, #12
 80029c2:	4463      	add	r3, ip
 80029c4:	051b      	lsls	r3, r3, #20
 80029c6:	4313      	orrs	r3, r2
 80029c8:	07e4      	lsls	r4, r4, #31
 80029ca:	4323      	orrs	r3, r4
 80029cc:	0028      	movs	r0, r5
 80029ce:	0019      	movs	r1, r3
 80029d0:	bd70      	pop	{r4, r5, r6, pc}
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d114      	bne.n	8002a00 <__aeabi_f2d+0x5c>
 80029d6:	2d00      	cmp	r5, #0
 80029d8:	d01b      	beq.n	8002a12 <__aeabi_f2d+0x6e>
 80029da:	0028      	movs	r0, r5
 80029dc:	f7fd fd64 	bl	80004a8 <__clzsi2>
 80029e0:	280a      	cmp	r0, #10
 80029e2:	dc1c      	bgt.n	8002a1e <__aeabi_f2d+0x7a>
 80029e4:	230b      	movs	r3, #11
 80029e6:	002a      	movs	r2, r5
 80029e8:	1a1b      	subs	r3, r3, r0
 80029ea:	40da      	lsrs	r2, r3
 80029ec:	0003      	movs	r3, r0
 80029ee:	3315      	adds	r3, #21
 80029f0:	409d      	lsls	r5, r3
 80029f2:	4b0e      	ldr	r3, [pc, #56]	@ (8002a2c <__aeabi_f2d+0x88>)
 80029f4:	0312      	lsls	r2, r2, #12
 80029f6:	1a1b      	subs	r3, r3, r0
 80029f8:	055b      	lsls	r3, r3, #21
 80029fa:	0b12      	lsrs	r2, r2, #12
 80029fc:	0d5b      	lsrs	r3, r3, #21
 80029fe:	e7e1      	b.n	80029c4 <__aeabi_f2d+0x20>
 8002a00:	2d00      	cmp	r5, #0
 8002a02:	d009      	beq.n	8002a18 <__aeabi_f2d+0x74>
 8002a04:	0b13      	lsrs	r3, r2, #12
 8002a06:	2280      	movs	r2, #128	@ 0x80
 8002a08:	0312      	lsls	r2, r2, #12
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	076d      	lsls	r5, r5, #29
 8002a0e:	4b08      	ldr	r3, [pc, #32]	@ (8002a30 <__aeabi_f2d+0x8c>)
 8002a10:	e7d8      	b.n	80029c4 <__aeabi_f2d+0x20>
 8002a12:	2300      	movs	r3, #0
 8002a14:	2200      	movs	r2, #0
 8002a16:	e7d5      	b.n	80029c4 <__aeabi_f2d+0x20>
 8002a18:	2200      	movs	r2, #0
 8002a1a:	4b05      	ldr	r3, [pc, #20]	@ (8002a30 <__aeabi_f2d+0x8c>)
 8002a1c:	e7d2      	b.n	80029c4 <__aeabi_f2d+0x20>
 8002a1e:	0003      	movs	r3, r0
 8002a20:	002a      	movs	r2, r5
 8002a22:	3b0b      	subs	r3, #11
 8002a24:	409a      	lsls	r2, r3
 8002a26:	2500      	movs	r5, #0
 8002a28:	e7e3      	b.n	80029f2 <__aeabi_f2d+0x4e>
 8002a2a:	46c0      	nop			@ (mov r8, r8)
 8002a2c:	00000389 	.word	0x00000389
 8002a30:	000007ff 	.word	0x000007ff

08002a34 <_Z41__static_initialization_and_destruction_0v>:
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
};
 8002a38:	4b0f      	ldr	r3, [pc, #60]	@ (8002a78 <_Z41__static_initialization_and_destruction_0v+0x44>)
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a7c <_Z41__static_initialization_and_destruction_0v+0x48>)
 8002a3e:	605a      	str	r2, [r3, #4]
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 160), (TfLiteIntArray*)&g0::tensor_dimension7, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
 8002a40:	4b0d      	ldr	r3, [pc, #52]	@ (8002a78 <_Z41__static_initialization_and_destruction_0v+0x44>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	33a0      	adds	r3, #160	@ 0xa0
 8002a46:	001a      	movs	r2, r3
};
 8002a48:	4b0c      	ldr	r3, [pc, #48]	@ (8002a7c <_Z41__static_initialization_and_destruction_0v+0x48>)
 8002a4a:	21ac      	movs	r1, #172	@ 0xac
 8002a4c:	505a      	str	r2, [r3, r1]
 8002a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a78 <_Z41__static_initialization_and_destruction_0v+0x44>)
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	4b0a      	ldr	r3, [pc, #40]	@ (8002a7c <_Z41__static_initialization_and_destruction_0v+0x48>)
 8002a54:	21c4      	movs	r1, #196	@ 0xc4
 8002a56:	505a      	str	r2, [r3, r1]
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16), (TfLiteIntArray*)&g0::tensor_dimension9, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
 8002a58:	4b07      	ldr	r3, [pc, #28]	@ (8002a78 <_Z41__static_initialization_and_destruction_0v+0x44>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	3310      	adds	r3, #16
 8002a5e:	001a      	movs	r2, r3
};
 8002a60:	4b06      	ldr	r3, [pc, #24]	@ (8002a7c <_Z41__static_initialization_and_destruction_0v+0x48>)
 8002a62:	21dc      	movs	r1, #220	@ 0xdc
 8002a64:	505a      	str	r2, [r3, r1]
 8002a66:	4b04      	ldr	r3, [pc, #16]	@ (8002a78 <_Z41__static_initialization_and_destruction_0v+0x44>)
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	4b04      	ldr	r3, [pc, #16]	@ (8002a7c <_Z41__static_initialization_and_destruction_0v+0x48>)
 8002a6c:	21f4      	movs	r1, #244	@ 0xf4
 8002a6e:	505a      	str	r2, [r3, r1]
}
 8002a70:	46c0      	nop			@ (mov r8, r8)
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	46c0      	nop			@ (mov r8, r8)
 8002a78:	200002f8 	.word	0x200002f8
 8002a7c:	20000000 	.word	0x20000000

08002a80 <_GLOBAL__sub_I__Z20tflite_learn_13_initPFPvjjE>:
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	f7ff ffd6 	bl	8002a34 <_Z41__static_initialization_and_destruction_0v>
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002a90:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac4 <MX_CRC_Init+0x38>)
 8002a92:	4a0d      	ldr	r2, [pc, #52]	@ (8002ac8 <MX_CRC_Init+0x3c>)
 8002a94:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8002a96:	4b0b      	ldr	r3, [pc, #44]	@ (8002ac4 <MX_CRC_Init+0x38>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8002a9c:	4b09      	ldr	r3, [pc, #36]	@ (8002ac4 <MX_CRC_Init+0x38>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	60da      	str	r2, [r3, #12]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8002aa2:	4b08      	ldr	r3, [pc, #32]	@ (8002ac4 <MX_CRC_Init+0x38>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	611a      	str	r2, [r3, #16]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002aa8:	4b06      	ldr	r3, [pc, #24]	@ (8002ac4 <MX_CRC_Init+0x38>)
 8002aaa:	2201      	movs	r2, #1
 8002aac:	619a      	str	r2, [r3, #24]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002aae:	4b05      	ldr	r3, [pc, #20]	@ (8002ac4 <MX_CRC_Init+0x38>)
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f000 fdd1 	bl	8003658 <HAL_CRC_Init>
 8002ab6:	1e03      	subs	r3, r0, #0
 8002ab8:	d001      	beq.n	8002abe <MX_CRC_Init+0x32>
  {
    Error_Handler();
 8002aba:	f000 fa9b 	bl	8002ff4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002abe:	46c0      	nop			@ (mov r8, r8)
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	200002fc 	.word	0x200002fc
 8002ac8:	40023000 	.word	0x40023000

08002acc <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a09      	ldr	r2, [pc, #36]	@ (8002b00 <HAL_CRC_MspInit+0x34>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d10b      	bne.n	8002af6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002ade:	4b09      	ldr	r3, [pc, #36]	@ (8002b04 <HAL_CRC_MspInit+0x38>)
 8002ae0:	695a      	ldr	r2, [r3, #20]
 8002ae2:	4b08      	ldr	r3, [pc, #32]	@ (8002b04 <HAL_CRC_MspInit+0x38>)
 8002ae4:	2140      	movs	r1, #64	@ 0x40
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	615a      	str	r2, [r3, #20]
 8002aea:	4b06      	ldr	r3, [pc, #24]	@ (8002b04 <HAL_CRC_MspInit+0x38>)
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	2240      	movs	r2, #64	@ 0x40
 8002af0:	4013      	ands	r3, r2
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8002af6:	46c0      	nop			@ (mov r8, r8)
 8002af8:	46bd      	mov	sp, r7
 8002afa:	b004      	add	sp, #16
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	46c0      	nop			@ (mov r8, r8)
 8002b00:	40023000 	.word	0x40023000
 8002b04:	40021000 	.word	0x40021000

08002b08 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002b08:	b590      	push	{r4, r7, lr}
 8002b0a:	b08b      	sub	sp, #44	@ 0x2c
 8002b0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b0e:	2414      	movs	r4, #20
 8002b10:	193b      	adds	r3, r7, r4
 8002b12:	0018      	movs	r0, r3
 8002b14:	2314      	movs	r3, #20
 8002b16:	001a      	movs	r2, r3
 8002b18:	2100      	movs	r1, #0
 8002b1a:	f003 ff3f 	bl	800699c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b1e:	4b34      	ldr	r3, [pc, #208]	@ (8002bf0 <MX_GPIO_Init+0xe8>)
 8002b20:	695a      	ldr	r2, [r3, #20]
 8002b22:	4b33      	ldr	r3, [pc, #204]	@ (8002bf0 <MX_GPIO_Init+0xe8>)
 8002b24:	2180      	movs	r1, #128	@ 0x80
 8002b26:	0309      	lsls	r1, r1, #12
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	615a      	str	r2, [r3, #20]
 8002b2c:	4b30      	ldr	r3, [pc, #192]	@ (8002bf0 <MX_GPIO_Init+0xe8>)
 8002b2e:	695a      	ldr	r2, [r3, #20]
 8002b30:	2380      	movs	r3, #128	@ 0x80
 8002b32:	031b      	lsls	r3, r3, #12
 8002b34:	4013      	ands	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
 8002b38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b3a:	4b2d      	ldr	r3, [pc, #180]	@ (8002bf0 <MX_GPIO_Init+0xe8>)
 8002b3c:	695a      	ldr	r2, [r3, #20]
 8002b3e:	4b2c      	ldr	r3, [pc, #176]	@ (8002bf0 <MX_GPIO_Init+0xe8>)
 8002b40:	2180      	movs	r1, #128	@ 0x80
 8002b42:	03c9      	lsls	r1, r1, #15
 8002b44:	430a      	orrs	r2, r1
 8002b46:	615a      	str	r2, [r3, #20]
 8002b48:	4b29      	ldr	r3, [pc, #164]	@ (8002bf0 <MX_GPIO_Init+0xe8>)
 8002b4a:	695a      	ldr	r2, [r3, #20]
 8002b4c:	2380      	movs	r3, #128	@ 0x80
 8002b4e:	03db      	lsls	r3, r3, #15
 8002b50:	4013      	ands	r3, r2
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b56:	4b26      	ldr	r3, [pc, #152]	@ (8002bf0 <MX_GPIO_Init+0xe8>)
 8002b58:	695a      	ldr	r2, [r3, #20]
 8002b5a:	4b25      	ldr	r3, [pc, #148]	@ (8002bf0 <MX_GPIO_Init+0xe8>)
 8002b5c:	2180      	movs	r1, #128	@ 0x80
 8002b5e:	0289      	lsls	r1, r1, #10
 8002b60:	430a      	orrs	r2, r1
 8002b62:	615a      	str	r2, [r3, #20]
 8002b64:	4b22      	ldr	r3, [pc, #136]	@ (8002bf0 <MX_GPIO_Init+0xe8>)
 8002b66:	695a      	ldr	r2, [r3, #20]
 8002b68:	2380      	movs	r3, #128	@ 0x80
 8002b6a:	029b      	lsls	r3, r3, #10
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	60bb      	str	r3, [r7, #8]
 8002b70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b72:	4b1f      	ldr	r3, [pc, #124]	@ (8002bf0 <MX_GPIO_Init+0xe8>)
 8002b74:	695a      	ldr	r2, [r3, #20]
 8002b76:	4b1e      	ldr	r3, [pc, #120]	@ (8002bf0 <MX_GPIO_Init+0xe8>)
 8002b78:	2180      	movs	r1, #128	@ 0x80
 8002b7a:	02c9      	lsls	r1, r1, #11
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	615a      	str	r2, [r3, #20]
 8002b80:	4b1b      	ldr	r3, [pc, #108]	@ (8002bf0 <MX_GPIO_Init+0xe8>)
 8002b82:	695a      	ldr	r2, [r3, #20]
 8002b84:	2380      	movs	r3, #128	@ 0x80
 8002b86:	02db      	lsls	r3, r3, #11
 8002b88:	4013      	ands	r3, r2
 8002b8a:	607b      	str	r3, [r7, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002b8e:	2390      	movs	r3, #144	@ 0x90
 8002b90:	05db      	lsls	r3, r3, #23
 8002b92:	2200      	movs	r2, #0
 8002b94:	2120      	movs	r1, #32
 8002b96:	0018      	movs	r0, r3
 8002b98:	f000 ff16 	bl	80039c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002b9c:	193b      	adds	r3, r7, r4
 8002b9e:	2280      	movs	r2, #128	@ 0x80
 8002ba0:	0192      	lsls	r2, r2, #6
 8002ba2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002ba4:	193b      	adds	r3, r7, r4
 8002ba6:	2284      	movs	r2, #132	@ 0x84
 8002ba8:	0392      	lsls	r2, r2, #14
 8002baa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bac:	193b      	adds	r3, r7, r4
 8002bae:	2200      	movs	r2, #0
 8002bb0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002bb2:	193b      	adds	r3, r7, r4
 8002bb4:	4a0f      	ldr	r2, [pc, #60]	@ (8002bf4 <MX_GPIO_Init+0xec>)
 8002bb6:	0019      	movs	r1, r3
 8002bb8:	0010      	movs	r0, r2
 8002bba:	f000 fd95 	bl	80036e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002bbe:	0021      	movs	r1, r4
 8002bc0:	187b      	adds	r3, r7, r1
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bc6:	187b      	adds	r3, r7, r1
 8002bc8:	2201      	movs	r2, #1
 8002bca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bcc:	187b      	adds	r3, r7, r1
 8002bce:	2200      	movs	r2, #0
 8002bd0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd2:	187b      	adds	r3, r7, r1
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002bd8:	187a      	adds	r2, r7, r1
 8002bda:	2390      	movs	r3, #144	@ 0x90
 8002bdc:	05db      	lsls	r3, r3, #23
 8002bde:	0011      	movs	r1, r2
 8002be0:	0018      	movs	r0, r3
 8002be2:	f000 fd81 	bl	80036e8 <HAL_GPIO_Init>

}
 8002be6:	46c0      	nop			@ (mov r8, r8)
 8002be8:	46bd      	mov	sp, r7
 8002bea:	b00b      	add	sp, #44	@ 0x2c
 8002bec:	bd90      	pop	{r4, r7, pc}
 8002bee:	46c0      	nop			@ (mov r8, r8)
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	48000800 	.word	0x48000800

08002bf8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8002c6c <MX_I2C1_Init+0x74>)
 8002bfe:	4a1c      	ldr	r2, [pc, #112]	@ (8002c70 <MX_I2C1_Init+0x78>)
 8002c00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10805D88;
 8002c02:	4b1a      	ldr	r3, [pc, #104]	@ (8002c6c <MX_I2C1_Init+0x74>)
 8002c04:	4a1b      	ldr	r2, [pc, #108]	@ (8002c74 <MX_I2C1_Init+0x7c>)
 8002c06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002c08:	4b18      	ldr	r3, [pc, #96]	@ (8002c6c <MX_I2C1_Init+0x74>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c0e:	4b17      	ldr	r3, [pc, #92]	@ (8002c6c <MX_I2C1_Init+0x74>)
 8002c10:	2201      	movs	r2, #1
 8002c12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c14:	4b15      	ldr	r3, [pc, #84]	@ (8002c6c <MX_I2C1_Init+0x74>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002c1a:	4b14      	ldr	r3, [pc, #80]	@ (8002c6c <MX_I2C1_Init+0x74>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002c20:	4b12      	ldr	r3, [pc, #72]	@ (8002c6c <MX_I2C1_Init+0x74>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c26:	4b11      	ldr	r3, [pc, #68]	@ (8002c6c <MX_I2C1_Init+0x74>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8002c6c <MX_I2C1_Init+0x74>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002c32:	4b0e      	ldr	r3, [pc, #56]	@ (8002c6c <MX_I2C1_Init+0x74>)
 8002c34:	0018      	movs	r0, r3
 8002c36:	f000 fee5 	bl	8003a04 <HAL_I2C_Init>
 8002c3a:	1e03      	subs	r3, r0, #0
 8002c3c:	d001      	beq.n	8002c42 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002c3e:	f000 f9d9 	bl	8002ff4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002c42:	4b0a      	ldr	r3, [pc, #40]	@ (8002c6c <MX_I2C1_Init+0x74>)
 8002c44:	2100      	movs	r1, #0
 8002c46:	0018      	movs	r0, r3
 8002c48:	f001 fce0 	bl	800460c <HAL_I2CEx_ConfigAnalogFilter>
 8002c4c:	1e03      	subs	r3, r0, #0
 8002c4e:	d001      	beq.n	8002c54 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002c50:	f000 f9d0 	bl	8002ff4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002c54:	4b05      	ldr	r3, [pc, #20]	@ (8002c6c <MX_I2C1_Init+0x74>)
 8002c56:	2100      	movs	r1, #0
 8002c58:	0018      	movs	r0, r3
 8002c5a:	f001 fd23 	bl	80046a4 <HAL_I2CEx_ConfigDigitalFilter>
 8002c5e:	1e03      	subs	r3, r0, #0
 8002c60:	d001      	beq.n	8002c66 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002c62:	f000 f9c7 	bl	8002ff4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c66:	46c0      	nop			@ (mov r8, r8)
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	20000318 	.word	0x20000318
 8002c70:	40005400 	.word	0x40005400
 8002c74:	10805d88 	.word	0x10805d88

08002c78 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002c78:	b590      	push	{r4, r7, lr}
 8002c7a:	b08b      	sub	sp, #44	@ 0x2c
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c80:	2414      	movs	r4, #20
 8002c82:	193b      	adds	r3, r7, r4
 8002c84:	0018      	movs	r0, r3
 8002c86:	2314      	movs	r3, #20
 8002c88:	001a      	movs	r2, r3
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	f003 fe86 	bl	800699c <memset>
  if(i2cHandle->Instance==I2C1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a1c      	ldr	r2, [pc, #112]	@ (8002d08 <HAL_I2C_MspInit+0x90>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d132      	bne.n	8002d00 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c9a:	4b1c      	ldr	r3, [pc, #112]	@ (8002d0c <HAL_I2C_MspInit+0x94>)
 8002c9c:	695a      	ldr	r2, [r3, #20]
 8002c9e:	4b1b      	ldr	r3, [pc, #108]	@ (8002d0c <HAL_I2C_MspInit+0x94>)
 8002ca0:	2180      	movs	r1, #128	@ 0x80
 8002ca2:	02c9      	lsls	r1, r1, #11
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	615a      	str	r2, [r3, #20]
 8002ca8:	4b18      	ldr	r3, [pc, #96]	@ (8002d0c <HAL_I2C_MspInit+0x94>)
 8002caa:	695a      	ldr	r2, [r3, #20]
 8002cac:	2380      	movs	r3, #128	@ 0x80
 8002cae:	02db      	lsls	r3, r3, #11
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	613b      	str	r3, [r7, #16]
 8002cb4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002cb6:	193b      	adds	r3, r7, r4
 8002cb8:	22c0      	movs	r2, #192	@ 0xc0
 8002cba:	0092      	lsls	r2, r2, #2
 8002cbc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cbe:	0021      	movs	r1, r4
 8002cc0:	187b      	adds	r3, r7, r1
 8002cc2:	2212      	movs	r2, #18
 8002cc4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc6:	187b      	adds	r3, r7, r1
 8002cc8:	2200      	movs	r2, #0
 8002cca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ccc:	187b      	adds	r3, r7, r1
 8002cce:	2203      	movs	r2, #3
 8002cd0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002cd2:	187b      	adds	r3, r7, r1
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cd8:	187b      	adds	r3, r7, r1
 8002cda:	4a0d      	ldr	r2, [pc, #52]	@ (8002d10 <HAL_I2C_MspInit+0x98>)
 8002cdc:	0019      	movs	r1, r3
 8002cde:	0010      	movs	r0, r2
 8002ce0:	f000 fd02 	bl	80036e8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ce4:	4b09      	ldr	r3, [pc, #36]	@ (8002d0c <HAL_I2C_MspInit+0x94>)
 8002ce6:	69da      	ldr	r2, [r3, #28]
 8002ce8:	4b08      	ldr	r3, [pc, #32]	@ (8002d0c <HAL_I2C_MspInit+0x94>)
 8002cea:	2180      	movs	r1, #128	@ 0x80
 8002cec:	0389      	lsls	r1, r1, #14
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	61da      	str	r2, [r3, #28]
 8002cf2:	4b06      	ldr	r3, [pc, #24]	@ (8002d0c <HAL_I2C_MspInit+0x94>)
 8002cf4:	69da      	ldr	r2, [r3, #28]
 8002cf6:	2380      	movs	r3, #128	@ 0x80
 8002cf8:	039b      	lsls	r3, r3, #14
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002d00:	46c0      	nop			@ (mov r8, r8)
 8002d02:	46bd      	mov	sp, r7
 8002d04:	b00b      	add	sp, #44	@ 0x2c
 8002d06:	bd90      	pop	{r4, r7, pc}
 8002d08:	40005400 	.word	0x40005400
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	48000400 	.word	0x48000400

08002d14 <MPU6050_Init>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define MPU6050_ADDR 0x68 << 1
#define CONVERT_G_TO_MS2 9.80665f

void MPU6050_Init(void) {
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af04      	add	r7, sp, #16
    uint8_t check, data;
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, 0x75, 1, &check, 1, 100);
 8002d1a:	4811      	ldr	r0, [pc, #68]	@ (8002d60 <MPU6050_Init+0x4c>)
 8002d1c:	2364      	movs	r3, #100	@ 0x64
 8002d1e:	9302      	str	r3, [sp, #8]
 8002d20:	2301      	movs	r3, #1
 8002d22:	9301      	str	r3, [sp, #4]
 8002d24:	1dfb      	adds	r3, r7, #7
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	2301      	movs	r3, #1
 8002d2a:	2275      	movs	r2, #117	@ 0x75
 8002d2c:	21d0      	movs	r1, #208	@ 0xd0
 8002d2e:	f001 f83d 	bl	8003dac <HAL_I2C_Mem_Read>
    if (check == 0x68) {
 8002d32:	1dfb      	adds	r3, r7, #7
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	2b68      	cmp	r3, #104	@ 0x68
 8002d38:	d10e      	bne.n	8002d58 <MPU6050_Init+0x44>
        data = 0;
 8002d3a:	1dbb      	adds	r3, r7, #6
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x6B, 1, &data, 1, 100);  // Wake up
 8002d40:	4807      	ldr	r0, [pc, #28]	@ (8002d60 <MPU6050_Init+0x4c>)
 8002d42:	2364      	movs	r3, #100	@ 0x64
 8002d44:	9302      	str	r3, [sp, #8]
 8002d46:	2301      	movs	r3, #1
 8002d48:	9301      	str	r3, [sp, #4]
 8002d4a:	1dbb      	adds	r3, r7, #6
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	2301      	movs	r3, #1
 8002d50:	226b      	movs	r2, #107	@ 0x6b
 8002d52:	21d0      	movs	r1, #208	@ 0xd0
 8002d54:	f000 fefc 	bl	8003b50 <HAL_I2C_Mem_Write>
    }
}
 8002d58:	46c0      	nop			@ (mov r8, r8)
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	b002      	add	sp, #8
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	20000318 	.word	0x20000318

08002d64 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(float *ax, float *ay, float *az) {
 8002d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d66:	b08d      	sub	sp, #52	@ 0x34
 8002d68:	af04      	add	r7, sp, #16
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
    uint8_t rec[6];
    int16_t raw_x, raw_y, raw_z;

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, 0x3B, 1, rec, 6, 100);
 8002d70:	483a      	ldr	r0, [pc, #232]	@ (8002e5c <MPU6050_Read_Accel+0xf8>)
 8002d72:	2364      	movs	r3, #100	@ 0x64
 8002d74:	9302      	str	r3, [sp, #8]
 8002d76:	2306      	movs	r3, #6
 8002d78:	9301      	str	r3, [sp, #4]
 8002d7a:	2414      	movs	r4, #20
 8002d7c:	193b      	adds	r3, r7, r4
 8002d7e:	9300      	str	r3, [sp, #0]
 8002d80:	2301      	movs	r3, #1
 8002d82:	223b      	movs	r2, #59	@ 0x3b
 8002d84:	21d0      	movs	r1, #208	@ 0xd0
 8002d86:	f001 f811 	bl	8003dac <HAL_I2C_Mem_Read>
    raw_x = (int16_t)(rec[0] << 8 | rec[1]);
 8002d8a:	0020      	movs	r0, r4
 8002d8c:	183b      	adds	r3, r7, r0
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	b21b      	sxth	r3, r3
 8002d92:	021b      	lsls	r3, r3, #8
 8002d94:	b219      	sxth	r1, r3
 8002d96:	183b      	adds	r3, r7, r0
 8002d98:	785b      	ldrb	r3, [r3, #1]
 8002d9a:	b21a      	sxth	r2, r3
 8002d9c:	241e      	movs	r4, #30
 8002d9e:	193b      	adds	r3, r7, r4
 8002da0:	430a      	orrs	r2, r1
 8002da2:	801a      	strh	r2, [r3, #0]
    raw_y = (int16_t)(rec[2] << 8 | rec[3]);
 8002da4:	183b      	adds	r3, r7, r0
 8002da6:	789b      	ldrb	r3, [r3, #2]
 8002da8:	b21b      	sxth	r3, r3
 8002daa:	021b      	lsls	r3, r3, #8
 8002dac:	b219      	sxth	r1, r3
 8002dae:	183b      	adds	r3, r7, r0
 8002db0:	78db      	ldrb	r3, [r3, #3]
 8002db2:	b21a      	sxth	r2, r3
 8002db4:	251c      	movs	r5, #28
 8002db6:	197b      	adds	r3, r7, r5
 8002db8:	430a      	orrs	r2, r1
 8002dba:	801a      	strh	r2, [r3, #0]
    raw_z = (int16_t)(rec[4] << 8 | rec[5]);
 8002dbc:	183b      	adds	r3, r7, r0
 8002dbe:	791b      	ldrb	r3, [r3, #4]
 8002dc0:	b21b      	sxth	r3, r3
 8002dc2:	021b      	lsls	r3, r3, #8
 8002dc4:	b219      	sxth	r1, r3
 8002dc6:	183b      	adds	r3, r7, r0
 8002dc8:	795b      	ldrb	r3, [r3, #5]
 8002dca:	b21a      	sxth	r2, r3
 8002dcc:	261a      	movs	r6, #26
 8002dce:	19bb      	adds	r3, r7, r6
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	801a      	strh	r2, [r3, #0]

    *ax = ((float)raw_x / 16384.0f) * CONVERT_G_TO_MS2;
 8002dd4:	193b      	adds	r3, r7, r4
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	5e9b      	ldrsh	r3, [r3, r2]
 8002dda:	0018      	movs	r0, r3
 8002ddc:	f7fd fdf2 	bl	80009c4 <__aeabi_i2f>
 8002de0:	1c03      	adds	r3, r0, #0
 8002de2:	218d      	movs	r1, #141	@ 0x8d
 8002de4:	05c9      	lsls	r1, r1, #23
 8002de6:	1c18      	adds	r0, r3, #0
 8002de8:	f7fd fb7c 	bl	80004e4 <__aeabi_fdiv>
 8002dec:	1c03      	adds	r3, r0, #0
 8002dee:	491c      	ldr	r1, [pc, #112]	@ (8002e60 <MPU6050_Read_Accel+0xfc>)
 8002df0:	1c18      	adds	r0, r3, #0
 8002df2:	f7fd fc8d 	bl	8000710 <__aeabi_fmul>
 8002df6:	1c03      	adds	r3, r0, #0
 8002df8:	1c1a      	adds	r2, r3, #0
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	601a      	str	r2, [r3, #0]
    *ay = ((float)raw_y / 16384.0f) * CONVERT_G_TO_MS2;
 8002dfe:	197b      	adds	r3, r7, r5
 8002e00:	2200      	movs	r2, #0
 8002e02:	5e9b      	ldrsh	r3, [r3, r2]
 8002e04:	0018      	movs	r0, r3
 8002e06:	f7fd fddd 	bl	80009c4 <__aeabi_i2f>
 8002e0a:	1c03      	adds	r3, r0, #0
 8002e0c:	218d      	movs	r1, #141	@ 0x8d
 8002e0e:	05c9      	lsls	r1, r1, #23
 8002e10:	1c18      	adds	r0, r3, #0
 8002e12:	f7fd fb67 	bl	80004e4 <__aeabi_fdiv>
 8002e16:	1c03      	adds	r3, r0, #0
 8002e18:	4911      	ldr	r1, [pc, #68]	@ (8002e60 <MPU6050_Read_Accel+0xfc>)
 8002e1a:	1c18      	adds	r0, r3, #0
 8002e1c:	f7fd fc78 	bl	8000710 <__aeabi_fmul>
 8002e20:	1c03      	adds	r3, r0, #0
 8002e22:	1c1a      	adds	r2, r3, #0
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	601a      	str	r2, [r3, #0]
    *az = ((float)raw_z / 16384.0f) * CONVERT_G_TO_MS2;
 8002e28:	19bb      	adds	r3, r7, r6
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	5e9b      	ldrsh	r3, [r3, r2]
 8002e2e:	0018      	movs	r0, r3
 8002e30:	f7fd fdc8 	bl	80009c4 <__aeabi_i2f>
 8002e34:	1c03      	adds	r3, r0, #0
 8002e36:	218d      	movs	r1, #141	@ 0x8d
 8002e38:	05c9      	lsls	r1, r1, #23
 8002e3a:	1c18      	adds	r0, r3, #0
 8002e3c:	f7fd fb52 	bl	80004e4 <__aeabi_fdiv>
 8002e40:	1c03      	adds	r3, r0, #0
 8002e42:	4907      	ldr	r1, [pc, #28]	@ (8002e60 <MPU6050_Read_Accel+0xfc>)
 8002e44:	1c18      	adds	r0, r3, #0
 8002e46:	f7fd fc63 	bl	8000710 <__aeabi_fmul>
 8002e4a:	1c03      	adds	r3, r0, #0
 8002e4c:	1c1a      	adds	r2, r3, #0
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	601a      	str	r2, [r3, #0]
}
 8002e52:	46c0      	nop			@ (mov r8, r8)
 8002e54:	46bd      	mov	sp, r7
 8002e56:	b009      	add	sp, #36	@ 0x24
 8002e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e5a:	46c0      	nop			@ (mov r8, r8)
 8002e5c:	20000318 	.word	0x20000318
 8002e60:	411ce80a 	.word	0x411ce80a

08002e64 <__io_putchar>:

int __io_putchar(int ch) {
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	425b      	negs	r3, r3
 8002e70:	1d39      	adds	r1, r7, #4
 8002e72:	4804      	ldr	r0, [pc, #16]	@ (8002e84 <__io_putchar+0x20>)
 8002e74:	2201      	movs	r2, #1
 8002e76:	f002 f9e1 	bl	800523c <HAL_UART_Transmit>
    return ch;
 8002e7a:	687b      	ldr	r3, [r7, #4]
}
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	b002      	add	sp, #8
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	200003f8 	.word	0x200003f8

08002e88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e88:	b5b0      	push	{r4, r5, r7, lr}
 8002e8a:	b08a      	sub	sp, #40	@ 0x28
 8002e8c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e8e:	f000 facb 	bl	8003428 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e92:	f000 f84b 	bl	8002f2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e96:	f7ff fe37 	bl	8002b08 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002e9a:	f7ff fead 	bl	8002bf8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002e9e:	f000 f9b1 	bl	8003204 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002ea2:	f000 f9df 	bl	8003264 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8002ea6:	f7ff fdf1 	bl	8002a8c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init();
 8002eaa:	f7ff ff33 	bl	8002d14 <MPU6050_Init>
  printf("Started\r\n");
 8002eae:	4b1d      	ldr	r3, [pc, #116]	@ (8002f24 <main+0x9c>)
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	f003 fc7d 	bl	80067b0 <puts>
  float ax, ay, az;
  uint32_t t0 = HAL_GetTick();
 8002eb6:	f000 fb11 	bl	80034dc <HAL_GetTick>
 8002eba:	0003      	movs	r3, r0
 8002ebc:	617b      	str	r3, [r7, #20]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      if (HAL_GetTick() - t0 >= 20) {  // ~50Hz
 8002ebe:	f000 fb0d 	bl	80034dc <HAL_GetTick>
 8002ec2:	0002      	movs	r2, r0
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b13      	cmp	r3, #19
 8002eca:	d9f8      	bls.n	8002ebe <main+0x36>
          t0 = HAL_GetTick();
 8002ecc:	f000 fb06 	bl	80034dc <HAL_GetTick>
 8002ed0:	0003      	movs	r3, r0
 8002ed2:	617b      	str	r3, [r7, #20]
          MPU6050_Read_Accel(&ax, &ay, &az);
 8002ed4:	2008      	movs	r0, #8
 8002ed6:	183a      	adds	r2, r7, r0
 8002ed8:	230c      	movs	r3, #12
 8002eda:	18f9      	adds	r1, r7, r3
 8002edc:	2308      	movs	r3, #8
 8002ede:	181b      	adds	r3, r3, r0
 8002ee0:	19db      	adds	r3, r3, r7
 8002ee2:	0018      	movs	r0, r3
 8002ee4:	f7ff ff3e 	bl	8002d64 <MPU6050_Read_Accel>
          printf("%.2f,%.2f,%.2f\r\n", ax, ay, az);  // Формат для data-forwarder
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	1c18      	adds	r0, r3, #0
 8002eec:	f7ff fd5a 	bl	80029a4 <__aeabi_f2d>
 8002ef0:	6038      	str	r0, [r7, #0]
 8002ef2:	6079      	str	r1, [r7, #4]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	1c18      	adds	r0, r3, #0
 8002ef8:	f7ff fd54 	bl	80029a4 <__aeabi_f2d>
 8002efc:	0004      	movs	r4, r0
 8002efe:	000d      	movs	r5, r1
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	1c18      	adds	r0, r3, #0
 8002f04:	f7ff fd4e 	bl	80029a4 <__aeabi_f2d>
 8002f08:	0002      	movs	r2, r0
 8002f0a:	000b      	movs	r3, r1
 8002f0c:	4906      	ldr	r1, [pc, #24]	@ (8002f28 <main+0xa0>)
 8002f0e:	9202      	str	r2, [sp, #8]
 8002f10:	9303      	str	r3, [sp, #12]
 8002f12:	9400      	str	r4, [sp, #0]
 8002f14:	9501      	str	r5, [sp, #4]
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	0008      	movs	r0, r1
 8002f1c:	f003 fbe2 	bl	80066e4 <iprintf>
      if (HAL_GetTick() - t0 >= 20) {  // ~50Hz
 8002f20:	e7cd      	b.n	8002ebe <main+0x36>
 8002f22:	46c0      	nop			@ (mov r8, r8)
 8002f24:	080085b0 	.word	0x080085b0
 8002f28:	080085bc 	.word	0x080085bc

08002f2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f2c:	b590      	push	{r4, r7, lr}
 8002f2e:	b095      	sub	sp, #84	@ 0x54
 8002f30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f32:	2420      	movs	r4, #32
 8002f34:	193b      	adds	r3, r7, r4
 8002f36:	0018      	movs	r0, r3
 8002f38:	2330      	movs	r3, #48	@ 0x30
 8002f3a:	001a      	movs	r2, r3
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	f003 fd2d 	bl	800699c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f42:	2310      	movs	r3, #16
 8002f44:	18fb      	adds	r3, r7, r3
 8002f46:	0018      	movs	r0, r3
 8002f48:	2310      	movs	r3, #16
 8002f4a:	001a      	movs	r2, r3
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	f003 fd25 	bl	800699c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f52:	003b      	movs	r3, r7
 8002f54:	0018      	movs	r0, r3
 8002f56:	2310      	movs	r3, #16
 8002f58:	001a      	movs	r2, r3
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	f003 fd1e 	bl	800699c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f60:	0021      	movs	r1, r4
 8002f62:	187b      	adds	r3, r7, r1
 8002f64:	2202      	movs	r2, #2
 8002f66:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f68:	187b      	adds	r3, r7, r1
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f6e:	187b      	adds	r3, r7, r1
 8002f70:	2210      	movs	r2, #16
 8002f72:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f74:	187b      	adds	r3, r7, r1
 8002f76:	2202      	movs	r2, #2
 8002f78:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f7a:	187b      	adds	r3, r7, r1
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002f80:	187b      	adds	r3, r7, r1
 8002f82:	22a0      	movs	r2, #160	@ 0xa0
 8002f84:	0392      	lsls	r2, r2, #14
 8002f86:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002f88:	187b      	adds	r3, r7, r1
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f8e:	187b      	adds	r3, r7, r1
 8002f90:	0018      	movs	r0, r3
 8002f92:	f001 fbd3 	bl	800473c <HAL_RCC_OscConfig>
 8002f96:	1e03      	subs	r3, r0, #0
 8002f98:	d001      	beq.n	8002f9e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002f9a:	f000 f82b 	bl	8002ff4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f9e:	2110      	movs	r1, #16
 8002fa0:	187b      	adds	r3, r7, r1
 8002fa2:	2207      	movs	r2, #7
 8002fa4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fa6:	187b      	adds	r3, r7, r1
 8002fa8:	2202      	movs	r2, #2
 8002faa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fac:	187b      	adds	r3, r7, r1
 8002fae:	2200      	movs	r2, #0
 8002fb0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002fb2:	187b      	adds	r3, r7, r1
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002fb8:	187b      	adds	r3, r7, r1
 8002fba:	2101      	movs	r1, #1
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	f001 fed7 	bl	8004d70 <HAL_RCC_ClockConfig>
 8002fc2:	1e03      	subs	r3, r0, #0
 8002fc4:	d001      	beq.n	8002fca <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002fc6:	f000 f815 	bl	8002ff4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002fca:	003b      	movs	r3, r7
 8002fcc:	2221      	movs	r2, #33	@ 0x21
 8002fce:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002fd0:	003b      	movs	r3, r7
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8002fd6:	003b      	movs	r3, r7
 8002fd8:	2210      	movs	r2, #16
 8002fda:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fdc:	003b      	movs	r3, r7
 8002fde:	0018      	movs	r0, r3
 8002fe0:	f002 f80a 	bl	8004ff8 <HAL_RCCEx_PeriphCLKConfig>
 8002fe4:	1e03      	subs	r3, r0, #0
 8002fe6:	d001      	beq.n	8002fec <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002fe8:	f000 f804 	bl	8002ff4 <Error_Handler>
  }
}
 8002fec:	46c0      	nop			@ (mov r8, r8)
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	b015      	add	sp, #84	@ 0x54
 8002ff2:	bd90      	pop	{r4, r7, pc}

08002ff4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ff8:	b672      	cpsid	i
}
 8002ffa:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ffc:	46c0      	nop			@ (mov r8, r8)
 8002ffe:	e7fd      	b.n	8002ffc <Error_Handler+0x8>

08003000 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003006:	4b0f      	ldr	r3, [pc, #60]	@ (8003044 <HAL_MspInit+0x44>)
 8003008:	699a      	ldr	r2, [r3, #24]
 800300a:	4b0e      	ldr	r3, [pc, #56]	@ (8003044 <HAL_MspInit+0x44>)
 800300c:	2101      	movs	r1, #1
 800300e:	430a      	orrs	r2, r1
 8003010:	619a      	str	r2, [r3, #24]
 8003012:	4b0c      	ldr	r3, [pc, #48]	@ (8003044 <HAL_MspInit+0x44>)
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	2201      	movs	r2, #1
 8003018:	4013      	ands	r3, r2
 800301a:	607b      	str	r3, [r7, #4]
 800301c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800301e:	4b09      	ldr	r3, [pc, #36]	@ (8003044 <HAL_MspInit+0x44>)
 8003020:	69da      	ldr	r2, [r3, #28]
 8003022:	4b08      	ldr	r3, [pc, #32]	@ (8003044 <HAL_MspInit+0x44>)
 8003024:	2180      	movs	r1, #128	@ 0x80
 8003026:	0549      	lsls	r1, r1, #21
 8003028:	430a      	orrs	r2, r1
 800302a:	61da      	str	r2, [r3, #28]
 800302c:	4b05      	ldr	r3, [pc, #20]	@ (8003044 <HAL_MspInit+0x44>)
 800302e:	69da      	ldr	r2, [r3, #28]
 8003030:	2380      	movs	r3, #128	@ 0x80
 8003032:	055b      	lsls	r3, r3, #21
 8003034:	4013      	ands	r3, r2
 8003036:	603b      	str	r3, [r7, #0]
 8003038:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800303a:	46c0      	nop			@ (mov r8, r8)
 800303c:	46bd      	mov	sp, r7
 800303e:	b002      	add	sp, #8
 8003040:	bd80      	pop	{r7, pc}
 8003042:	46c0      	nop			@ (mov r8, r8)
 8003044:	40021000 	.word	0x40021000

08003048 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800304c:	46c0      	nop			@ (mov r8, r8)
 800304e:	e7fd      	b.n	800304c <NMI_Handler+0x4>

08003050 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003054:	46c0      	nop			@ (mov r8, r8)
 8003056:	e7fd      	b.n	8003054 <HardFault_Handler+0x4>

08003058 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800305c:	46c0      	nop			@ (mov r8, r8)
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003066:	46c0      	nop			@ (mov r8, r8)
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003070:	f000 fa22 	bl	80034b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003074:	46c0      	nop			@ (mov r8, r8)
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	af00      	add	r7, sp, #0
  return 1;
 800307e:	2301      	movs	r3, #1
}
 8003080:	0018      	movs	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <_kill>:

int _kill(int pid, int sig)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b082      	sub	sp, #8
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
 800308e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003090:	f003 fd3a 	bl	8006b08 <__errno>
 8003094:	0003      	movs	r3, r0
 8003096:	2216      	movs	r2, #22
 8003098:	601a      	str	r2, [r3, #0]
  return -1;
 800309a:	2301      	movs	r3, #1
 800309c:	425b      	negs	r3, r3
}
 800309e:	0018      	movs	r0, r3
 80030a0:	46bd      	mov	sp, r7
 80030a2:	b002      	add	sp, #8
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <_exit>:

void _exit (int status)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b082      	sub	sp, #8
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80030ae:	2301      	movs	r3, #1
 80030b0:	425a      	negs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	0011      	movs	r1, r2
 80030b6:	0018      	movs	r0, r3
 80030b8:	f7ff ffe5 	bl	8003086 <_kill>
  while (1) {}    /* Make sure we hang here */
 80030bc:	46c0      	nop			@ (mov r8, r8)
 80030be:	e7fd      	b.n	80030bc <_exit+0x16>

080030c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030cc:	2300      	movs	r3, #0
 80030ce:	617b      	str	r3, [r7, #20]
 80030d0:	e00a      	b.n	80030e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80030d2:	e000      	b.n	80030d6 <_read+0x16>
 80030d4:	bf00      	nop
 80030d6:	0001      	movs	r1, r0
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	1c5a      	adds	r2, r3, #1
 80030dc:	60ba      	str	r2, [r7, #8]
 80030de:	b2ca      	uxtb	r2, r1
 80030e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	3301      	adds	r3, #1
 80030e6:	617b      	str	r3, [r7, #20]
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	dbf0      	blt.n	80030d2 <_read+0x12>
  }

  return len;
 80030f0:	687b      	ldr	r3, [r7, #4]
}
 80030f2:	0018      	movs	r0, r3
 80030f4:	46bd      	mov	sp, r7
 80030f6:	b006      	add	sp, #24
 80030f8:	bd80      	pop	{r7, pc}

080030fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b086      	sub	sp, #24
 80030fe:	af00      	add	r7, sp, #0
 8003100:	60f8      	str	r0, [r7, #12]
 8003102:	60b9      	str	r1, [r7, #8]
 8003104:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003106:	2300      	movs	r3, #0
 8003108:	617b      	str	r3, [r7, #20]
 800310a:	e009      	b.n	8003120 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	1c5a      	adds	r2, r3, #1
 8003110:	60ba      	str	r2, [r7, #8]
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	0018      	movs	r0, r3
 8003116:	f7ff fea5 	bl	8002e64 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	3301      	adds	r3, #1
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	429a      	cmp	r2, r3
 8003126:	dbf1      	blt.n	800310c <_write+0x12>
  }
  return len;
 8003128:	687b      	ldr	r3, [r7, #4]
}
 800312a:	0018      	movs	r0, r3
 800312c:	46bd      	mov	sp, r7
 800312e:	b006      	add	sp, #24
 8003130:	bd80      	pop	{r7, pc}

08003132 <_close>:

int _close(int file)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b082      	sub	sp, #8
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800313a:	2301      	movs	r3, #1
 800313c:	425b      	negs	r3, r3
}
 800313e:	0018      	movs	r0, r3
 8003140:	46bd      	mov	sp, r7
 8003142:	b002      	add	sp, #8
 8003144:	bd80      	pop	{r7, pc}

08003146 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b082      	sub	sp, #8
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
 800314e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	2280      	movs	r2, #128	@ 0x80
 8003154:	0192      	lsls	r2, r2, #6
 8003156:	605a      	str	r2, [r3, #4]
  return 0;
 8003158:	2300      	movs	r3, #0
}
 800315a:	0018      	movs	r0, r3
 800315c:	46bd      	mov	sp, r7
 800315e:	b002      	add	sp, #8
 8003160:	bd80      	pop	{r7, pc}

08003162 <_isatty>:

int _isatty(int file)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b082      	sub	sp, #8
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800316a:	2301      	movs	r3, #1
}
 800316c:	0018      	movs	r0, r3
 800316e:	46bd      	mov	sp, r7
 8003170:	b002      	add	sp, #8
 8003172:	bd80      	pop	{r7, pc}

08003174 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003180:	2300      	movs	r3, #0
}
 8003182:	0018      	movs	r0, r3
 8003184:	46bd      	mov	sp, r7
 8003186:	b004      	add	sp, #16
 8003188:	bd80      	pop	{r7, pc}
	...

0800318c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003194:	4a14      	ldr	r2, [pc, #80]	@ (80031e8 <_sbrk+0x5c>)
 8003196:	4b15      	ldr	r3, [pc, #84]	@ (80031ec <_sbrk+0x60>)
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031a0:	4b13      	ldr	r3, [pc, #76]	@ (80031f0 <_sbrk+0x64>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d102      	bne.n	80031ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031a8:	4b11      	ldr	r3, [pc, #68]	@ (80031f0 <_sbrk+0x64>)
 80031aa:	4a12      	ldr	r2, [pc, #72]	@ (80031f4 <_sbrk+0x68>)
 80031ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031ae:	4b10      	ldr	r3, [pc, #64]	@ (80031f0 <_sbrk+0x64>)
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	18d3      	adds	r3, r2, r3
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d207      	bcs.n	80031cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031bc:	f003 fca4 	bl	8006b08 <__errno>
 80031c0:	0003      	movs	r3, r0
 80031c2:	220c      	movs	r2, #12
 80031c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031c6:	2301      	movs	r3, #1
 80031c8:	425b      	negs	r3, r3
 80031ca:	e009      	b.n	80031e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031cc:	4b08      	ldr	r3, [pc, #32]	@ (80031f0 <_sbrk+0x64>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031d2:	4b07      	ldr	r3, [pc, #28]	@ (80031f0 <_sbrk+0x64>)
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	18d2      	adds	r2, r2, r3
 80031da:	4b05      	ldr	r3, [pc, #20]	@ (80031f0 <_sbrk+0x64>)
 80031dc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80031de:	68fb      	ldr	r3, [r7, #12]
}
 80031e0:	0018      	movs	r0, r3
 80031e2:	46bd      	mov	sp, r7
 80031e4:	b006      	add	sp, #24
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	20002000 	.word	0x20002000
 80031ec:	00000400 	.word	0x00000400
 80031f0:	2000036c 	.word	0x2000036c
 80031f4:	200005d0 	.word	0x200005d0

080031f8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80031fc:	46c0      	nop			@ (mov r8, r8)
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
	...

08003204 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003208:	4b14      	ldr	r3, [pc, #80]	@ (800325c <MX_USART1_UART_Init+0x58>)
 800320a:	4a15      	ldr	r2, [pc, #84]	@ (8003260 <MX_USART1_UART_Init+0x5c>)
 800320c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800320e:	4b13      	ldr	r3, [pc, #76]	@ (800325c <MX_USART1_UART_Init+0x58>)
 8003210:	22e1      	movs	r2, #225	@ 0xe1
 8003212:	0252      	lsls	r2, r2, #9
 8003214:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003216:	4b11      	ldr	r3, [pc, #68]	@ (800325c <MX_USART1_UART_Init+0x58>)
 8003218:	2200      	movs	r2, #0
 800321a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800321c:	4b0f      	ldr	r3, [pc, #60]	@ (800325c <MX_USART1_UART_Init+0x58>)
 800321e:	2200      	movs	r2, #0
 8003220:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003222:	4b0e      	ldr	r3, [pc, #56]	@ (800325c <MX_USART1_UART_Init+0x58>)
 8003224:	2200      	movs	r2, #0
 8003226:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003228:	4b0c      	ldr	r3, [pc, #48]	@ (800325c <MX_USART1_UART_Init+0x58>)
 800322a:	220c      	movs	r2, #12
 800322c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800322e:	4b0b      	ldr	r3, [pc, #44]	@ (800325c <MX_USART1_UART_Init+0x58>)
 8003230:	2200      	movs	r2, #0
 8003232:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003234:	4b09      	ldr	r3, [pc, #36]	@ (800325c <MX_USART1_UART_Init+0x58>)
 8003236:	2200      	movs	r2, #0
 8003238:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800323a:	4b08      	ldr	r3, [pc, #32]	@ (800325c <MX_USART1_UART_Init+0x58>)
 800323c:	2200      	movs	r2, #0
 800323e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003240:	4b06      	ldr	r3, [pc, #24]	@ (800325c <MX_USART1_UART_Init+0x58>)
 8003242:	2200      	movs	r2, #0
 8003244:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003246:	4b05      	ldr	r3, [pc, #20]	@ (800325c <MX_USART1_UART_Init+0x58>)
 8003248:	0018      	movs	r0, r3
 800324a:	f001 ffa3 	bl	8005194 <HAL_UART_Init>
 800324e:	1e03      	subs	r3, r0, #0
 8003250:	d001      	beq.n	8003256 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003252:	f7ff fecf 	bl	8002ff4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003256:	46c0      	nop			@ (mov r8, r8)
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	20000370 	.word	0x20000370
 8003260:	40013800 	.word	0x40013800

08003264 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003268:	4b14      	ldr	r3, [pc, #80]	@ (80032bc <MX_USART2_UART_Init+0x58>)
 800326a:	4a15      	ldr	r2, [pc, #84]	@ (80032c0 <MX_USART2_UART_Init+0x5c>)
 800326c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800326e:	4b13      	ldr	r3, [pc, #76]	@ (80032bc <MX_USART2_UART_Init+0x58>)
 8003270:	22e1      	movs	r2, #225	@ 0xe1
 8003272:	0252      	lsls	r2, r2, #9
 8003274:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003276:	4b11      	ldr	r3, [pc, #68]	@ (80032bc <MX_USART2_UART_Init+0x58>)
 8003278:	2200      	movs	r2, #0
 800327a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800327c:	4b0f      	ldr	r3, [pc, #60]	@ (80032bc <MX_USART2_UART_Init+0x58>)
 800327e:	2200      	movs	r2, #0
 8003280:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003282:	4b0e      	ldr	r3, [pc, #56]	@ (80032bc <MX_USART2_UART_Init+0x58>)
 8003284:	2200      	movs	r2, #0
 8003286:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003288:	4b0c      	ldr	r3, [pc, #48]	@ (80032bc <MX_USART2_UART_Init+0x58>)
 800328a:	220c      	movs	r2, #12
 800328c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800328e:	4b0b      	ldr	r3, [pc, #44]	@ (80032bc <MX_USART2_UART_Init+0x58>)
 8003290:	2200      	movs	r2, #0
 8003292:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003294:	4b09      	ldr	r3, [pc, #36]	@ (80032bc <MX_USART2_UART_Init+0x58>)
 8003296:	2200      	movs	r2, #0
 8003298:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800329a:	4b08      	ldr	r3, [pc, #32]	@ (80032bc <MX_USART2_UART_Init+0x58>)
 800329c:	2200      	movs	r2, #0
 800329e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80032a0:	4b06      	ldr	r3, [pc, #24]	@ (80032bc <MX_USART2_UART_Init+0x58>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80032a6:	4b05      	ldr	r3, [pc, #20]	@ (80032bc <MX_USART2_UART_Init+0x58>)
 80032a8:	0018      	movs	r0, r3
 80032aa:	f001 ff73 	bl	8005194 <HAL_UART_Init>
 80032ae:	1e03      	subs	r3, r0, #0
 80032b0:	d001      	beq.n	80032b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80032b2:	f7ff fe9f 	bl	8002ff4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80032b6:	46c0      	nop			@ (mov r8, r8)
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	200003f8 	.word	0x200003f8
 80032c0:	40004400 	.word	0x40004400

080032c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80032c4:	b590      	push	{r4, r7, lr}
 80032c6:	b08d      	sub	sp, #52	@ 0x34
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032cc:	241c      	movs	r4, #28
 80032ce:	193b      	adds	r3, r7, r4
 80032d0:	0018      	movs	r0, r3
 80032d2:	2314      	movs	r3, #20
 80032d4:	001a      	movs	r2, r3
 80032d6:	2100      	movs	r1, #0
 80032d8:	f003 fb60 	bl	800699c <memset>
  if(uartHandle->Instance==USART1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a39      	ldr	r2, [pc, #228]	@ (80033c8 <HAL_UART_MspInit+0x104>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d134      	bne.n	8003350 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80032e6:	4b39      	ldr	r3, [pc, #228]	@ (80033cc <HAL_UART_MspInit+0x108>)
 80032e8:	699a      	ldr	r2, [r3, #24]
 80032ea:	4b38      	ldr	r3, [pc, #224]	@ (80033cc <HAL_UART_MspInit+0x108>)
 80032ec:	2180      	movs	r1, #128	@ 0x80
 80032ee:	01c9      	lsls	r1, r1, #7
 80032f0:	430a      	orrs	r2, r1
 80032f2:	619a      	str	r2, [r3, #24]
 80032f4:	4b35      	ldr	r3, [pc, #212]	@ (80033cc <HAL_UART_MspInit+0x108>)
 80032f6:	699a      	ldr	r2, [r3, #24]
 80032f8:	2380      	movs	r3, #128	@ 0x80
 80032fa:	01db      	lsls	r3, r3, #7
 80032fc:	4013      	ands	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
 8003300:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003302:	4b32      	ldr	r3, [pc, #200]	@ (80033cc <HAL_UART_MspInit+0x108>)
 8003304:	695a      	ldr	r2, [r3, #20]
 8003306:	4b31      	ldr	r3, [pc, #196]	@ (80033cc <HAL_UART_MspInit+0x108>)
 8003308:	2180      	movs	r1, #128	@ 0x80
 800330a:	0289      	lsls	r1, r1, #10
 800330c:	430a      	orrs	r2, r1
 800330e:	615a      	str	r2, [r3, #20]
 8003310:	4b2e      	ldr	r3, [pc, #184]	@ (80033cc <HAL_UART_MspInit+0x108>)
 8003312:	695a      	ldr	r2, [r3, #20]
 8003314:	2380      	movs	r3, #128	@ 0x80
 8003316:	029b      	lsls	r3, r3, #10
 8003318:	4013      	ands	r3, r2
 800331a:	617b      	str	r3, [r7, #20]
 800331c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800331e:	193b      	adds	r3, r7, r4
 8003320:	22c0      	movs	r2, #192	@ 0xc0
 8003322:	00d2      	lsls	r2, r2, #3
 8003324:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003326:	0021      	movs	r1, r4
 8003328:	187b      	adds	r3, r7, r1
 800332a:	2202      	movs	r2, #2
 800332c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332e:	187b      	adds	r3, r7, r1
 8003330:	2200      	movs	r2, #0
 8003332:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003334:	187b      	adds	r3, r7, r1
 8003336:	2203      	movs	r2, #3
 8003338:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800333a:	187b      	adds	r3, r7, r1
 800333c:	2201      	movs	r2, #1
 800333e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003340:	187a      	adds	r2, r7, r1
 8003342:	2390      	movs	r3, #144	@ 0x90
 8003344:	05db      	lsls	r3, r3, #23
 8003346:	0011      	movs	r1, r2
 8003348:	0018      	movs	r0, r3
 800334a:	f000 f9cd 	bl	80036e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800334e:	e037      	b.n	80033c0 <HAL_UART_MspInit+0xfc>
  else if(uartHandle->Instance==USART2)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a1e      	ldr	r2, [pc, #120]	@ (80033d0 <HAL_UART_MspInit+0x10c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d132      	bne.n	80033c0 <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART2_CLK_ENABLE();
 800335a:	4b1c      	ldr	r3, [pc, #112]	@ (80033cc <HAL_UART_MspInit+0x108>)
 800335c:	69da      	ldr	r2, [r3, #28]
 800335e:	4b1b      	ldr	r3, [pc, #108]	@ (80033cc <HAL_UART_MspInit+0x108>)
 8003360:	2180      	movs	r1, #128	@ 0x80
 8003362:	0289      	lsls	r1, r1, #10
 8003364:	430a      	orrs	r2, r1
 8003366:	61da      	str	r2, [r3, #28]
 8003368:	4b18      	ldr	r3, [pc, #96]	@ (80033cc <HAL_UART_MspInit+0x108>)
 800336a:	69da      	ldr	r2, [r3, #28]
 800336c:	2380      	movs	r3, #128	@ 0x80
 800336e:	029b      	lsls	r3, r3, #10
 8003370:	4013      	ands	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
 8003374:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003376:	4b15      	ldr	r3, [pc, #84]	@ (80033cc <HAL_UART_MspInit+0x108>)
 8003378:	695a      	ldr	r2, [r3, #20]
 800337a:	4b14      	ldr	r3, [pc, #80]	@ (80033cc <HAL_UART_MspInit+0x108>)
 800337c:	2180      	movs	r1, #128	@ 0x80
 800337e:	0289      	lsls	r1, r1, #10
 8003380:	430a      	orrs	r2, r1
 8003382:	615a      	str	r2, [r3, #20]
 8003384:	4b11      	ldr	r3, [pc, #68]	@ (80033cc <HAL_UART_MspInit+0x108>)
 8003386:	695a      	ldr	r2, [r3, #20]
 8003388:	2380      	movs	r3, #128	@ 0x80
 800338a:	029b      	lsls	r3, r3, #10
 800338c:	4013      	ands	r3, r2
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003392:	211c      	movs	r1, #28
 8003394:	187b      	adds	r3, r7, r1
 8003396:	220c      	movs	r2, #12
 8003398:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800339a:	187b      	adds	r3, r7, r1
 800339c:	2202      	movs	r2, #2
 800339e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a0:	187b      	adds	r3, r7, r1
 80033a2:	2200      	movs	r2, #0
 80033a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a6:	187b      	adds	r3, r7, r1
 80033a8:	2200      	movs	r2, #0
 80033aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80033ac:	187b      	adds	r3, r7, r1
 80033ae:	2201      	movs	r2, #1
 80033b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033b2:	187a      	adds	r2, r7, r1
 80033b4:	2390      	movs	r3, #144	@ 0x90
 80033b6:	05db      	lsls	r3, r3, #23
 80033b8:	0011      	movs	r1, r2
 80033ba:	0018      	movs	r0, r3
 80033bc:	f000 f994 	bl	80036e8 <HAL_GPIO_Init>
}
 80033c0:	46c0      	nop			@ (mov r8, r8)
 80033c2:	46bd      	mov	sp, r7
 80033c4:	b00d      	add	sp, #52	@ 0x34
 80033c6:	bd90      	pop	{r4, r7, pc}
 80033c8:	40013800 	.word	0x40013800
 80033cc:	40021000 	.word	0x40021000
 80033d0:	40004400 	.word	0x40004400

080033d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80033d4:	480d      	ldr	r0, [pc, #52]	@ (800340c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80033d6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80033d8:	f7ff ff0e 	bl	80031f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033dc:	480c      	ldr	r0, [pc, #48]	@ (8003410 <LoopForever+0x6>)
  ldr r1, =_edata
 80033de:	490d      	ldr	r1, [pc, #52]	@ (8003414 <LoopForever+0xa>)
  ldr r2, =_sidata
 80033e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003418 <LoopForever+0xe>)
  movs r3, #0
 80033e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033e4:	e002      	b.n	80033ec <LoopCopyDataInit>

080033e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033ea:	3304      	adds	r3, #4

080033ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033f0:	d3f9      	bcc.n	80033e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033f2:	4a0a      	ldr	r2, [pc, #40]	@ (800341c <LoopForever+0x12>)
  ldr r4, =_ebss
 80033f4:	4c0a      	ldr	r4, [pc, #40]	@ (8003420 <LoopForever+0x16>)
  movs r3, #0
 80033f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033f8:	e001      	b.n	80033fe <LoopFillZerobss>

080033fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033fc:	3204      	adds	r2, #4

080033fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003400:	d3fb      	bcc.n	80033fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003402:	f003 fb87 	bl	8006b14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003406:	f7ff fd3f 	bl	8002e88 <main>

0800340a <LoopForever>:

LoopForever:
    b LoopForever
 800340a:	e7fe      	b.n	800340a <LoopForever>
  ldr   r0, =_estack
 800340c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003414:	200002dc 	.word	0x200002dc
  ldr r2, =_sidata
 8003418:	0800962c 	.word	0x0800962c
  ldr r2, =_sbss
 800341c:	200002dc 	.word	0x200002dc
  ldr r4, =_ebss
 8003420:	200005d0 	.word	0x200005d0

08003424 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003424:	e7fe      	b.n	8003424 <ADC1_IRQHandler>
	...

08003428 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800342c:	4b07      	ldr	r3, [pc, #28]	@ (800344c <HAL_Init+0x24>)
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	4b06      	ldr	r3, [pc, #24]	@ (800344c <HAL_Init+0x24>)
 8003432:	2110      	movs	r1, #16
 8003434:	430a      	orrs	r2, r1
 8003436:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003438:	2000      	movs	r0, #0
 800343a:	f000 f809 	bl	8003450 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800343e:	f7ff fddf 	bl	8003000 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	0018      	movs	r0, r3
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	46c0      	nop			@ (mov r8, r8)
 800344c:	40022000 	.word	0x40022000

08003450 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003450:	b590      	push	{r4, r7, lr}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003458:	4b14      	ldr	r3, [pc, #80]	@ (80034ac <HAL_InitTick+0x5c>)
 800345a:	681c      	ldr	r4, [r3, #0]
 800345c:	4b14      	ldr	r3, [pc, #80]	@ (80034b0 <HAL_InitTick+0x60>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	0019      	movs	r1, r3
 8003462:	23fa      	movs	r3, #250	@ 0xfa
 8003464:	0098      	lsls	r0, r3, #2
 8003466:	f7fc fe6b 	bl	8000140 <__udivsi3>
 800346a:	0003      	movs	r3, r0
 800346c:	0019      	movs	r1, r3
 800346e:	0020      	movs	r0, r4
 8003470:	f7fc fe66 	bl	8000140 <__udivsi3>
 8003474:	0003      	movs	r3, r0
 8003476:	0018      	movs	r0, r3
 8003478:	f000 f8e1 	bl	800363e <HAL_SYSTICK_Config>
 800347c:	1e03      	subs	r3, r0, #0
 800347e:	d001      	beq.n	8003484 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e00f      	b.n	80034a4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b03      	cmp	r3, #3
 8003488:	d80b      	bhi.n	80034a2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	2301      	movs	r3, #1
 800348e:	425b      	negs	r3, r3
 8003490:	2200      	movs	r2, #0
 8003492:	0018      	movs	r0, r3
 8003494:	f000 f8be 	bl	8003614 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003498:	4b06      	ldr	r3, [pc, #24]	@ (80034b4 <HAL_InitTick+0x64>)
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800349e:	2300      	movs	r3, #0
 80034a0:	e000      	b.n	80034a4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
}
 80034a4:	0018      	movs	r0, r3
 80034a6:	46bd      	mov	sp, r7
 80034a8:	b003      	add	sp, #12
 80034aa:	bd90      	pop	{r4, r7, pc}
 80034ac:	20000108 	.word	0x20000108
 80034b0:	20000110 	.word	0x20000110
 80034b4:	2000010c 	.word	0x2000010c

080034b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034bc:	4b05      	ldr	r3, [pc, #20]	@ (80034d4 <HAL_IncTick+0x1c>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	001a      	movs	r2, r3
 80034c2:	4b05      	ldr	r3, [pc, #20]	@ (80034d8 <HAL_IncTick+0x20>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	18d2      	adds	r2, r2, r3
 80034c8:	4b03      	ldr	r3, [pc, #12]	@ (80034d8 <HAL_IncTick+0x20>)
 80034ca:	601a      	str	r2, [r3, #0]
}
 80034cc:	46c0      	nop			@ (mov r8, r8)
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	46c0      	nop			@ (mov r8, r8)
 80034d4:	20000110 	.word	0x20000110
 80034d8:	20000480 	.word	0x20000480

080034dc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  return uwTick;
 80034e0:	4b02      	ldr	r3, [pc, #8]	@ (80034ec <HAL_GetTick+0x10>)
 80034e2:	681b      	ldr	r3, [r3, #0]
}
 80034e4:	0018      	movs	r0, r3
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	20000480 	.word	0x20000480

080034f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034f0:	b590      	push	{r4, r7, lr}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	0002      	movs	r2, r0
 80034f8:	6039      	str	r1, [r7, #0]
 80034fa:	1dfb      	adds	r3, r7, #7
 80034fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80034fe:	1dfb      	adds	r3, r7, #7
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	2b7f      	cmp	r3, #127	@ 0x7f
 8003504:	d828      	bhi.n	8003558 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003506:	4a2f      	ldr	r2, [pc, #188]	@ (80035c4 <__NVIC_SetPriority+0xd4>)
 8003508:	1dfb      	adds	r3, r7, #7
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	b25b      	sxtb	r3, r3
 800350e:	089b      	lsrs	r3, r3, #2
 8003510:	33c0      	adds	r3, #192	@ 0xc0
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	589b      	ldr	r3, [r3, r2]
 8003516:	1dfa      	adds	r2, r7, #7
 8003518:	7812      	ldrb	r2, [r2, #0]
 800351a:	0011      	movs	r1, r2
 800351c:	2203      	movs	r2, #3
 800351e:	400a      	ands	r2, r1
 8003520:	00d2      	lsls	r2, r2, #3
 8003522:	21ff      	movs	r1, #255	@ 0xff
 8003524:	4091      	lsls	r1, r2
 8003526:	000a      	movs	r2, r1
 8003528:	43d2      	mvns	r2, r2
 800352a:	401a      	ands	r2, r3
 800352c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	019b      	lsls	r3, r3, #6
 8003532:	22ff      	movs	r2, #255	@ 0xff
 8003534:	401a      	ands	r2, r3
 8003536:	1dfb      	adds	r3, r7, #7
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	0018      	movs	r0, r3
 800353c:	2303      	movs	r3, #3
 800353e:	4003      	ands	r3, r0
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003544:	481f      	ldr	r0, [pc, #124]	@ (80035c4 <__NVIC_SetPriority+0xd4>)
 8003546:	1dfb      	adds	r3, r7, #7
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	b25b      	sxtb	r3, r3
 800354c:	089b      	lsrs	r3, r3, #2
 800354e:	430a      	orrs	r2, r1
 8003550:	33c0      	adds	r3, #192	@ 0xc0
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003556:	e031      	b.n	80035bc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003558:	4a1b      	ldr	r2, [pc, #108]	@ (80035c8 <__NVIC_SetPriority+0xd8>)
 800355a:	1dfb      	adds	r3, r7, #7
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	0019      	movs	r1, r3
 8003560:	230f      	movs	r3, #15
 8003562:	400b      	ands	r3, r1
 8003564:	3b08      	subs	r3, #8
 8003566:	089b      	lsrs	r3, r3, #2
 8003568:	3306      	adds	r3, #6
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	18d3      	adds	r3, r2, r3
 800356e:	3304      	adds	r3, #4
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	1dfa      	adds	r2, r7, #7
 8003574:	7812      	ldrb	r2, [r2, #0]
 8003576:	0011      	movs	r1, r2
 8003578:	2203      	movs	r2, #3
 800357a:	400a      	ands	r2, r1
 800357c:	00d2      	lsls	r2, r2, #3
 800357e:	21ff      	movs	r1, #255	@ 0xff
 8003580:	4091      	lsls	r1, r2
 8003582:	000a      	movs	r2, r1
 8003584:	43d2      	mvns	r2, r2
 8003586:	401a      	ands	r2, r3
 8003588:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	019b      	lsls	r3, r3, #6
 800358e:	22ff      	movs	r2, #255	@ 0xff
 8003590:	401a      	ands	r2, r3
 8003592:	1dfb      	adds	r3, r7, #7
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	0018      	movs	r0, r3
 8003598:	2303      	movs	r3, #3
 800359a:	4003      	ands	r3, r0
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035a0:	4809      	ldr	r0, [pc, #36]	@ (80035c8 <__NVIC_SetPriority+0xd8>)
 80035a2:	1dfb      	adds	r3, r7, #7
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	001c      	movs	r4, r3
 80035a8:	230f      	movs	r3, #15
 80035aa:	4023      	ands	r3, r4
 80035ac:	3b08      	subs	r3, #8
 80035ae:	089b      	lsrs	r3, r3, #2
 80035b0:	430a      	orrs	r2, r1
 80035b2:	3306      	adds	r3, #6
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	18c3      	adds	r3, r0, r3
 80035b8:	3304      	adds	r3, #4
 80035ba:	601a      	str	r2, [r3, #0]
}
 80035bc:	46c0      	nop			@ (mov r8, r8)
 80035be:	46bd      	mov	sp, r7
 80035c0:	b003      	add	sp, #12
 80035c2:	bd90      	pop	{r4, r7, pc}
 80035c4:	e000e100 	.word	0xe000e100
 80035c8:	e000ed00 	.word	0xe000ed00

080035cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	1e5a      	subs	r2, r3, #1
 80035d8:	2380      	movs	r3, #128	@ 0x80
 80035da:	045b      	lsls	r3, r3, #17
 80035dc:	429a      	cmp	r2, r3
 80035de:	d301      	bcc.n	80035e4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035e0:	2301      	movs	r3, #1
 80035e2:	e010      	b.n	8003606 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003610 <SysTick_Config+0x44>)
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	3a01      	subs	r2, #1
 80035ea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035ec:	2301      	movs	r3, #1
 80035ee:	425b      	negs	r3, r3
 80035f0:	2103      	movs	r1, #3
 80035f2:	0018      	movs	r0, r3
 80035f4:	f7ff ff7c 	bl	80034f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035f8:	4b05      	ldr	r3, [pc, #20]	@ (8003610 <SysTick_Config+0x44>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035fe:	4b04      	ldr	r3, [pc, #16]	@ (8003610 <SysTick_Config+0x44>)
 8003600:	2207      	movs	r2, #7
 8003602:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003604:	2300      	movs	r3, #0
}
 8003606:	0018      	movs	r0, r3
 8003608:	46bd      	mov	sp, r7
 800360a:	b002      	add	sp, #8
 800360c:	bd80      	pop	{r7, pc}
 800360e:	46c0      	nop			@ (mov r8, r8)
 8003610:	e000e010 	.word	0xe000e010

08003614 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	60b9      	str	r1, [r7, #8]
 800361c:	607a      	str	r2, [r7, #4]
 800361e:	210f      	movs	r1, #15
 8003620:	187b      	adds	r3, r7, r1
 8003622:	1c02      	adds	r2, r0, #0
 8003624:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	187b      	adds	r3, r7, r1
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	b25b      	sxtb	r3, r3
 800362e:	0011      	movs	r1, r2
 8003630:	0018      	movs	r0, r3
 8003632:	f7ff ff5d 	bl	80034f0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8003636:	46c0      	nop			@ (mov r8, r8)
 8003638:	46bd      	mov	sp, r7
 800363a:	b004      	add	sp, #16
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b082      	sub	sp, #8
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	0018      	movs	r0, r3
 800364a:	f7ff ffbf 	bl	80035cc <SysTick_Config>
 800364e:	0003      	movs	r3, r0
}
 8003650:	0018      	movs	r0, r3
 8003652:	46bd      	mov	sp, r7
 8003654:	b002      	add	sp, #8
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e039      	b.n	80036de <HAL_CRC_Init+0x86>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	7d5b      	ldrb	r3, [r3, #21]
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b00      	cmp	r3, #0
 8003672:	d106      	bne.n	8003682 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	751a      	strb	r2, [r3, #20]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	0018      	movs	r0, r3
 800367e:	f7ff fa25 	bl	8002acc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2202      	movs	r2, #2
 8003686:	755a      	strb	r2, [r3, #21]
#endif /* CRC_POL_POL */

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	791b      	ldrb	r3, [r3, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d105      	bne.n	800369c <HAL_CRC_Init+0x44>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2201      	movs	r2, #1
 8003696:	4252      	negs	r2, r2
 8003698:	611a      	str	r2, [r3, #16]
 800369a:	e004      	b.n	80036a6 <HAL_CRC_Init+0x4e>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	6892      	ldr	r2, [r2, #8]
 80036a4:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	2260      	movs	r2, #96	@ 0x60
 80036ae:	4393      	bics	r3, r2
 80036b0:	0019      	movs	r1, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68da      	ldr	r2, [r3, #12]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	2280      	movs	r2, #128	@ 0x80
 80036c6:	4393      	bics	r3, r2
 80036c8:	0019      	movs	r1, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691a      	ldr	r2, [r3, #16]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	755a      	strb	r2, [r3, #21]

  /* Return function status */
  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	0018      	movs	r0, r3
 80036e0:	46bd      	mov	sp, r7
 80036e2:	b002      	add	sp, #8
 80036e4:	bd80      	pop	{r7, pc}
	...

080036e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036f2:	2300      	movs	r3, #0
 80036f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036f6:	e14f      	b.n	8003998 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2101      	movs	r1, #1
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	4091      	lsls	r1, r2
 8003702:	000a      	movs	r2, r1
 8003704:	4013      	ands	r3, r2
 8003706:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d100      	bne.n	8003710 <HAL_GPIO_Init+0x28>
 800370e:	e140      	b.n	8003992 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	2203      	movs	r2, #3
 8003716:	4013      	ands	r3, r2
 8003718:	2b01      	cmp	r3, #1
 800371a:	d005      	beq.n	8003728 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	2203      	movs	r2, #3
 8003722:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003724:	2b02      	cmp	r3, #2
 8003726:	d130      	bne.n	800378a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	2203      	movs	r2, #3
 8003734:	409a      	lsls	r2, r3
 8003736:	0013      	movs	r3, r2
 8003738:	43da      	mvns	r2, r3
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	4013      	ands	r3, r2
 800373e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	68da      	ldr	r2, [r3, #12]
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	409a      	lsls	r2, r3
 800374a:	0013      	movs	r3, r2
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	4313      	orrs	r3, r2
 8003750:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800375e:	2201      	movs	r2, #1
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	409a      	lsls	r2, r3
 8003764:	0013      	movs	r3, r2
 8003766:	43da      	mvns	r2, r3
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	4013      	ands	r3, r2
 800376c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	091b      	lsrs	r3, r3, #4
 8003774:	2201      	movs	r2, #1
 8003776:	401a      	ands	r2, r3
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	409a      	lsls	r2, r3
 800377c:	0013      	movs	r3, r2
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	4313      	orrs	r3, r2
 8003782:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	2203      	movs	r2, #3
 8003790:	4013      	ands	r3, r2
 8003792:	2b03      	cmp	r3, #3
 8003794:	d017      	beq.n	80037c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	2203      	movs	r2, #3
 80037a2:	409a      	lsls	r2, r3
 80037a4:	0013      	movs	r3, r2
 80037a6:	43da      	mvns	r2, r3
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	4013      	ands	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	689a      	ldr	r2, [r3, #8]
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	409a      	lsls	r2, r3
 80037b8:	0013      	movs	r3, r2
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	4313      	orrs	r3, r2
 80037be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2203      	movs	r2, #3
 80037cc:	4013      	ands	r3, r2
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d123      	bne.n	800381a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	08da      	lsrs	r2, r3, #3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	3208      	adds	r2, #8
 80037da:	0092      	lsls	r2, r2, #2
 80037dc:	58d3      	ldr	r3, [r2, r3]
 80037de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	2207      	movs	r2, #7
 80037e4:	4013      	ands	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	220f      	movs	r2, #15
 80037ea:	409a      	lsls	r2, r3
 80037ec:	0013      	movs	r3, r2
 80037ee:	43da      	mvns	r2, r3
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	4013      	ands	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	691a      	ldr	r2, [r3, #16]
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	2107      	movs	r1, #7
 80037fe:	400b      	ands	r3, r1
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	409a      	lsls	r2, r3
 8003804:	0013      	movs	r3, r2
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	4313      	orrs	r3, r2
 800380a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	08da      	lsrs	r2, r3, #3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3208      	adds	r2, #8
 8003814:	0092      	lsls	r2, r2, #2
 8003816:	6939      	ldr	r1, [r7, #16]
 8003818:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	2203      	movs	r2, #3
 8003826:	409a      	lsls	r2, r3
 8003828:	0013      	movs	r3, r2
 800382a:	43da      	mvns	r2, r3
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	4013      	ands	r3, r2
 8003830:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2203      	movs	r2, #3
 8003838:	401a      	ands	r2, r3
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	409a      	lsls	r2, r3
 8003840:	0013      	movs	r3, r2
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	4313      	orrs	r3, r2
 8003846:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	23c0      	movs	r3, #192	@ 0xc0
 8003854:	029b      	lsls	r3, r3, #10
 8003856:	4013      	ands	r3, r2
 8003858:	d100      	bne.n	800385c <HAL_GPIO_Init+0x174>
 800385a:	e09a      	b.n	8003992 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800385c:	4b54      	ldr	r3, [pc, #336]	@ (80039b0 <HAL_GPIO_Init+0x2c8>)
 800385e:	699a      	ldr	r2, [r3, #24]
 8003860:	4b53      	ldr	r3, [pc, #332]	@ (80039b0 <HAL_GPIO_Init+0x2c8>)
 8003862:	2101      	movs	r1, #1
 8003864:	430a      	orrs	r2, r1
 8003866:	619a      	str	r2, [r3, #24]
 8003868:	4b51      	ldr	r3, [pc, #324]	@ (80039b0 <HAL_GPIO_Init+0x2c8>)
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	2201      	movs	r2, #1
 800386e:	4013      	ands	r3, r2
 8003870:	60bb      	str	r3, [r7, #8]
 8003872:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003874:	4a4f      	ldr	r2, [pc, #316]	@ (80039b4 <HAL_GPIO_Init+0x2cc>)
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	089b      	lsrs	r3, r3, #2
 800387a:	3302      	adds	r3, #2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	589b      	ldr	r3, [r3, r2]
 8003880:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	2203      	movs	r2, #3
 8003886:	4013      	ands	r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	220f      	movs	r2, #15
 800388c:	409a      	lsls	r2, r3
 800388e:	0013      	movs	r3, r2
 8003890:	43da      	mvns	r2, r3
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	4013      	ands	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	2390      	movs	r3, #144	@ 0x90
 800389c:	05db      	lsls	r3, r3, #23
 800389e:	429a      	cmp	r2, r3
 80038a0:	d013      	beq.n	80038ca <HAL_GPIO_Init+0x1e2>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a44      	ldr	r2, [pc, #272]	@ (80039b8 <HAL_GPIO_Init+0x2d0>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d00d      	beq.n	80038c6 <HAL_GPIO_Init+0x1de>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a43      	ldr	r2, [pc, #268]	@ (80039bc <HAL_GPIO_Init+0x2d4>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d007      	beq.n	80038c2 <HAL_GPIO_Init+0x1da>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a42      	ldr	r2, [pc, #264]	@ (80039c0 <HAL_GPIO_Init+0x2d8>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d101      	bne.n	80038be <HAL_GPIO_Init+0x1d6>
 80038ba:	2303      	movs	r3, #3
 80038bc:	e006      	b.n	80038cc <HAL_GPIO_Init+0x1e4>
 80038be:	2305      	movs	r3, #5
 80038c0:	e004      	b.n	80038cc <HAL_GPIO_Init+0x1e4>
 80038c2:	2302      	movs	r3, #2
 80038c4:	e002      	b.n	80038cc <HAL_GPIO_Init+0x1e4>
 80038c6:	2301      	movs	r3, #1
 80038c8:	e000      	b.n	80038cc <HAL_GPIO_Init+0x1e4>
 80038ca:	2300      	movs	r3, #0
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	2103      	movs	r1, #3
 80038d0:	400a      	ands	r2, r1
 80038d2:	0092      	lsls	r2, r2, #2
 80038d4:	4093      	lsls	r3, r2
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	4313      	orrs	r3, r2
 80038da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038dc:	4935      	ldr	r1, [pc, #212]	@ (80039b4 <HAL_GPIO_Init+0x2cc>)
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	089b      	lsrs	r3, r3, #2
 80038e2:	3302      	adds	r3, #2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038ea:	4b36      	ldr	r3, [pc, #216]	@ (80039c4 <HAL_GPIO_Init+0x2dc>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	43da      	mvns	r2, r3
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	4013      	ands	r3, r2
 80038f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	2380      	movs	r3, #128	@ 0x80
 8003900:	035b      	lsls	r3, r3, #13
 8003902:	4013      	ands	r3, r2
 8003904:	d003      	beq.n	800390e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	4313      	orrs	r3, r2
 800390c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800390e:	4b2d      	ldr	r3, [pc, #180]	@ (80039c4 <HAL_GPIO_Init+0x2dc>)
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003914:	4b2b      	ldr	r3, [pc, #172]	@ (80039c4 <HAL_GPIO_Init+0x2dc>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	43da      	mvns	r2, r3
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	4013      	ands	r3, r2
 8003922:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	2380      	movs	r3, #128	@ 0x80
 800392a:	039b      	lsls	r3, r3, #14
 800392c:	4013      	ands	r3, r2
 800392e:	d003      	beq.n	8003938 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	4313      	orrs	r3, r2
 8003936:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003938:	4b22      	ldr	r3, [pc, #136]	@ (80039c4 <HAL_GPIO_Init+0x2dc>)
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800393e:	4b21      	ldr	r3, [pc, #132]	@ (80039c4 <HAL_GPIO_Init+0x2dc>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	43da      	mvns	r2, r3
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	4013      	ands	r3, r2
 800394c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	2380      	movs	r3, #128	@ 0x80
 8003954:	029b      	lsls	r3, r3, #10
 8003956:	4013      	ands	r3, r2
 8003958:	d003      	beq.n	8003962 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4313      	orrs	r3, r2
 8003960:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003962:	4b18      	ldr	r3, [pc, #96]	@ (80039c4 <HAL_GPIO_Init+0x2dc>)
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003968:	4b16      	ldr	r3, [pc, #88]	@ (80039c4 <HAL_GPIO_Init+0x2dc>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	43da      	mvns	r2, r3
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	4013      	ands	r3, r2
 8003976:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	2380      	movs	r3, #128	@ 0x80
 800397e:	025b      	lsls	r3, r3, #9
 8003980:	4013      	ands	r3, r2
 8003982:	d003      	beq.n	800398c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	4313      	orrs	r3, r2
 800398a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800398c:	4b0d      	ldr	r3, [pc, #52]	@ (80039c4 <HAL_GPIO_Init+0x2dc>)
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	3301      	adds	r3, #1
 8003996:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	40da      	lsrs	r2, r3
 80039a0:	1e13      	subs	r3, r2, #0
 80039a2:	d000      	beq.n	80039a6 <HAL_GPIO_Init+0x2be>
 80039a4:	e6a8      	b.n	80036f8 <HAL_GPIO_Init+0x10>
  } 
}
 80039a6:	46c0      	nop			@ (mov r8, r8)
 80039a8:	46c0      	nop			@ (mov r8, r8)
 80039aa:	46bd      	mov	sp, r7
 80039ac:	b006      	add	sp, #24
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	40021000 	.word	0x40021000
 80039b4:	40010000 	.word	0x40010000
 80039b8:	48000400 	.word	0x48000400
 80039bc:	48000800 	.word	0x48000800
 80039c0:	48000c00 	.word	0x48000c00
 80039c4:	40010400 	.word	0x40010400

080039c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	0008      	movs	r0, r1
 80039d2:	0011      	movs	r1, r2
 80039d4:	1cbb      	adds	r3, r7, #2
 80039d6:	1c02      	adds	r2, r0, #0
 80039d8:	801a      	strh	r2, [r3, #0]
 80039da:	1c7b      	adds	r3, r7, #1
 80039dc:	1c0a      	adds	r2, r1, #0
 80039de:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039e0:	1c7b      	adds	r3, r7, #1
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d004      	beq.n	80039f2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039e8:	1cbb      	adds	r3, r7, #2
 80039ea:	881a      	ldrh	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039f0:	e003      	b.n	80039fa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039f2:	1cbb      	adds	r3, r7, #2
 80039f4:	881a      	ldrh	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80039fa:	46c0      	nop			@ (mov r8, r8)
 80039fc:	46bd      	mov	sp, r7
 80039fe:	b002      	add	sp, #8
 8003a00:	bd80      	pop	{r7, pc}
	...

08003a04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e08f      	b.n	8003b36 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2241      	movs	r2, #65	@ 0x41
 8003a1a:	5c9b      	ldrb	r3, [r3, r2]
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d107      	bne.n	8003a32 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2240      	movs	r2, #64	@ 0x40
 8003a26:	2100      	movs	r1, #0
 8003a28:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	f7ff f923 	bl	8002c78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2241      	movs	r2, #65	@ 0x41
 8003a36:	2124      	movs	r1, #36	@ 0x24
 8003a38:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2101      	movs	r1, #1
 8003a46:	438a      	bics	r2, r1
 8003a48:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	493b      	ldr	r1, [pc, #236]	@ (8003b40 <HAL_I2C_Init+0x13c>)
 8003a54:	400a      	ands	r2, r1
 8003a56:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689a      	ldr	r2, [r3, #8]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4938      	ldr	r1, [pc, #224]	@ (8003b44 <HAL_I2C_Init+0x140>)
 8003a64:	400a      	ands	r2, r1
 8003a66:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d108      	bne.n	8003a82 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2180      	movs	r1, #128	@ 0x80
 8003a7a:	0209      	lsls	r1, r1, #8
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	609a      	str	r2, [r3, #8]
 8003a80:	e007      	b.n	8003a92 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689a      	ldr	r2, [r3, #8]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2184      	movs	r1, #132	@ 0x84
 8003a8c:	0209      	lsls	r1, r1, #8
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d109      	bne.n	8003aae <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2180      	movs	r1, #128	@ 0x80
 8003aa6:	0109      	lsls	r1, r1, #4
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	605a      	str	r2, [r3, #4]
 8003aac:	e007      	b.n	8003abe <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4923      	ldr	r1, [pc, #140]	@ (8003b48 <HAL_I2C_Init+0x144>)
 8003aba:	400a      	ands	r2, r1
 8003abc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4920      	ldr	r1, [pc, #128]	@ (8003b4c <HAL_I2C_Init+0x148>)
 8003aca:	430a      	orrs	r2, r1
 8003acc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68da      	ldr	r2, [r3, #12]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	491a      	ldr	r1, [pc, #104]	@ (8003b44 <HAL_I2C_Init+0x140>)
 8003ada:	400a      	ands	r2, r1
 8003adc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691a      	ldr	r2, [r3, #16]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	69d9      	ldr	r1, [r3, #28]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a1a      	ldr	r2, [r3, #32]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2101      	movs	r1, #1
 8003b14:	430a      	orrs	r2, r1
 8003b16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2241      	movs	r2, #65	@ 0x41
 8003b22:	2120      	movs	r1, #32
 8003b24:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2242      	movs	r2, #66	@ 0x42
 8003b30:	2100      	movs	r1, #0
 8003b32:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	0018      	movs	r0, r3
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	b002      	add	sp, #8
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	46c0      	nop			@ (mov r8, r8)
 8003b40:	f0ffffff 	.word	0xf0ffffff
 8003b44:	ffff7fff 	.word	0xffff7fff
 8003b48:	fffff7ff 	.word	0xfffff7ff
 8003b4c:	02008000 	.word	0x02008000

08003b50 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b50:	b590      	push	{r4, r7, lr}
 8003b52:	b089      	sub	sp, #36	@ 0x24
 8003b54:	af02      	add	r7, sp, #8
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	000c      	movs	r4, r1
 8003b5a:	0010      	movs	r0, r2
 8003b5c:	0019      	movs	r1, r3
 8003b5e:	230a      	movs	r3, #10
 8003b60:	18fb      	adds	r3, r7, r3
 8003b62:	1c22      	adds	r2, r4, #0
 8003b64:	801a      	strh	r2, [r3, #0]
 8003b66:	2308      	movs	r3, #8
 8003b68:	18fb      	adds	r3, r7, r3
 8003b6a:	1c02      	adds	r2, r0, #0
 8003b6c:	801a      	strh	r2, [r3, #0]
 8003b6e:	1dbb      	adds	r3, r7, #6
 8003b70:	1c0a      	adds	r2, r1, #0
 8003b72:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2241      	movs	r2, #65	@ 0x41
 8003b78:	5c9b      	ldrb	r3, [r3, r2]
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b20      	cmp	r3, #32
 8003b7e:	d000      	beq.n	8003b82 <HAL_I2C_Mem_Write+0x32>
 8003b80:	e10c      	b.n	8003d9c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d004      	beq.n	8003b92 <HAL_I2C_Mem_Write+0x42>
 8003b88:	232c      	movs	r3, #44	@ 0x2c
 8003b8a:	18fb      	adds	r3, r7, r3
 8003b8c:	881b      	ldrh	r3, [r3, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d105      	bne.n	8003b9e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2280      	movs	r2, #128	@ 0x80
 8003b96:	0092      	lsls	r2, r2, #2
 8003b98:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e0ff      	b.n	8003d9e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2240      	movs	r2, #64	@ 0x40
 8003ba2:	5c9b      	ldrb	r3, [r3, r2]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d101      	bne.n	8003bac <HAL_I2C_Mem_Write+0x5c>
 8003ba8:	2302      	movs	r3, #2
 8003baa:	e0f8      	b.n	8003d9e <HAL_I2C_Mem_Write+0x24e>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2240      	movs	r2, #64	@ 0x40
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003bb4:	f7ff fc92 	bl	80034dc <HAL_GetTick>
 8003bb8:	0003      	movs	r3, r0
 8003bba:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003bbc:	2380      	movs	r3, #128	@ 0x80
 8003bbe:	0219      	lsls	r1, r3, #8
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	2319      	movs	r3, #25
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f000 fb0b 	bl	80041e4 <I2C_WaitOnFlagUntilTimeout>
 8003bce:	1e03      	subs	r3, r0, #0
 8003bd0:	d001      	beq.n	8003bd6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e0e3      	b.n	8003d9e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2241      	movs	r2, #65	@ 0x41
 8003bda:	2121      	movs	r1, #33	@ 0x21
 8003bdc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2242      	movs	r2, #66	@ 0x42
 8003be2:	2140      	movs	r1, #64	@ 0x40
 8003be4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003bf0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	222c      	movs	r2, #44	@ 0x2c
 8003bf6:	18ba      	adds	r2, r7, r2
 8003bf8:	8812      	ldrh	r2, [r2, #0]
 8003bfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c02:	1dbb      	adds	r3, r7, #6
 8003c04:	881c      	ldrh	r4, [r3, #0]
 8003c06:	2308      	movs	r3, #8
 8003c08:	18fb      	adds	r3, r7, r3
 8003c0a:	881a      	ldrh	r2, [r3, #0]
 8003c0c:	230a      	movs	r3, #10
 8003c0e:	18fb      	adds	r3, r7, r3
 8003c10:	8819      	ldrh	r1, [r3, #0]
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	9301      	str	r3, [sp, #4]
 8003c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	0023      	movs	r3, r4
 8003c1e:	f000 f9f9 	bl	8004014 <I2C_RequestMemoryWrite>
 8003c22:	1e03      	subs	r3, r0, #0
 8003c24:	d005      	beq.n	8003c32 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2240      	movs	r2, #64	@ 0x40
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e0b5      	b.n	8003d9e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	2bff      	cmp	r3, #255	@ 0xff
 8003c3a:	d911      	bls.n	8003c60 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	22ff      	movs	r2, #255	@ 0xff
 8003c40:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c46:	b2da      	uxtb	r2, r3
 8003c48:	2380      	movs	r3, #128	@ 0x80
 8003c4a:	045c      	lsls	r4, r3, #17
 8003c4c:	230a      	movs	r3, #10
 8003c4e:	18fb      	adds	r3, r7, r3
 8003c50:	8819      	ldrh	r1, [r3, #0]
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	2300      	movs	r3, #0
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	0023      	movs	r3, r4
 8003c5a:	f000 fc9d 	bl	8004598 <I2C_TransferConfig>
 8003c5e:	e012      	b.n	8003c86 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c6e:	b2da      	uxtb	r2, r3
 8003c70:	2380      	movs	r3, #128	@ 0x80
 8003c72:	049c      	lsls	r4, r3, #18
 8003c74:	230a      	movs	r3, #10
 8003c76:	18fb      	adds	r3, r7, r3
 8003c78:	8819      	ldrh	r1, [r3, #0]
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	0023      	movs	r3, r4
 8003c82:	f000 fc89 	bl	8004598 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	0018      	movs	r0, r3
 8003c8e:	f000 fb01 	bl	8004294 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c92:	1e03      	subs	r3, r0, #0
 8003c94:	d001      	beq.n	8003c9a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e081      	b.n	8003d9e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9e:	781a      	ldrb	r2, [r3, #0]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003caa:	1c5a      	adds	r2, r3, #1
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d03a      	beq.n	8003d4a <HAL_I2C_Mem_Write+0x1fa>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d136      	bne.n	8003d4a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003cdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	0013      	movs	r3, r2
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	2180      	movs	r1, #128	@ 0x80
 8003cea:	f000 fa7b 	bl	80041e4 <I2C_WaitOnFlagUntilTimeout>
 8003cee:	1e03      	subs	r3, r0, #0
 8003cf0:	d001      	beq.n	8003cf6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e053      	b.n	8003d9e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	2bff      	cmp	r3, #255	@ 0xff
 8003cfe:	d911      	bls.n	8003d24 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	22ff      	movs	r2, #255	@ 0xff
 8003d04:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d0a:	b2da      	uxtb	r2, r3
 8003d0c:	2380      	movs	r3, #128	@ 0x80
 8003d0e:	045c      	lsls	r4, r3, #17
 8003d10:	230a      	movs	r3, #10
 8003d12:	18fb      	adds	r3, r7, r3
 8003d14:	8819      	ldrh	r1, [r3, #0]
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	2300      	movs	r3, #0
 8003d1a:	9300      	str	r3, [sp, #0]
 8003d1c:	0023      	movs	r3, r4
 8003d1e:	f000 fc3b 	bl	8004598 <I2C_TransferConfig>
 8003d22:	e012      	b.n	8003d4a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	2380      	movs	r3, #128	@ 0x80
 8003d36:	049c      	lsls	r4, r3, #18
 8003d38:	230a      	movs	r3, #10
 8003d3a:	18fb      	adds	r3, r7, r3
 8003d3c:	8819      	ldrh	r1, [r3, #0]
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	2300      	movs	r3, #0
 8003d42:	9300      	str	r3, [sp, #0]
 8003d44:	0023      	movs	r3, r4
 8003d46:	f000 fc27 	bl	8004598 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d198      	bne.n	8003c86 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	f000 fae0 	bl	8004320 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d60:	1e03      	subs	r3, r0, #0
 8003d62:	d001      	beq.n	8003d68 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e01a      	b.n	8003d9e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2220      	movs	r2, #32
 8003d6e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	490b      	ldr	r1, [pc, #44]	@ (8003da8 <HAL_I2C_Mem_Write+0x258>)
 8003d7c:	400a      	ands	r2, r1
 8003d7e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2241      	movs	r2, #65	@ 0x41
 8003d84:	2120      	movs	r1, #32
 8003d86:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2242      	movs	r2, #66	@ 0x42
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2240      	movs	r2, #64	@ 0x40
 8003d94:	2100      	movs	r1, #0
 8003d96:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	e000      	b.n	8003d9e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003d9c:	2302      	movs	r3, #2
  }
}
 8003d9e:	0018      	movs	r0, r3
 8003da0:	46bd      	mov	sp, r7
 8003da2:	b007      	add	sp, #28
 8003da4:	bd90      	pop	{r4, r7, pc}
 8003da6:	46c0      	nop			@ (mov r8, r8)
 8003da8:	fe00e800 	.word	0xfe00e800

08003dac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dac:	b590      	push	{r4, r7, lr}
 8003dae:	b089      	sub	sp, #36	@ 0x24
 8003db0:	af02      	add	r7, sp, #8
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	000c      	movs	r4, r1
 8003db6:	0010      	movs	r0, r2
 8003db8:	0019      	movs	r1, r3
 8003dba:	230a      	movs	r3, #10
 8003dbc:	18fb      	adds	r3, r7, r3
 8003dbe:	1c22      	adds	r2, r4, #0
 8003dc0:	801a      	strh	r2, [r3, #0]
 8003dc2:	2308      	movs	r3, #8
 8003dc4:	18fb      	adds	r3, r7, r3
 8003dc6:	1c02      	adds	r2, r0, #0
 8003dc8:	801a      	strh	r2, [r3, #0]
 8003dca:	1dbb      	adds	r3, r7, #6
 8003dcc:	1c0a      	adds	r2, r1, #0
 8003dce:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2241      	movs	r2, #65	@ 0x41
 8003dd4:	5c9b      	ldrb	r3, [r3, r2]
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b20      	cmp	r3, #32
 8003dda:	d000      	beq.n	8003dde <HAL_I2C_Mem_Read+0x32>
 8003ddc:	e110      	b.n	8004000 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d004      	beq.n	8003dee <HAL_I2C_Mem_Read+0x42>
 8003de4:	232c      	movs	r3, #44	@ 0x2c
 8003de6:	18fb      	adds	r3, r7, r3
 8003de8:	881b      	ldrh	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d105      	bne.n	8003dfa <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2280      	movs	r2, #128	@ 0x80
 8003df2:	0092      	lsls	r2, r2, #2
 8003df4:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e103      	b.n	8004002 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2240      	movs	r2, #64	@ 0x40
 8003dfe:	5c9b      	ldrb	r3, [r3, r2]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d101      	bne.n	8003e08 <HAL_I2C_Mem_Read+0x5c>
 8003e04:	2302      	movs	r3, #2
 8003e06:	e0fc      	b.n	8004002 <HAL_I2C_Mem_Read+0x256>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2240      	movs	r2, #64	@ 0x40
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e10:	f7ff fb64 	bl	80034dc <HAL_GetTick>
 8003e14:	0003      	movs	r3, r0
 8003e16:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e18:	2380      	movs	r3, #128	@ 0x80
 8003e1a:	0219      	lsls	r1, r3, #8
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	9300      	str	r3, [sp, #0]
 8003e22:	2319      	movs	r3, #25
 8003e24:	2201      	movs	r2, #1
 8003e26:	f000 f9dd 	bl	80041e4 <I2C_WaitOnFlagUntilTimeout>
 8003e2a:	1e03      	subs	r3, r0, #0
 8003e2c:	d001      	beq.n	8003e32 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e0e7      	b.n	8004002 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2241      	movs	r2, #65	@ 0x41
 8003e36:	2122      	movs	r1, #34	@ 0x22
 8003e38:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2242      	movs	r2, #66	@ 0x42
 8003e3e:	2140      	movs	r1, #64	@ 0x40
 8003e40:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e4c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	222c      	movs	r2, #44	@ 0x2c
 8003e52:	18ba      	adds	r2, r7, r2
 8003e54:	8812      	ldrh	r2, [r2, #0]
 8003e56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e5e:	1dbb      	adds	r3, r7, #6
 8003e60:	881c      	ldrh	r4, [r3, #0]
 8003e62:	2308      	movs	r3, #8
 8003e64:	18fb      	adds	r3, r7, r3
 8003e66:	881a      	ldrh	r2, [r3, #0]
 8003e68:	230a      	movs	r3, #10
 8003e6a:	18fb      	adds	r3, r7, r3
 8003e6c:	8819      	ldrh	r1, [r3, #0]
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	9301      	str	r3, [sp, #4]
 8003e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	0023      	movs	r3, r4
 8003e7a:	f000 f92f 	bl	80040dc <I2C_RequestMemoryRead>
 8003e7e:	1e03      	subs	r3, r0, #0
 8003e80:	d005      	beq.n	8003e8e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2240      	movs	r2, #64	@ 0x40
 8003e86:	2100      	movs	r1, #0
 8003e88:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e0b9      	b.n	8004002 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	2bff      	cmp	r3, #255	@ 0xff
 8003e96:	d911      	bls.n	8003ebc <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = 1U;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ea2:	b2da      	uxtb	r2, r3
 8003ea4:	2380      	movs	r3, #128	@ 0x80
 8003ea6:	045c      	lsls	r4, r3, #17
 8003ea8:	230a      	movs	r3, #10
 8003eaa:	18fb      	adds	r3, r7, r3
 8003eac:	8819      	ldrh	r1, [r3, #0]
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	4b56      	ldr	r3, [pc, #344]	@ (800400c <HAL_I2C_Mem_Read+0x260>)
 8003eb2:	9300      	str	r3, [sp, #0]
 8003eb4:	0023      	movs	r3, r4
 8003eb6:	f000 fb6f 	bl	8004598 <I2C_TransferConfig>
 8003eba:	e012      	b.n	8003ee2 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eca:	b2da      	uxtb	r2, r3
 8003ecc:	2380      	movs	r3, #128	@ 0x80
 8003ece:	049c      	lsls	r4, r3, #18
 8003ed0:	230a      	movs	r3, #10
 8003ed2:	18fb      	adds	r3, r7, r3
 8003ed4:	8819      	ldrh	r1, [r3, #0]
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	4b4c      	ldr	r3, [pc, #304]	@ (800400c <HAL_I2C_Mem_Read+0x260>)
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	0023      	movs	r3, r4
 8003ede:	f000 fb5b 	bl	8004598 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003ee2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	0013      	movs	r3, r2
 8003eec:	2200      	movs	r2, #0
 8003eee:	2104      	movs	r1, #4
 8003ef0:	f000 f978 	bl	80041e4 <I2C_WaitOnFlagUntilTimeout>
 8003ef4:	1e03      	subs	r3, r0, #0
 8003ef6:	d001      	beq.n	8003efc <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e082      	b.n	8004002 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f06:	b2d2      	uxtb	r2, r2
 8003f08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0e:	1c5a      	adds	r2, r3, #1
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	3b01      	subs	r3, #1
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d03a      	beq.n	8003fae <HAL_I2C_Mem_Read+0x202>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d136      	bne.n	8003fae <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	0013      	movs	r3, r2
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	2180      	movs	r1, #128	@ 0x80
 8003f4e:	f000 f949 	bl	80041e4 <I2C_WaitOnFlagUntilTimeout>
 8003f52:	1e03      	subs	r3, r0, #0
 8003f54:	d001      	beq.n	8003f5a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e053      	b.n	8004002 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	2bff      	cmp	r3, #255	@ 0xff
 8003f62:	d911      	bls.n	8003f88 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = 1U;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2201      	movs	r2, #1
 8003f68:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	2380      	movs	r3, #128	@ 0x80
 8003f72:	045c      	lsls	r4, r3, #17
 8003f74:	230a      	movs	r3, #10
 8003f76:	18fb      	adds	r3, r7, r3
 8003f78:	8819      	ldrh	r1, [r3, #0]
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	9300      	str	r3, [sp, #0]
 8003f80:	0023      	movs	r3, r4
 8003f82:	f000 fb09 	bl	8004598 <I2C_TransferConfig>
 8003f86:	e012      	b.n	8003fae <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	2380      	movs	r3, #128	@ 0x80
 8003f9a:	049c      	lsls	r4, r3, #18
 8003f9c:	230a      	movs	r3, #10
 8003f9e:	18fb      	adds	r3, r7, r3
 8003fa0:	8819      	ldrh	r1, [r3, #0]
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	0023      	movs	r3, r4
 8003faa:	f000 faf5 	bl	8004598 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d194      	bne.n	8003ee2 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	f000 f9ae 	bl	8004320 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003fc4:	1e03      	subs	r3, r0, #0
 8003fc6:	d001      	beq.n	8003fcc <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e01a      	b.n	8004002 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	490c      	ldr	r1, [pc, #48]	@ (8004010 <HAL_I2C_Mem_Read+0x264>)
 8003fe0:	400a      	ands	r2, r1
 8003fe2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2241      	movs	r2, #65	@ 0x41
 8003fe8:	2120      	movs	r1, #32
 8003fea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2242      	movs	r2, #66	@ 0x42
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2240      	movs	r2, #64	@ 0x40
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	e000      	b.n	8004002 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8004000:	2302      	movs	r3, #2
  }
}
 8004002:	0018      	movs	r0, r3
 8004004:	46bd      	mov	sp, r7
 8004006:	b007      	add	sp, #28
 8004008:	bd90      	pop	{r4, r7, pc}
 800400a:	46c0      	nop			@ (mov r8, r8)
 800400c:	80002400 	.word	0x80002400
 8004010:	fe00e800 	.word	0xfe00e800

08004014 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004014:	b5b0      	push	{r4, r5, r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af02      	add	r7, sp, #8
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	000c      	movs	r4, r1
 800401e:	0010      	movs	r0, r2
 8004020:	0019      	movs	r1, r3
 8004022:	250a      	movs	r5, #10
 8004024:	197b      	adds	r3, r7, r5
 8004026:	1c22      	adds	r2, r4, #0
 8004028:	801a      	strh	r2, [r3, #0]
 800402a:	2308      	movs	r3, #8
 800402c:	18fb      	adds	r3, r7, r3
 800402e:	1c02      	adds	r2, r0, #0
 8004030:	801a      	strh	r2, [r3, #0]
 8004032:	1dbb      	adds	r3, r7, #6
 8004034:	1c0a      	adds	r2, r1, #0
 8004036:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004038:	1dbb      	adds	r3, r7, #6
 800403a:	881b      	ldrh	r3, [r3, #0]
 800403c:	b2da      	uxtb	r2, r3
 800403e:	2380      	movs	r3, #128	@ 0x80
 8004040:	045c      	lsls	r4, r3, #17
 8004042:	197b      	adds	r3, r7, r5
 8004044:	8819      	ldrh	r1, [r3, #0]
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	4b23      	ldr	r3, [pc, #140]	@ (80040d8 <I2C_RequestMemoryWrite+0xc4>)
 800404a:	9300      	str	r3, [sp, #0]
 800404c:	0023      	movs	r3, r4
 800404e:	f000 faa3 	bl	8004598 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004052:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004054:	6a39      	ldr	r1, [r7, #32]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	0018      	movs	r0, r3
 800405a:	f000 f91b 	bl	8004294 <I2C_WaitOnTXISFlagUntilTimeout>
 800405e:	1e03      	subs	r3, r0, #0
 8004060:	d001      	beq.n	8004066 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e033      	b.n	80040ce <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004066:	1dbb      	adds	r3, r7, #6
 8004068:	881b      	ldrh	r3, [r3, #0]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d107      	bne.n	800407e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800406e:	2308      	movs	r3, #8
 8004070:	18fb      	adds	r3, r7, r3
 8004072:	881b      	ldrh	r3, [r3, #0]
 8004074:	b2da      	uxtb	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	629a      	str	r2, [r3, #40]	@ 0x28
 800407c:	e019      	b.n	80040b2 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800407e:	2308      	movs	r3, #8
 8004080:	18fb      	adds	r3, r7, r3
 8004082:	881b      	ldrh	r3, [r3, #0]
 8004084:	0a1b      	lsrs	r3, r3, #8
 8004086:	b29b      	uxth	r3, r3
 8004088:	b2da      	uxtb	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004090:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004092:	6a39      	ldr	r1, [r7, #32]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	0018      	movs	r0, r3
 8004098:	f000 f8fc 	bl	8004294 <I2C_WaitOnTXISFlagUntilTimeout>
 800409c:	1e03      	subs	r3, r0, #0
 800409e:	d001      	beq.n	80040a4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e014      	b.n	80040ce <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040a4:	2308      	movs	r3, #8
 80040a6:	18fb      	adds	r3, r7, r3
 80040a8:	881b      	ldrh	r3, [r3, #0]
 80040aa:	b2da      	uxtb	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80040b2:	6a3a      	ldr	r2, [r7, #32]
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	0013      	movs	r3, r2
 80040bc:	2200      	movs	r2, #0
 80040be:	2180      	movs	r1, #128	@ 0x80
 80040c0:	f000 f890 	bl	80041e4 <I2C_WaitOnFlagUntilTimeout>
 80040c4:	1e03      	subs	r3, r0, #0
 80040c6:	d001      	beq.n	80040cc <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e000      	b.n	80040ce <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	0018      	movs	r0, r3
 80040d0:	46bd      	mov	sp, r7
 80040d2:	b004      	add	sp, #16
 80040d4:	bdb0      	pop	{r4, r5, r7, pc}
 80040d6:	46c0      	nop			@ (mov r8, r8)
 80040d8:	80002000 	.word	0x80002000

080040dc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80040dc:	b5b0      	push	{r4, r5, r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af02      	add	r7, sp, #8
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	000c      	movs	r4, r1
 80040e6:	0010      	movs	r0, r2
 80040e8:	0019      	movs	r1, r3
 80040ea:	250a      	movs	r5, #10
 80040ec:	197b      	adds	r3, r7, r5
 80040ee:	1c22      	adds	r2, r4, #0
 80040f0:	801a      	strh	r2, [r3, #0]
 80040f2:	2308      	movs	r3, #8
 80040f4:	18fb      	adds	r3, r7, r3
 80040f6:	1c02      	adds	r2, r0, #0
 80040f8:	801a      	strh	r2, [r3, #0]
 80040fa:	1dbb      	adds	r3, r7, #6
 80040fc:	1c0a      	adds	r2, r1, #0
 80040fe:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004100:	1dbb      	adds	r3, r7, #6
 8004102:	881b      	ldrh	r3, [r3, #0]
 8004104:	b2da      	uxtb	r2, r3
 8004106:	197b      	adds	r3, r7, r5
 8004108:	8819      	ldrh	r1, [r3, #0]
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	4b23      	ldr	r3, [pc, #140]	@ (800419c <I2C_RequestMemoryRead+0xc0>)
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	2300      	movs	r3, #0
 8004112:	f000 fa41 	bl	8004598 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004116:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004118:	6a39      	ldr	r1, [r7, #32]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	0018      	movs	r0, r3
 800411e:	f000 f8b9 	bl	8004294 <I2C_WaitOnTXISFlagUntilTimeout>
 8004122:	1e03      	subs	r3, r0, #0
 8004124:	d001      	beq.n	800412a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e033      	b.n	8004192 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800412a:	1dbb      	adds	r3, r7, #6
 800412c:	881b      	ldrh	r3, [r3, #0]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d107      	bne.n	8004142 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004132:	2308      	movs	r3, #8
 8004134:	18fb      	adds	r3, r7, r3
 8004136:	881b      	ldrh	r3, [r3, #0]
 8004138:	b2da      	uxtb	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004140:	e019      	b.n	8004176 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004142:	2308      	movs	r3, #8
 8004144:	18fb      	adds	r3, r7, r3
 8004146:	881b      	ldrh	r3, [r3, #0]
 8004148:	0a1b      	lsrs	r3, r3, #8
 800414a:	b29b      	uxth	r3, r3
 800414c:	b2da      	uxtb	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004154:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004156:	6a39      	ldr	r1, [r7, #32]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	0018      	movs	r0, r3
 800415c:	f000 f89a 	bl	8004294 <I2C_WaitOnTXISFlagUntilTimeout>
 8004160:	1e03      	subs	r3, r0, #0
 8004162:	d001      	beq.n	8004168 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e014      	b.n	8004192 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004168:	2308      	movs	r3, #8
 800416a:	18fb      	adds	r3, r7, r3
 800416c:	881b      	ldrh	r3, [r3, #0]
 800416e:	b2da      	uxtb	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004176:	6a3a      	ldr	r2, [r7, #32]
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417c:	9300      	str	r3, [sp, #0]
 800417e:	0013      	movs	r3, r2
 8004180:	2200      	movs	r2, #0
 8004182:	2140      	movs	r1, #64	@ 0x40
 8004184:	f000 f82e 	bl	80041e4 <I2C_WaitOnFlagUntilTimeout>
 8004188:	1e03      	subs	r3, r0, #0
 800418a:	d001      	beq.n	8004190 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e000      	b.n	8004192 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	0018      	movs	r0, r3
 8004194:	46bd      	mov	sp, r7
 8004196:	b004      	add	sp, #16
 8004198:	bdb0      	pop	{r4, r5, r7, pc}
 800419a:	46c0      	nop			@ (mov r8, r8)
 800419c:	80002000 	.word	0x80002000

080041a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	2202      	movs	r2, #2
 80041b0:	4013      	ands	r3, r2
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d103      	bne.n	80041be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2200      	movs	r2, #0
 80041bc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	2201      	movs	r2, #1
 80041c6:	4013      	ands	r3, r2
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d007      	beq.n	80041dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	699a      	ldr	r2, [r3, #24]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2101      	movs	r1, #1
 80041d8:	430a      	orrs	r2, r1
 80041da:	619a      	str	r2, [r3, #24]
  }
}
 80041dc:	46c0      	nop			@ (mov r8, r8)
 80041de:	46bd      	mov	sp, r7
 80041e0:	b002      	add	sp, #8
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	603b      	str	r3, [r7, #0]
 80041f0:	1dfb      	adds	r3, r7, #7
 80041f2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041f4:	e03a      	b.n	800426c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	6839      	ldr	r1, [r7, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	0018      	movs	r0, r3
 80041fe:	f000 f8d3 	bl	80043a8 <I2C_IsErrorOccurred>
 8004202:	1e03      	subs	r3, r0, #0
 8004204:	d001      	beq.n	800420a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e040      	b.n	800428c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	3301      	adds	r3, #1
 800420e:	d02d      	beq.n	800426c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004210:	f7ff f964 	bl	80034dc <HAL_GetTick>
 8004214:	0002      	movs	r2, r0
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	429a      	cmp	r2, r3
 800421e:	d302      	bcc.n	8004226 <I2C_WaitOnFlagUntilTimeout+0x42>
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d122      	bne.n	800426c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	4013      	ands	r3, r2
 8004230:	68ba      	ldr	r2, [r7, #8]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	425a      	negs	r2, r3
 8004236:	4153      	adcs	r3, r2
 8004238:	b2db      	uxtb	r3, r3
 800423a:	001a      	movs	r2, r3
 800423c:	1dfb      	adds	r3, r7, #7
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	429a      	cmp	r2, r3
 8004242:	d113      	bne.n	800426c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004248:	2220      	movs	r2, #32
 800424a:	431a      	orrs	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2241      	movs	r2, #65	@ 0x41
 8004254:	2120      	movs	r1, #32
 8004256:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2242      	movs	r2, #66	@ 0x42
 800425c:	2100      	movs	r1, #0
 800425e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2240      	movs	r2, #64	@ 0x40
 8004264:	2100      	movs	r1, #0
 8004266:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e00f      	b.n	800428c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	68ba      	ldr	r2, [r7, #8]
 8004274:	4013      	ands	r3, r2
 8004276:	68ba      	ldr	r2, [r7, #8]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	425a      	negs	r2, r3
 800427c:	4153      	adcs	r3, r2
 800427e:	b2db      	uxtb	r3, r3
 8004280:	001a      	movs	r2, r3
 8004282:	1dfb      	adds	r3, r7, #7
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	429a      	cmp	r2, r3
 8004288:	d0b5      	beq.n	80041f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	0018      	movs	r0, r3
 800428e:	46bd      	mov	sp, r7
 8004290:	b004      	add	sp, #16
 8004292:	bd80      	pop	{r7, pc}

08004294 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80042a0:	e032      	b.n	8004308 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	68b9      	ldr	r1, [r7, #8]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	0018      	movs	r0, r3
 80042aa:	f000 f87d 	bl	80043a8 <I2C_IsErrorOccurred>
 80042ae:	1e03      	subs	r3, r0, #0
 80042b0:	d001      	beq.n	80042b6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e030      	b.n	8004318 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	3301      	adds	r3, #1
 80042ba:	d025      	beq.n	8004308 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042bc:	f7ff f90e 	bl	80034dc <HAL_GetTick>
 80042c0:	0002      	movs	r2, r0
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d302      	bcc.n	80042d2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d11a      	bne.n	8004308 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	2202      	movs	r2, #2
 80042da:	4013      	ands	r3, r2
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d013      	beq.n	8004308 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e4:	2220      	movs	r2, #32
 80042e6:	431a      	orrs	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2241      	movs	r2, #65	@ 0x41
 80042f0:	2120      	movs	r1, #32
 80042f2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2242      	movs	r2, #66	@ 0x42
 80042f8:	2100      	movs	r1, #0
 80042fa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2240      	movs	r2, #64	@ 0x40
 8004300:	2100      	movs	r1, #0
 8004302:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e007      	b.n	8004318 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	2202      	movs	r2, #2
 8004310:	4013      	ands	r3, r2
 8004312:	2b02      	cmp	r3, #2
 8004314:	d1c5      	bne.n	80042a2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	0018      	movs	r0, r3
 800431a:	46bd      	mov	sp, r7
 800431c:	b004      	add	sp, #16
 800431e:	bd80      	pop	{r7, pc}

08004320 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800432c:	e02f      	b.n	800438e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	68b9      	ldr	r1, [r7, #8]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	0018      	movs	r0, r3
 8004336:	f000 f837 	bl	80043a8 <I2C_IsErrorOccurred>
 800433a:	1e03      	subs	r3, r0, #0
 800433c:	d001      	beq.n	8004342 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e02d      	b.n	800439e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004342:	f7ff f8cb 	bl	80034dc <HAL_GetTick>
 8004346:	0002      	movs	r2, r0
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	429a      	cmp	r2, r3
 8004350:	d302      	bcc.n	8004358 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d11a      	bne.n	800438e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	2220      	movs	r2, #32
 8004360:	4013      	ands	r3, r2
 8004362:	2b20      	cmp	r3, #32
 8004364:	d013      	beq.n	800438e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800436a:	2220      	movs	r2, #32
 800436c:	431a      	orrs	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2241      	movs	r2, #65	@ 0x41
 8004376:	2120      	movs	r1, #32
 8004378:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2242      	movs	r2, #66	@ 0x42
 800437e:	2100      	movs	r1, #0
 8004380:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2240      	movs	r2, #64	@ 0x40
 8004386:	2100      	movs	r1, #0
 8004388:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e007      	b.n	800439e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	2220      	movs	r2, #32
 8004396:	4013      	ands	r3, r2
 8004398:	2b20      	cmp	r3, #32
 800439a:	d1c8      	bne.n	800432e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	0018      	movs	r0, r3
 80043a0:	46bd      	mov	sp, r7
 80043a2:	b004      	add	sp, #16
 80043a4:	bd80      	pop	{r7, pc}
	...

080043a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b08a      	sub	sp, #40	@ 0x28
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043b4:	2327      	movs	r3, #39	@ 0x27
 80043b6:	18fb      	adds	r3, r7, r3
 80043b8:	2200      	movs	r2, #0
 80043ba:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80043c4:	2300      	movs	r3, #0
 80043c6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	2210      	movs	r2, #16
 80043d0:	4013      	ands	r3, r2
 80043d2:	d100      	bne.n	80043d6 <I2C_IsErrorOccurred+0x2e>
 80043d4:	e079      	b.n	80044ca <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2210      	movs	r2, #16
 80043dc:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80043de:	e057      	b.n	8004490 <I2C_IsErrorOccurred+0xe8>
 80043e0:	2227      	movs	r2, #39	@ 0x27
 80043e2:	18bb      	adds	r3, r7, r2
 80043e4:	18ba      	adds	r2, r7, r2
 80043e6:	7812      	ldrb	r2, [r2, #0]
 80043e8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	3301      	adds	r3, #1
 80043ee:	d04f      	beq.n	8004490 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80043f0:	f7ff f874 	bl	80034dc <HAL_GetTick>
 80043f4:	0002      	movs	r2, r0
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d302      	bcc.n	8004406 <I2C_IsErrorOccurred+0x5e>
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d144      	bne.n	8004490 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	2380      	movs	r3, #128	@ 0x80
 800440e:	01db      	lsls	r3, r3, #7
 8004410:	4013      	ands	r3, r2
 8004412:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004414:	2013      	movs	r0, #19
 8004416:	183b      	adds	r3, r7, r0
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	2142      	movs	r1, #66	@ 0x42
 800441c:	5c52      	ldrb	r2, [r2, r1]
 800441e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	699a      	ldr	r2, [r3, #24]
 8004426:	2380      	movs	r3, #128	@ 0x80
 8004428:	021b      	lsls	r3, r3, #8
 800442a:	401a      	ands	r2, r3
 800442c:	2380      	movs	r3, #128	@ 0x80
 800442e:	021b      	lsls	r3, r3, #8
 8004430:	429a      	cmp	r2, r3
 8004432:	d126      	bne.n	8004482 <I2C_IsErrorOccurred+0xda>
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	2380      	movs	r3, #128	@ 0x80
 8004438:	01db      	lsls	r3, r3, #7
 800443a:	429a      	cmp	r2, r3
 800443c:	d021      	beq.n	8004482 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800443e:	183b      	adds	r3, r7, r0
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	2b20      	cmp	r3, #32
 8004444:	d01d      	beq.n	8004482 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2180      	movs	r1, #128	@ 0x80
 8004452:	01c9      	lsls	r1, r1, #7
 8004454:	430a      	orrs	r2, r1
 8004456:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004458:	f7ff f840 	bl	80034dc <HAL_GetTick>
 800445c:	0003      	movs	r3, r0
 800445e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004460:	e00f      	b.n	8004482 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004462:	f7ff f83b 	bl	80034dc <HAL_GetTick>
 8004466:	0002      	movs	r2, r0
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b19      	cmp	r3, #25
 800446e:	d908      	bls.n	8004482 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004470:	6a3b      	ldr	r3, [r7, #32]
 8004472:	2220      	movs	r2, #32
 8004474:	4313      	orrs	r3, r2
 8004476:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004478:	2327      	movs	r3, #39	@ 0x27
 800447a:	18fb      	adds	r3, r7, r3
 800447c:	2201      	movs	r2, #1
 800447e:	701a      	strb	r2, [r3, #0]

              break;
 8004480:	e006      	b.n	8004490 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	2220      	movs	r2, #32
 800448a:	4013      	ands	r3, r2
 800448c:	2b20      	cmp	r3, #32
 800448e:	d1e8      	bne.n	8004462 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	2220      	movs	r2, #32
 8004498:	4013      	ands	r3, r2
 800449a:	2b20      	cmp	r3, #32
 800449c:	d004      	beq.n	80044a8 <I2C_IsErrorOccurred+0x100>
 800449e:	2327      	movs	r3, #39	@ 0x27
 80044a0:	18fb      	adds	r3, r7, r3
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d09b      	beq.n	80043e0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80044a8:	2327      	movs	r3, #39	@ 0x27
 80044aa:	18fb      	adds	r3, r7, r3
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d103      	bne.n	80044ba <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2220      	movs	r2, #32
 80044b8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80044ba:	6a3b      	ldr	r3, [r7, #32]
 80044bc:	2204      	movs	r2, #4
 80044be:	4313      	orrs	r3, r2
 80044c0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80044c2:	2327      	movs	r3, #39	@ 0x27
 80044c4:	18fb      	adds	r3, r7, r3
 80044c6:	2201      	movs	r2, #1
 80044c8:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	2380      	movs	r3, #128	@ 0x80
 80044d6:	005b      	lsls	r3, r3, #1
 80044d8:	4013      	ands	r3, r2
 80044da:	d00c      	beq.n	80044f6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80044dc:	6a3b      	ldr	r3, [r7, #32]
 80044de:	2201      	movs	r2, #1
 80044e0:	4313      	orrs	r3, r2
 80044e2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2280      	movs	r2, #128	@ 0x80
 80044ea:	0052      	lsls	r2, r2, #1
 80044ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80044ee:	2327      	movs	r3, #39	@ 0x27
 80044f0:	18fb      	adds	r3, r7, r3
 80044f2:	2201      	movs	r2, #1
 80044f4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	2380      	movs	r3, #128	@ 0x80
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	4013      	ands	r3, r2
 80044fe:	d00c      	beq.n	800451a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004500:	6a3b      	ldr	r3, [r7, #32]
 8004502:	2208      	movs	r2, #8
 8004504:	4313      	orrs	r3, r2
 8004506:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2280      	movs	r2, #128	@ 0x80
 800450e:	00d2      	lsls	r2, r2, #3
 8004510:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004512:	2327      	movs	r3, #39	@ 0x27
 8004514:	18fb      	adds	r3, r7, r3
 8004516:	2201      	movs	r2, #1
 8004518:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	2380      	movs	r3, #128	@ 0x80
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4013      	ands	r3, r2
 8004522:	d00c      	beq.n	800453e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	2202      	movs	r2, #2
 8004528:	4313      	orrs	r3, r2
 800452a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2280      	movs	r2, #128	@ 0x80
 8004532:	0092      	lsls	r2, r2, #2
 8004534:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004536:	2327      	movs	r3, #39	@ 0x27
 8004538:	18fb      	adds	r3, r7, r3
 800453a:	2201      	movs	r2, #1
 800453c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800453e:	2327      	movs	r3, #39	@ 0x27
 8004540:	18fb      	adds	r3, r7, r3
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d01d      	beq.n	8004584 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	0018      	movs	r0, r3
 800454c:	f7ff fe28 	bl	80041a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685a      	ldr	r2, [r3, #4]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	490e      	ldr	r1, [pc, #56]	@ (8004594 <I2C_IsErrorOccurred+0x1ec>)
 800455c:	400a      	ands	r2, r1
 800455e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004564:	6a3b      	ldr	r3, [r7, #32]
 8004566:	431a      	orrs	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2241      	movs	r2, #65	@ 0x41
 8004570:	2120      	movs	r1, #32
 8004572:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2242      	movs	r2, #66	@ 0x42
 8004578:	2100      	movs	r1, #0
 800457a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2240      	movs	r2, #64	@ 0x40
 8004580:	2100      	movs	r1, #0
 8004582:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004584:	2327      	movs	r3, #39	@ 0x27
 8004586:	18fb      	adds	r3, r7, r3
 8004588:	781b      	ldrb	r3, [r3, #0]
}
 800458a:	0018      	movs	r0, r3
 800458c:	46bd      	mov	sp, r7
 800458e:	b00a      	add	sp, #40	@ 0x28
 8004590:	bd80      	pop	{r7, pc}
 8004592:	46c0      	nop			@ (mov r8, r8)
 8004594:	fe00e800 	.word	0xfe00e800

08004598 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004598:	b590      	push	{r4, r7, lr}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	0008      	movs	r0, r1
 80045a2:	0011      	movs	r1, r2
 80045a4:	607b      	str	r3, [r7, #4]
 80045a6:	240a      	movs	r4, #10
 80045a8:	193b      	adds	r3, r7, r4
 80045aa:	1c02      	adds	r2, r0, #0
 80045ac:	801a      	strh	r2, [r3, #0]
 80045ae:	2009      	movs	r0, #9
 80045b0:	183b      	adds	r3, r7, r0
 80045b2:	1c0a      	adds	r2, r1, #0
 80045b4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045b6:	193b      	adds	r3, r7, r4
 80045b8:	881b      	ldrh	r3, [r3, #0]
 80045ba:	059b      	lsls	r3, r3, #22
 80045bc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80045be:	183b      	adds	r3, r7, r0
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	0419      	lsls	r1, r3, #16
 80045c4:	23ff      	movs	r3, #255	@ 0xff
 80045c6:	041b      	lsls	r3, r3, #16
 80045c8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045ca:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d2:	4313      	orrs	r3, r2
 80045d4:	005b      	lsls	r3, r3, #1
 80045d6:	085b      	lsrs	r3, r3, #1
 80045d8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045e2:	0d51      	lsrs	r1, r2, #21
 80045e4:	2280      	movs	r2, #128	@ 0x80
 80045e6:	00d2      	lsls	r2, r2, #3
 80045e8:	400a      	ands	r2, r1
 80045ea:	4907      	ldr	r1, [pc, #28]	@ (8004608 <I2C_TransferConfig+0x70>)
 80045ec:	430a      	orrs	r2, r1
 80045ee:	43d2      	mvns	r2, r2
 80045f0:	401a      	ands	r2, r3
 80045f2:	0011      	movs	r1, r2
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80045fe:	46c0      	nop			@ (mov r8, r8)
 8004600:	46bd      	mov	sp, r7
 8004602:	b007      	add	sp, #28
 8004604:	bd90      	pop	{r4, r7, pc}
 8004606:	46c0      	nop			@ (mov r8, r8)
 8004608:	03ff63ff 	.word	0x03ff63ff

0800460c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2241      	movs	r2, #65	@ 0x41
 800461a:	5c9b      	ldrb	r3, [r3, r2]
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b20      	cmp	r3, #32
 8004620:	d138      	bne.n	8004694 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2240      	movs	r2, #64	@ 0x40
 8004626:	5c9b      	ldrb	r3, [r3, r2]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d101      	bne.n	8004630 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800462c:	2302      	movs	r3, #2
 800462e:	e032      	b.n	8004696 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2240      	movs	r2, #64	@ 0x40
 8004634:	2101      	movs	r1, #1
 8004636:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2241      	movs	r2, #65	@ 0x41
 800463c:	2124      	movs	r1, #36	@ 0x24
 800463e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2101      	movs	r1, #1
 800464c:	438a      	bics	r2, r1
 800464e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4911      	ldr	r1, [pc, #68]	@ (80046a0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800465c:	400a      	ands	r2, r1
 800465e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6819      	ldr	r1, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	430a      	orrs	r2, r1
 800466e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2101      	movs	r1, #1
 800467c:	430a      	orrs	r2, r1
 800467e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2241      	movs	r2, #65	@ 0x41
 8004684:	2120      	movs	r1, #32
 8004686:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2240      	movs	r2, #64	@ 0x40
 800468c:	2100      	movs	r1, #0
 800468e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004690:	2300      	movs	r3, #0
 8004692:	e000      	b.n	8004696 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004694:	2302      	movs	r3, #2
  }
}
 8004696:	0018      	movs	r0, r3
 8004698:	46bd      	mov	sp, r7
 800469a:	b002      	add	sp, #8
 800469c:	bd80      	pop	{r7, pc}
 800469e:	46c0      	nop			@ (mov r8, r8)
 80046a0:	ffffefff 	.word	0xffffefff

080046a4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2241      	movs	r2, #65	@ 0x41
 80046b2:	5c9b      	ldrb	r3, [r3, r2]
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b20      	cmp	r3, #32
 80046b8:	d139      	bne.n	800472e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2240      	movs	r2, #64	@ 0x40
 80046be:	5c9b      	ldrb	r3, [r3, r2]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d101      	bne.n	80046c8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80046c4:	2302      	movs	r3, #2
 80046c6:	e033      	b.n	8004730 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2240      	movs	r2, #64	@ 0x40
 80046cc:	2101      	movs	r1, #1
 80046ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2241      	movs	r2, #65	@ 0x41
 80046d4:	2124      	movs	r1, #36	@ 0x24
 80046d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2101      	movs	r1, #1
 80046e4:	438a      	bics	r2, r1
 80046e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	4a11      	ldr	r2, [pc, #68]	@ (8004738 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80046f4:	4013      	ands	r3, r2
 80046f6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	021b      	lsls	r3, r3, #8
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	4313      	orrs	r3, r2
 8004700:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2101      	movs	r1, #1
 8004716:	430a      	orrs	r2, r1
 8004718:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2241      	movs	r2, #65	@ 0x41
 800471e:	2120      	movs	r1, #32
 8004720:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2240      	movs	r2, #64	@ 0x40
 8004726:	2100      	movs	r1, #0
 8004728:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800472a:	2300      	movs	r3, #0
 800472c:	e000      	b.n	8004730 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800472e:	2302      	movs	r3, #2
  }
}
 8004730:	0018      	movs	r0, r3
 8004732:	46bd      	mov	sp, r7
 8004734:	b004      	add	sp, #16
 8004736:	bd80      	pop	{r7, pc}
 8004738:	fffff0ff 	.word	0xfffff0ff

0800473c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b088      	sub	sp, #32
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e301      	b.n	8004d52 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2201      	movs	r2, #1
 8004754:	4013      	ands	r3, r2
 8004756:	d100      	bne.n	800475a <HAL_RCC_OscConfig+0x1e>
 8004758:	e08d      	b.n	8004876 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800475a:	4bc3      	ldr	r3, [pc, #780]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	220c      	movs	r2, #12
 8004760:	4013      	ands	r3, r2
 8004762:	2b04      	cmp	r3, #4
 8004764:	d00e      	beq.n	8004784 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004766:	4bc0      	ldr	r3, [pc, #768]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	220c      	movs	r2, #12
 800476c:	4013      	ands	r3, r2
 800476e:	2b08      	cmp	r3, #8
 8004770:	d116      	bne.n	80047a0 <HAL_RCC_OscConfig+0x64>
 8004772:	4bbd      	ldr	r3, [pc, #756]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	2380      	movs	r3, #128	@ 0x80
 8004778:	025b      	lsls	r3, r3, #9
 800477a:	401a      	ands	r2, r3
 800477c:	2380      	movs	r3, #128	@ 0x80
 800477e:	025b      	lsls	r3, r3, #9
 8004780:	429a      	cmp	r2, r3
 8004782:	d10d      	bne.n	80047a0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004784:	4bb8      	ldr	r3, [pc, #736]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	2380      	movs	r3, #128	@ 0x80
 800478a:	029b      	lsls	r3, r3, #10
 800478c:	4013      	ands	r3, r2
 800478e:	d100      	bne.n	8004792 <HAL_RCC_OscConfig+0x56>
 8004790:	e070      	b.n	8004874 <HAL_RCC_OscConfig+0x138>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d000      	beq.n	800479c <HAL_RCC_OscConfig+0x60>
 800479a:	e06b      	b.n	8004874 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e2d8      	b.n	8004d52 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d107      	bne.n	80047b8 <HAL_RCC_OscConfig+0x7c>
 80047a8:	4baf      	ldr	r3, [pc, #700]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	4bae      	ldr	r3, [pc, #696]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80047ae:	2180      	movs	r1, #128	@ 0x80
 80047b0:	0249      	lsls	r1, r1, #9
 80047b2:	430a      	orrs	r2, r1
 80047b4:	601a      	str	r2, [r3, #0]
 80047b6:	e02f      	b.n	8004818 <HAL_RCC_OscConfig+0xdc>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10c      	bne.n	80047da <HAL_RCC_OscConfig+0x9e>
 80047c0:	4ba9      	ldr	r3, [pc, #676]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	4ba8      	ldr	r3, [pc, #672]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80047c6:	49a9      	ldr	r1, [pc, #676]	@ (8004a6c <HAL_RCC_OscConfig+0x330>)
 80047c8:	400a      	ands	r2, r1
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	4ba6      	ldr	r3, [pc, #664]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	4ba5      	ldr	r3, [pc, #660]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80047d2:	49a7      	ldr	r1, [pc, #668]	@ (8004a70 <HAL_RCC_OscConfig+0x334>)
 80047d4:	400a      	ands	r2, r1
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	e01e      	b.n	8004818 <HAL_RCC_OscConfig+0xdc>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	2b05      	cmp	r3, #5
 80047e0:	d10e      	bne.n	8004800 <HAL_RCC_OscConfig+0xc4>
 80047e2:	4ba1      	ldr	r3, [pc, #644]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	4ba0      	ldr	r3, [pc, #640]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80047e8:	2180      	movs	r1, #128	@ 0x80
 80047ea:	02c9      	lsls	r1, r1, #11
 80047ec:	430a      	orrs	r2, r1
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	4b9d      	ldr	r3, [pc, #628]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	4b9c      	ldr	r3, [pc, #624]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80047f6:	2180      	movs	r1, #128	@ 0x80
 80047f8:	0249      	lsls	r1, r1, #9
 80047fa:	430a      	orrs	r2, r1
 80047fc:	601a      	str	r2, [r3, #0]
 80047fe:	e00b      	b.n	8004818 <HAL_RCC_OscConfig+0xdc>
 8004800:	4b99      	ldr	r3, [pc, #612]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	4b98      	ldr	r3, [pc, #608]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 8004806:	4999      	ldr	r1, [pc, #612]	@ (8004a6c <HAL_RCC_OscConfig+0x330>)
 8004808:	400a      	ands	r2, r1
 800480a:	601a      	str	r2, [r3, #0]
 800480c:	4b96      	ldr	r3, [pc, #600]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	4b95      	ldr	r3, [pc, #596]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 8004812:	4997      	ldr	r1, [pc, #604]	@ (8004a70 <HAL_RCC_OscConfig+0x334>)
 8004814:	400a      	ands	r2, r1
 8004816:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d014      	beq.n	800484a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004820:	f7fe fe5c 	bl	80034dc <HAL_GetTick>
 8004824:	0003      	movs	r3, r0
 8004826:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004828:	e008      	b.n	800483c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800482a:	f7fe fe57 	bl	80034dc <HAL_GetTick>
 800482e:	0002      	movs	r2, r0
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	2b64      	cmp	r3, #100	@ 0x64
 8004836:	d901      	bls.n	800483c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e28a      	b.n	8004d52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800483c:	4b8a      	ldr	r3, [pc, #552]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	2380      	movs	r3, #128	@ 0x80
 8004842:	029b      	lsls	r3, r3, #10
 8004844:	4013      	ands	r3, r2
 8004846:	d0f0      	beq.n	800482a <HAL_RCC_OscConfig+0xee>
 8004848:	e015      	b.n	8004876 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800484a:	f7fe fe47 	bl	80034dc <HAL_GetTick>
 800484e:	0003      	movs	r3, r0
 8004850:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004854:	f7fe fe42 	bl	80034dc <HAL_GetTick>
 8004858:	0002      	movs	r2, r0
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b64      	cmp	r3, #100	@ 0x64
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e275      	b.n	8004d52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004866:	4b80      	ldr	r3, [pc, #512]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	2380      	movs	r3, #128	@ 0x80
 800486c:	029b      	lsls	r3, r3, #10
 800486e:	4013      	ands	r3, r2
 8004870:	d1f0      	bne.n	8004854 <HAL_RCC_OscConfig+0x118>
 8004872:	e000      	b.n	8004876 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004874:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2202      	movs	r2, #2
 800487c:	4013      	ands	r3, r2
 800487e:	d100      	bne.n	8004882 <HAL_RCC_OscConfig+0x146>
 8004880:	e069      	b.n	8004956 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004882:	4b79      	ldr	r3, [pc, #484]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	220c      	movs	r2, #12
 8004888:	4013      	ands	r3, r2
 800488a:	d00b      	beq.n	80048a4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800488c:	4b76      	ldr	r3, [pc, #472]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	220c      	movs	r2, #12
 8004892:	4013      	ands	r3, r2
 8004894:	2b08      	cmp	r3, #8
 8004896:	d11c      	bne.n	80048d2 <HAL_RCC_OscConfig+0x196>
 8004898:	4b73      	ldr	r3, [pc, #460]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	2380      	movs	r3, #128	@ 0x80
 800489e:	025b      	lsls	r3, r3, #9
 80048a0:	4013      	ands	r3, r2
 80048a2:	d116      	bne.n	80048d2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048a4:	4b70      	ldr	r3, [pc, #448]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2202      	movs	r2, #2
 80048aa:	4013      	ands	r3, r2
 80048ac:	d005      	beq.n	80048ba <HAL_RCC_OscConfig+0x17e>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d001      	beq.n	80048ba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e24b      	b.n	8004d52 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ba:	4b6b      	ldr	r3, [pc, #428]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	22f8      	movs	r2, #248	@ 0xf8
 80048c0:	4393      	bics	r3, r2
 80048c2:	0019      	movs	r1, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	00da      	lsls	r2, r3, #3
 80048ca:	4b67      	ldr	r3, [pc, #412]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80048cc:	430a      	orrs	r2, r1
 80048ce:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048d0:	e041      	b.n	8004956 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d024      	beq.n	8004924 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048da:	4b63      	ldr	r3, [pc, #396]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	4b62      	ldr	r3, [pc, #392]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80048e0:	2101      	movs	r1, #1
 80048e2:	430a      	orrs	r2, r1
 80048e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e6:	f7fe fdf9 	bl	80034dc <HAL_GetTick>
 80048ea:	0003      	movs	r3, r0
 80048ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048f0:	f7fe fdf4 	bl	80034dc <HAL_GetTick>
 80048f4:	0002      	movs	r2, r0
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e227      	b.n	8004d52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004902:	4b59      	ldr	r3, [pc, #356]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2202      	movs	r2, #2
 8004908:	4013      	ands	r3, r2
 800490a:	d0f1      	beq.n	80048f0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800490c:	4b56      	ldr	r3, [pc, #344]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	22f8      	movs	r2, #248	@ 0xf8
 8004912:	4393      	bics	r3, r2
 8004914:	0019      	movs	r1, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	00da      	lsls	r2, r3, #3
 800491c:	4b52      	ldr	r3, [pc, #328]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 800491e:	430a      	orrs	r2, r1
 8004920:	601a      	str	r2, [r3, #0]
 8004922:	e018      	b.n	8004956 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004924:	4b50      	ldr	r3, [pc, #320]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	4b4f      	ldr	r3, [pc, #316]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 800492a:	2101      	movs	r1, #1
 800492c:	438a      	bics	r2, r1
 800492e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004930:	f7fe fdd4 	bl	80034dc <HAL_GetTick>
 8004934:	0003      	movs	r3, r0
 8004936:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004938:	e008      	b.n	800494c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800493a:	f7fe fdcf 	bl	80034dc <HAL_GetTick>
 800493e:	0002      	movs	r2, r0
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	2b02      	cmp	r3, #2
 8004946:	d901      	bls.n	800494c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e202      	b.n	8004d52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800494c:	4b46      	ldr	r3, [pc, #280]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2202      	movs	r2, #2
 8004952:	4013      	ands	r3, r2
 8004954:	d1f1      	bne.n	800493a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2208      	movs	r2, #8
 800495c:	4013      	ands	r3, r2
 800495e:	d036      	beq.n	80049ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	69db      	ldr	r3, [r3, #28]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d019      	beq.n	800499c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004968:	4b3f      	ldr	r3, [pc, #252]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 800496a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800496c:	4b3e      	ldr	r3, [pc, #248]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 800496e:	2101      	movs	r1, #1
 8004970:	430a      	orrs	r2, r1
 8004972:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004974:	f7fe fdb2 	bl	80034dc <HAL_GetTick>
 8004978:	0003      	movs	r3, r0
 800497a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800497c:	e008      	b.n	8004990 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800497e:	f7fe fdad 	bl	80034dc <HAL_GetTick>
 8004982:	0002      	movs	r2, r0
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	2b02      	cmp	r3, #2
 800498a:	d901      	bls.n	8004990 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e1e0      	b.n	8004d52 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004990:	4b35      	ldr	r3, [pc, #212]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 8004992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004994:	2202      	movs	r2, #2
 8004996:	4013      	ands	r3, r2
 8004998:	d0f1      	beq.n	800497e <HAL_RCC_OscConfig+0x242>
 800499a:	e018      	b.n	80049ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800499c:	4b32      	ldr	r3, [pc, #200]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 800499e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049a0:	4b31      	ldr	r3, [pc, #196]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80049a2:	2101      	movs	r1, #1
 80049a4:	438a      	bics	r2, r1
 80049a6:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049a8:	f7fe fd98 	bl	80034dc <HAL_GetTick>
 80049ac:	0003      	movs	r3, r0
 80049ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049b0:	e008      	b.n	80049c4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049b2:	f7fe fd93 	bl	80034dc <HAL_GetTick>
 80049b6:	0002      	movs	r2, r0
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d901      	bls.n	80049c4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e1c6      	b.n	8004d52 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049c4:	4b28      	ldr	r3, [pc, #160]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80049c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c8:	2202      	movs	r2, #2
 80049ca:	4013      	ands	r3, r2
 80049cc:	d1f1      	bne.n	80049b2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2204      	movs	r2, #4
 80049d4:	4013      	ands	r3, r2
 80049d6:	d100      	bne.n	80049da <HAL_RCC_OscConfig+0x29e>
 80049d8:	e0b4      	b.n	8004b44 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049da:	201f      	movs	r0, #31
 80049dc:	183b      	adds	r3, r7, r0
 80049de:	2200      	movs	r2, #0
 80049e0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049e2:	4b21      	ldr	r3, [pc, #132]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80049e4:	69da      	ldr	r2, [r3, #28]
 80049e6:	2380      	movs	r3, #128	@ 0x80
 80049e8:	055b      	lsls	r3, r3, #21
 80049ea:	4013      	ands	r3, r2
 80049ec:	d110      	bne.n	8004a10 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049ee:	4b1e      	ldr	r3, [pc, #120]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80049f0:	69da      	ldr	r2, [r3, #28]
 80049f2:	4b1d      	ldr	r3, [pc, #116]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80049f4:	2180      	movs	r1, #128	@ 0x80
 80049f6:	0549      	lsls	r1, r1, #21
 80049f8:	430a      	orrs	r2, r1
 80049fa:	61da      	str	r2, [r3, #28]
 80049fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 80049fe:	69da      	ldr	r2, [r3, #28]
 8004a00:	2380      	movs	r3, #128	@ 0x80
 8004a02:	055b      	lsls	r3, r3, #21
 8004a04:	4013      	ands	r3, r2
 8004a06:	60fb      	str	r3, [r7, #12]
 8004a08:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004a0a:	183b      	adds	r3, r7, r0
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a10:	4b18      	ldr	r3, [pc, #96]	@ (8004a74 <HAL_RCC_OscConfig+0x338>)
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	2380      	movs	r3, #128	@ 0x80
 8004a16:	005b      	lsls	r3, r3, #1
 8004a18:	4013      	ands	r3, r2
 8004a1a:	d11a      	bne.n	8004a52 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a1c:	4b15      	ldr	r3, [pc, #84]	@ (8004a74 <HAL_RCC_OscConfig+0x338>)
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	4b14      	ldr	r3, [pc, #80]	@ (8004a74 <HAL_RCC_OscConfig+0x338>)
 8004a22:	2180      	movs	r1, #128	@ 0x80
 8004a24:	0049      	lsls	r1, r1, #1
 8004a26:	430a      	orrs	r2, r1
 8004a28:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a2a:	f7fe fd57 	bl	80034dc <HAL_GetTick>
 8004a2e:	0003      	movs	r3, r0
 8004a30:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a32:	e008      	b.n	8004a46 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a34:	f7fe fd52 	bl	80034dc <HAL_GetTick>
 8004a38:	0002      	movs	r2, r0
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b64      	cmp	r3, #100	@ 0x64
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e185      	b.n	8004d52 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a46:	4b0b      	ldr	r3, [pc, #44]	@ (8004a74 <HAL_RCC_OscConfig+0x338>)
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	2380      	movs	r3, #128	@ 0x80
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	4013      	ands	r3, r2
 8004a50:	d0f0      	beq.n	8004a34 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d10e      	bne.n	8004a78 <HAL_RCC_OscConfig+0x33c>
 8004a5a:	4b03      	ldr	r3, [pc, #12]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 8004a5c:	6a1a      	ldr	r2, [r3, #32]
 8004a5e:	4b02      	ldr	r3, [pc, #8]	@ (8004a68 <HAL_RCC_OscConfig+0x32c>)
 8004a60:	2101      	movs	r1, #1
 8004a62:	430a      	orrs	r2, r1
 8004a64:	621a      	str	r2, [r3, #32]
 8004a66:	e035      	b.n	8004ad4 <HAL_RCC_OscConfig+0x398>
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	fffeffff 	.word	0xfffeffff
 8004a70:	fffbffff 	.word	0xfffbffff
 8004a74:	40007000 	.word	0x40007000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10c      	bne.n	8004a9a <HAL_RCC_OscConfig+0x35e>
 8004a80:	4bb6      	ldr	r3, [pc, #728]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004a82:	6a1a      	ldr	r2, [r3, #32]
 8004a84:	4bb5      	ldr	r3, [pc, #724]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004a86:	2101      	movs	r1, #1
 8004a88:	438a      	bics	r2, r1
 8004a8a:	621a      	str	r2, [r3, #32]
 8004a8c:	4bb3      	ldr	r3, [pc, #716]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004a8e:	6a1a      	ldr	r2, [r3, #32]
 8004a90:	4bb2      	ldr	r3, [pc, #712]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004a92:	2104      	movs	r1, #4
 8004a94:	438a      	bics	r2, r1
 8004a96:	621a      	str	r2, [r3, #32]
 8004a98:	e01c      	b.n	8004ad4 <HAL_RCC_OscConfig+0x398>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	2b05      	cmp	r3, #5
 8004aa0:	d10c      	bne.n	8004abc <HAL_RCC_OscConfig+0x380>
 8004aa2:	4bae      	ldr	r3, [pc, #696]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004aa4:	6a1a      	ldr	r2, [r3, #32]
 8004aa6:	4bad      	ldr	r3, [pc, #692]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004aa8:	2104      	movs	r1, #4
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	621a      	str	r2, [r3, #32]
 8004aae:	4bab      	ldr	r3, [pc, #684]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004ab0:	6a1a      	ldr	r2, [r3, #32]
 8004ab2:	4baa      	ldr	r3, [pc, #680]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	621a      	str	r2, [r3, #32]
 8004aba:	e00b      	b.n	8004ad4 <HAL_RCC_OscConfig+0x398>
 8004abc:	4ba7      	ldr	r3, [pc, #668]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004abe:	6a1a      	ldr	r2, [r3, #32]
 8004ac0:	4ba6      	ldr	r3, [pc, #664]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004ac2:	2101      	movs	r1, #1
 8004ac4:	438a      	bics	r2, r1
 8004ac6:	621a      	str	r2, [r3, #32]
 8004ac8:	4ba4      	ldr	r3, [pc, #656]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004aca:	6a1a      	ldr	r2, [r3, #32]
 8004acc:	4ba3      	ldr	r3, [pc, #652]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004ace:	2104      	movs	r1, #4
 8004ad0:	438a      	bics	r2, r1
 8004ad2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d014      	beq.n	8004b06 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004adc:	f7fe fcfe 	bl	80034dc <HAL_GetTick>
 8004ae0:	0003      	movs	r3, r0
 8004ae2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ae4:	e009      	b.n	8004afa <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ae6:	f7fe fcf9 	bl	80034dc <HAL_GetTick>
 8004aea:	0002      	movs	r2, r0
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	4a9b      	ldr	r2, [pc, #620]	@ (8004d60 <HAL_RCC_OscConfig+0x624>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e12b      	b.n	8004d52 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004afa:	4b98      	ldr	r3, [pc, #608]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	2202      	movs	r2, #2
 8004b00:	4013      	ands	r3, r2
 8004b02:	d0f0      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x3aa>
 8004b04:	e013      	b.n	8004b2e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b06:	f7fe fce9 	bl	80034dc <HAL_GetTick>
 8004b0a:	0003      	movs	r3, r0
 8004b0c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b0e:	e009      	b.n	8004b24 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b10:	f7fe fce4 	bl	80034dc <HAL_GetTick>
 8004b14:	0002      	movs	r2, r0
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	4a91      	ldr	r2, [pc, #580]	@ (8004d60 <HAL_RCC_OscConfig+0x624>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d901      	bls.n	8004b24 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e116      	b.n	8004d52 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b24:	4b8d      	ldr	r3, [pc, #564]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	2202      	movs	r2, #2
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	d1f0      	bne.n	8004b10 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004b2e:	231f      	movs	r3, #31
 8004b30:	18fb      	adds	r3, r7, r3
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d105      	bne.n	8004b44 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b38:	4b88      	ldr	r3, [pc, #544]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004b3a:	69da      	ldr	r2, [r3, #28]
 8004b3c:	4b87      	ldr	r3, [pc, #540]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004b3e:	4989      	ldr	r1, [pc, #548]	@ (8004d64 <HAL_RCC_OscConfig+0x628>)
 8004b40:	400a      	ands	r2, r1
 8004b42:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2210      	movs	r2, #16
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	d063      	beq.n	8004c16 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d12a      	bne.n	8004bac <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004b56:	4b81      	ldr	r3, [pc, #516]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004b58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b5a:	4b80      	ldr	r3, [pc, #512]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004b5c:	2104      	movs	r1, #4
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004b62:	4b7e      	ldr	r3, [pc, #504]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004b64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b66:	4b7d      	ldr	r3, [pc, #500]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004b68:	2101      	movs	r1, #1
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b6e:	f7fe fcb5 	bl	80034dc <HAL_GetTick>
 8004b72:	0003      	movs	r3, r0
 8004b74:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004b76:	e008      	b.n	8004b8a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004b78:	f7fe fcb0 	bl	80034dc <HAL_GetTick>
 8004b7c:	0002      	movs	r2, r0
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e0e3      	b.n	8004d52 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004b8a:	4b74      	ldr	r3, [pc, #464]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b8e:	2202      	movs	r2, #2
 8004b90:	4013      	ands	r3, r2
 8004b92:	d0f1      	beq.n	8004b78 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004b94:	4b71      	ldr	r3, [pc, #452]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b98:	22f8      	movs	r2, #248	@ 0xf8
 8004b9a:	4393      	bics	r3, r2
 8004b9c:	0019      	movs	r1, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	00da      	lsls	r2, r3, #3
 8004ba4:	4b6d      	ldr	r3, [pc, #436]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	635a      	str	r2, [r3, #52]	@ 0x34
 8004baa:	e034      	b.n	8004c16 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	3305      	adds	r3, #5
 8004bb2:	d111      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004bb4:	4b69      	ldr	r3, [pc, #420]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004bb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bb8:	4b68      	ldr	r3, [pc, #416]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004bba:	2104      	movs	r1, #4
 8004bbc:	438a      	bics	r2, r1
 8004bbe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004bc0:	4b66      	ldr	r3, [pc, #408]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004bc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bc4:	22f8      	movs	r2, #248	@ 0xf8
 8004bc6:	4393      	bics	r3, r2
 8004bc8:	0019      	movs	r1, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	00da      	lsls	r2, r3, #3
 8004bd0:	4b62      	ldr	r3, [pc, #392]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	635a      	str	r2, [r3, #52]	@ 0x34
 8004bd6:	e01e      	b.n	8004c16 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004bd8:	4b60      	ldr	r3, [pc, #384]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004bda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bdc:	4b5f      	ldr	r3, [pc, #380]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004bde:	2104      	movs	r1, #4
 8004be0:	430a      	orrs	r2, r1
 8004be2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004be4:	4b5d      	ldr	r3, [pc, #372]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004be6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004be8:	4b5c      	ldr	r3, [pc, #368]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004bea:	2101      	movs	r1, #1
 8004bec:	438a      	bics	r2, r1
 8004bee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bf0:	f7fe fc74 	bl	80034dc <HAL_GetTick>
 8004bf4:	0003      	movs	r3, r0
 8004bf6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004bf8:	e008      	b.n	8004c0c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004bfa:	f7fe fc6f 	bl	80034dc <HAL_GetTick>
 8004bfe:	0002      	movs	r2, r0
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d901      	bls.n	8004c0c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e0a2      	b.n	8004d52 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004c0c:	4b53      	ldr	r3, [pc, #332]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004c0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c10:	2202      	movs	r2, #2
 8004c12:	4013      	ands	r3, r2
 8004c14:	d1f1      	bne.n	8004bfa <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d100      	bne.n	8004c20 <HAL_RCC_OscConfig+0x4e4>
 8004c1e:	e097      	b.n	8004d50 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c20:	4b4e      	ldr	r3, [pc, #312]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	220c      	movs	r2, #12
 8004c26:	4013      	ands	r3, r2
 8004c28:	2b08      	cmp	r3, #8
 8004c2a:	d100      	bne.n	8004c2e <HAL_RCC_OscConfig+0x4f2>
 8004c2c:	e06b      	b.n	8004d06 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d14c      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c36:	4b49      	ldr	r3, [pc, #292]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	4b48      	ldr	r3, [pc, #288]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004c3c:	494a      	ldr	r1, [pc, #296]	@ (8004d68 <HAL_RCC_OscConfig+0x62c>)
 8004c3e:	400a      	ands	r2, r1
 8004c40:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c42:	f7fe fc4b 	bl	80034dc <HAL_GetTick>
 8004c46:	0003      	movs	r3, r0
 8004c48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c4c:	f7fe fc46 	bl	80034dc <HAL_GetTick>
 8004c50:	0002      	movs	r2, r0
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e079      	b.n	8004d52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c5e:	4b3f      	ldr	r3, [pc, #252]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	2380      	movs	r3, #128	@ 0x80
 8004c64:	049b      	lsls	r3, r3, #18
 8004c66:	4013      	ands	r3, r2
 8004c68:	d1f0      	bne.n	8004c4c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c6a:	4b3c      	ldr	r3, [pc, #240]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c6e:	220f      	movs	r2, #15
 8004c70:	4393      	bics	r3, r2
 8004c72:	0019      	movs	r1, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c78:	4b38      	ldr	r3, [pc, #224]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004c7e:	4b37      	ldr	r3, [pc, #220]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	4a3a      	ldr	r2, [pc, #232]	@ (8004d6c <HAL_RCC_OscConfig+0x630>)
 8004c84:	4013      	ands	r3, r2
 8004c86:	0019      	movs	r1, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c90:	431a      	orrs	r2, r3
 8004c92:	4b32      	ldr	r3, [pc, #200]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004c94:	430a      	orrs	r2, r1
 8004c96:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c98:	4b30      	ldr	r3, [pc, #192]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	4b2f      	ldr	r3, [pc, #188]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004c9e:	2180      	movs	r1, #128	@ 0x80
 8004ca0:	0449      	lsls	r1, r1, #17
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca6:	f7fe fc19 	bl	80034dc <HAL_GetTick>
 8004caa:	0003      	movs	r3, r0
 8004cac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004cae:	e008      	b.n	8004cc2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cb0:	f7fe fc14 	bl	80034dc <HAL_GetTick>
 8004cb4:	0002      	movs	r2, r0
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e047      	b.n	8004d52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004cc2:	4b26      	ldr	r3, [pc, #152]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	2380      	movs	r3, #128	@ 0x80
 8004cc8:	049b      	lsls	r3, r3, #18
 8004cca:	4013      	ands	r3, r2
 8004ccc:	d0f0      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x574>
 8004cce:	e03f      	b.n	8004d50 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cd0:	4b22      	ldr	r3, [pc, #136]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	4b21      	ldr	r3, [pc, #132]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004cd6:	4924      	ldr	r1, [pc, #144]	@ (8004d68 <HAL_RCC_OscConfig+0x62c>)
 8004cd8:	400a      	ands	r2, r1
 8004cda:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cdc:	f7fe fbfe 	bl	80034dc <HAL_GetTick>
 8004ce0:	0003      	movs	r3, r0
 8004ce2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ce4:	e008      	b.n	8004cf8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ce6:	f7fe fbf9 	bl	80034dc <HAL_GetTick>
 8004cea:	0002      	movs	r2, r0
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d901      	bls.n	8004cf8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e02c      	b.n	8004d52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cf8:	4b18      	ldr	r3, [pc, #96]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	2380      	movs	r3, #128	@ 0x80
 8004cfe:	049b      	lsls	r3, r3, #18
 8004d00:	4013      	ands	r3, r2
 8004d02:	d1f0      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x5aa>
 8004d04:	e024      	b.n	8004d50 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d101      	bne.n	8004d12 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e01f      	b.n	8004d52 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004d12:	4b12      	ldr	r3, [pc, #72]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004d18:	4b10      	ldr	r3, [pc, #64]	@ (8004d5c <HAL_RCC_OscConfig+0x620>)
 8004d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d1c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	2380      	movs	r3, #128	@ 0x80
 8004d22:	025b      	lsls	r3, r3, #9
 8004d24:	401a      	ands	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d10e      	bne.n	8004d4c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	220f      	movs	r2, #15
 8004d32:	401a      	ands	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d107      	bne.n	8004d4c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	23f0      	movs	r3, #240	@ 0xf0
 8004d40:	039b      	lsls	r3, r3, #14
 8004d42:	401a      	ands	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d001      	beq.n	8004d50 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e000      	b.n	8004d52 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	0018      	movs	r0, r3
 8004d54:	46bd      	mov	sp, r7
 8004d56:	b008      	add	sp, #32
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	46c0      	nop			@ (mov r8, r8)
 8004d5c:	40021000 	.word	0x40021000
 8004d60:	00001388 	.word	0x00001388
 8004d64:	efffffff 	.word	0xefffffff
 8004d68:	feffffff 	.word	0xfeffffff
 8004d6c:	ffc2ffff 	.word	0xffc2ffff

08004d70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e0b3      	b.n	8004eec <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d84:	4b5b      	ldr	r3, [pc, #364]	@ (8004ef4 <HAL_RCC_ClockConfig+0x184>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	683a      	ldr	r2, [r7, #0]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d911      	bls.n	8004db6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d92:	4b58      	ldr	r3, [pc, #352]	@ (8004ef4 <HAL_RCC_ClockConfig+0x184>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2201      	movs	r2, #1
 8004d98:	4393      	bics	r3, r2
 8004d9a:	0019      	movs	r1, r3
 8004d9c:	4b55      	ldr	r3, [pc, #340]	@ (8004ef4 <HAL_RCC_ClockConfig+0x184>)
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	430a      	orrs	r2, r1
 8004da2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004da4:	4b53      	ldr	r3, [pc, #332]	@ (8004ef4 <HAL_RCC_ClockConfig+0x184>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2201      	movs	r2, #1
 8004daa:	4013      	ands	r3, r2
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d001      	beq.n	8004db6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e09a      	b.n	8004eec <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2202      	movs	r2, #2
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	d015      	beq.n	8004dec <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2204      	movs	r2, #4
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	d006      	beq.n	8004dd8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004dca:	4b4b      	ldr	r3, [pc, #300]	@ (8004ef8 <HAL_RCC_ClockConfig+0x188>)
 8004dcc:	685a      	ldr	r2, [r3, #4]
 8004dce:	4b4a      	ldr	r3, [pc, #296]	@ (8004ef8 <HAL_RCC_ClockConfig+0x188>)
 8004dd0:	21e0      	movs	r1, #224	@ 0xe0
 8004dd2:	00c9      	lsls	r1, r1, #3
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dd8:	4b47      	ldr	r3, [pc, #284]	@ (8004ef8 <HAL_RCC_ClockConfig+0x188>)
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	22f0      	movs	r2, #240	@ 0xf0
 8004dde:	4393      	bics	r3, r2
 8004de0:	0019      	movs	r1, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	689a      	ldr	r2, [r3, #8]
 8004de6:	4b44      	ldr	r3, [pc, #272]	@ (8004ef8 <HAL_RCC_ClockConfig+0x188>)
 8004de8:	430a      	orrs	r2, r1
 8004dea:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2201      	movs	r2, #1
 8004df2:	4013      	ands	r3, r2
 8004df4:	d040      	beq.n	8004e78 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d107      	bne.n	8004e0e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dfe:	4b3e      	ldr	r3, [pc, #248]	@ (8004ef8 <HAL_RCC_ClockConfig+0x188>)
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	2380      	movs	r3, #128	@ 0x80
 8004e04:	029b      	lsls	r3, r3, #10
 8004e06:	4013      	ands	r3, r2
 8004e08:	d114      	bne.n	8004e34 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e06e      	b.n	8004eec <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d107      	bne.n	8004e26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e16:	4b38      	ldr	r3, [pc, #224]	@ (8004ef8 <HAL_RCC_ClockConfig+0x188>)
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	2380      	movs	r3, #128	@ 0x80
 8004e1c:	049b      	lsls	r3, r3, #18
 8004e1e:	4013      	ands	r3, r2
 8004e20:	d108      	bne.n	8004e34 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e062      	b.n	8004eec <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e26:	4b34      	ldr	r3, [pc, #208]	@ (8004ef8 <HAL_RCC_ClockConfig+0x188>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	d101      	bne.n	8004e34 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e05b      	b.n	8004eec <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e34:	4b30      	ldr	r3, [pc, #192]	@ (8004ef8 <HAL_RCC_ClockConfig+0x188>)
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	2203      	movs	r2, #3
 8004e3a:	4393      	bics	r3, r2
 8004e3c:	0019      	movs	r1, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	4b2d      	ldr	r3, [pc, #180]	@ (8004ef8 <HAL_RCC_ClockConfig+0x188>)
 8004e44:	430a      	orrs	r2, r1
 8004e46:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e48:	f7fe fb48 	bl	80034dc <HAL_GetTick>
 8004e4c:	0003      	movs	r3, r0
 8004e4e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e50:	e009      	b.n	8004e66 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e52:	f7fe fb43 	bl	80034dc <HAL_GetTick>
 8004e56:	0002      	movs	r2, r0
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	4a27      	ldr	r2, [pc, #156]	@ (8004efc <HAL_RCC_ClockConfig+0x18c>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e042      	b.n	8004eec <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e66:	4b24      	ldr	r3, [pc, #144]	@ (8004ef8 <HAL_RCC_ClockConfig+0x188>)
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	220c      	movs	r2, #12
 8004e6c:	401a      	ands	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d1ec      	bne.n	8004e52 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e78:	4b1e      	ldr	r3, [pc, #120]	@ (8004ef4 <HAL_RCC_ClockConfig+0x184>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	4013      	ands	r3, r2
 8004e80:	683a      	ldr	r2, [r7, #0]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d211      	bcs.n	8004eaa <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e86:	4b1b      	ldr	r3, [pc, #108]	@ (8004ef4 <HAL_RCC_ClockConfig+0x184>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	4393      	bics	r3, r2
 8004e8e:	0019      	movs	r1, r3
 8004e90:	4b18      	ldr	r3, [pc, #96]	@ (8004ef4 <HAL_RCC_ClockConfig+0x184>)
 8004e92:	683a      	ldr	r2, [r7, #0]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e98:	4b16      	ldr	r3, [pc, #88]	@ (8004ef4 <HAL_RCC_ClockConfig+0x184>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d001      	beq.n	8004eaa <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e020      	b.n	8004eec <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2204      	movs	r2, #4
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	d009      	beq.n	8004ec8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004eb4:	4b10      	ldr	r3, [pc, #64]	@ (8004ef8 <HAL_RCC_ClockConfig+0x188>)
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	4a11      	ldr	r2, [pc, #68]	@ (8004f00 <HAL_RCC_ClockConfig+0x190>)
 8004eba:	4013      	ands	r3, r2
 8004ebc:	0019      	movs	r1, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68da      	ldr	r2, [r3, #12]
 8004ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ef8 <HAL_RCC_ClockConfig+0x188>)
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004ec8:	f000 f820 	bl	8004f0c <HAL_RCC_GetSysClockFreq>
 8004ecc:	0001      	movs	r1, r0
 8004ece:	4b0a      	ldr	r3, [pc, #40]	@ (8004ef8 <HAL_RCC_ClockConfig+0x188>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	091b      	lsrs	r3, r3, #4
 8004ed4:	220f      	movs	r2, #15
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	4a0a      	ldr	r2, [pc, #40]	@ (8004f04 <HAL_RCC_ClockConfig+0x194>)
 8004eda:	5cd3      	ldrb	r3, [r2, r3]
 8004edc:	000a      	movs	r2, r1
 8004ede:	40da      	lsrs	r2, r3
 8004ee0:	4b09      	ldr	r3, [pc, #36]	@ (8004f08 <HAL_RCC_ClockConfig+0x198>)
 8004ee2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004ee4:	2000      	movs	r0, #0
 8004ee6:	f7fe fab3 	bl	8003450 <HAL_InitTick>
  
  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	0018      	movs	r0, r3
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	b004      	add	sp, #16
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	40022000 	.word	0x40022000
 8004ef8:	40021000 	.word	0x40021000
 8004efc:	00001388 	.word	0x00001388
 8004f00:	fffff8ff 	.word	0xfffff8ff
 8004f04:	08009274 	.word	0x08009274
 8004f08:	20000108 	.word	0x20000108

08004f0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f12:	2300      	movs	r3, #0
 8004f14:	60fb      	str	r3, [r7, #12]
 8004f16:	2300      	movs	r3, #0
 8004f18:	60bb      	str	r3, [r7, #8]
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	617b      	str	r3, [r7, #20]
 8004f1e:	2300      	movs	r3, #0
 8004f20:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004f22:	2300      	movs	r3, #0
 8004f24:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004f26:	4b20      	ldr	r3, [pc, #128]	@ (8004fa8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	220c      	movs	r2, #12
 8004f30:	4013      	ands	r3, r2
 8004f32:	2b04      	cmp	r3, #4
 8004f34:	d002      	beq.n	8004f3c <HAL_RCC_GetSysClockFreq+0x30>
 8004f36:	2b08      	cmp	r3, #8
 8004f38:	d003      	beq.n	8004f42 <HAL_RCC_GetSysClockFreq+0x36>
 8004f3a:	e02c      	b.n	8004f96 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f3c:	4b1b      	ldr	r3, [pc, #108]	@ (8004fac <HAL_RCC_GetSysClockFreq+0xa0>)
 8004f3e:	613b      	str	r3, [r7, #16]
      break;
 8004f40:	e02c      	b.n	8004f9c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	0c9b      	lsrs	r3, r3, #18
 8004f46:	220f      	movs	r2, #15
 8004f48:	4013      	ands	r3, r2
 8004f4a:	4a19      	ldr	r2, [pc, #100]	@ (8004fb0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004f4c:	5cd3      	ldrb	r3, [r2, r3]
 8004f4e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004f50:	4b15      	ldr	r3, [pc, #84]	@ (8004fa8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f54:	220f      	movs	r2, #15
 8004f56:	4013      	ands	r3, r2
 8004f58:	4a16      	ldr	r2, [pc, #88]	@ (8004fb4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004f5a:	5cd3      	ldrb	r3, [r2, r3]
 8004f5c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	2380      	movs	r3, #128	@ 0x80
 8004f62:	025b      	lsls	r3, r3, #9
 8004f64:	4013      	ands	r3, r2
 8004f66:	d009      	beq.n	8004f7c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004f68:	68b9      	ldr	r1, [r7, #8]
 8004f6a:	4810      	ldr	r0, [pc, #64]	@ (8004fac <HAL_RCC_GetSysClockFreq+0xa0>)
 8004f6c:	f7fb f8e8 	bl	8000140 <__udivsi3>
 8004f70:	0003      	movs	r3, r0
 8004f72:	001a      	movs	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4353      	muls	r3, r2
 8004f78:	617b      	str	r3, [r7, #20]
 8004f7a:	e009      	b.n	8004f90 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004f7c:	6879      	ldr	r1, [r7, #4]
 8004f7e:	000a      	movs	r2, r1
 8004f80:	0152      	lsls	r2, r2, #5
 8004f82:	1a52      	subs	r2, r2, r1
 8004f84:	0193      	lsls	r3, r2, #6
 8004f86:	1a9b      	subs	r3, r3, r2
 8004f88:	00db      	lsls	r3, r3, #3
 8004f8a:	185b      	adds	r3, r3, r1
 8004f8c:	021b      	lsls	r3, r3, #8
 8004f8e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	613b      	str	r3, [r7, #16]
      break;
 8004f94:	e002      	b.n	8004f9c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004f96:	4b05      	ldr	r3, [pc, #20]	@ (8004fac <HAL_RCC_GetSysClockFreq+0xa0>)
 8004f98:	613b      	str	r3, [r7, #16]
      break;
 8004f9a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004f9c:	693b      	ldr	r3, [r7, #16]
}
 8004f9e:	0018      	movs	r0, r3
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	b006      	add	sp, #24
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	46c0      	nop			@ (mov r8, r8)
 8004fa8:	40021000 	.word	0x40021000
 8004fac:	007a1200 	.word	0x007a1200
 8004fb0:	0800928c 	.word	0x0800928c
 8004fb4:	0800929c 	.word	0x0800929c

08004fb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fbc:	4b02      	ldr	r3, [pc, #8]	@ (8004fc8 <HAL_RCC_GetHCLKFreq+0x10>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
}
 8004fc0:	0018      	movs	r0, r3
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	46c0      	nop			@ (mov r8, r8)
 8004fc8:	20000108 	.word	0x20000108

08004fcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004fd0:	f7ff fff2 	bl	8004fb8 <HAL_RCC_GetHCLKFreq>
 8004fd4:	0001      	movs	r1, r0
 8004fd6:	4b06      	ldr	r3, [pc, #24]	@ (8004ff0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	0a1b      	lsrs	r3, r3, #8
 8004fdc:	2207      	movs	r2, #7
 8004fde:	4013      	ands	r3, r2
 8004fe0:	4a04      	ldr	r2, [pc, #16]	@ (8004ff4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004fe2:	5cd3      	ldrb	r3, [r2, r3]
 8004fe4:	40d9      	lsrs	r1, r3
 8004fe6:	000b      	movs	r3, r1
}    
 8004fe8:	0018      	movs	r0, r3
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	46c0      	nop			@ (mov r8, r8)
 8004ff0:	40021000 	.word	0x40021000
 8004ff4:	08009284 	.word	0x08009284

08004ff8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005000:	2300      	movs	r3, #0
 8005002:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005004:	2300      	movs	r3, #0
 8005006:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	2380      	movs	r3, #128	@ 0x80
 800500e:	025b      	lsls	r3, r3, #9
 8005010:	4013      	ands	r3, r2
 8005012:	d100      	bne.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005014:	e08e      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8005016:	2017      	movs	r0, #23
 8005018:	183b      	adds	r3, r7, r0
 800501a:	2200      	movs	r2, #0
 800501c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800501e:	4b57      	ldr	r3, [pc, #348]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005020:	69da      	ldr	r2, [r3, #28]
 8005022:	2380      	movs	r3, #128	@ 0x80
 8005024:	055b      	lsls	r3, r3, #21
 8005026:	4013      	ands	r3, r2
 8005028:	d110      	bne.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800502a:	4b54      	ldr	r3, [pc, #336]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800502c:	69da      	ldr	r2, [r3, #28]
 800502e:	4b53      	ldr	r3, [pc, #332]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005030:	2180      	movs	r1, #128	@ 0x80
 8005032:	0549      	lsls	r1, r1, #21
 8005034:	430a      	orrs	r2, r1
 8005036:	61da      	str	r2, [r3, #28]
 8005038:	4b50      	ldr	r3, [pc, #320]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800503a:	69da      	ldr	r2, [r3, #28]
 800503c:	2380      	movs	r3, #128	@ 0x80
 800503e:	055b      	lsls	r3, r3, #21
 8005040:	4013      	ands	r3, r2
 8005042:	60bb      	str	r3, [r7, #8]
 8005044:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005046:	183b      	adds	r3, r7, r0
 8005048:	2201      	movs	r2, #1
 800504a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800504c:	4b4c      	ldr	r3, [pc, #304]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	2380      	movs	r3, #128	@ 0x80
 8005052:	005b      	lsls	r3, r3, #1
 8005054:	4013      	ands	r3, r2
 8005056:	d11a      	bne.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005058:	4b49      	ldr	r3, [pc, #292]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	4b48      	ldr	r3, [pc, #288]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800505e:	2180      	movs	r1, #128	@ 0x80
 8005060:	0049      	lsls	r1, r1, #1
 8005062:	430a      	orrs	r2, r1
 8005064:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005066:	f7fe fa39 	bl	80034dc <HAL_GetTick>
 800506a:	0003      	movs	r3, r0
 800506c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800506e:	e008      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005070:	f7fe fa34 	bl	80034dc <HAL_GetTick>
 8005074:	0002      	movs	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b64      	cmp	r3, #100	@ 0x64
 800507c:	d901      	bls.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e077      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005082:	4b3f      	ldr	r3, [pc, #252]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	2380      	movs	r3, #128	@ 0x80
 8005088:	005b      	lsls	r3, r3, #1
 800508a:	4013      	ands	r3, r2
 800508c:	d0f0      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800508e:	4b3b      	ldr	r3, [pc, #236]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005090:	6a1a      	ldr	r2, [r3, #32]
 8005092:	23c0      	movs	r3, #192	@ 0xc0
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4013      	ands	r3, r2
 8005098:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d034      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	23c0      	movs	r3, #192	@ 0xc0
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	4013      	ands	r3, r2
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d02c      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050b0:	4b32      	ldr	r3, [pc, #200]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80050b2:	6a1b      	ldr	r3, [r3, #32]
 80050b4:	4a33      	ldr	r2, [pc, #204]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80050b6:	4013      	ands	r3, r2
 80050b8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050ba:	4b30      	ldr	r3, [pc, #192]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80050bc:	6a1a      	ldr	r2, [r3, #32]
 80050be:	4b2f      	ldr	r3, [pc, #188]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80050c0:	2180      	movs	r1, #128	@ 0x80
 80050c2:	0249      	lsls	r1, r1, #9
 80050c4:	430a      	orrs	r2, r1
 80050c6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050c8:	4b2c      	ldr	r3, [pc, #176]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80050ca:	6a1a      	ldr	r2, [r3, #32]
 80050cc:	4b2b      	ldr	r3, [pc, #172]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80050ce:	492e      	ldr	r1, [pc, #184]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80050d0:	400a      	ands	r2, r1
 80050d2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80050d4:	4b29      	ldr	r3, [pc, #164]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2201      	movs	r2, #1
 80050de:	4013      	ands	r3, r2
 80050e0:	d013      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e2:	f7fe f9fb 	bl	80034dc <HAL_GetTick>
 80050e6:	0003      	movs	r3, r0
 80050e8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ea:	e009      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ec:	f7fe f9f6 	bl	80034dc <HAL_GetTick>
 80050f0:	0002      	movs	r2, r0
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	4a25      	ldr	r2, [pc, #148]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d901      	bls.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e038      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005100:	4b1e      	ldr	r3, [pc, #120]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005102:	6a1b      	ldr	r3, [r3, #32]
 8005104:	2202      	movs	r2, #2
 8005106:	4013      	ands	r3, r2
 8005108:	d0f0      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800510a:	4b1c      	ldr	r3, [pc, #112]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800510c:	6a1b      	ldr	r3, [r3, #32]
 800510e:	4a1d      	ldr	r2, [pc, #116]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005110:	4013      	ands	r3, r2
 8005112:	0019      	movs	r1, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	4b18      	ldr	r3, [pc, #96]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800511a:	430a      	orrs	r2, r1
 800511c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800511e:	2317      	movs	r3, #23
 8005120:	18fb      	adds	r3, r7, r3
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d105      	bne.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005128:	4b14      	ldr	r3, [pc, #80]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800512a:	69da      	ldr	r2, [r3, #28]
 800512c:	4b13      	ldr	r3, [pc, #76]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800512e:	4918      	ldr	r1, [pc, #96]	@ (8005190 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8005130:	400a      	ands	r2, r1
 8005132:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2201      	movs	r2, #1
 800513a:	4013      	ands	r3, r2
 800513c:	d009      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800513e:	4b0f      	ldr	r3, [pc, #60]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005142:	2203      	movs	r2, #3
 8005144:	4393      	bics	r3, r2
 8005146:	0019      	movs	r1, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	689a      	ldr	r2, [r3, #8]
 800514c:	4b0b      	ldr	r3, [pc, #44]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800514e:	430a      	orrs	r2, r1
 8005150:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2220      	movs	r2, #32
 8005158:	4013      	ands	r3, r2
 800515a:	d009      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800515c:	4b07      	ldr	r3, [pc, #28]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800515e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005160:	2210      	movs	r2, #16
 8005162:	4393      	bics	r3, r2
 8005164:	0019      	movs	r1, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68da      	ldr	r2, [r3, #12]
 800516a:	4b04      	ldr	r3, [pc, #16]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800516c:	430a      	orrs	r2, r1
 800516e:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	0018      	movs	r0, r3
 8005174:	46bd      	mov	sp, r7
 8005176:	b006      	add	sp, #24
 8005178:	bd80      	pop	{r7, pc}
 800517a:	46c0      	nop			@ (mov r8, r8)
 800517c:	40021000 	.word	0x40021000
 8005180:	40007000 	.word	0x40007000
 8005184:	fffffcff 	.word	0xfffffcff
 8005188:	fffeffff 	.word	0xfffeffff
 800518c:	00001388 	.word	0x00001388
 8005190:	efffffff 	.word	0xefffffff

08005194 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e044      	b.n	8005230 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d107      	bne.n	80051be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2278      	movs	r2, #120	@ 0x78
 80051b2:	2100      	movs	r1, #0
 80051b4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	0018      	movs	r0, r3
 80051ba:	f7fe f883 	bl	80032c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2224      	movs	r2, #36	@ 0x24
 80051c2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2101      	movs	r1, #1
 80051d0:	438a      	bics	r2, r1
 80051d2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d003      	beq.n	80051e4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	0018      	movs	r0, r3
 80051e0:	f000 fa0c 	bl	80055fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	0018      	movs	r0, r3
 80051e8:	f000 f8c8 	bl	800537c <UART_SetConfig>
 80051ec:	0003      	movs	r3, r0
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d101      	bne.n	80051f6 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e01c      	b.n	8005230 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	490d      	ldr	r1, [pc, #52]	@ (8005238 <HAL_UART_Init+0xa4>)
 8005202:	400a      	ands	r2, r1
 8005204:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	689a      	ldr	r2, [r3, #8]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2108      	movs	r1, #8
 8005212:	438a      	bics	r2, r1
 8005214:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2101      	movs	r1, #1
 8005222:	430a      	orrs	r2, r1
 8005224:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	0018      	movs	r0, r3
 800522a:	f000 fa9b 	bl	8005764 <UART_CheckIdleState>
 800522e:	0003      	movs	r3, r0
}
 8005230:	0018      	movs	r0, r3
 8005232:	46bd      	mov	sp, r7
 8005234:	b002      	add	sp, #8
 8005236:	bd80      	pop	{r7, pc}
 8005238:	fffff7ff 	.word	0xfffff7ff

0800523c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b08a      	sub	sp, #40	@ 0x28
 8005240:	af02      	add	r7, sp, #8
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	603b      	str	r3, [r7, #0]
 8005248:	1dbb      	adds	r3, r7, #6
 800524a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005250:	2b20      	cmp	r3, #32
 8005252:	d000      	beq.n	8005256 <HAL_UART_Transmit+0x1a>
 8005254:	e08c      	b.n	8005370 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d003      	beq.n	8005264 <HAL_UART_Transmit+0x28>
 800525c:	1dbb      	adds	r3, r7, #6
 800525e:	881b      	ldrh	r3, [r3, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e084      	b.n	8005372 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	2380      	movs	r3, #128	@ 0x80
 800526e:	015b      	lsls	r3, r3, #5
 8005270:	429a      	cmp	r2, r3
 8005272:	d109      	bne.n	8005288 <HAL_UART_Transmit+0x4c>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d105      	bne.n	8005288 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	2201      	movs	r2, #1
 8005280:	4013      	ands	r3, r2
 8005282:	d001      	beq.n	8005288 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e074      	b.n	8005372 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2284      	movs	r2, #132	@ 0x84
 800528c:	2100      	movs	r1, #0
 800528e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2221      	movs	r2, #33	@ 0x21
 8005294:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005296:	f7fe f921 	bl	80034dc <HAL_GetTick>
 800529a:	0003      	movs	r3, r0
 800529c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	1dba      	adds	r2, r7, #6
 80052a2:	2150      	movs	r1, #80	@ 0x50
 80052a4:	8812      	ldrh	r2, [r2, #0]
 80052a6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	1dba      	adds	r2, r7, #6
 80052ac:	2152      	movs	r1, #82	@ 0x52
 80052ae:	8812      	ldrh	r2, [r2, #0]
 80052b0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	689a      	ldr	r2, [r3, #8]
 80052b6:	2380      	movs	r3, #128	@ 0x80
 80052b8:	015b      	lsls	r3, r3, #5
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d108      	bne.n	80052d0 <HAL_UART_Transmit+0x94>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d104      	bne.n	80052d0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80052c6:	2300      	movs	r3, #0
 80052c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	61bb      	str	r3, [r7, #24]
 80052ce:	e003      	b.n	80052d8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052d4:	2300      	movs	r3, #0
 80052d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052d8:	e02f      	b.n	800533a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	9300      	str	r3, [sp, #0]
 80052e2:	0013      	movs	r3, r2
 80052e4:	2200      	movs	r2, #0
 80052e6:	2180      	movs	r1, #128	@ 0x80
 80052e8:	f000 fae4 	bl	80058b4 <UART_WaitOnFlagUntilTimeout>
 80052ec:	1e03      	subs	r3, r0, #0
 80052ee:	d004      	beq.n	80052fa <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2220      	movs	r2, #32
 80052f4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e03b      	b.n	8005372 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d10b      	bne.n	8005318 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	881a      	ldrh	r2, [r3, #0]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	05d2      	lsls	r2, r2, #23
 800530a:	0dd2      	lsrs	r2, r2, #23
 800530c:	b292      	uxth	r2, r2
 800530e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	3302      	adds	r3, #2
 8005314:	61bb      	str	r3, [r7, #24]
 8005316:	e007      	b.n	8005328 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	781a      	ldrb	r2, [r3, #0]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	3301      	adds	r3, #1
 8005326:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2252      	movs	r2, #82	@ 0x52
 800532c:	5a9b      	ldrh	r3, [r3, r2]
 800532e:	b29b      	uxth	r3, r3
 8005330:	3b01      	subs	r3, #1
 8005332:	b299      	uxth	r1, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2252      	movs	r2, #82	@ 0x52
 8005338:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2252      	movs	r2, #82	@ 0x52
 800533e:	5a9b      	ldrh	r3, [r3, r2]
 8005340:	b29b      	uxth	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1c9      	bne.n	80052da <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	9300      	str	r3, [sp, #0]
 800534e:	0013      	movs	r3, r2
 8005350:	2200      	movs	r2, #0
 8005352:	2140      	movs	r1, #64	@ 0x40
 8005354:	f000 faae 	bl	80058b4 <UART_WaitOnFlagUntilTimeout>
 8005358:	1e03      	subs	r3, r0, #0
 800535a:	d004      	beq.n	8005366 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2220      	movs	r2, #32
 8005360:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e005      	b.n	8005372 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2220      	movs	r2, #32
 800536a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800536c:	2300      	movs	r3, #0
 800536e:	e000      	b.n	8005372 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8005370:	2302      	movs	r3, #2
  }
}
 8005372:	0018      	movs	r0, r3
 8005374:	46bd      	mov	sp, r7
 8005376:	b008      	add	sp, #32
 8005378:	bd80      	pop	{r7, pc}
	...

0800537c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b088      	sub	sp, #32
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005384:	231e      	movs	r3, #30
 8005386:	18fb      	adds	r3, r7, r3
 8005388:	2200      	movs	r2, #0
 800538a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689a      	ldr	r2, [r3, #8]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	431a      	orrs	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	431a      	orrs	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	69db      	ldr	r3, [r3, #28]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a8d      	ldr	r2, [pc, #564]	@ (80055e0 <UART_SetConfig+0x264>)
 80053ac:	4013      	ands	r3, r2
 80053ae:	0019      	movs	r1, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	430a      	orrs	r2, r1
 80053b8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	4a88      	ldr	r2, [pc, #544]	@ (80055e4 <UART_SetConfig+0x268>)
 80053c2:	4013      	ands	r3, r2
 80053c4:	0019      	movs	r1, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68da      	ldr	r2, [r3, #12]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a1b      	ldr	r3, [r3, #32]
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	4313      	orrs	r3, r2
 80053e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	4a7f      	ldr	r2, [pc, #508]	@ (80055e8 <UART_SetConfig+0x26c>)
 80053ea:	4013      	ands	r3, r2
 80053ec:	0019      	movs	r1, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	430a      	orrs	r2, r1
 80053f6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a7b      	ldr	r2, [pc, #492]	@ (80055ec <UART_SetConfig+0x270>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d127      	bne.n	8005452 <UART_SetConfig+0xd6>
 8005402:	4b7b      	ldr	r3, [pc, #492]	@ (80055f0 <UART_SetConfig+0x274>)
 8005404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005406:	2203      	movs	r2, #3
 8005408:	4013      	ands	r3, r2
 800540a:	2b03      	cmp	r3, #3
 800540c:	d00d      	beq.n	800542a <UART_SetConfig+0xae>
 800540e:	d81b      	bhi.n	8005448 <UART_SetConfig+0xcc>
 8005410:	2b02      	cmp	r3, #2
 8005412:	d014      	beq.n	800543e <UART_SetConfig+0xc2>
 8005414:	d818      	bhi.n	8005448 <UART_SetConfig+0xcc>
 8005416:	2b00      	cmp	r3, #0
 8005418:	d002      	beq.n	8005420 <UART_SetConfig+0xa4>
 800541a:	2b01      	cmp	r3, #1
 800541c:	d00a      	beq.n	8005434 <UART_SetConfig+0xb8>
 800541e:	e013      	b.n	8005448 <UART_SetConfig+0xcc>
 8005420:	231f      	movs	r3, #31
 8005422:	18fb      	adds	r3, r7, r3
 8005424:	2200      	movs	r2, #0
 8005426:	701a      	strb	r2, [r3, #0]
 8005428:	e021      	b.n	800546e <UART_SetConfig+0xf2>
 800542a:	231f      	movs	r3, #31
 800542c:	18fb      	adds	r3, r7, r3
 800542e:	2202      	movs	r2, #2
 8005430:	701a      	strb	r2, [r3, #0]
 8005432:	e01c      	b.n	800546e <UART_SetConfig+0xf2>
 8005434:	231f      	movs	r3, #31
 8005436:	18fb      	adds	r3, r7, r3
 8005438:	2204      	movs	r2, #4
 800543a:	701a      	strb	r2, [r3, #0]
 800543c:	e017      	b.n	800546e <UART_SetConfig+0xf2>
 800543e:	231f      	movs	r3, #31
 8005440:	18fb      	adds	r3, r7, r3
 8005442:	2208      	movs	r2, #8
 8005444:	701a      	strb	r2, [r3, #0]
 8005446:	e012      	b.n	800546e <UART_SetConfig+0xf2>
 8005448:	231f      	movs	r3, #31
 800544a:	18fb      	adds	r3, r7, r3
 800544c:	2210      	movs	r2, #16
 800544e:	701a      	strb	r2, [r3, #0]
 8005450:	e00d      	b.n	800546e <UART_SetConfig+0xf2>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a67      	ldr	r2, [pc, #412]	@ (80055f4 <UART_SetConfig+0x278>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d104      	bne.n	8005466 <UART_SetConfig+0xea>
 800545c:	231f      	movs	r3, #31
 800545e:	18fb      	adds	r3, r7, r3
 8005460:	2200      	movs	r2, #0
 8005462:	701a      	strb	r2, [r3, #0]
 8005464:	e003      	b.n	800546e <UART_SetConfig+0xf2>
 8005466:	231f      	movs	r3, #31
 8005468:	18fb      	adds	r3, r7, r3
 800546a:	2210      	movs	r2, #16
 800546c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	69da      	ldr	r2, [r3, #28]
 8005472:	2380      	movs	r3, #128	@ 0x80
 8005474:	021b      	lsls	r3, r3, #8
 8005476:	429a      	cmp	r2, r3
 8005478:	d15c      	bne.n	8005534 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800547a:	231f      	movs	r3, #31
 800547c:	18fb      	adds	r3, r7, r3
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	2b08      	cmp	r3, #8
 8005482:	d015      	beq.n	80054b0 <UART_SetConfig+0x134>
 8005484:	dc18      	bgt.n	80054b8 <UART_SetConfig+0x13c>
 8005486:	2b04      	cmp	r3, #4
 8005488:	d00d      	beq.n	80054a6 <UART_SetConfig+0x12a>
 800548a:	dc15      	bgt.n	80054b8 <UART_SetConfig+0x13c>
 800548c:	2b00      	cmp	r3, #0
 800548e:	d002      	beq.n	8005496 <UART_SetConfig+0x11a>
 8005490:	2b02      	cmp	r3, #2
 8005492:	d005      	beq.n	80054a0 <UART_SetConfig+0x124>
 8005494:	e010      	b.n	80054b8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005496:	f7ff fd99 	bl	8004fcc <HAL_RCC_GetPCLK1Freq>
 800549a:	0003      	movs	r3, r0
 800549c:	61bb      	str	r3, [r7, #24]
        break;
 800549e:	e012      	b.n	80054c6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054a0:	4b55      	ldr	r3, [pc, #340]	@ (80055f8 <UART_SetConfig+0x27c>)
 80054a2:	61bb      	str	r3, [r7, #24]
        break;
 80054a4:	e00f      	b.n	80054c6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054a6:	f7ff fd31 	bl	8004f0c <HAL_RCC_GetSysClockFreq>
 80054aa:	0003      	movs	r3, r0
 80054ac:	61bb      	str	r3, [r7, #24]
        break;
 80054ae:	e00a      	b.n	80054c6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054b0:	2380      	movs	r3, #128	@ 0x80
 80054b2:	021b      	lsls	r3, r3, #8
 80054b4:	61bb      	str	r3, [r7, #24]
        break;
 80054b6:	e006      	b.n	80054c6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80054b8:	2300      	movs	r3, #0
 80054ba:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80054bc:	231e      	movs	r3, #30
 80054be:	18fb      	adds	r3, r7, r3
 80054c0:	2201      	movs	r2, #1
 80054c2:	701a      	strb	r2, [r3, #0]
        break;
 80054c4:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d100      	bne.n	80054ce <UART_SetConfig+0x152>
 80054cc:	e07a      	b.n	80055c4 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	005a      	lsls	r2, r3, #1
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	085b      	lsrs	r3, r3, #1
 80054d8:	18d2      	adds	r2, r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	0019      	movs	r1, r3
 80054e0:	0010      	movs	r0, r2
 80054e2:	f7fa fe2d 	bl	8000140 <__udivsi3>
 80054e6:	0003      	movs	r3, r0
 80054e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	2b0f      	cmp	r3, #15
 80054ee:	d91c      	bls.n	800552a <UART_SetConfig+0x1ae>
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	2380      	movs	r3, #128	@ 0x80
 80054f4:	025b      	lsls	r3, r3, #9
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d217      	bcs.n	800552a <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	200e      	movs	r0, #14
 8005500:	183b      	adds	r3, r7, r0
 8005502:	210f      	movs	r1, #15
 8005504:	438a      	bics	r2, r1
 8005506:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	085b      	lsrs	r3, r3, #1
 800550c:	b29b      	uxth	r3, r3
 800550e:	2207      	movs	r2, #7
 8005510:	4013      	ands	r3, r2
 8005512:	b299      	uxth	r1, r3
 8005514:	183b      	adds	r3, r7, r0
 8005516:	183a      	adds	r2, r7, r0
 8005518:	8812      	ldrh	r2, [r2, #0]
 800551a:	430a      	orrs	r2, r1
 800551c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	183a      	adds	r2, r7, r0
 8005524:	8812      	ldrh	r2, [r2, #0]
 8005526:	60da      	str	r2, [r3, #12]
 8005528:	e04c      	b.n	80055c4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800552a:	231e      	movs	r3, #30
 800552c:	18fb      	adds	r3, r7, r3
 800552e:	2201      	movs	r2, #1
 8005530:	701a      	strb	r2, [r3, #0]
 8005532:	e047      	b.n	80055c4 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005534:	231f      	movs	r3, #31
 8005536:	18fb      	adds	r3, r7, r3
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	2b08      	cmp	r3, #8
 800553c:	d015      	beq.n	800556a <UART_SetConfig+0x1ee>
 800553e:	dc18      	bgt.n	8005572 <UART_SetConfig+0x1f6>
 8005540:	2b04      	cmp	r3, #4
 8005542:	d00d      	beq.n	8005560 <UART_SetConfig+0x1e4>
 8005544:	dc15      	bgt.n	8005572 <UART_SetConfig+0x1f6>
 8005546:	2b00      	cmp	r3, #0
 8005548:	d002      	beq.n	8005550 <UART_SetConfig+0x1d4>
 800554a:	2b02      	cmp	r3, #2
 800554c:	d005      	beq.n	800555a <UART_SetConfig+0x1de>
 800554e:	e010      	b.n	8005572 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005550:	f7ff fd3c 	bl	8004fcc <HAL_RCC_GetPCLK1Freq>
 8005554:	0003      	movs	r3, r0
 8005556:	61bb      	str	r3, [r7, #24]
        break;
 8005558:	e012      	b.n	8005580 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800555a:	4b27      	ldr	r3, [pc, #156]	@ (80055f8 <UART_SetConfig+0x27c>)
 800555c:	61bb      	str	r3, [r7, #24]
        break;
 800555e:	e00f      	b.n	8005580 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005560:	f7ff fcd4 	bl	8004f0c <HAL_RCC_GetSysClockFreq>
 8005564:	0003      	movs	r3, r0
 8005566:	61bb      	str	r3, [r7, #24]
        break;
 8005568:	e00a      	b.n	8005580 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800556a:	2380      	movs	r3, #128	@ 0x80
 800556c:	021b      	lsls	r3, r3, #8
 800556e:	61bb      	str	r3, [r7, #24]
        break;
 8005570:	e006      	b.n	8005580 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005572:	2300      	movs	r3, #0
 8005574:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005576:	231e      	movs	r3, #30
 8005578:	18fb      	adds	r3, r7, r3
 800557a:	2201      	movs	r2, #1
 800557c:	701a      	strb	r2, [r3, #0]
        break;
 800557e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d01e      	beq.n	80055c4 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	085a      	lsrs	r2, r3, #1
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	18d2      	adds	r2, r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	0019      	movs	r1, r3
 8005596:	0010      	movs	r0, r2
 8005598:	f7fa fdd2 	bl	8000140 <__udivsi3>
 800559c:	0003      	movs	r3, r0
 800559e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	2b0f      	cmp	r3, #15
 80055a4:	d90a      	bls.n	80055bc <UART_SetConfig+0x240>
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	2380      	movs	r3, #128	@ 0x80
 80055aa:	025b      	lsls	r3, r3, #9
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d205      	bcs.n	80055bc <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	60da      	str	r2, [r3, #12]
 80055ba:	e003      	b.n	80055c4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80055bc:	231e      	movs	r3, #30
 80055be:	18fb      	adds	r3, r7, r3
 80055c0:	2201      	movs	r2, #1
 80055c2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80055d0:	231e      	movs	r3, #30
 80055d2:	18fb      	adds	r3, r7, r3
 80055d4:	781b      	ldrb	r3, [r3, #0]
}
 80055d6:	0018      	movs	r0, r3
 80055d8:	46bd      	mov	sp, r7
 80055da:	b008      	add	sp, #32
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	46c0      	nop			@ (mov r8, r8)
 80055e0:	ffff69f3 	.word	0xffff69f3
 80055e4:	ffffcfff 	.word	0xffffcfff
 80055e8:	fffff4ff 	.word	0xfffff4ff
 80055ec:	40013800 	.word	0x40013800
 80055f0:	40021000 	.word	0x40021000
 80055f4:	40004400 	.word	0x40004400
 80055f8:	007a1200 	.word	0x007a1200

080055fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005608:	2208      	movs	r2, #8
 800560a:	4013      	ands	r3, r2
 800560c:	d00b      	beq.n	8005626 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	4a4a      	ldr	r2, [pc, #296]	@ (8005740 <UART_AdvFeatureConfig+0x144>)
 8005616:	4013      	ands	r3, r2
 8005618:	0019      	movs	r1, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	430a      	orrs	r2, r1
 8005624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800562a:	2201      	movs	r2, #1
 800562c:	4013      	ands	r3, r2
 800562e:	d00b      	beq.n	8005648 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	4a43      	ldr	r2, [pc, #268]	@ (8005744 <UART_AdvFeatureConfig+0x148>)
 8005638:	4013      	ands	r3, r2
 800563a:	0019      	movs	r1, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	430a      	orrs	r2, r1
 8005646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800564c:	2202      	movs	r2, #2
 800564e:	4013      	ands	r3, r2
 8005650:	d00b      	beq.n	800566a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	4a3b      	ldr	r2, [pc, #236]	@ (8005748 <UART_AdvFeatureConfig+0x14c>)
 800565a:	4013      	ands	r3, r2
 800565c:	0019      	movs	r1, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800566e:	2204      	movs	r2, #4
 8005670:	4013      	ands	r3, r2
 8005672:	d00b      	beq.n	800568c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	4a34      	ldr	r2, [pc, #208]	@ (800574c <UART_AdvFeatureConfig+0x150>)
 800567c:	4013      	ands	r3, r2
 800567e:	0019      	movs	r1, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	430a      	orrs	r2, r1
 800568a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005690:	2210      	movs	r2, #16
 8005692:	4013      	ands	r3, r2
 8005694:	d00b      	beq.n	80056ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	4a2c      	ldr	r2, [pc, #176]	@ (8005750 <UART_AdvFeatureConfig+0x154>)
 800569e:	4013      	ands	r3, r2
 80056a0:	0019      	movs	r1, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	430a      	orrs	r2, r1
 80056ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b2:	2220      	movs	r2, #32
 80056b4:	4013      	ands	r3, r2
 80056b6:	d00b      	beq.n	80056d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	4a25      	ldr	r2, [pc, #148]	@ (8005754 <UART_AdvFeatureConfig+0x158>)
 80056c0:	4013      	ands	r3, r2
 80056c2:	0019      	movs	r1, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056d4:	2240      	movs	r2, #64	@ 0x40
 80056d6:	4013      	ands	r3, r2
 80056d8:	d01d      	beq.n	8005716 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	4a1d      	ldr	r2, [pc, #116]	@ (8005758 <UART_AdvFeatureConfig+0x15c>)
 80056e2:	4013      	ands	r3, r2
 80056e4:	0019      	movs	r1, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80056f6:	2380      	movs	r3, #128	@ 0x80
 80056f8:	035b      	lsls	r3, r3, #13
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d10b      	bne.n	8005716 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	4a15      	ldr	r2, [pc, #84]	@ (800575c <UART_AdvFeatureConfig+0x160>)
 8005706:	4013      	ands	r3, r2
 8005708:	0019      	movs	r1, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	430a      	orrs	r2, r1
 8005714:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800571a:	2280      	movs	r2, #128	@ 0x80
 800571c:	4013      	ands	r3, r2
 800571e:	d00b      	beq.n	8005738 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	4a0e      	ldr	r2, [pc, #56]	@ (8005760 <UART_AdvFeatureConfig+0x164>)
 8005728:	4013      	ands	r3, r2
 800572a:	0019      	movs	r1, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	430a      	orrs	r2, r1
 8005736:	605a      	str	r2, [r3, #4]
  }
}
 8005738:	46c0      	nop			@ (mov r8, r8)
 800573a:	46bd      	mov	sp, r7
 800573c:	b002      	add	sp, #8
 800573e:	bd80      	pop	{r7, pc}
 8005740:	ffff7fff 	.word	0xffff7fff
 8005744:	fffdffff 	.word	0xfffdffff
 8005748:	fffeffff 	.word	0xfffeffff
 800574c:	fffbffff 	.word	0xfffbffff
 8005750:	ffffefff 	.word	0xffffefff
 8005754:	ffffdfff 	.word	0xffffdfff
 8005758:	ffefffff 	.word	0xffefffff
 800575c:	ff9fffff 	.word	0xff9fffff
 8005760:	fff7ffff 	.word	0xfff7ffff

08005764 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b092      	sub	sp, #72	@ 0x48
 8005768:	af02      	add	r7, sp, #8
 800576a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2284      	movs	r2, #132	@ 0x84
 8005770:	2100      	movs	r1, #0
 8005772:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005774:	f7fd feb2 	bl	80034dc <HAL_GetTick>
 8005778:	0003      	movs	r3, r0
 800577a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2208      	movs	r2, #8
 8005784:	4013      	ands	r3, r2
 8005786:	2b08      	cmp	r3, #8
 8005788:	d12c      	bne.n	80057e4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800578a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800578c:	2280      	movs	r2, #128	@ 0x80
 800578e:	0391      	lsls	r1, r2, #14
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	4a46      	ldr	r2, [pc, #280]	@ (80058ac <UART_CheckIdleState+0x148>)
 8005794:	9200      	str	r2, [sp, #0]
 8005796:	2200      	movs	r2, #0
 8005798:	f000 f88c 	bl	80058b4 <UART_WaitOnFlagUntilTimeout>
 800579c:	1e03      	subs	r3, r0, #0
 800579e:	d021      	beq.n	80057e4 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057a0:	f3ef 8310 	mrs	r3, PRIMASK
 80057a4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80057a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80057a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057aa:	2301      	movs	r3, #1
 80057ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b0:	f383 8810 	msr	PRIMASK, r3
}
 80057b4:	46c0      	nop			@ (mov r8, r8)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2180      	movs	r1, #128	@ 0x80
 80057c2:	438a      	bics	r2, r1
 80057c4:	601a      	str	r2, [r3, #0]
 80057c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057cc:	f383 8810 	msr	PRIMASK, r3
}
 80057d0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2220      	movs	r2, #32
 80057d6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2278      	movs	r2, #120	@ 0x78
 80057dc:	2100      	movs	r1, #0
 80057de:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e05f      	b.n	80058a4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2204      	movs	r2, #4
 80057ec:	4013      	ands	r3, r2
 80057ee:	2b04      	cmp	r3, #4
 80057f0:	d146      	bne.n	8005880 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057f4:	2280      	movs	r2, #128	@ 0x80
 80057f6:	03d1      	lsls	r1, r2, #15
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	4a2c      	ldr	r2, [pc, #176]	@ (80058ac <UART_CheckIdleState+0x148>)
 80057fc:	9200      	str	r2, [sp, #0]
 80057fe:	2200      	movs	r2, #0
 8005800:	f000 f858 	bl	80058b4 <UART_WaitOnFlagUntilTimeout>
 8005804:	1e03      	subs	r3, r0, #0
 8005806:	d03b      	beq.n	8005880 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005808:	f3ef 8310 	mrs	r3, PRIMASK
 800580c:	60fb      	str	r3, [r7, #12]
  return(result);
 800580e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005810:	637b      	str	r3, [r7, #52]	@ 0x34
 8005812:	2301      	movs	r3, #1
 8005814:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	f383 8810 	msr	PRIMASK, r3
}
 800581c:	46c0      	nop			@ (mov r8, r8)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4921      	ldr	r1, [pc, #132]	@ (80058b0 <UART_CheckIdleState+0x14c>)
 800582a:	400a      	ands	r2, r1
 800582c:	601a      	str	r2, [r3, #0]
 800582e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005830:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	f383 8810 	msr	PRIMASK, r3
}
 8005838:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800583a:	f3ef 8310 	mrs	r3, PRIMASK
 800583e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005840:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005842:	633b      	str	r3, [r7, #48]	@ 0x30
 8005844:	2301      	movs	r3, #1
 8005846:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	f383 8810 	msr	PRIMASK, r3
}
 800584e:	46c0      	nop			@ (mov r8, r8)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	689a      	ldr	r2, [r3, #8]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2101      	movs	r1, #1
 800585c:	438a      	bics	r2, r1
 800585e:	609a      	str	r2, [r3, #8]
 8005860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005862:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	f383 8810 	msr	PRIMASK, r3
}
 800586a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2280      	movs	r2, #128	@ 0x80
 8005870:	2120      	movs	r1, #32
 8005872:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2278      	movs	r2, #120	@ 0x78
 8005878:	2100      	movs	r1, #0
 800587a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e011      	b.n	80058a4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2220      	movs	r2, #32
 8005884:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2280      	movs	r2, #128	@ 0x80
 800588a:	2120      	movs	r1, #32
 800588c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2278      	movs	r2, #120	@ 0x78
 800589e:	2100      	movs	r1, #0
 80058a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	0018      	movs	r0, r3
 80058a6:	46bd      	mov	sp, r7
 80058a8:	b010      	add	sp, #64	@ 0x40
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	01ffffff 	.word	0x01ffffff
 80058b0:	fffffedf 	.word	0xfffffedf

080058b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	603b      	str	r3, [r7, #0]
 80058c0:	1dfb      	adds	r3, r7, #7
 80058c2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058c4:	e051      	b.n	800596a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	3301      	adds	r3, #1
 80058ca:	d04e      	beq.n	800596a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058cc:	f7fd fe06 	bl	80034dc <HAL_GetTick>
 80058d0:	0002      	movs	r2, r0
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	69ba      	ldr	r2, [r7, #24]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d302      	bcc.n	80058e2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d101      	bne.n	80058e6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e051      	b.n	800598a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2204      	movs	r2, #4
 80058ee:	4013      	ands	r3, r2
 80058f0:	d03b      	beq.n	800596a <UART_WaitOnFlagUntilTimeout+0xb6>
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	2b80      	cmp	r3, #128	@ 0x80
 80058f6:	d038      	beq.n	800596a <UART_WaitOnFlagUntilTimeout+0xb6>
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	2b40      	cmp	r3, #64	@ 0x40
 80058fc:	d035      	beq.n	800596a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	69db      	ldr	r3, [r3, #28]
 8005904:	2208      	movs	r2, #8
 8005906:	4013      	ands	r3, r2
 8005908:	2b08      	cmp	r3, #8
 800590a:	d111      	bne.n	8005930 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2208      	movs	r2, #8
 8005912:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	0018      	movs	r0, r3
 8005918:	f000 f83c 	bl	8005994 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2284      	movs	r2, #132	@ 0x84
 8005920:	2108      	movs	r1, #8
 8005922:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2278      	movs	r2, #120	@ 0x78
 8005928:	2100      	movs	r1, #0
 800592a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e02c      	b.n	800598a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	69da      	ldr	r2, [r3, #28]
 8005936:	2380      	movs	r3, #128	@ 0x80
 8005938:	011b      	lsls	r3, r3, #4
 800593a:	401a      	ands	r2, r3
 800593c:	2380      	movs	r3, #128	@ 0x80
 800593e:	011b      	lsls	r3, r3, #4
 8005940:	429a      	cmp	r2, r3
 8005942:	d112      	bne.n	800596a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2280      	movs	r2, #128	@ 0x80
 800594a:	0112      	lsls	r2, r2, #4
 800594c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	0018      	movs	r0, r3
 8005952:	f000 f81f 	bl	8005994 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2284      	movs	r2, #132	@ 0x84
 800595a:	2120      	movs	r1, #32
 800595c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2278      	movs	r2, #120	@ 0x78
 8005962:	2100      	movs	r1, #0
 8005964:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e00f      	b.n	800598a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	69db      	ldr	r3, [r3, #28]
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	4013      	ands	r3, r2
 8005974:	68ba      	ldr	r2, [r7, #8]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	425a      	negs	r2, r3
 800597a:	4153      	adcs	r3, r2
 800597c:	b2db      	uxtb	r3, r3
 800597e:	001a      	movs	r2, r3
 8005980:	1dfb      	adds	r3, r7, #7
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	429a      	cmp	r2, r3
 8005986:	d09e      	beq.n	80058c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	0018      	movs	r0, r3
 800598c:	46bd      	mov	sp, r7
 800598e:	b004      	add	sp, #16
 8005990:	bd80      	pop	{r7, pc}
	...

08005994 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b08e      	sub	sp, #56	@ 0x38
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800599c:	f3ef 8310 	mrs	r3, PRIMASK
 80059a0:	617b      	str	r3, [r7, #20]
  return(result);
 80059a2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80059a6:	2301      	movs	r3, #1
 80059a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	f383 8810 	msr	PRIMASK, r3
}
 80059b0:	46c0      	nop			@ (mov r8, r8)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4926      	ldr	r1, [pc, #152]	@ (8005a58 <UART_EndRxTransfer+0xc4>)
 80059be:	400a      	ands	r2, r1
 80059c0:	601a      	str	r2, [r3, #0]
 80059c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	f383 8810 	msr	PRIMASK, r3
}
 80059cc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059ce:	f3ef 8310 	mrs	r3, PRIMASK
 80059d2:	623b      	str	r3, [r7, #32]
  return(result);
 80059d4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80059d8:	2301      	movs	r3, #1
 80059da:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059de:	f383 8810 	msr	PRIMASK, r3
}
 80059e2:	46c0      	nop			@ (mov r8, r8)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	689a      	ldr	r2, [r3, #8]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2101      	movs	r1, #1
 80059f0:	438a      	bics	r2, r1
 80059f2:	609a      	str	r2, [r3, #8]
 80059f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059fa:	f383 8810 	msr	PRIMASK, r3
}
 80059fe:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d118      	bne.n	8005a3a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a08:	f3ef 8310 	mrs	r3, PRIMASK
 8005a0c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a0e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a12:	2301      	movs	r3, #1
 8005a14:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f383 8810 	msr	PRIMASK, r3
}
 8005a1c:	46c0      	nop			@ (mov r8, r8)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2110      	movs	r1, #16
 8005a2a:	438a      	bics	r2, r1
 8005a2c:	601a      	str	r2, [r3, #0]
 8005a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	f383 8810 	msr	PRIMASK, r3
}
 8005a38:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2280      	movs	r2, #128	@ 0x80
 8005a3e:	2120      	movs	r1, #32
 8005a40:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005a4e:	46c0      	nop			@ (mov r8, r8)
 8005a50:	46bd      	mov	sp, r7
 8005a52:	b00e      	add	sp, #56	@ 0x38
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	46c0      	nop			@ (mov r8, r8)
 8005a58:	fffffedf 	.word	0xfffffedf

08005a5c <abort>:
 8005a5c:	2006      	movs	r0, #6
 8005a5e:	b510      	push	{r4, lr}
 8005a60:	f000 ffce 	bl	8006a00 <raise>
 8005a64:	2001      	movs	r0, #1
 8005a66:	f7fd fb1e 	bl	80030a6 <_exit>
	...

08005a6c <__assert_func>:
 8005a6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8005a6e:	0014      	movs	r4, r2
 8005a70:	001a      	movs	r2, r3
 8005a72:	4b09      	ldr	r3, [pc, #36]	@ (8005a98 <__assert_func+0x2c>)
 8005a74:	0005      	movs	r5, r0
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	000e      	movs	r6, r1
 8005a7a:	68d8      	ldr	r0, [r3, #12]
 8005a7c:	4b07      	ldr	r3, [pc, #28]	@ (8005a9c <__assert_func+0x30>)
 8005a7e:	2c00      	cmp	r4, #0
 8005a80:	d101      	bne.n	8005a86 <__assert_func+0x1a>
 8005a82:	4b07      	ldr	r3, [pc, #28]	@ (8005aa0 <__assert_func+0x34>)
 8005a84:	001c      	movs	r4, r3
 8005a86:	4907      	ldr	r1, [pc, #28]	@ (8005aa4 <__assert_func+0x38>)
 8005a88:	9301      	str	r3, [sp, #4]
 8005a8a:	9402      	str	r4, [sp, #8]
 8005a8c:	002b      	movs	r3, r5
 8005a8e:	9600      	str	r6, [sp, #0]
 8005a90:	f000 fdfc 	bl	800668c <fiprintf>
 8005a94:	f7ff ffe2 	bl	8005a5c <abort>
 8005a98:	20000120 	.word	0x20000120
 8005a9c:	080092ac 	.word	0x080092ac
 8005aa0:	080092e7 	.word	0x080092e7
 8005aa4:	080092b9 	.word	0x080092b9

08005aa8 <_calloc_r>:
 8005aa8:	b570      	push	{r4, r5, r6, lr}
 8005aaa:	0c0b      	lsrs	r3, r1, #16
 8005aac:	0c15      	lsrs	r5, r2, #16
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d11e      	bne.n	8005af0 <_calloc_r+0x48>
 8005ab2:	2d00      	cmp	r5, #0
 8005ab4:	d10c      	bne.n	8005ad0 <_calloc_r+0x28>
 8005ab6:	b289      	uxth	r1, r1
 8005ab8:	b294      	uxth	r4, r2
 8005aba:	434c      	muls	r4, r1
 8005abc:	0021      	movs	r1, r4
 8005abe:	f000 f84d 	bl	8005b5c <_malloc_r>
 8005ac2:	1e05      	subs	r5, r0, #0
 8005ac4:	d01b      	beq.n	8005afe <_calloc_r+0x56>
 8005ac6:	0022      	movs	r2, r4
 8005ac8:	2100      	movs	r1, #0
 8005aca:	f000 ff67 	bl	800699c <memset>
 8005ace:	e016      	b.n	8005afe <_calloc_r+0x56>
 8005ad0:	1c2b      	adds	r3, r5, #0
 8005ad2:	1c0c      	adds	r4, r1, #0
 8005ad4:	b289      	uxth	r1, r1
 8005ad6:	b292      	uxth	r2, r2
 8005ad8:	434a      	muls	r2, r1
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	b2a1      	uxth	r1, r4
 8005ade:	4359      	muls	r1, r3
 8005ae0:	0c14      	lsrs	r4, r2, #16
 8005ae2:	190c      	adds	r4, r1, r4
 8005ae4:	0c23      	lsrs	r3, r4, #16
 8005ae6:	d107      	bne.n	8005af8 <_calloc_r+0x50>
 8005ae8:	0424      	lsls	r4, r4, #16
 8005aea:	b292      	uxth	r2, r2
 8005aec:	4314      	orrs	r4, r2
 8005aee:	e7e5      	b.n	8005abc <_calloc_r+0x14>
 8005af0:	2d00      	cmp	r5, #0
 8005af2:	d101      	bne.n	8005af8 <_calloc_r+0x50>
 8005af4:	1c14      	adds	r4, r2, #0
 8005af6:	e7ed      	b.n	8005ad4 <_calloc_r+0x2c>
 8005af8:	230c      	movs	r3, #12
 8005afa:	2500      	movs	r5, #0
 8005afc:	6003      	str	r3, [r0, #0]
 8005afe:	0028      	movs	r0, r5
 8005b00:	bd70      	pop	{r4, r5, r6, pc}
	...

08005b04 <malloc>:
 8005b04:	b510      	push	{r4, lr}
 8005b06:	4b03      	ldr	r3, [pc, #12]	@ (8005b14 <malloc+0x10>)
 8005b08:	0001      	movs	r1, r0
 8005b0a:	6818      	ldr	r0, [r3, #0]
 8005b0c:	f000 f826 	bl	8005b5c <_malloc_r>
 8005b10:	bd10      	pop	{r4, pc}
 8005b12:	46c0      	nop			@ (mov r8, r8)
 8005b14:	20000120 	.word	0x20000120

08005b18 <sbrk_aligned>:
 8005b18:	b570      	push	{r4, r5, r6, lr}
 8005b1a:	4e0f      	ldr	r6, [pc, #60]	@ (8005b58 <sbrk_aligned+0x40>)
 8005b1c:	000d      	movs	r5, r1
 8005b1e:	6831      	ldr	r1, [r6, #0]
 8005b20:	0004      	movs	r4, r0
 8005b22:	2900      	cmp	r1, #0
 8005b24:	d102      	bne.n	8005b2c <sbrk_aligned+0x14>
 8005b26:	f000 ffc9 	bl	8006abc <_sbrk_r>
 8005b2a:	6030      	str	r0, [r6, #0]
 8005b2c:	0029      	movs	r1, r5
 8005b2e:	0020      	movs	r0, r4
 8005b30:	f000 ffc4 	bl	8006abc <_sbrk_r>
 8005b34:	1c43      	adds	r3, r0, #1
 8005b36:	d103      	bne.n	8005b40 <sbrk_aligned+0x28>
 8005b38:	2501      	movs	r5, #1
 8005b3a:	426d      	negs	r5, r5
 8005b3c:	0028      	movs	r0, r5
 8005b3e:	bd70      	pop	{r4, r5, r6, pc}
 8005b40:	2303      	movs	r3, #3
 8005b42:	1cc5      	adds	r5, r0, #3
 8005b44:	439d      	bics	r5, r3
 8005b46:	42a8      	cmp	r0, r5
 8005b48:	d0f8      	beq.n	8005b3c <sbrk_aligned+0x24>
 8005b4a:	1a29      	subs	r1, r5, r0
 8005b4c:	0020      	movs	r0, r4
 8005b4e:	f000 ffb5 	bl	8006abc <_sbrk_r>
 8005b52:	3001      	adds	r0, #1
 8005b54:	d1f2      	bne.n	8005b3c <sbrk_aligned+0x24>
 8005b56:	e7ef      	b.n	8005b38 <sbrk_aligned+0x20>
 8005b58:	20000484 	.word	0x20000484

08005b5c <_malloc_r>:
 8005b5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b5e:	2203      	movs	r2, #3
 8005b60:	1ccb      	adds	r3, r1, #3
 8005b62:	4393      	bics	r3, r2
 8005b64:	3308      	adds	r3, #8
 8005b66:	0005      	movs	r5, r0
 8005b68:	001f      	movs	r7, r3
 8005b6a:	2b0c      	cmp	r3, #12
 8005b6c:	d234      	bcs.n	8005bd8 <_malloc_r+0x7c>
 8005b6e:	270c      	movs	r7, #12
 8005b70:	42b9      	cmp	r1, r7
 8005b72:	d833      	bhi.n	8005bdc <_malloc_r+0x80>
 8005b74:	0028      	movs	r0, r5
 8005b76:	f000 f871 	bl	8005c5c <__malloc_lock>
 8005b7a:	4e37      	ldr	r6, [pc, #220]	@ (8005c58 <_malloc_r+0xfc>)
 8005b7c:	6833      	ldr	r3, [r6, #0]
 8005b7e:	001c      	movs	r4, r3
 8005b80:	2c00      	cmp	r4, #0
 8005b82:	d12f      	bne.n	8005be4 <_malloc_r+0x88>
 8005b84:	0039      	movs	r1, r7
 8005b86:	0028      	movs	r0, r5
 8005b88:	f7ff ffc6 	bl	8005b18 <sbrk_aligned>
 8005b8c:	0004      	movs	r4, r0
 8005b8e:	1c43      	adds	r3, r0, #1
 8005b90:	d15f      	bne.n	8005c52 <_malloc_r+0xf6>
 8005b92:	6834      	ldr	r4, [r6, #0]
 8005b94:	9400      	str	r4, [sp, #0]
 8005b96:	9b00      	ldr	r3, [sp, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d14a      	bne.n	8005c32 <_malloc_r+0xd6>
 8005b9c:	2c00      	cmp	r4, #0
 8005b9e:	d052      	beq.n	8005c46 <_malloc_r+0xea>
 8005ba0:	6823      	ldr	r3, [r4, #0]
 8005ba2:	0028      	movs	r0, r5
 8005ba4:	18e3      	adds	r3, r4, r3
 8005ba6:	9900      	ldr	r1, [sp, #0]
 8005ba8:	9301      	str	r3, [sp, #4]
 8005baa:	f000 ff87 	bl	8006abc <_sbrk_r>
 8005bae:	9b01      	ldr	r3, [sp, #4]
 8005bb0:	4283      	cmp	r3, r0
 8005bb2:	d148      	bne.n	8005c46 <_malloc_r+0xea>
 8005bb4:	6823      	ldr	r3, [r4, #0]
 8005bb6:	0028      	movs	r0, r5
 8005bb8:	1aff      	subs	r7, r7, r3
 8005bba:	0039      	movs	r1, r7
 8005bbc:	f7ff ffac 	bl	8005b18 <sbrk_aligned>
 8005bc0:	3001      	adds	r0, #1
 8005bc2:	d040      	beq.n	8005c46 <_malloc_r+0xea>
 8005bc4:	6823      	ldr	r3, [r4, #0]
 8005bc6:	19db      	adds	r3, r3, r7
 8005bc8:	6023      	str	r3, [r4, #0]
 8005bca:	6833      	ldr	r3, [r6, #0]
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	2a00      	cmp	r2, #0
 8005bd0:	d133      	bne.n	8005c3a <_malloc_r+0xde>
 8005bd2:	9b00      	ldr	r3, [sp, #0]
 8005bd4:	6033      	str	r3, [r6, #0]
 8005bd6:	e019      	b.n	8005c0c <_malloc_r+0xb0>
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	dac9      	bge.n	8005b70 <_malloc_r+0x14>
 8005bdc:	230c      	movs	r3, #12
 8005bde:	602b      	str	r3, [r5, #0]
 8005be0:	2000      	movs	r0, #0
 8005be2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005be4:	6821      	ldr	r1, [r4, #0]
 8005be6:	1bc9      	subs	r1, r1, r7
 8005be8:	d420      	bmi.n	8005c2c <_malloc_r+0xd0>
 8005bea:	290b      	cmp	r1, #11
 8005bec:	d90a      	bls.n	8005c04 <_malloc_r+0xa8>
 8005bee:	19e2      	adds	r2, r4, r7
 8005bf0:	6027      	str	r7, [r4, #0]
 8005bf2:	42a3      	cmp	r3, r4
 8005bf4:	d104      	bne.n	8005c00 <_malloc_r+0xa4>
 8005bf6:	6032      	str	r2, [r6, #0]
 8005bf8:	6863      	ldr	r3, [r4, #4]
 8005bfa:	6011      	str	r1, [r2, #0]
 8005bfc:	6053      	str	r3, [r2, #4]
 8005bfe:	e005      	b.n	8005c0c <_malloc_r+0xb0>
 8005c00:	605a      	str	r2, [r3, #4]
 8005c02:	e7f9      	b.n	8005bf8 <_malloc_r+0x9c>
 8005c04:	6862      	ldr	r2, [r4, #4]
 8005c06:	42a3      	cmp	r3, r4
 8005c08:	d10e      	bne.n	8005c28 <_malloc_r+0xcc>
 8005c0a:	6032      	str	r2, [r6, #0]
 8005c0c:	0028      	movs	r0, r5
 8005c0e:	f000 f82d 	bl	8005c6c <__malloc_unlock>
 8005c12:	0020      	movs	r0, r4
 8005c14:	2207      	movs	r2, #7
 8005c16:	300b      	adds	r0, #11
 8005c18:	1d23      	adds	r3, r4, #4
 8005c1a:	4390      	bics	r0, r2
 8005c1c:	1ac2      	subs	r2, r0, r3
 8005c1e:	4298      	cmp	r0, r3
 8005c20:	d0df      	beq.n	8005be2 <_malloc_r+0x86>
 8005c22:	1a1b      	subs	r3, r3, r0
 8005c24:	50a3      	str	r3, [r4, r2]
 8005c26:	e7dc      	b.n	8005be2 <_malloc_r+0x86>
 8005c28:	605a      	str	r2, [r3, #4]
 8005c2a:	e7ef      	b.n	8005c0c <_malloc_r+0xb0>
 8005c2c:	0023      	movs	r3, r4
 8005c2e:	6864      	ldr	r4, [r4, #4]
 8005c30:	e7a6      	b.n	8005b80 <_malloc_r+0x24>
 8005c32:	9c00      	ldr	r4, [sp, #0]
 8005c34:	6863      	ldr	r3, [r4, #4]
 8005c36:	9300      	str	r3, [sp, #0]
 8005c38:	e7ad      	b.n	8005b96 <_malloc_r+0x3a>
 8005c3a:	001a      	movs	r2, r3
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	42a3      	cmp	r3, r4
 8005c40:	d1fb      	bne.n	8005c3a <_malloc_r+0xde>
 8005c42:	2300      	movs	r3, #0
 8005c44:	e7da      	b.n	8005bfc <_malloc_r+0xa0>
 8005c46:	230c      	movs	r3, #12
 8005c48:	0028      	movs	r0, r5
 8005c4a:	602b      	str	r3, [r5, #0]
 8005c4c:	f000 f80e 	bl	8005c6c <__malloc_unlock>
 8005c50:	e7c6      	b.n	8005be0 <_malloc_r+0x84>
 8005c52:	6007      	str	r7, [r0, #0]
 8005c54:	e7da      	b.n	8005c0c <_malloc_r+0xb0>
 8005c56:	46c0      	nop			@ (mov r8, r8)
 8005c58:	20000488 	.word	0x20000488

08005c5c <__malloc_lock>:
 8005c5c:	b510      	push	{r4, lr}
 8005c5e:	4802      	ldr	r0, [pc, #8]	@ (8005c68 <__malloc_lock+0xc>)
 8005c60:	f000 ff7d 	bl	8006b5e <__retarget_lock_acquire_recursive>
 8005c64:	bd10      	pop	{r4, pc}
 8005c66:	46c0      	nop			@ (mov r8, r8)
 8005c68:	200005cc 	.word	0x200005cc

08005c6c <__malloc_unlock>:
 8005c6c:	b510      	push	{r4, lr}
 8005c6e:	4802      	ldr	r0, [pc, #8]	@ (8005c78 <__malloc_unlock+0xc>)
 8005c70:	f000 ff76 	bl	8006b60 <__retarget_lock_release_recursive>
 8005c74:	bd10      	pop	{r4, pc}
 8005c76:	46c0      	nop			@ (mov r8, r8)
 8005c78:	200005cc 	.word	0x200005cc

08005c7c <__cvt>:
 8005c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c7e:	001f      	movs	r7, r3
 8005c80:	2300      	movs	r3, #0
 8005c82:	0016      	movs	r6, r2
 8005c84:	b08b      	sub	sp, #44	@ 0x2c
 8005c86:	429f      	cmp	r7, r3
 8005c88:	da04      	bge.n	8005c94 <__cvt+0x18>
 8005c8a:	2180      	movs	r1, #128	@ 0x80
 8005c8c:	0609      	lsls	r1, r1, #24
 8005c8e:	187b      	adds	r3, r7, r1
 8005c90:	001f      	movs	r7, r3
 8005c92:	232d      	movs	r3, #45	@ 0x2d
 8005c94:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005c96:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8005c98:	7013      	strb	r3, [r2, #0]
 8005c9a:	2320      	movs	r3, #32
 8005c9c:	2203      	movs	r2, #3
 8005c9e:	439d      	bics	r5, r3
 8005ca0:	2d46      	cmp	r5, #70	@ 0x46
 8005ca2:	d007      	beq.n	8005cb4 <__cvt+0x38>
 8005ca4:	002b      	movs	r3, r5
 8005ca6:	3b45      	subs	r3, #69	@ 0x45
 8005ca8:	4259      	negs	r1, r3
 8005caa:	414b      	adcs	r3, r1
 8005cac:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8005cae:	3a01      	subs	r2, #1
 8005cb0:	18cb      	adds	r3, r1, r3
 8005cb2:	9310      	str	r3, [sp, #64]	@ 0x40
 8005cb4:	ab09      	add	r3, sp, #36	@ 0x24
 8005cb6:	9304      	str	r3, [sp, #16]
 8005cb8:	ab08      	add	r3, sp, #32
 8005cba:	9303      	str	r3, [sp, #12]
 8005cbc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005cbe:	9200      	str	r2, [sp, #0]
 8005cc0:	9302      	str	r3, [sp, #8]
 8005cc2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005cc4:	0032      	movs	r2, r6
 8005cc6:	9301      	str	r3, [sp, #4]
 8005cc8:	003b      	movs	r3, r7
 8005cca:	f000 ffe3 	bl	8006c94 <_dtoa_r>
 8005cce:	0004      	movs	r4, r0
 8005cd0:	2d47      	cmp	r5, #71	@ 0x47
 8005cd2:	d11b      	bne.n	8005d0c <__cvt+0x90>
 8005cd4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005cd6:	07db      	lsls	r3, r3, #31
 8005cd8:	d511      	bpl.n	8005cfe <__cvt+0x82>
 8005cda:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005cdc:	18c3      	adds	r3, r0, r3
 8005cde:	9307      	str	r3, [sp, #28]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	0030      	movs	r0, r6
 8005ce6:	0039      	movs	r1, r7
 8005ce8:	f7fa fbb0 	bl	800044c <__aeabi_dcmpeq>
 8005cec:	2800      	cmp	r0, #0
 8005cee:	d001      	beq.n	8005cf4 <__cvt+0x78>
 8005cf0:	9b07      	ldr	r3, [sp, #28]
 8005cf2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cf4:	2230      	movs	r2, #48	@ 0x30
 8005cf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cf8:	9907      	ldr	r1, [sp, #28]
 8005cfa:	428b      	cmp	r3, r1
 8005cfc:	d320      	bcc.n	8005d40 <__cvt+0xc4>
 8005cfe:	0020      	movs	r0, r4
 8005d00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d02:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005d04:	1b1b      	subs	r3, r3, r4
 8005d06:	6013      	str	r3, [r2, #0]
 8005d08:	b00b      	add	sp, #44	@ 0x2c
 8005d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d0c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005d0e:	18c3      	adds	r3, r0, r3
 8005d10:	9307      	str	r3, [sp, #28]
 8005d12:	2d46      	cmp	r5, #70	@ 0x46
 8005d14:	d1e4      	bne.n	8005ce0 <__cvt+0x64>
 8005d16:	7803      	ldrb	r3, [r0, #0]
 8005d18:	2b30      	cmp	r3, #48	@ 0x30
 8005d1a:	d10c      	bne.n	8005d36 <__cvt+0xba>
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	2300      	movs	r3, #0
 8005d20:	0030      	movs	r0, r6
 8005d22:	0039      	movs	r1, r7
 8005d24:	f7fa fb92 	bl	800044c <__aeabi_dcmpeq>
 8005d28:	2800      	cmp	r0, #0
 8005d2a:	d104      	bne.n	8005d36 <__cvt+0xba>
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8005d30:	1a9b      	subs	r3, r3, r2
 8005d32:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005d34:	6013      	str	r3, [r2, #0]
 8005d36:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005d38:	9a07      	ldr	r2, [sp, #28]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	18d3      	adds	r3, r2, r3
 8005d3e:	e7ce      	b.n	8005cde <__cvt+0x62>
 8005d40:	1c59      	adds	r1, r3, #1
 8005d42:	9109      	str	r1, [sp, #36]	@ 0x24
 8005d44:	701a      	strb	r2, [r3, #0]
 8005d46:	e7d6      	b.n	8005cf6 <__cvt+0x7a>

08005d48 <__exponent>:
 8005d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d4a:	232b      	movs	r3, #43	@ 0x2b
 8005d4c:	b085      	sub	sp, #20
 8005d4e:	0005      	movs	r5, r0
 8005d50:	1e0c      	subs	r4, r1, #0
 8005d52:	7002      	strb	r2, [r0, #0]
 8005d54:	da01      	bge.n	8005d5a <__exponent+0x12>
 8005d56:	424c      	negs	r4, r1
 8005d58:	3302      	adds	r3, #2
 8005d5a:	706b      	strb	r3, [r5, #1]
 8005d5c:	2c09      	cmp	r4, #9
 8005d5e:	dd2c      	ble.n	8005dba <__exponent+0x72>
 8005d60:	ab02      	add	r3, sp, #8
 8005d62:	1dde      	adds	r6, r3, #7
 8005d64:	0020      	movs	r0, r4
 8005d66:	210a      	movs	r1, #10
 8005d68:	f7fa fb5a 	bl	8000420 <__aeabi_idivmod>
 8005d6c:	0037      	movs	r7, r6
 8005d6e:	3130      	adds	r1, #48	@ 0x30
 8005d70:	3e01      	subs	r6, #1
 8005d72:	0020      	movs	r0, r4
 8005d74:	7031      	strb	r1, [r6, #0]
 8005d76:	210a      	movs	r1, #10
 8005d78:	9401      	str	r4, [sp, #4]
 8005d7a:	f7fa fa6b 	bl	8000254 <__divsi3>
 8005d7e:	9b01      	ldr	r3, [sp, #4]
 8005d80:	0004      	movs	r4, r0
 8005d82:	2b63      	cmp	r3, #99	@ 0x63
 8005d84:	dcee      	bgt.n	8005d64 <__exponent+0x1c>
 8005d86:	1eba      	subs	r2, r7, #2
 8005d88:	1ca8      	adds	r0, r5, #2
 8005d8a:	0001      	movs	r1, r0
 8005d8c:	0013      	movs	r3, r2
 8005d8e:	3430      	adds	r4, #48	@ 0x30
 8005d90:	7014      	strb	r4, [r2, #0]
 8005d92:	ac02      	add	r4, sp, #8
 8005d94:	3407      	adds	r4, #7
 8005d96:	429c      	cmp	r4, r3
 8005d98:	d80a      	bhi.n	8005db0 <__exponent+0x68>
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	4294      	cmp	r4, r2
 8005d9e:	d303      	bcc.n	8005da8 <__exponent+0x60>
 8005da0:	3309      	adds	r3, #9
 8005da2:	aa02      	add	r2, sp, #8
 8005da4:	189b      	adds	r3, r3, r2
 8005da6:	1bdb      	subs	r3, r3, r7
 8005da8:	18c0      	adds	r0, r0, r3
 8005daa:	1b40      	subs	r0, r0, r5
 8005dac:	b005      	add	sp, #20
 8005dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005db0:	781c      	ldrb	r4, [r3, #0]
 8005db2:	3301      	adds	r3, #1
 8005db4:	700c      	strb	r4, [r1, #0]
 8005db6:	3101      	adds	r1, #1
 8005db8:	e7eb      	b.n	8005d92 <__exponent+0x4a>
 8005dba:	2330      	movs	r3, #48	@ 0x30
 8005dbc:	18e4      	adds	r4, r4, r3
 8005dbe:	70ab      	strb	r3, [r5, #2]
 8005dc0:	1d28      	adds	r0, r5, #4
 8005dc2:	70ec      	strb	r4, [r5, #3]
 8005dc4:	e7f1      	b.n	8005daa <__exponent+0x62>
	...

08005dc8 <_printf_float>:
 8005dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dca:	b097      	sub	sp, #92	@ 0x5c
 8005dcc:	000d      	movs	r5, r1
 8005dce:	920a      	str	r2, [sp, #40]	@ 0x28
 8005dd0:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8005dd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005dd4:	9009      	str	r0, [sp, #36]	@ 0x24
 8005dd6:	f000 fe1d 	bl	8006a14 <_localeconv_r>
 8005dda:	6803      	ldr	r3, [r0, #0]
 8005ddc:	0018      	movs	r0, r3
 8005dde:	930d      	str	r3, [sp, #52]	@ 0x34
 8005de0:	f7fa f992 	bl	8000108 <strlen>
 8005de4:	2300      	movs	r3, #0
 8005de6:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005de8:	9314      	str	r3, [sp, #80]	@ 0x50
 8005dea:	7e2b      	ldrb	r3, [r5, #24]
 8005dec:	2207      	movs	r2, #7
 8005dee:	930c      	str	r3, [sp, #48]	@ 0x30
 8005df0:	682b      	ldr	r3, [r5, #0]
 8005df2:	930e      	str	r3, [sp, #56]	@ 0x38
 8005df4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005df6:	6823      	ldr	r3, [r4, #0]
 8005df8:	05c9      	lsls	r1, r1, #23
 8005dfa:	d545      	bpl.n	8005e88 <_printf_float+0xc0>
 8005dfc:	189b      	adds	r3, r3, r2
 8005dfe:	4393      	bics	r3, r2
 8005e00:	001a      	movs	r2, r3
 8005e02:	3208      	adds	r2, #8
 8005e04:	6022      	str	r2, [r4, #0]
 8005e06:	2201      	movs	r2, #1
 8005e08:	681e      	ldr	r6, [r3, #0]
 8005e0a:	685f      	ldr	r7, [r3, #4]
 8005e0c:	007b      	lsls	r3, r7, #1
 8005e0e:	085b      	lsrs	r3, r3, #1
 8005e10:	9311      	str	r3, [sp, #68]	@ 0x44
 8005e12:	9610      	str	r6, [sp, #64]	@ 0x40
 8005e14:	64ae      	str	r6, [r5, #72]	@ 0x48
 8005e16:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8005e18:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8005e1a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8005e1c:	4ba7      	ldr	r3, [pc, #668]	@ (80060bc <_printf_float+0x2f4>)
 8005e1e:	4252      	negs	r2, r2
 8005e20:	f7fc fd10 	bl	8002844 <__aeabi_dcmpun>
 8005e24:	2800      	cmp	r0, #0
 8005e26:	d131      	bne.n	8005e8c <_printf_float+0xc4>
 8005e28:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8005e2a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	4ba3      	ldr	r3, [pc, #652]	@ (80060bc <_printf_float+0x2f4>)
 8005e30:	4252      	negs	r2, r2
 8005e32:	f7fa fb1b 	bl	800046c <__aeabi_dcmple>
 8005e36:	2800      	cmp	r0, #0
 8005e38:	d128      	bne.n	8005e8c <_printf_float+0xc4>
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	0030      	movs	r0, r6
 8005e40:	0039      	movs	r1, r7
 8005e42:	f7fa fb09 	bl	8000458 <__aeabi_dcmplt>
 8005e46:	2800      	cmp	r0, #0
 8005e48:	d003      	beq.n	8005e52 <_printf_float+0x8a>
 8005e4a:	002b      	movs	r3, r5
 8005e4c:	222d      	movs	r2, #45	@ 0x2d
 8005e4e:	3343      	adds	r3, #67	@ 0x43
 8005e50:	701a      	strb	r2, [r3, #0]
 8005e52:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005e54:	4f9a      	ldr	r7, [pc, #616]	@ (80060c0 <_printf_float+0x2f8>)
 8005e56:	2b47      	cmp	r3, #71	@ 0x47
 8005e58:	d800      	bhi.n	8005e5c <_printf_float+0x94>
 8005e5a:	4f9a      	ldr	r7, [pc, #616]	@ (80060c4 <_printf_float+0x2fc>)
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	2400      	movs	r4, #0
 8005e60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005e62:	612b      	str	r3, [r5, #16]
 8005e64:	3301      	adds	r3, #1
 8005e66:	439a      	bics	r2, r3
 8005e68:	602a      	str	r2, [r5, #0]
 8005e6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e6c:	0029      	movs	r1, r5
 8005e6e:	9300      	str	r3, [sp, #0]
 8005e70:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e74:	aa15      	add	r2, sp, #84	@ 0x54
 8005e76:	f000 f9e5 	bl	8006244 <_printf_common>
 8005e7a:	3001      	adds	r0, #1
 8005e7c:	d000      	beq.n	8005e80 <_printf_float+0xb8>
 8005e7e:	e09e      	b.n	8005fbe <_printf_float+0x1f6>
 8005e80:	2001      	movs	r0, #1
 8005e82:	4240      	negs	r0, r0
 8005e84:	b017      	add	sp, #92	@ 0x5c
 8005e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e88:	3307      	adds	r3, #7
 8005e8a:	e7b8      	b.n	8005dfe <_printf_float+0x36>
 8005e8c:	0032      	movs	r2, r6
 8005e8e:	003b      	movs	r3, r7
 8005e90:	0030      	movs	r0, r6
 8005e92:	0039      	movs	r1, r7
 8005e94:	f7fc fcd6 	bl	8002844 <__aeabi_dcmpun>
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	d00b      	beq.n	8005eb4 <_printf_float+0xec>
 8005e9c:	2f00      	cmp	r7, #0
 8005e9e:	da03      	bge.n	8005ea8 <_printf_float+0xe0>
 8005ea0:	002b      	movs	r3, r5
 8005ea2:	222d      	movs	r2, #45	@ 0x2d
 8005ea4:	3343      	adds	r3, #67	@ 0x43
 8005ea6:	701a      	strb	r2, [r3, #0]
 8005ea8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005eaa:	4f87      	ldr	r7, [pc, #540]	@ (80060c8 <_printf_float+0x300>)
 8005eac:	2b47      	cmp	r3, #71	@ 0x47
 8005eae:	d8d5      	bhi.n	8005e5c <_printf_float+0x94>
 8005eb0:	4f86      	ldr	r7, [pc, #536]	@ (80060cc <_printf_float+0x304>)
 8005eb2:	e7d3      	b.n	8005e5c <_printf_float+0x94>
 8005eb4:	2220      	movs	r2, #32
 8005eb6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8005eb8:	686b      	ldr	r3, [r5, #4]
 8005eba:	4394      	bics	r4, r2
 8005ebc:	1c5a      	adds	r2, r3, #1
 8005ebe:	d146      	bne.n	8005f4e <_printf_float+0x186>
 8005ec0:	3307      	adds	r3, #7
 8005ec2:	606b      	str	r3, [r5, #4]
 8005ec4:	2380      	movs	r3, #128	@ 0x80
 8005ec6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005ec8:	00db      	lsls	r3, r3, #3
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	2200      	movs	r2, #0
 8005ece:	602b      	str	r3, [r5, #0]
 8005ed0:	9206      	str	r2, [sp, #24]
 8005ed2:	aa14      	add	r2, sp, #80	@ 0x50
 8005ed4:	9205      	str	r2, [sp, #20]
 8005ed6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005ed8:	a90a      	add	r1, sp, #40	@ 0x28
 8005eda:	9204      	str	r2, [sp, #16]
 8005edc:	aa13      	add	r2, sp, #76	@ 0x4c
 8005ede:	9203      	str	r2, [sp, #12]
 8005ee0:	2223      	movs	r2, #35	@ 0x23
 8005ee2:	1852      	adds	r2, r2, r1
 8005ee4:	9202      	str	r2, [sp, #8]
 8005ee6:	9301      	str	r3, [sp, #4]
 8005ee8:	686b      	ldr	r3, [r5, #4]
 8005eea:	0032      	movs	r2, r6
 8005eec:	9300      	str	r3, [sp, #0]
 8005eee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ef0:	003b      	movs	r3, r7
 8005ef2:	f7ff fec3 	bl	8005c7c <__cvt>
 8005ef6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005ef8:	0007      	movs	r7, r0
 8005efa:	2c47      	cmp	r4, #71	@ 0x47
 8005efc:	d12d      	bne.n	8005f5a <_printf_float+0x192>
 8005efe:	1cd3      	adds	r3, r2, #3
 8005f00:	db02      	blt.n	8005f08 <_printf_float+0x140>
 8005f02:	686b      	ldr	r3, [r5, #4]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	dd47      	ble.n	8005f98 <_printf_float+0x1d0>
 8005f08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005f0a:	3b02      	subs	r3, #2
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	930c      	str	r3, [sp, #48]	@ 0x30
 8005f10:	0028      	movs	r0, r5
 8005f12:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005f14:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005f16:	3901      	subs	r1, #1
 8005f18:	3050      	adds	r0, #80	@ 0x50
 8005f1a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8005f1c:	f7ff ff14 	bl	8005d48 <__exponent>
 8005f20:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005f22:	0004      	movs	r4, r0
 8005f24:	1813      	adds	r3, r2, r0
 8005f26:	612b      	str	r3, [r5, #16]
 8005f28:	2a01      	cmp	r2, #1
 8005f2a:	dc02      	bgt.n	8005f32 <_printf_float+0x16a>
 8005f2c:	682a      	ldr	r2, [r5, #0]
 8005f2e:	07d2      	lsls	r2, r2, #31
 8005f30:	d501      	bpl.n	8005f36 <_printf_float+0x16e>
 8005f32:	3301      	adds	r3, #1
 8005f34:	612b      	str	r3, [r5, #16]
 8005f36:	2323      	movs	r3, #35	@ 0x23
 8005f38:	aa0a      	add	r2, sp, #40	@ 0x28
 8005f3a:	189b      	adds	r3, r3, r2
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d100      	bne.n	8005f44 <_printf_float+0x17c>
 8005f42:	e792      	b.n	8005e6a <_printf_float+0xa2>
 8005f44:	002b      	movs	r3, r5
 8005f46:	222d      	movs	r2, #45	@ 0x2d
 8005f48:	3343      	adds	r3, #67	@ 0x43
 8005f4a:	701a      	strb	r2, [r3, #0]
 8005f4c:	e78d      	b.n	8005e6a <_printf_float+0xa2>
 8005f4e:	2c47      	cmp	r4, #71	@ 0x47
 8005f50:	d1b8      	bne.n	8005ec4 <_printf_float+0xfc>
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1b6      	bne.n	8005ec4 <_printf_float+0xfc>
 8005f56:	3301      	adds	r3, #1
 8005f58:	e7b3      	b.n	8005ec2 <_printf_float+0xfa>
 8005f5a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005f5c:	2b65      	cmp	r3, #101	@ 0x65
 8005f5e:	d9d7      	bls.n	8005f10 <_printf_float+0x148>
 8005f60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005f62:	2b66      	cmp	r3, #102	@ 0x66
 8005f64:	d11a      	bne.n	8005f9c <_printf_float+0x1d4>
 8005f66:	686b      	ldr	r3, [r5, #4]
 8005f68:	2a00      	cmp	r2, #0
 8005f6a:	dd09      	ble.n	8005f80 <_printf_float+0x1b8>
 8005f6c:	612a      	str	r2, [r5, #16]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d102      	bne.n	8005f78 <_printf_float+0x1b0>
 8005f72:	6829      	ldr	r1, [r5, #0]
 8005f74:	07c9      	lsls	r1, r1, #31
 8005f76:	d50b      	bpl.n	8005f90 <_printf_float+0x1c8>
 8005f78:	3301      	adds	r3, #1
 8005f7a:	189b      	adds	r3, r3, r2
 8005f7c:	612b      	str	r3, [r5, #16]
 8005f7e:	e007      	b.n	8005f90 <_printf_float+0x1c8>
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d103      	bne.n	8005f8c <_printf_float+0x1c4>
 8005f84:	2201      	movs	r2, #1
 8005f86:	6829      	ldr	r1, [r5, #0]
 8005f88:	4211      	tst	r1, r2
 8005f8a:	d000      	beq.n	8005f8e <_printf_float+0x1c6>
 8005f8c:	1c9a      	adds	r2, r3, #2
 8005f8e:	612a      	str	r2, [r5, #16]
 8005f90:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005f92:	2400      	movs	r4, #0
 8005f94:	65ab      	str	r3, [r5, #88]	@ 0x58
 8005f96:	e7ce      	b.n	8005f36 <_printf_float+0x16e>
 8005f98:	2367      	movs	r3, #103	@ 0x67
 8005f9a:	930c      	str	r3, [sp, #48]	@ 0x30
 8005f9c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005f9e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005fa0:	4299      	cmp	r1, r3
 8005fa2:	db06      	blt.n	8005fb2 <_printf_float+0x1ea>
 8005fa4:	682b      	ldr	r3, [r5, #0]
 8005fa6:	6129      	str	r1, [r5, #16]
 8005fa8:	07db      	lsls	r3, r3, #31
 8005faa:	d5f1      	bpl.n	8005f90 <_printf_float+0x1c8>
 8005fac:	3101      	adds	r1, #1
 8005fae:	6129      	str	r1, [r5, #16]
 8005fb0:	e7ee      	b.n	8005f90 <_printf_float+0x1c8>
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	2900      	cmp	r1, #0
 8005fb6:	dce0      	bgt.n	8005f7a <_printf_float+0x1b2>
 8005fb8:	1892      	adds	r2, r2, r2
 8005fba:	1a52      	subs	r2, r2, r1
 8005fbc:	e7dd      	b.n	8005f7a <_printf_float+0x1b2>
 8005fbe:	682a      	ldr	r2, [r5, #0]
 8005fc0:	0553      	lsls	r3, r2, #21
 8005fc2:	d408      	bmi.n	8005fd6 <_printf_float+0x20e>
 8005fc4:	692b      	ldr	r3, [r5, #16]
 8005fc6:	003a      	movs	r2, r7
 8005fc8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005fca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005fcc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005fce:	47a0      	blx	r4
 8005fd0:	3001      	adds	r0, #1
 8005fd2:	d129      	bne.n	8006028 <_printf_float+0x260>
 8005fd4:	e754      	b.n	8005e80 <_printf_float+0xb8>
 8005fd6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005fd8:	2b65      	cmp	r3, #101	@ 0x65
 8005fda:	d800      	bhi.n	8005fde <_printf_float+0x216>
 8005fdc:	e0db      	b.n	8006196 <_printf_float+0x3ce>
 8005fde:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8005fe0:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	f7fa fa31 	bl	800044c <__aeabi_dcmpeq>
 8005fea:	2800      	cmp	r0, #0
 8005fec:	d033      	beq.n	8006056 <_printf_float+0x28e>
 8005fee:	2301      	movs	r3, #1
 8005ff0:	4a37      	ldr	r2, [pc, #220]	@ (80060d0 <_printf_float+0x308>)
 8005ff2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005ff4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ff6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005ff8:	47a0      	blx	r4
 8005ffa:	3001      	adds	r0, #1
 8005ffc:	d100      	bne.n	8006000 <_printf_float+0x238>
 8005ffe:	e73f      	b.n	8005e80 <_printf_float+0xb8>
 8006000:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8006002:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006004:	42b3      	cmp	r3, r6
 8006006:	db02      	blt.n	800600e <_printf_float+0x246>
 8006008:	682b      	ldr	r3, [r5, #0]
 800600a:	07db      	lsls	r3, r3, #31
 800600c:	d50c      	bpl.n	8006028 <_printf_float+0x260>
 800600e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006010:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006012:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006014:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006016:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006018:	47a0      	blx	r4
 800601a:	2400      	movs	r4, #0
 800601c:	3001      	adds	r0, #1
 800601e:	d100      	bne.n	8006022 <_printf_float+0x25a>
 8006020:	e72e      	b.n	8005e80 <_printf_float+0xb8>
 8006022:	1e73      	subs	r3, r6, #1
 8006024:	42a3      	cmp	r3, r4
 8006026:	dc0a      	bgt.n	800603e <_printf_float+0x276>
 8006028:	682b      	ldr	r3, [r5, #0]
 800602a:	079b      	lsls	r3, r3, #30
 800602c:	d500      	bpl.n	8006030 <_printf_float+0x268>
 800602e:	e106      	b.n	800623e <_printf_float+0x476>
 8006030:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006032:	68e8      	ldr	r0, [r5, #12]
 8006034:	4298      	cmp	r0, r3
 8006036:	db00      	blt.n	800603a <_printf_float+0x272>
 8006038:	e724      	b.n	8005e84 <_printf_float+0xbc>
 800603a:	0018      	movs	r0, r3
 800603c:	e722      	b.n	8005e84 <_printf_float+0xbc>
 800603e:	002a      	movs	r2, r5
 8006040:	2301      	movs	r3, #1
 8006042:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006044:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006046:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006048:	321a      	adds	r2, #26
 800604a:	47b8      	blx	r7
 800604c:	3001      	adds	r0, #1
 800604e:	d100      	bne.n	8006052 <_printf_float+0x28a>
 8006050:	e716      	b.n	8005e80 <_printf_float+0xb8>
 8006052:	3401      	adds	r4, #1
 8006054:	e7e5      	b.n	8006022 <_printf_float+0x25a>
 8006056:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006058:	2b00      	cmp	r3, #0
 800605a:	dc3b      	bgt.n	80060d4 <_printf_float+0x30c>
 800605c:	2301      	movs	r3, #1
 800605e:	4a1c      	ldr	r2, [pc, #112]	@ (80060d0 <_printf_float+0x308>)
 8006060:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006062:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006064:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006066:	47a0      	blx	r4
 8006068:	3001      	adds	r0, #1
 800606a:	d100      	bne.n	800606e <_printf_float+0x2a6>
 800606c:	e708      	b.n	8005e80 <_printf_float+0xb8>
 800606e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8006070:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006072:	4333      	orrs	r3, r6
 8006074:	d102      	bne.n	800607c <_printf_float+0x2b4>
 8006076:	682b      	ldr	r3, [r5, #0]
 8006078:	07db      	lsls	r3, r3, #31
 800607a:	d5d5      	bpl.n	8006028 <_printf_float+0x260>
 800607c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800607e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006080:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006082:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006084:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006086:	47a0      	blx	r4
 8006088:	2300      	movs	r3, #0
 800608a:	3001      	adds	r0, #1
 800608c:	d100      	bne.n	8006090 <_printf_float+0x2c8>
 800608e:	e6f7      	b.n	8005e80 <_printf_float+0xb8>
 8006090:	930c      	str	r3, [sp, #48]	@ 0x30
 8006092:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006094:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006096:	425b      	negs	r3, r3
 8006098:	4293      	cmp	r3, r2
 800609a:	dc01      	bgt.n	80060a0 <_printf_float+0x2d8>
 800609c:	0033      	movs	r3, r6
 800609e:	e792      	b.n	8005fc6 <_printf_float+0x1fe>
 80060a0:	002a      	movs	r2, r5
 80060a2:	2301      	movs	r3, #1
 80060a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80060a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80060a8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80060aa:	321a      	adds	r2, #26
 80060ac:	47a0      	blx	r4
 80060ae:	3001      	adds	r0, #1
 80060b0:	d100      	bne.n	80060b4 <_printf_float+0x2ec>
 80060b2:	e6e5      	b.n	8005e80 <_printf_float+0xb8>
 80060b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80060b6:	3301      	adds	r3, #1
 80060b8:	e7ea      	b.n	8006090 <_printf_float+0x2c8>
 80060ba:	46c0      	nop			@ (mov r8, r8)
 80060bc:	7fefffff 	.word	0x7fefffff
 80060c0:	080092ec 	.word	0x080092ec
 80060c4:	080092e8 	.word	0x080092e8
 80060c8:	080092f4 	.word	0x080092f4
 80060cc:	080092f0 	.word	0x080092f0
 80060d0:	080092f8 	.word	0x080092f8
 80060d4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80060d6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80060d8:	930c      	str	r3, [sp, #48]	@ 0x30
 80060da:	429e      	cmp	r6, r3
 80060dc:	dd00      	ble.n	80060e0 <_printf_float+0x318>
 80060de:	001e      	movs	r6, r3
 80060e0:	2e00      	cmp	r6, #0
 80060e2:	dc31      	bgt.n	8006148 <_printf_float+0x380>
 80060e4:	43f3      	mvns	r3, r6
 80060e6:	2400      	movs	r4, #0
 80060e8:	17db      	asrs	r3, r3, #31
 80060ea:	4033      	ands	r3, r6
 80060ec:	930e      	str	r3, [sp, #56]	@ 0x38
 80060ee:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80060f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060f2:	1af3      	subs	r3, r6, r3
 80060f4:	42a3      	cmp	r3, r4
 80060f6:	dc30      	bgt.n	800615a <_printf_float+0x392>
 80060f8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80060fa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80060fc:	429a      	cmp	r2, r3
 80060fe:	dc38      	bgt.n	8006172 <_printf_float+0x3aa>
 8006100:	682b      	ldr	r3, [r5, #0]
 8006102:	07db      	lsls	r3, r3, #31
 8006104:	d435      	bmi.n	8006172 <_printf_float+0x3aa>
 8006106:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8006108:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800610a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800610c:	1b9b      	subs	r3, r3, r6
 800610e:	1b14      	subs	r4, r2, r4
 8006110:	429c      	cmp	r4, r3
 8006112:	dd00      	ble.n	8006116 <_printf_float+0x34e>
 8006114:	001c      	movs	r4, r3
 8006116:	2c00      	cmp	r4, #0
 8006118:	dc34      	bgt.n	8006184 <_printf_float+0x3bc>
 800611a:	43e3      	mvns	r3, r4
 800611c:	2600      	movs	r6, #0
 800611e:	17db      	asrs	r3, r3, #31
 8006120:	401c      	ands	r4, r3
 8006122:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006124:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	1b1b      	subs	r3, r3, r4
 800612a:	42b3      	cmp	r3, r6
 800612c:	dc00      	bgt.n	8006130 <_printf_float+0x368>
 800612e:	e77b      	b.n	8006028 <_printf_float+0x260>
 8006130:	002a      	movs	r2, r5
 8006132:	2301      	movs	r3, #1
 8006134:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006136:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006138:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800613a:	321a      	adds	r2, #26
 800613c:	47b8      	blx	r7
 800613e:	3001      	adds	r0, #1
 8006140:	d100      	bne.n	8006144 <_printf_float+0x37c>
 8006142:	e69d      	b.n	8005e80 <_printf_float+0xb8>
 8006144:	3601      	adds	r6, #1
 8006146:	e7ec      	b.n	8006122 <_printf_float+0x35a>
 8006148:	0033      	movs	r3, r6
 800614a:	003a      	movs	r2, r7
 800614c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800614e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006150:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006152:	47a0      	blx	r4
 8006154:	3001      	adds	r0, #1
 8006156:	d1c5      	bne.n	80060e4 <_printf_float+0x31c>
 8006158:	e692      	b.n	8005e80 <_printf_float+0xb8>
 800615a:	002a      	movs	r2, r5
 800615c:	2301      	movs	r3, #1
 800615e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006160:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006162:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006164:	321a      	adds	r2, #26
 8006166:	47b0      	blx	r6
 8006168:	3001      	adds	r0, #1
 800616a:	d100      	bne.n	800616e <_printf_float+0x3a6>
 800616c:	e688      	b.n	8005e80 <_printf_float+0xb8>
 800616e:	3401      	adds	r4, #1
 8006170:	e7bd      	b.n	80060ee <_printf_float+0x326>
 8006172:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006174:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006176:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006178:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800617a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800617c:	47a0      	blx	r4
 800617e:	3001      	adds	r0, #1
 8006180:	d1c1      	bne.n	8006106 <_printf_float+0x33e>
 8006182:	e67d      	b.n	8005e80 <_printf_float+0xb8>
 8006184:	19ba      	adds	r2, r7, r6
 8006186:	0023      	movs	r3, r4
 8006188:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800618a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800618c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800618e:	47b0      	blx	r6
 8006190:	3001      	adds	r0, #1
 8006192:	d1c2      	bne.n	800611a <_printf_float+0x352>
 8006194:	e674      	b.n	8005e80 <_printf_float+0xb8>
 8006196:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006198:	930c      	str	r3, [sp, #48]	@ 0x30
 800619a:	2b01      	cmp	r3, #1
 800619c:	dc02      	bgt.n	80061a4 <_printf_float+0x3dc>
 800619e:	2301      	movs	r3, #1
 80061a0:	421a      	tst	r2, r3
 80061a2:	d039      	beq.n	8006218 <_printf_float+0x450>
 80061a4:	2301      	movs	r3, #1
 80061a6:	003a      	movs	r2, r7
 80061a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80061aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80061ac:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80061ae:	47b0      	blx	r6
 80061b0:	3001      	adds	r0, #1
 80061b2:	d100      	bne.n	80061b6 <_printf_float+0x3ee>
 80061b4:	e664      	b.n	8005e80 <_printf_float+0xb8>
 80061b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80061b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80061ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80061bc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80061be:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80061c0:	47b0      	blx	r6
 80061c2:	3001      	adds	r0, #1
 80061c4:	d100      	bne.n	80061c8 <_printf_float+0x400>
 80061c6:	e65b      	b.n	8005e80 <_printf_float+0xb8>
 80061c8:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80061ca:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80061cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80061ce:	2200      	movs	r2, #0
 80061d0:	3b01      	subs	r3, #1
 80061d2:	930c      	str	r3, [sp, #48]	@ 0x30
 80061d4:	2300      	movs	r3, #0
 80061d6:	f7fa f939 	bl	800044c <__aeabi_dcmpeq>
 80061da:	2800      	cmp	r0, #0
 80061dc:	d11a      	bne.n	8006214 <_printf_float+0x44c>
 80061de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80061e0:	1c7a      	adds	r2, r7, #1
 80061e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80061e4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80061e6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80061e8:	47b0      	blx	r6
 80061ea:	3001      	adds	r0, #1
 80061ec:	d10e      	bne.n	800620c <_printf_float+0x444>
 80061ee:	e647      	b.n	8005e80 <_printf_float+0xb8>
 80061f0:	002a      	movs	r2, r5
 80061f2:	2301      	movs	r3, #1
 80061f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80061f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80061f8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80061fa:	321a      	adds	r2, #26
 80061fc:	47b8      	blx	r7
 80061fe:	3001      	adds	r0, #1
 8006200:	d100      	bne.n	8006204 <_printf_float+0x43c>
 8006202:	e63d      	b.n	8005e80 <_printf_float+0xb8>
 8006204:	3601      	adds	r6, #1
 8006206:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006208:	429e      	cmp	r6, r3
 800620a:	dbf1      	blt.n	80061f0 <_printf_float+0x428>
 800620c:	002a      	movs	r2, r5
 800620e:	0023      	movs	r3, r4
 8006210:	3250      	adds	r2, #80	@ 0x50
 8006212:	e6d9      	b.n	8005fc8 <_printf_float+0x200>
 8006214:	2600      	movs	r6, #0
 8006216:	e7f6      	b.n	8006206 <_printf_float+0x43e>
 8006218:	003a      	movs	r2, r7
 800621a:	e7e2      	b.n	80061e2 <_printf_float+0x41a>
 800621c:	002a      	movs	r2, r5
 800621e:	2301      	movs	r3, #1
 8006220:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006222:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006224:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006226:	3219      	adds	r2, #25
 8006228:	47b0      	blx	r6
 800622a:	3001      	adds	r0, #1
 800622c:	d100      	bne.n	8006230 <_printf_float+0x468>
 800622e:	e627      	b.n	8005e80 <_printf_float+0xb8>
 8006230:	3401      	adds	r4, #1
 8006232:	68eb      	ldr	r3, [r5, #12]
 8006234:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006236:	1a9b      	subs	r3, r3, r2
 8006238:	42a3      	cmp	r3, r4
 800623a:	dcef      	bgt.n	800621c <_printf_float+0x454>
 800623c:	e6f8      	b.n	8006030 <_printf_float+0x268>
 800623e:	2400      	movs	r4, #0
 8006240:	e7f7      	b.n	8006232 <_printf_float+0x46a>
 8006242:	46c0      	nop			@ (mov r8, r8)

08006244 <_printf_common>:
 8006244:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006246:	0016      	movs	r6, r2
 8006248:	9301      	str	r3, [sp, #4]
 800624a:	688a      	ldr	r2, [r1, #8]
 800624c:	690b      	ldr	r3, [r1, #16]
 800624e:	000c      	movs	r4, r1
 8006250:	9000      	str	r0, [sp, #0]
 8006252:	4293      	cmp	r3, r2
 8006254:	da00      	bge.n	8006258 <_printf_common+0x14>
 8006256:	0013      	movs	r3, r2
 8006258:	0022      	movs	r2, r4
 800625a:	6033      	str	r3, [r6, #0]
 800625c:	3243      	adds	r2, #67	@ 0x43
 800625e:	7812      	ldrb	r2, [r2, #0]
 8006260:	2a00      	cmp	r2, #0
 8006262:	d001      	beq.n	8006268 <_printf_common+0x24>
 8006264:	3301      	adds	r3, #1
 8006266:	6033      	str	r3, [r6, #0]
 8006268:	6823      	ldr	r3, [r4, #0]
 800626a:	069b      	lsls	r3, r3, #26
 800626c:	d502      	bpl.n	8006274 <_printf_common+0x30>
 800626e:	6833      	ldr	r3, [r6, #0]
 8006270:	3302      	adds	r3, #2
 8006272:	6033      	str	r3, [r6, #0]
 8006274:	6822      	ldr	r2, [r4, #0]
 8006276:	2306      	movs	r3, #6
 8006278:	0015      	movs	r5, r2
 800627a:	401d      	ands	r5, r3
 800627c:	421a      	tst	r2, r3
 800627e:	d027      	beq.n	80062d0 <_printf_common+0x8c>
 8006280:	0023      	movs	r3, r4
 8006282:	3343      	adds	r3, #67	@ 0x43
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	1e5a      	subs	r2, r3, #1
 8006288:	4193      	sbcs	r3, r2
 800628a:	6822      	ldr	r2, [r4, #0]
 800628c:	0692      	lsls	r2, r2, #26
 800628e:	d430      	bmi.n	80062f2 <_printf_common+0xae>
 8006290:	0022      	movs	r2, r4
 8006292:	9901      	ldr	r1, [sp, #4]
 8006294:	9800      	ldr	r0, [sp, #0]
 8006296:	9d08      	ldr	r5, [sp, #32]
 8006298:	3243      	adds	r2, #67	@ 0x43
 800629a:	47a8      	blx	r5
 800629c:	3001      	adds	r0, #1
 800629e:	d025      	beq.n	80062ec <_printf_common+0xa8>
 80062a0:	2206      	movs	r2, #6
 80062a2:	6823      	ldr	r3, [r4, #0]
 80062a4:	2500      	movs	r5, #0
 80062a6:	4013      	ands	r3, r2
 80062a8:	2b04      	cmp	r3, #4
 80062aa:	d105      	bne.n	80062b8 <_printf_common+0x74>
 80062ac:	6833      	ldr	r3, [r6, #0]
 80062ae:	68e5      	ldr	r5, [r4, #12]
 80062b0:	1aed      	subs	r5, r5, r3
 80062b2:	43eb      	mvns	r3, r5
 80062b4:	17db      	asrs	r3, r3, #31
 80062b6:	401d      	ands	r5, r3
 80062b8:	68a3      	ldr	r3, [r4, #8]
 80062ba:	6922      	ldr	r2, [r4, #16]
 80062bc:	4293      	cmp	r3, r2
 80062be:	dd01      	ble.n	80062c4 <_printf_common+0x80>
 80062c0:	1a9b      	subs	r3, r3, r2
 80062c2:	18ed      	adds	r5, r5, r3
 80062c4:	2600      	movs	r6, #0
 80062c6:	42b5      	cmp	r5, r6
 80062c8:	d120      	bne.n	800630c <_printf_common+0xc8>
 80062ca:	2000      	movs	r0, #0
 80062cc:	e010      	b.n	80062f0 <_printf_common+0xac>
 80062ce:	3501      	adds	r5, #1
 80062d0:	68e3      	ldr	r3, [r4, #12]
 80062d2:	6832      	ldr	r2, [r6, #0]
 80062d4:	1a9b      	subs	r3, r3, r2
 80062d6:	42ab      	cmp	r3, r5
 80062d8:	ddd2      	ble.n	8006280 <_printf_common+0x3c>
 80062da:	0022      	movs	r2, r4
 80062dc:	2301      	movs	r3, #1
 80062de:	9901      	ldr	r1, [sp, #4]
 80062e0:	9800      	ldr	r0, [sp, #0]
 80062e2:	9f08      	ldr	r7, [sp, #32]
 80062e4:	3219      	adds	r2, #25
 80062e6:	47b8      	blx	r7
 80062e8:	3001      	adds	r0, #1
 80062ea:	d1f0      	bne.n	80062ce <_printf_common+0x8a>
 80062ec:	2001      	movs	r0, #1
 80062ee:	4240      	negs	r0, r0
 80062f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80062f2:	2030      	movs	r0, #48	@ 0x30
 80062f4:	18e1      	adds	r1, r4, r3
 80062f6:	3143      	adds	r1, #67	@ 0x43
 80062f8:	7008      	strb	r0, [r1, #0]
 80062fa:	0021      	movs	r1, r4
 80062fc:	1c5a      	adds	r2, r3, #1
 80062fe:	3145      	adds	r1, #69	@ 0x45
 8006300:	7809      	ldrb	r1, [r1, #0]
 8006302:	18a2      	adds	r2, r4, r2
 8006304:	3243      	adds	r2, #67	@ 0x43
 8006306:	3302      	adds	r3, #2
 8006308:	7011      	strb	r1, [r2, #0]
 800630a:	e7c1      	b.n	8006290 <_printf_common+0x4c>
 800630c:	0022      	movs	r2, r4
 800630e:	2301      	movs	r3, #1
 8006310:	9901      	ldr	r1, [sp, #4]
 8006312:	9800      	ldr	r0, [sp, #0]
 8006314:	9f08      	ldr	r7, [sp, #32]
 8006316:	321a      	adds	r2, #26
 8006318:	47b8      	blx	r7
 800631a:	3001      	adds	r0, #1
 800631c:	d0e6      	beq.n	80062ec <_printf_common+0xa8>
 800631e:	3601      	adds	r6, #1
 8006320:	e7d1      	b.n	80062c6 <_printf_common+0x82>
	...

08006324 <_printf_i>:
 8006324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006326:	b08b      	sub	sp, #44	@ 0x2c
 8006328:	9206      	str	r2, [sp, #24]
 800632a:	000a      	movs	r2, r1
 800632c:	3243      	adds	r2, #67	@ 0x43
 800632e:	9307      	str	r3, [sp, #28]
 8006330:	9005      	str	r0, [sp, #20]
 8006332:	9203      	str	r2, [sp, #12]
 8006334:	7e0a      	ldrb	r2, [r1, #24]
 8006336:	000c      	movs	r4, r1
 8006338:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800633a:	2a78      	cmp	r2, #120	@ 0x78
 800633c:	d809      	bhi.n	8006352 <_printf_i+0x2e>
 800633e:	2a62      	cmp	r2, #98	@ 0x62
 8006340:	d80b      	bhi.n	800635a <_printf_i+0x36>
 8006342:	2a00      	cmp	r2, #0
 8006344:	d100      	bne.n	8006348 <_printf_i+0x24>
 8006346:	e0ba      	b.n	80064be <_printf_i+0x19a>
 8006348:	497a      	ldr	r1, [pc, #488]	@ (8006534 <_printf_i+0x210>)
 800634a:	9104      	str	r1, [sp, #16]
 800634c:	2a58      	cmp	r2, #88	@ 0x58
 800634e:	d100      	bne.n	8006352 <_printf_i+0x2e>
 8006350:	e08e      	b.n	8006470 <_printf_i+0x14c>
 8006352:	0025      	movs	r5, r4
 8006354:	3542      	adds	r5, #66	@ 0x42
 8006356:	702a      	strb	r2, [r5, #0]
 8006358:	e022      	b.n	80063a0 <_printf_i+0x7c>
 800635a:	0010      	movs	r0, r2
 800635c:	3863      	subs	r0, #99	@ 0x63
 800635e:	2815      	cmp	r0, #21
 8006360:	d8f7      	bhi.n	8006352 <_printf_i+0x2e>
 8006362:	f7f9 fee3 	bl	800012c <__gnu_thumb1_case_shi>
 8006366:	0016      	.short	0x0016
 8006368:	fff6001f 	.word	0xfff6001f
 800636c:	fff6fff6 	.word	0xfff6fff6
 8006370:	001ffff6 	.word	0x001ffff6
 8006374:	fff6fff6 	.word	0xfff6fff6
 8006378:	fff6fff6 	.word	0xfff6fff6
 800637c:	0036009f 	.word	0x0036009f
 8006380:	fff6007e 	.word	0xfff6007e
 8006384:	00b0fff6 	.word	0x00b0fff6
 8006388:	0036fff6 	.word	0x0036fff6
 800638c:	fff6fff6 	.word	0xfff6fff6
 8006390:	0082      	.short	0x0082
 8006392:	0025      	movs	r5, r4
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	3542      	adds	r5, #66	@ 0x42
 8006398:	1d11      	adds	r1, r2, #4
 800639a:	6019      	str	r1, [r3, #0]
 800639c:	6813      	ldr	r3, [r2, #0]
 800639e:	702b      	strb	r3, [r5, #0]
 80063a0:	2301      	movs	r3, #1
 80063a2:	e09e      	b.n	80064e2 <_printf_i+0x1be>
 80063a4:	6818      	ldr	r0, [r3, #0]
 80063a6:	6809      	ldr	r1, [r1, #0]
 80063a8:	1d02      	adds	r2, r0, #4
 80063aa:	060d      	lsls	r5, r1, #24
 80063ac:	d50b      	bpl.n	80063c6 <_printf_i+0xa2>
 80063ae:	6806      	ldr	r6, [r0, #0]
 80063b0:	601a      	str	r2, [r3, #0]
 80063b2:	2e00      	cmp	r6, #0
 80063b4:	da03      	bge.n	80063be <_printf_i+0x9a>
 80063b6:	232d      	movs	r3, #45	@ 0x2d
 80063b8:	9a03      	ldr	r2, [sp, #12]
 80063ba:	4276      	negs	r6, r6
 80063bc:	7013      	strb	r3, [r2, #0]
 80063be:	4b5d      	ldr	r3, [pc, #372]	@ (8006534 <_printf_i+0x210>)
 80063c0:	270a      	movs	r7, #10
 80063c2:	9304      	str	r3, [sp, #16]
 80063c4:	e018      	b.n	80063f8 <_printf_i+0xd4>
 80063c6:	6806      	ldr	r6, [r0, #0]
 80063c8:	601a      	str	r2, [r3, #0]
 80063ca:	0649      	lsls	r1, r1, #25
 80063cc:	d5f1      	bpl.n	80063b2 <_printf_i+0x8e>
 80063ce:	b236      	sxth	r6, r6
 80063d0:	e7ef      	b.n	80063b2 <_printf_i+0x8e>
 80063d2:	6808      	ldr	r0, [r1, #0]
 80063d4:	6819      	ldr	r1, [r3, #0]
 80063d6:	c940      	ldmia	r1!, {r6}
 80063d8:	0605      	lsls	r5, r0, #24
 80063da:	d402      	bmi.n	80063e2 <_printf_i+0xbe>
 80063dc:	0640      	lsls	r0, r0, #25
 80063de:	d500      	bpl.n	80063e2 <_printf_i+0xbe>
 80063e0:	b2b6      	uxth	r6, r6
 80063e2:	6019      	str	r1, [r3, #0]
 80063e4:	4b53      	ldr	r3, [pc, #332]	@ (8006534 <_printf_i+0x210>)
 80063e6:	270a      	movs	r7, #10
 80063e8:	9304      	str	r3, [sp, #16]
 80063ea:	2a6f      	cmp	r2, #111	@ 0x6f
 80063ec:	d100      	bne.n	80063f0 <_printf_i+0xcc>
 80063ee:	3f02      	subs	r7, #2
 80063f0:	0023      	movs	r3, r4
 80063f2:	2200      	movs	r2, #0
 80063f4:	3343      	adds	r3, #67	@ 0x43
 80063f6:	701a      	strb	r2, [r3, #0]
 80063f8:	6863      	ldr	r3, [r4, #4]
 80063fa:	60a3      	str	r3, [r4, #8]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	db06      	blt.n	800640e <_printf_i+0xea>
 8006400:	2104      	movs	r1, #4
 8006402:	6822      	ldr	r2, [r4, #0]
 8006404:	9d03      	ldr	r5, [sp, #12]
 8006406:	438a      	bics	r2, r1
 8006408:	6022      	str	r2, [r4, #0]
 800640a:	4333      	orrs	r3, r6
 800640c:	d00c      	beq.n	8006428 <_printf_i+0x104>
 800640e:	9d03      	ldr	r5, [sp, #12]
 8006410:	0030      	movs	r0, r6
 8006412:	0039      	movs	r1, r7
 8006414:	f7f9 ff1a 	bl	800024c <__aeabi_uidivmod>
 8006418:	9b04      	ldr	r3, [sp, #16]
 800641a:	3d01      	subs	r5, #1
 800641c:	5c5b      	ldrb	r3, [r3, r1]
 800641e:	702b      	strb	r3, [r5, #0]
 8006420:	0033      	movs	r3, r6
 8006422:	0006      	movs	r6, r0
 8006424:	429f      	cmp	r7, r3
 8006426:	d9f3      	bls.n	8006410 <_printf_i+0xec>
 8006428:	2f08      	cmp	r7, #8
 800642a:	d109      	bne.n	8006440 <_printf_i+0x11c>
 800642c:	6823      	ldr	r3, [r4, #0]
 800642e:	07db      	lsls	r3, r3, #31
 8006430:	d506      	bpl.n	8006440 <_printf_i+0x11c>
 8006432:	6862      	ldr	r2, [r4, #4]
 8006434:	6923      	ldr	r3, [r4, #16]
 8006436:	429a      	cmp	r2, r3
 8006438:	dc02      	bgt.n	8006440 <_printf_i+0x11c>
 800643a:	2330      	movs	r3, #48	@ 0x30
 800643c:	3d01      	subs	r5, #1
 800643e:	702b      	strb	r3, [r5, #0]
 8006440:	9b03      	ldr	r3, [sp, #12]
 8006442:	1b5b      	subs	r3, r3, r5
 8006444:	6123      	str	r3, [r4, #16]
 8006446:	9b07      	ldr	r3, [sp, #28]
 8006448:	0021      	movs	r1, r4
 800644a:	9300      	str	r3, [sp, #0]
 800644c:	9805      	ldr	r0, [sp, #20]
 800644e:	9b06      	ldr	r3, [sp, #24]
 8006450:	aa09      	add	r2, sp, #36	@ 0x24
 8006452:	f7ff fef7 	bl	8006244 <_printf_common>
 8006456:	3001      	adds	r0, #1
 8006458:	d148      	bne.n	80064ec <_printf_i+0x1c8>
 800645a:	2001      	movs	r0, #1
 800645c:	4240      	negs	r0, r0
 800645e:	b00b      	add	sp, #44	@ 0x2c
 8006460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006462:	2220      	movs	r2, #32
 8006464:	6809      	ldr	r1, [r1, #0]
 8006466:	430a      	orrs	r2, r1
 8006468:	6022      	str	r2, [r4, #0]
 800646a:	2278      	movs	r2, #120	@ 0x78
 800646c:	4932      	ldr	r1, [pc, #200]	@ (8006538 <_printf_i+0x214>)
 800646e:	9104      	str	r1, [sp, #16]
 8006470:	0021      	movs	r1, r4
 8006472:	3145      	adds	r1, #69	@ 0x45
 8006474:	700a      	strb	r2, [r1, #0]
 8006476:	6819      	ldr	r1, [r3, #0]
 8006478:	6822      	ldr	r2, [r4, #0]
 800647a:	c940      	ldmia	r1!, {r6}
 800647c:	0610      	lsls	r0, r2, #24
 800647e:	d402      	bmi.n	8006486 <_printf_i+0x162>
 8006480:	0650      	lsls	r0, r2, #25
 8006482:	d500      	bpl.n	8006486 <_printf_i+0x162>
 8006484:	b2b6      	uxth	r6, r6
 8006486:	6019      	str	r1, [r3, #0]
 8006488:	07d3      	lsls	r3, r2, #31
 800648a:	d502      	bpl.n	8006492 <_printf_i+0x16e>
 800648c:	2320      	movs	r3, #32
 800648e:	4313      	orrs	r3, r2
 8006490:	6023      	str	r3, [r4, #0]
 8006492:	2e00      	cmp	r6, #0
 8006494:	d001      	beq.n	800649a <_printf_i+0x176>
 8006496:	2710      	movs	r7, #16
 8006498:	e7aa      	b.n	80063f0 <_printf_i+0xcc>
 800649a:	2220      	movs	r2, #32
 800649c:	6823      	ldr	r3, [r4, #0]
 800649e:	4393      	bics	r3, r2
 80064a0:	6023      	str	r3, [r4, #0]
 80064a2:	e7f8      	b.n	8006496 <_printf_i+0x172>
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	680d      	ldr	r5, [r1, #0]
 80064a8:	1d10      	adds	r0, r2, #4
 80064aa:	6949      	ldr	r1, [r1, #20]
 80064ac:	6018      	str	r0, [r3, #0]
 80064ae:	6813      	ldr	r3, [r2, #0]
 80064b0:	062e      	lsls	r6, r5, #24
 80064b2:	d501      	bpl.n	80064b8 <_printf_i+0x194>
 80064b4:	6019      	str	r1, [r3, #0]
 80064b6:	e002      	b.n	80064be <_printf_i+0x19a>
 80064b8:	066d      	lsls	r5, r5, #25
 80064ba:	d5fb      	bpl.n	80064b4 <_printf_i+0x190>
 80064bc:	8019      	strh	r1, [r3, #0]
 80064be:	2300      	movs	r3, #0
 80064c0:	9d03      	ldr	r5, [sp, #12]
 80064c2:	6123      	str	r3, [r4, #16]
 80064c4:	e7bf      	b.n	8006446 <_printf_i+0x122>
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	1d11      	adds	r1, r2, #4
 80064ca:	6019      	str	r1, [r3, #0]
 80064cc:	6815      	ldr	r5, [r2, #0]
 80064ce:	2100      	movs	r1, #0
 80064d0:	0028      	movs	r0, r5
 80064d2:	6862      	ldr	r2, [r4, #4]
 80064d4:	f000 fb45 	bl	8006b62 <memchr>
 80064d8:	2800      	cmp	r0, #0
 80064da:	d001      	beq.n	80064e0 <_printf_i+0x1bc>
 80064dc:	1b40      	subs	r0, r0, r5
 80064de:	6060      	str	r0, [r4, #4]
 80064e0:	6863      	ldr	r3, [r4, #4]
 80064e2:	6123      	str	r3, [r4, #16]
 80064e4:	2300      	movs	r3, #0
 80064e6:	9a03      	ldr	r2, [sp, #12]
 80064e8:	7013      	strb	r3, [r2, #0]
 80064ea:	e7ac      	b.n	8006446 <_printf_i+0x122>
 80064ec:	002a      	movs	r2, r5
 80064ee:	6923      	ldr	r3, [r4, #16]
 80064f0:	9906      	ldr	r1, [sp, #24]
 80064f2:	9805      	ldr	r0, [sp, #20]
 80064f4:	9d07      	ldr	r5, [sp, #28]
 80064f6:	47a8      	blx	r5
 80064f8:	3001      	adds	r0, #1
 80064fa:	d0ae      	beq.n	800645a <_printf_i+0x136>
 80064fc:	6823      	ldr	r3, [r4, #0]
 80064fe:	079b      	lsls	r3, r3, #30
 8006500:	d415      	bmi.n	800652e <_printf_i+0x20a>
 8006502:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006504:	68e0      	ldr	r0, [r4, #12]
 8006506:	4298      	cmp	r0, r3
 8006508:	daa9      	bge.n	800645e <_printf_i+0x13a>
 800650a:	0018      	movs	r0, r3
 800650c:	e7a7      	b.n	800645e <_printf_i+0x13a>
 800650e:	0022      	movs	r2, r4
 8006510:	2301      	movs	r3, #1
 8006512:	9906      	ldr	r1, [sp, #24]
 8006514:	9805      	ldr	r0, [sp, #20]
 8006516:	9e07      	ldr	r6, [sp, #28]
 8006518:	3219      	adds	r2, #25
 800651a:	47b0      	blx	r6
 800651c:	3001      	adds	r0, #1
 800651e:	d09c      	beq.n	800645a <_printf_i+0x136>
 8006520:	3501      	adds	r5, #1
 8006522:	68e3      	ldr	r3, [r4, #12]
 8006524:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006526:	1a9b      	subs	r3, r3, r2
 8006528:	42ab      	cmp	r3, r5
 800652a:	dcf0      	bgt.n	800650e <_printf_i+0x1ea>
 800652c:	e7e9      	b.n	8006502 <_printf_i+0x1de>
 800652e:	2500      	movs	r5, #0
 8006530:	e7f7      	b.n	8006522 <_printf_i+0x1fe>
 8006532:	46c0      	nop			@ (mov r8, r8)
 8006534:	080092fa 	.word	0x080092fa
 8006538:	0800930b 	.word	0x0800930b

0800653c <std>:
 800653c:	2300      	movs	r3, #0
 800653e:	b510      	push	{r4, lr}
 8006540:	0004      	movs	r4, r0
 8006542:	6003      	str	r3, [r0, #0]
 8006544:	6043      	str	r3, [r0, #4]
 8006546:	6083      	str	r3, [r0, #8]
 8006548:	8181      	strh	r1, [r0, #12]
 800654a:	6643      	str	r3, [r0, #100]	@ 0x64
 800654c:	81c2      	strh	r2, [r0, #14]
 800654e:	6103      	str	r3, [r0, #16]
 8006550:	6143      	str	r3, [r0, #20]
 8006552:	6183      	str	r3, [r0, #24]
 8006554:	0019      	movs	r1, r3
 8006556:	2208      	movs	r2, #8
 8006558:	305c      	adds	r0, #92	@ 0x5c
 800655a:	f000 fa1f 	bl	800699c <memset>
 800655e:	4b0b      	ldr	r3, [pc, #44]	@ (800658c <std+0x50>)
 8006560:	6224      	str	r4, [r4, #32]
 8006562:	6263      	str	r3, [r4, #36]	@ 0x24
 8006564:	4b0a      	ldr	r3, [pc, #40]	@ (8006590 <std+0x54>)
 8006566:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006568:	4b0a      	ldr	r3, [pc, #40]	@ (8006594 <std+0x58>)
 800656a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800656c:	4b0a      	ldr	r3, [pc, #40]	@ (8006598 <std+0x5c>)
 800656e:	6323      	str	r3, [r4, #48]	@ 0x30
 8006570:	4b0a      	ldr	r3, [pc, #40]	@ (800659c <std+0x60>)
 8006572:	429c      	cmp	r4, r3
 8006574:	d005      	beq.n	8006582 <std+0x46>
 8006576:	4b0a      	ldr	r3, [pc, #40]	@ (80065a0 <std+0x64>)
 8006578:	429c      	cmp	r4, r3
 800657a:	d002      	beq.n	8006582 <std+0x46>
 800657c:	4b09      	ldr	r3, [pc, #36]	@ (80065a4 <std+0x68>)
 800657e:	429c      	cmp	r4, r3
 8006580:	d103      	bne.n	800658a <std+0x4e>
 8006582:	0020      	movs	r0, r4
 8006584:	3058      	adds	r0, #88	@ 0x58
 8006586:	f000 fae9 	bl	8006b5c <__retarget_lock_init_recursive>
 800658a:	bd10      	pop	{r4, pc}
 800658c:	080067c5 	.word	0x080067c5
 8006590:	080067ed 	.word	0x080067ed
 8006594:	08006825 	.word	0x08006825
 8006598:	08006851 	.word	0x08006851
 800659c:	2000048c 	.word	0x2000048c
 80065a0:	200004f4 	.word	0x200004f4
 80065a4:	2000055c 	.word	0x2000055c

080065a8 <stdio_exit_handler>:
 80065a8:	b510      	push	{r4, lr}
 80065aa:	4a03      	ldr	r2, [pc, #12]	@ (80065b8 <stdio_exit_handler+0x10>)
 80065ac:	4903      	ldr	r1, [pc, #12]	@ (80065bc <stdio_exit_handler+0x14>)
 80065ae:	4804      	ldr	r0, [pc, #16]	@ (80065c0 <stdio_exit_handler+0x18>)
 80065b0:	f000 f87c 	bl	80066ac <_fwalk_sglue>
 80065b4:	bd10      	pop	{r4, pc}
 80065b6:	46c0      	nop			@ (mov r8, r8)
 80065b8:	20000114 	.word	0x20000114
 80065bc:	080083d5 	.word	0x080083d5
 80065c0:	20000124 	.word	0x20000124

080065c4 <cleanup_stdio>:
 80065c4:	6841      	ldr	r1, [r0, #4]
 80065c6:	4b0b      	ldr	r3, [pc, #44]	@ (80065f4 <cleanup_stdio+0x30>)
 80065c8:	b510      	push	{r4, lr}
 80065ca:	0004      	movs	r4, r0
 80065cc:	4299      	cmp	r1, r3
 80065ce:	d001      	beq.n	80065d4 <cleanup_stdio+0x10>
 80065d0:	f001 ff00 	bl	80083d4 <_fflush_r>
 80065d4:	68a1      	ldr	r1, [r4, #8]
 80065d6:	4b08      	ldr	r3, [pc, #32]	@ (80065f8 <cleanup_stdio+0x34>)
 80065d8:	4299      	cmp	r1, r3
 80065da:	d002      	beq.n	80065e2 <cleanup_stdio+0x1e>
 80065dc:	0020      	movs	r0, r4
 80065de:	f001 fef9 	bl	80083d4 <_fflush_r>
 80065e2:	68e1      	ldr	r1, [r4, #12]
 80065e4:	4b05      	ldr	r3, [pc, #20]	@ (80065fc <cleanup_stdio+0x38>)
 80065e6:	4299      	cmp	r1, r3
 80065e8:	d002      	beq.n	80065f0 <cleanup_stdio+0x2c>
 80065ea:	0020      	movs	r0, r4
 80065ec:	f001 fef2 	bl	80083d4 <_fflush_r>
 80065f0:	bd10      	pop	{r4, pc}
 80065f2:	46c0      	nop			@ (mov r8, r8)
 80065f4:	2000048c 	.word	0x2000048c
 80065f8:	200004f4 	.word	0x200004f4
 80065fc:	2000055c 	.word	0x2000055c

08006600 <global_stdio_init.part.0>:
 8006600:	b510      	push	{r4, lr}
 8006602:	4b09      	ldr	r3, [pc, #36]	@ (8006628 <global_stdio_init.part.0+0x28>)
 8006604:	4a09      	ldr	r2, [pc, #36]	@ (800662c <global_stdio_init.part.0+0x2c>)
 8006606:	2104      	movs	r1, #4
 8006608:	601a      	str	r2, [r3, #0]
 800660a:	4809      	ldr	r0, [pc, #36]	@ (8006630 <global_stdio_init.part.0+0x30>)
 800660c:	2200      	movs	r2, #0
 800660e:	f7ff ff95 	bl	800653c <std>
 8006612:	2201      	movs	r2, #1
 8006614:	2109      	movs	r1, #9
 8006616:	4807      	ldr	r0, [pc, #28]	@ (8006634 <global_stdio_init.part.0+0x34>)
 8006618:	f7ff ff90 	bl	800653c <std>
 800661c:	2202      	movs	r2, #2
 800661e:	2112      	movs	r1, #18
 8006620:	4805      	ldr	r0, [pc, #20]	@ (8006638 <global_stdio_init.part.0+0x38>)
 8006622:	f7ff ff8b 	bl	800653c <std>
 8006626:	bd10      	pop	{r4, pc}
 8006628:	200005c4 	.word	0x200005c4
 800662c:	080065a9 	.word	0x080065a9
 8006630:	2000048c 	.word	0x2000048c
 8006634:	200004f4 	.word	0x200004f4
 8006638:	2000055c 	.word	0x2000055c

0800663c <__sfp_lock_acquire>:
 800663c:	b510      	push	{r4, lr}
 800663e:	4802      	ldr	r0, [pc, #8]	@ (8006648 <__sfp_lock_acquire+0xc>)
 8006640:	f000 fa8d 	bl	8006b5e <__retarget_lock_acquire_recursive>
 8006644:	bd10      	pop	{r4, pc}
 8006646:	46c0      	nop			@ (mov r8, r8)
 8006648:	200005cd 	.word	0x200005cd

0800664c <__sfp_lock_release>:
 800664c:	b510      	push	{r4, lr}
 800664e:	4802      	ldr	r0, [pc, #8]	@ (8006658 <__sfp_lock_release+0xc>)
 8006650:	f000 fa86 	bl	8006b60 <__retarget_lock_release_recursive>
 8006654:	bd10      	pop	{r4, pc}
 8006656:	46c0      	nop			@ (mov r8, r8)
 8006658:	200005cd 	.word	0x200005cd

0800665c <__sinit>:
 800665c:	b510      	push	{r4, lr}
 800665e:	0004      	movs	r4, r0
 8006660:	f7ff ffec 	bl	800663c <__sfp_lock_acquire>
 8006664:	6a23      	ldr	r3, [r4, #32]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d002      	beq.n	8006670 <__sinit+0x14>
 800666a:	f7ff ffef 	bl	800664c <__sfp_lock_release>
 800666e:	bd10      	pop	{r4, pc}
 8006670:	4b04      	ldr	r3, [pc, #16]	@ (8006684 <__sinit+0x28>)
 8006672:	6223      	str	r3, [r4, #32]
 8006674:	4b04      	ldr	r3, [pc, #16]	@ (8006688 <__sinit+0x2c>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1f6      	bne.n	800666a <__sinit+0xe>
 800667c:	f7ff ffc0 	bl	8006600 <global_stdio_init.part.0>
 8006680:	e7f3      	b.n	800666a <__sinit+0xe>
 8006682:	46c0      	nop			@ (mov r8, r8)
 8006684:	080065c5 	.word	0x080065c5
 8006688:	200005c4 	.word	0x200005c4

0800668c <fiprintf>:
 800668c:	b40e      	push	{r1, r2, r3}
 800668e:	b517      	push	{r0, r1, r2, r4, lr}
 8006690:	4c05      	ldr	r4, [pc, #20]	@ (80066a8 <fiprintf+0x1c>)
 8006692:	ab05      	add	r3, sp, #20
 8006694:	cb04      	ldmia	r3!, {r2}
 8006696:	0001      	movs	r1, r0
 8006698:	6820      	ldr	r0, [r4, #0]
 800669a:	9301      	str	r3, [sp, #4]
 800669c:	f001 fcf8 	bl	8008090 <_vfiprintf_r>
 80066a0:	bc1e      	pop	{r1, r2, r3, r4}
 80066a2:	bc08      	pop	{r3}
 80066a4:	b003      	add	sp, #12
 80066a6:	4718      	bx	r3
 80066a8:	20000120 	.word	0x20000120

080066ac <_fwalk_sglue>:
 80066ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066ae:	0014      	movs	r4, r2
 80066b0:	2600      	movs	r6, #0
 80066b2:	9000      	str	r0, [sp, #0]
 80066b4:	9101      	str	r1, [sp, #4]
 80066b6:	68a5      	ldr	r5, [r4, #8]
 80066b8:	6867      	ldr	r7, [r4, #4]
 80066ba:	3f01      	subs	r7, #1
 80066bc:	d504      	bpl.n	80066c8 <_fwalk_sglue+0x1c>
 80066be:	6824      	ldr	r4, [r4, #0]
 80066c0:	2c00      	cmp	r4, #0
 80066c2:	d1f8      	bne.n	80066b6 <_fwalk_sglue+0xa>
 80066c4:	0030      	movs	r0, r6
 80066c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80066c8:	89ab      	ldrh	r3, [r5, #12]
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d908      	bls.n	80066e0 <_fwalk_sglue+0x34>
 80066ce:	220e      	movs	r2, #14
 80066d0:	5eab      	ldrsh	r3, [r5, r2]
 80066d2:	3301      	adds	r3, #1
 80066d4:	d004      	beq.n	80066e0 <_fwalk_sglue+0x34>
 80066d6:	0029      	movs	r1, r5
 80066d8:	9800      	ldr	r0, [sp, #0]
 80066da:	9b01      	ldr	r3, [sp, #4]
 80066dc:	4798      	blx	r3
 80066de:	4306      	orrs	r6, r0
 80066e0:	3568      	adds	r5, #104	@ 0x68
 80066e2:	e7ea      	b.n	80066ba <_fwalk_sglue+0xe>

080066e4 <iprintf>:
 80066e4:	b40f      	push	{r0, r1, r2, r3}
 80066e6:	b507      	push	{r0, r1, r2, lr}
 80066e8:	4905      	ldr	r1, [pc, #20]	@ (8006700 <iprintf+0x1c>)
 80066ea:	ab04      	add	r3, sp, #16
 80066ec:	6808      	ldr	r0, [r1, #0]
 80066ee:	cb04      	ldmia	r3!, {r2}
 80066f0:	6881      	ldr	r1, [r0, #8]
 80066f2:	9301      	str	r3, [sp, #4]
 80066f4:	f001 fccc 	bl	8008090 <_vfiprintf_r>
 80066f8:	b003      	add	sp, #12
 80066fa:	bc08      	pop	{r3}
 80066fc:	b004      	add	sp, #16
 80066fe:	4718      	bx	r3
 8006700:	20000120 	.word	0x20000120

08006704 <_puts_r>:
 8006704:	6a03      	ldr	r3, [r0, #32]
 8006706:	b570      	push	{r4, r5, r6, lr}
 8006708:	0005      	movs	r5, r0
 800670a:	000e      	movs	r6, r1
 800670c:	6884      	ldr	r4, [r0, #8]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d101      	bne.n	8006716 <_puts_r+0x12>
 8006712:	f7ff ffa3 	bl	800665c <__sinit>
 8006716:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006718:	07db      	lsls	r3, r3, #31
 800671a:	d405      	bmi.n	8006728 <_puts_r+0x24>
 800671c:	89a3      	ldrh	r3, [r4, #12]
 800671e:	059b      	lsls	r3, r3, #22
 8006720:	d402      	bmi.n	8006728 <_puts_r+0x24>
 8006722:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006724:	f000 fa1b 	bl	8006b5e <__retarget_lock_acquire_recursive>
 8006728:	89a3      	ldrh	r3, [r4, #12]
 800672a:	071b      	lsls	r3, r3, #28
 800672c:	d502      	bpl.n	8006734 <_puts_r+0x30>
 800672e:	6923      	ldr	r3, [r4, #16]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d11f      	bne.n	8006774 <_puts_r+0x70>
 8006734:	0021      	movs	r1, r4
 8006736:	0028      	movs	r0, r5
 8006738:	f000 f8d2 	bl	80068e0 <__swsetup_r>
 800673c:	2800      	cmp	r0, #0
 800673e:	d019      	beq.n	8006774 <_puts_r+0x70>
 8006740:	2501      	movs	r5, #1
 8006742:	426d      	negs	r5, r5
 8006744:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006746:	07db      	lsls	r3, r3, #31
 8006748:	d405      	bmi.n	8006756 <_puts_r+0x52>
 800674a:	89a3      	ldrh	r3, [r4, #12]
 800674c:	059b      	lsls	r3, r3, #22
 800674e:	d402      	bmi.n	8006756 <_puts_r+0x52>
 8006750:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006752:	f000 fa05 	bl	8006b60 <__retarget_lock_release_recursive>
 8006756:	0028      	movs	r0, r5
 8006758:	bd70      	pop	{r4, r5, r6, pc}
 800675a:	3601      	adds	r6, #1
 800675c:	60a3      	str	r3, [r4, #8]
 800675e:	2b00      	cmp	r3, #0
 8006760:	da04      	bge.n	800676c <_puts_r+0x68>
 8006762:	69a2      	ldr	r2, [r4, #24]
 8006764:	429a      	cmp	r2, r3
 8006766:	dc16      	bgt.n	8006796 <_puts_r+0x92>
 8006768:	290a      	cmp	r1, #10
 800676a:	d014      	beq.n	8006796 <_puts_r+0x92>
 800676c:	6823      	ldr	r3, [r4, #0]
 800676e:	1c5a      	adds	r2, r3, #1
 8006770:	6022      	str	r2, [r4, #0]
 8006772:	7019      	strb	r1, [r3, #0]
 8006774:	68a3      	ldr	r3, [r4, #8]
 8006776:	7831      	ldrb	r1, [r6, #0]
 8006778:	3b01      	subs	r3, #1
 800677a:	2900      	cmp	r1, #0
 800677c:	d1ed      	bne.n	800675a <_puts_r+0x56>
 800677e:	60a3      	str	r3, [r4, #8]
 8006780:	2b00      	cmp	r3, #0
 8006782:	da0f      	bge.n	80067a4 <_puts_r+0xa0>
 8006784:	0022      	movs	r2, r4
 8006786:	0028      	movs	r0, r5
 8006788:	310a      	adds	r1, #10
 800678a:	f000 f867 	bl	800685c <__swbuf_r>
 800678e:	3001      	adds	r0, #1
 8006790:	d0d6      	beq.n	8006740 <_puts_r+0x3c>
 8006792:	250a      	movs	r5, #10
 8006794:	e7d6      	b.n	8006744 <_puts_r+0x40>
 8006796:	0022      	movs	r2, r4
 8006798:	0028      	movs	r0, r5
 800679a:	f000 f85f 	bl	800685c <__swbuf_r>
 800679e:	3001      	adds	r0, #1
 80067a0:	d1e8      	bne.n	8006774 <_puts_r+0x70>
 80067a2:	e7cd      	b.n	8006740 <_puts_r+0x3c>
 80067a4:	6823      	ldr	r3, [r4, #0]
 80067a6:	1c5a      	adds	r2, r3, #1
 80067a8:	6022      	str	r2, [r4, #0]
 80067aa:	220a      	movs	r2, #10
 80067ac:	701a      	strb	r2, [r3, #0]
 80067ae:	e7f0      	b.n	8006792 <_puts_r+0x8e>

080067b0 <puts>:
 80067b0:	b510      	push	{r4, lr}
 80067b2:	4b03      	ldr	r3, [pc, #12]	@ (80067c0 <puts+0x10>)
 80067b4:	0001      	movs	r1, r0
 80067b6:	6818      	ldr	r0, [r3, #0]
 80067b8:	f7ff ffa4 	bl	8006704 <_puts_r>
 80067bc:	bd10      	pop	{r4, pc}
 80067be:	46c0      	nop			@ (mov r8, r8)
 80067c0:	20000120 	.word	0x20000120

080067c4 <__sread>:
 80067c4:	b570      	push	{r4, r5, r6, lr}
 80067c6:	000c      	movs	r4, r1
 80067c8:	250e      	movs	r5, #14
 80067ca:	5f49      	ldrsh	r1, [r1, r5]
 80067cc:	f000 f94c 	bl	8006a68 <_read_r>
 80067d0:	2800      	cmp	r0, #0
 80067d2:	db03      	blt.n	80067dc <__sread+0x18>
 80067d4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80067d6:	181b      	adds	r3, r3, r0
 80067d8:	6563      	str	r3, [r4, #84]	@ 0x54
 80067da:	bd70      	pop	{r4, r5, r6, pc}
 80067dc:	89a3      	ldrh	r3, [r4, #12]
 80067de:	4a02      	ldr	r2, [pc, #8]	@ (80067e8 <__sread+0x24>)
 80067e0:	4013      	ands	r3, r2
 80067e2:	81a3      	strh	r3, [r4, #12]
 80067e4:	e7f9      	b.n	80067da <__sread+0x16>
 80067e6:	46c0      	nop			@ (mov r8, r8)
 80067e8:	ffffefff 	.word	0xffffefff

080067ec <__swrite>:
 80067ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ee:	001f      	movs	r7, r3
 80067f0:	898b      	ldrh	r3, [r1, #12]
 80067f2:	0005      	movs	r5, r0
 80067f4:	000c      	movs	r4, r1
 80067f6:	0016      	movs	r6, r2
 80067f8:	05db      	lsls	r3, r3, #23
 80067fa:	d505      	bpl.n	8006808 <__swrite+0x1c>
 80067fc:	230e      	movs	r3, #14
 80067fe:	5ec9      	ldrsh	r1, [r1, r3]
 8006800:	2200      	movs	r2, #0
 8006802:	2302      	movs	r3, #2
 8006804:	f000 f91c 	bl	8006a40 <_lseek_r>
 8006808:	89a3      	ldrh	r3, [r4, #12]
 800680a:	4a05      	ldr	r2, [pc, #20]	@ (8006820 <__swrite+0x34>)
 800680c:	0028      	movs	r0, r5
 800680e:	4013      	ands	r3, r2
 8006810:	81a3      	strh	r3, [r4, #12]
 8006812:	0032      	movs	r2, r6
 8006814:	230e      	movs	r3, #14
 8006816:	5ee1      	ldrsh	r1, [r4, r3]
 8006818:	003b      	movs	r3, r7
 800681a:	f000 f961 	bl	8006ae0 <_write_r>
 800681e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006820:	ffffefff 	.word	0xffffefff

08006824 <__sseek>:
 8006824:	b570      	push	{r4, r5, r6, lr}
 8006826:	000c      	movs	r4, r1
 8006828:	250e      	movs	r5, #14
 800682a:	5f49      	ldrsh	r1, [r1, r5]
 800682c:	f000 f908 	bl	8006a40 <_lseek_r>
 8006830:	89a3      	ldrh	r3, [r4, #12]
 8006832:	1c42      	adds	r2, r0, #1
 8006834:	d103      	bne.n	800683e <__sseek+0x1a>
 8006836:	4a05      	ldr	r2, [pc, #20]	@ (800684c <__sseek+0x28>)
 8006838:	4013      	ands	r3, r2
 800683a:	81a3      	strh	r3, [r4, #12]
 800683c:	bd70      	pop	{r4, r5, r6, pc}
 800683e:	2280      	movs	r2, #128	@ 0x80
 8006840:	0152      	lsls	r2, r2, #5
 8006842:	4313      	orrs	r3, r2
 8006844:	81a3      	strh	r3, [r4, #12]
 8006846:	6560      	str	r0, [r4, #84]	@ 0x54
 8006848:	e7f8      	b.n	800683c <__sseek+0x18>
 800684a:	46c0      	nop			@ (mov r8, r8)
 800684c:	ffffefff 	.word	0xffffefff

08006850 <__sclose>:
 8006850:	b510      	push	{r4, lr}
 8006852:	230e      	movs	r3, #14
 8006854:	5ec9      	ldrsh	r1, [r1, r3]
 8006856:	f000 f8e1 	bl	8006a1c <_close_r>
 800685a:	bd10      	pop	{r4, pc}

0800685c <__swbuf_r>:
 800685c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800685e:	0006      	movs	r6, r0
 8006860:	000d      	movs	r5, r1
 8006862:	0014      	movs	r4, r2
 8006864:	2800      	cmp	r0, #0
 8006866:	d004      	beq.n	8006872 <__swbuf_r+0x16>
 8006868:	6a03      	ldr	r3, [r0, #32]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d101      	bne.n	8006872 <__swbuf_r+0x16>
 800686e:	f7ff fef5 	bl	800665c <__sinit>
 8006872:	69a3      	ldr	r3, [r4, #24]
 8006874:	60a3      	str	r3, [r4, #8]
 8006876:	89a3      	ldrh	r3, [r4, #12]
 8006878:	071b      	lsls	r3, r3, #28
 800687a:	d502      	bpl.n	8006882 <__swbuf_r+0x26>
 800687c:	6923      	ldr	r3, [r4, #16]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d109      	bne.n	8006896 <__swbuf_r+0x3a>
 8006882:	0021      	movs	r1, r4
 8006884:	0030      	movs	r0, r6
 8006886:	f000 f82b 	bl	80068e0 <__swsetup_r>
 800688a:	2800      	cmp	r0, #0
 800688c:	d003      	beq.n	8006896 <__swbuf_r+0x3a>
 800688e:	2501      	movs	r5, #1
 8006890:	426d      	negs	r5, r5
 8006892:	0028      	movs	r0, r5
 8006894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006896:	6923      	ldr	r3, [r4, #16]
 8006898:	6820      	ldr	r0, [r4, #0]
 800689a:	b2ef      	uxtb	r7, r5
 800689c:	1ac0      	subs	r0, r0, r3
 800689e:	6963      	ldr	r3, [r4, #20]
 80068a0:	b2ed      	uxtb	r5, r5
 80068a2:	4283      	cmp	r3, r0
 80068a4:	dc05      	bgt.n	80068b2 <__swbuf_r+0x56>
 80068a6:	0021      	movs	r1, r4
 80068a8:	0030      	movs	r0, r6
 80068aa:	f001 fd93 	bl	80083d4 <_fflush_r>
 80068ae:	2800      	cmp	r0, #0
 80068b0:	d1ed      	bne.n	800688e <__swbuf_r+0x32>
 80068b2:	68a3      	ldr	r3, [r4, #8]
 80068b4:	3001      	adds	r0, #1
 80068b6:	3b01      	subs	r3, #1
 80068b8:	60a3      	str	r3, [r4, #8]
 80068ba:	6823      	ldr	r3, [r4, #0]
 80068bc:	1c5a      	adds	r2, r3, #1
 80068be:	6022      	str	r2, [r4, #0]
 80068c0:	701f      	strb	r7, [r3, #0]
 80068c2:	6963      	ldr	r3, [r4, #20]
 80068c4:	4283      	cmp	r3, r0
 80068c6:	d004      	beq.n	80068d2 <__swbuf_r+0x76>
 80068c8:	89a3      	ldrh	r3, [r4, #12]
 80068ca:	07db      	lsls	r3, r3, #31
 80068cc:	d5e1      	bpl.n	8006892 <__swbuf_r+0x36>
 80068ce:	2d0a      	cmp	r5, #10
 80068d0:	d1df      	bne.n	8006892 <__swbuf_r+0x36>
 80068d2:	0021      	movs	r1, r4
 80068d4:	0030      	movs	r0, r6
 80068d6:	f001 fd7d 	bl	80083d4 <_fflush_r>
 80068da:	2800      	cmp	r0, #0
 80068dc:	d0d9      	beq.n	8006892 <__swbuf_r+0x36>
 80068de:	e7d6      	b.n	800688e <__swbuf_r+0x32>

080068e0 <__swsetup_r>:
 80068e0:	4b2d      	ldr	r3, [pc, #180]	@ (8006998 <__swsetup_r+0xb8>)
 80068e2:	b570      	push	{r4, r5, r6, lr}
 80068e4:	0005      	movs	r5, r0
 80068e6:	6818      	ldr	r0, [r3, #0]
 80068e8:	000c      	movs	r4, r1
 80068ea:	2800      	cmp	r0, #0
 80068ec:	d004      	beq.n	80068f8 <__swsetup_r+0x18>
 80068ee:	6a03      	ldr	r3, [r0, #32]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d101      	bne.n	80068f8 <__swsetup_r+0x18>
 80068f4:	f7ff feb2 	bl	800665c <__sinit>
 80068f8:	220c      	movs	r2, #12
 80068fa:	5ea3      	ldrsh	r3, [r4, r2]
 80068fc:	071a      	lsls	r2, r3, #28
 80068fe:	d423      	bmi.n	8006948 <__swsetup_r+0x68>
 8006900:	06da      	lsls	r2, r3, #27
 8006902:	d407      	bmi.n	8006914 <__swsetup_r+0x34>
 8006904:	2209      	movs	r2, #9
 8006906:	602a      	str	r2, [r5, #0]
 8006908:	2240      	movs	r2, #64	@ 0x40
 800690a:	2001      	movs	r0, #1
 800690c:	4313      	orrs	r3, r2
 800690e:	81a3      	strh	r3, [r4, #12]
 8006910:	4240      	negs	r0, r0
 8006912:	e03a      	b.n	800698a <__swsetup_r+0xaa>
 8006914:	075b      	lsls	r3, r3, #29
 8006916:	d513      	bpl.n	8006940 <__swsetup_r+0x60>
 8006918:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800691a:	2900      	cmp	r1, #0
 800691c:	d008      	beq.n	8006930 <__swsetup_r+0x50>
 800691e:	0023      	movs	r3, r4
 8006920:	3344      	adds	r3, #68	@ 0x44
 8006922:	4299      	cmp	r1, r3
 8006924:	d002      	beq.n	800692c <__swsetup_r+0x4c>
 8006926:	0028      	movs	r0, r5
 8006928:	f000 ffa4 	bl	8007874 <_free_r>
 800692c:	2300      	movs	r3, #0
 800692e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006930:	2224      	movs	r2, #36	@ 0x24
 8006932:	89a3      	ldrh	r3, [r4, #12]
 8006934:	4393      	bics	r3, r2
 8006936:	81a3      	strh	r3, [r4, #12]
 8006938:	2300      	movs	r3, #0
 800693a:	6063      	str	r3, [r4, #4]
 800693c:	6923      	ldr	r3, [r4, #16]
 800693e:	6023      	str	r3, [r4, #0]
 8006940:	2308      	movs	r3, #8
 8006942:	89a2      	ldrh	r2, [r4, #12]
 8006944:	4313      	orrs	r3, r2
 8006946:	81a3      	strh	r3, [r4, #12]
 8006948:	6923      	ldr	r3, [r4, #16]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d10b      	bne.n	8006966 <__swsetup_r+0x86>
 800694e:	21a0      	movs	r1, #160	@ 0xa0
 8006950:	2280      	movs	r2, #128	@ 0x80
 8006952:	89a3      	ldrh	r3, [r4, #12]
 8006954:	0089      	lsls	r1, r1, #2
 8006956:	0092      	lsls	r2, r2, #2
 8006958:	400b      	ands	r3, r1
 800695a:	4293      	cmp	r3, r2
 800695c:	d003      	beq.n	8006966 <__swsetup_r+0x86>
 800695e:	0021      	movs	r1, r4
 8006960:	0028      	movs	r0, r5
 8006962:	f001 fd8d 	bl	8008480 <__smakebuf_r>
 8006966:	220c      	movs	r2, #12
 8006968:	5ea3      	ldrsh	r3, [r4, r2]
 800696a:	2101      	movs	r1, #1
 800696c:	001a      	movs	r2, r3
 800696e:	400a      	ands	r2, r1
 8006970:	420b      	tst	r3, r1
 8006972:	d00b      	beq.n	800698c <__swsetup_r+0xac>
 8006974:	2200      	movs	r2, #0
 8006976:	60a2      	str	r2, [r4, #8]
 8006978:	6962      	ldr	r2, [r4, #20]
 800697a:	4252      	negs	r2, r2
 800697c:	61a2      	str	r2, [r4, #24]
 800697e:	2000      	movs	r0, #0
 8006980:	6922      	ldr	r2, [r4, #16]
 8006982:	4282      	cmp	r2, r0
 8006984:	d101      	bne.n	800698a <__swsetup_r+0xaa>
 8006986:	061a      	lsls	r2, r3, #24
 8006988:	d4be      	bmi.n	8006908 <__swsetup_r+0x28>
 800698a:	bd70      	pop	{r4, r5, r6, pc}
 800698c:	0799      	lsls	r1, r3, #30
 800698e:	d400      	bmi.n	8006992 <__swsetup_r+0xb2>
 8006990:	6962      	ldr	r2, [r4, #20]
 8006992:	60a2      	str	r2, [r4, #8]
 8006994:	e7f3      	b.n	800697e <__swsetup_r+0x9e>
 8006996:	46c0      	nop			@ (mov r8, r8)
 8006998:	20000120 	.word	0x20000120

0800699c <memset>:
 800699c:	0003      	movs	r3, r0
 800699e:	1882      	adds	r2, r0, r2
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d100      	bne.n	80069a6 <memset+0xa>
 80069a4:	4770      	bx	lr
 80069a6:	7019      	strb	r1, [r3, #0]
 80069a8:	3301      	adds	r3, #1
 80069aa:	e7f9      	b.n	80069a0 <memset+0x4>

080069ac <_raise_r>:
 80069ac:	b570      	push	{r4, r5, r6, lr}
 80069ae:	0004      	movs	r4, r0
 80069b0:	000d      	movs	r5, r1
 80069b2:	291f      	cmp	r1, #31
 80069b4:	d904      	bls.n	80069c0 <_raise_r+0x14>
 80069b6:	2316      	movs	r3, #22
 80069b8:	6003      	str	r3, [r0, #0]
 80069ba:	2001      	movs	r0, #1
 80069bc:	4240      	negs	r0, r0
 80069be:	bd70      	pop	{r4, r5, r6, pc}
 80069c0:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d004      	beq.n	80069d0 <_raise_r+0x24>
 80069c6:	008a      	lsls	r2, r1, #2
 80069c8:	189b      	adds	r3, r3, r2
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	2a00      	cmp	r2, #0
 80069ce:	d108      	bne.n	80069e2 <_raise_r+0x36>
 80069d0:	0020      	movs	r0, r4
 80069d2:	f000 f86f 	bl	8006ab4 <_getpid_r>
 80069d6:	002a      	movs	r2, r5
 80069d8:	0001      	movs	r1, r0
 80069da:	0020      	movs	r0, r4
 80069dc:	f000 f858 	bl	8006a90 <_kill_r>
 80069e0:	e7ed      	b.n	80069be <_raise_r+0x12>
 80069e2:	2a01      	cmp	r2, #1
 80069e4:	d009      	beq.n	80069fa <_raise_r+0x4e>
 80069e6:	1c51      	adds	r1, r2, #1
 80069e8:	d103      	bne.n	80069f2 <_raise_r+0x46>
 80069ea:	2316      	movs	r3, #22
 80069ec:	6003      	str	r3, [r0, #0]
 80069ee:	2001      	movs	r0, #1
 80069f0:	e7e5      	b.n	80069be <_raise_r+0x12>
 80069f2:	2100      	movs	r1, #0
 80069f4:	0028      	movs	r0, r5
 80069f6:	6019      	str	r1, [r3, #0]
 80069f8:	4790      	blx	r2
 80069fa:	2000      	movs	r0, #0
 80069fc:	e7df      	b.n	80069be <_raise_r+0x12>
	...

08006a00 <raise>:
 8006a00:	b510      	push	{r4, lr}
 8006a02:	4b03      	ldr	r3, [pc, #12]	@ (8006a10 <raise+0x10>)
 8006a04:	0001      	movs	r1, r0
 8006a06:	6818      	ldr	r0, [r3, #0]
 8006a08:	f7ff ffd0 	bl	80069ac <_raise_r>
 8006a0c:	bd10      	pop	{r4, pc}
 8006a0e:	46c0      	nop			@ (mov r8, r8)
 8006a10:	20000120 	.word	0x20000120

08006a14 <_localeconv_r>:
 8006a14:	4800      	ldr	r0, [pc, #0]	@ (8006a18 <_localeconv_r+0x4>)
 8006a16:	4770      	bx	lr
 8006a18:	20000260 	.word	0x20000260

08006a1c <_close_r>:
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	b570      	push	{r4, r5, r6, lr}
 8006a20:	4d06      	ldr	r5, [pc, #24]	@ (8006a3c <_close_r+0x20>)
 8006a22:	0004      	movs	r4, r0
 8006a24:	0008      	movs	r0, r1
 8006a26:	602b      	str	r3, [r5, #0]
 8006a28:	f7fc fb83 	bl	8003132 <_close>
 8006a2c:	1c43      	adds	r3, r0, #1
 8006a2e:	d103      	bne.n	8006a38 <_close_r+0x1c>
 8006a30:	682b      	ldr	r3, [r5, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d000      	beq.n	8006a38 <_close_r+0x1c>
 8006a36:	6023      	str	r3, [r4, #0]
 8006a38:	bd70      	pop	{r4, r5, r6, pc}
 8006a3a:	46c0      	nop			@ (mov r8, r8)
 8006a3c:	200005c8 	.word	0x200005c8

08006a40 <_lseek_r>:
 8006a40:	b570      	push	{r4, r5, r6, lr}
 8006a42:	0004      	movs	r4, r0
 8006a44:	0008      	movs	r0, r1
 8006a46:	0011      	movs	r1, r2
 8006a48:	001a      	movs	r2, r3
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	4d05      	ldr	r5, [pc, #20]	@ (8006a64 <_lseek_r+0x24>)
 8006a4e:	602b      	str	r3, [r5, #0]
 8006a50:	f7fc fb90 	bl	8003174 <_lseek>
 8006a54:	1c43      	adds	r3, r0, #1
 8006a56:	d103      	bne.n	8006a60 <_lseek_r+0x20>
 8006a58:	682b      	ldr	r3, [r5, #0]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d000      	beq.n	8006a60 <_lseek_r+0x20>
 8006a5e:	6023      	str	r3, [r4, #0]
 8006a60:	bd70      	pop	{r4, r5, r6, pc}
 8006a62:	46c0      	nop			@ (mov r8, r8)
 8006a64:	200005c8 	.word	0x200005c8

08006a68 <_read_r>:
 8006a68:	b570      	push	{r4, r5, r6, lr}
 8006a6a:	0004      	movs	r4, r0
 8006a6c:	0008      	movs	r0, r1
 8006a6e:	0011      	movs	r1, r2
 8006a70:	001a      	movs	r2, r3
 8006a72:	2300      	movs	r3, #0
 8006a74:	4d05      	ldr	r5, [pc, #20]	@ (8006a8c <_read_r+0x24>)
 8006a76:	602b      	str	r3, [r5, #0]
 8006a78:	f7fc fb22 	bl	80030c0 <_read>
 8006a7c:	1c43      	adds	r3, r0, #1
 8006a7e:	d103      	bne.n	8006a88 <_read_r+0x20>
 8006a80:	682b      	ldr	r3, [r5, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d000      	beq.n	8006a88 <_read_r+0x20>
 8006a86:	6023      	str	r3, [r4, #0]
 8006a88:	bd70      	pop	{r4, r5, r6, pc}
 8006a8a:	46c0      	nop			@ (mov r8, r8)
 8006a8c:	200005c8 	.word	0x200005c8

08006a90 <_kill_r>:
 8006a90:	2300      	movs	r3, #0
 8006a92:	b570      	push	{r4, r5, r6, lr}
 8006a94:	4d06      	ldr	r5, [pc, #24]	@ (8006ab0 <_kill_r+0x20>)
 8006a96:	0004      	movs	r4, r0
 8006a98:	0008      	movs	r0, r1
 8006a9a:	0011      	movs	r1, r2
 8006a9c:	602b      	str	r3, [r5, #0]
 8006a9e:	f7fc faf2 	bl	8003086 <_kill>
 8006aa2:	1c43      	adds	r3, r0, #1
 8006aa4:	d103      	bne.n	8006aae <_kill_r+0x1e>
 8006aa6:	682b      	ldr	r3, [r5, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d000      	beq.n	8006aae <_kill_r+0x1e>
 8006aac:	6023      	str	r3, [r4, #0]
 8006aae:	bd70      	pop	{r4, r5, r6, pc}
 8006ab0:	200005c8 	.word	0x200005c8

08006ab4 <_getpid_r>:
 8006ab4:	b510      	push	{r4, lr}
 8006ab6:	f7fc fae0 	bl	800307a <_getpid>
 8006aba:	bd10      	pop	{r4, pc}

08006abc <_sbrk_r>:
 8006abc:	2300      	movs	r3, #0
 8006abe:	b570      	push	{r4, r5, r6, lr}
 8006ac0:	4d06      	ldr	r5, [pc, #24]	@ (8006adc <_sbrk_r+0x20>)
 8006ac2:	0004      	movs	r4, r0
 8006ac4:	0008      	movs	r0, r1
 8006ac6:	602b      	str	r3, [r5, #0]
 8006ac8:	f7fc fb60 	bl	800318c <_sbrk>
 8006acc:	1c43      	adds	r3, r0, #1
 8006ace:	d103      	bne.n	8006ad8 <_sbrk_r+0x1c>
 8006ad0:	682b      	ldr	r3, [r5, #0]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d000      	beq.n	8006ad8 <_sbrk_r+0x1c>
 8006ad6:	6023      	str	r3, [r4, #0]
 8006ad8:	bd70      	pop	{r4, r5, r6, pc}
 8006ada:	46c0      	nop			@ (mov r8, r8)
 8006adc:	200005c8 	.word	0x200005c8

08006ae0 <_write_r>:
 8006ae0:	b570      	push	{r4, r5, r6, lr}
 8006ae2:	0004      	movs	r4, r0
 8006ae4:	0008      	movs	r0, r1
 8006ae6:	0011      	movs	r1, r2
 8006ae8:	001a      	movs	r2, r3
 8006aea:	2300      	movs	r3, #0
 8006aec:	4d05      	ldr	r5, [pc, #20]	@ (8006b04 <_write_r+0x24>)
 8006aee:	602b      	str	r3, [r5, #0]
 8006af0:	f7fc fb03 	bl	80030fa <_write>
 8006af4:	1c43      	adds	r3, r0, #1
 8006af6:	d103      	bne.n	8006b00 <_write_r+0x20>
 8006af8:	682b      	ldr	r3, [r5, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d000      	beq.n	8006b00 <_write_r+0x20>
 8006afe:	6023      	str	r3, [r4, #0]
 8006b00:	bd70      	pop	{r4, r5, r6, pc}
 8006b02:	46c0      	nop			@ (mov r8, r8)
 8006b04:	200005c8 	.word	0x200005c8

08006b08 <__errno>:
 8006b08:	4b01      	ldr	r3, [pc, #4]	@ (8006b10 <__errno+0x8>)
 8006b0a:	6818      	ldr	r0, [r3, #0]
 8006b0c:	4770      	bx	lr
 8006b0e:	46c0      	nop			@ (mov r8, r8)
 8006b10:	20000120 	.word	0x20000120

08006b14 <__libc_init_array>:
 8006b14:	b570      	push	{r4, r5, r6, lr}
 8006b16:	2600      	movs	r6, #0
 8006b18:	4c0c      	ldr	r4, [pc, #48]	@ (8006b4c <__libc_init_array+0x38>)
 8006b1a:	4d0d      	ldr	r5, [pc, #52]	@ (8006b50 <__libc_init_array+0x3c>)
 8006b1c:	1b64      	subs	r4, r4, r5
 8006b1e:	10a4      	asrs	r4, r4, #2
 8006b20:	42a6      	cmp	r6, r4
 8006b22:	d109      	bne.n	8006b38 <__libc_init_array+0x24>
 8006b24:	2600      	movs	r6, #0
 8006b26:	f001 fd31 	bl	800858c <_init>
 8006b2a:	4c0a      	ldr	r4, [pc, #40]	@ (8006b54 <__libc_init_array+0x40>)
 8006b2c:	4d0a      	ldr	r5, [pc, #40]	@ (8006b58 <__libc_init_array+0x44>)
 8006b2e:	1b64      	subs	r4, r4, r5
 8006b30:	10a4      	asrs	r4, r4, #2
 8006b32:	42a6      	cmp	r6, r4
 8006b34:	d105      	bne.n	8006b42 <__libc_init_array+0x2e>
 8006b36:	bd70      	pop	{r4, r5, r6, pc}
 8006b38:	00b3      	lsls	r3, r6, #2
 8006b3a:	58eb      	ldr	r3, [r5, r3]
 8006b3c:	4798      	blx	r3
 8006b3e:	3601      	adds	r6, #1
 8006b40:	e7ee      	b.n	8006b20 <__libc_init_array+0xc>
 8006b42:	00b3      	lsls	r3, r6, #2
 8006b44:	58eb      	ldr	r3, [r5, r3]
 8006b46:	4798      	blx	r3
 8006b48:	3601      	adds	r6, #1
 8006b4a:	e7f2      	b.n	8006b32 <__libc_init_array+0x1e>
 8006b4c:	08009620 	.word	0x08009620
 8006b50:	08009620 	.word	0x08009620
 8006b54:	08009628 	.word	0x08009628
 8006b58:	08009620 	.word	0x08009620

08006b5c <__retarget_lock_init_recursive>:
 8006b5c:	4770      	bx	lr

08006b5e <__retarget_lock_acquire_recursive>:
 8006b5e:	4770      	bx	lr

08006b60 <__retarget_lock_release_recursive>:
 8006b60:	4770      	bx	lr

08006b62 <memchr>:
 8006b62:	b2c9      	uxtb	r1, r1
 8006b64:	1882      	adds	r2, r0, r2
 8006b66:	4290      	cmp	r0, r2
 8006b68:	d101      	bne.n	8006b6e <memchr+0xc>
 8006b6a:	2000      	movs	r0, #0
 8006b6c:	4770      	bx	lr
 8006b6e:	7803      	ldrb	r3, [r0, #0]
 8006b70:	428b      	cmp	r3, r1
 8006b72:	d0fb      	beq.n	8006b6c <memchr+0xa>
 8006b74:	3001      	adds	r0, #1
 8006b76:	e7f6      	b.n	8006b66 <memchr+0x4>

08006b78 <memcpy>:
 8006b78:	2300      	movs	r3, #0
 8006b7a:	b510      	push	{r4, lr}
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d100      	bne.n	8006b82 <memcpy+0xa>
 8006b80:	bd10      	pop	{r4, pc}
 8006b82:	5ccc      	ldrb	r4, [r1, r3]
 8006b84:	54c4      	strb	r4, [r0, r3]
 8006b86:	3301      	adds	r3, #1
 8006b88:	e7f8      	b.n	8006b7c <memcpy+0x4>

08006b8a <quorem>:
 8006b8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b8c:	6903      	ldr	r3, [r0, #16]
 8006b8e:	690c      	ldr	r4, [r1, #16]
 8006b90:	b089      	sub	sp, #36	@ 0x24
 8006b92:	9003      	str	r0, [sp, #12]
 8006b94:	9106      	str	r1, [sp, #24]
 8006b96:	2000      	movs	r0, #0
 8006b98:	42a3      	cmp	r3, r4
 8006b9a:	db63      	blt.n	8006c64 <quorem+0xda>
 8006b9c:	000b      	movs	r3, r1
 8006b9e:	3c01      	subs	r4, #1
 8006ba0:	3314      	adds	r3, #20
 8006ba2:	00a5      	lsls	r5, r4, #2
 8006ba4:	9304      	str	r3, [sp, #16]
 8006ba6:	195b      	adds	r3, r3, r5
 8006ba8:	9305      	str	r3, [sp, #20]
 8006baa:	9b03      	ldr	r3, [sp, #12]
 8006bac:	3314      	adds	r3, #20
 8006bae:	9301      	str	r3, [sp, #4]
 8006bb0:	195d      	adds	r5, r3, r5
 8006bb2:	9b05      	ldr	r3, [sp, #20]
 8006bb4:	682f      	ldr	r7, [r5, #0]
 8006bb6:	681e      	ldr	r6, [r3, #0]
 8006bb8:	0038      	movs	r0, r7
 8006bba:	3601      	adds	r6, #1
 8006bbc:	0031      	movs	r1, r6
 8006bbe:	f7f9 fabf 	bl	8000140 <__udivsi3>
 8006bc2:	9002      	str	r0, [sp, #8]
 8006bc4:	42b7      	cmp	r7, r6
 8006bc6:	d327      	bcc.n	8006c18 <quorem+0x8e>
 8006bc8:	9b04      	ldr	r3, [sp, #16]
 8006bca:	2700      	movs	r7, #0
 8006bcc:	469c      	mov	ip, r3
 8006bce:	9e01      	ldr	r6, [sp, #4]
 8006bd0:	9707      	str	r7, [sp, #28]
 8006bd2:	4662      	mov	r2, ip
 8006bd4:	ca08      	ldmia	r2!, {r3}
 8006bd6:	6830      	ldr	r0, [r6, #0]
 8006bd8:	4694      	mov	ip, r2
 8006bda:	9a02      	ldr	r2, [sp, #8]
 8006bdc:	b299      	uxth	r1, r3
 8006bde:	4351      	muls	r1, r2
 8006be0:	0c1b      	lsrs	r3, r3, #16
 8006be2:	4353      	muls	r3, r2
 8006be4:	19c9      	adds	r1, r1, r7
 8006be6:	0c0a      	lsrs	r2, r1, #16
 8006be8:	189b      	adds	r3, r3, r2
 8006bea:	b289      	uxth	r1, r1
 8006bec:	b282      	uxth	r2, r0
 8006bee:	1a52      	subs	r2, r2, r1
 8006bf0:	9907      	ldr	r1, [sp, #28]
 8006bf2:	0c1f      	lsrs	r7, r3, #16
 8006bf4:	1852      	adds	r2, r2, r1
 8006bf6:	0c00      	lsrs	r0, r0, #16
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	1411      	asrs	r1, r2, #16
 8006bfc:	1ac3      	subs	r3, r0, r3
 8006bfe:	185b      	adds	r3, r3, r1
 8006c00:	1419      	asrs	r1, r3, #16
 8006c02:	b292      	uxth	r2, r2
 8006c04:	041b      	lsls	r3, r3, #16
 8006c06:	431a      	orrs	r2, r3
 8006c08:	9b05      	ldr	r3, [sp, #20]
 8006c0a:	9107      	str	r1, [sp, #28]
 8006c0c:	c604      	stmia	r6!, {r2}
 8006c0e:	4563      	cmp	r3, ip
 8006c10:	d2df      	bcs.n	8006bd2 <quorem+0x48>
 8006c12:	682b      	ldr	r3, [r5, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d02b      	beq.n	8006c70 <quorem+0xe6>
 8006c18:	9906      	ldr	r1, [sp, #24]
 8006c1a:	9803      	ldr	r0, [sp, #12]
 8006c1c:	f001 f8fa 	bl	8007e14 <__mcmp>
 8006c20:	2800      	cmp	r0, #0
 8006c22:	db1e      	blt.n	8006c62 <quorem+0xd8>
 8006c24:	2600      	movs	r6, #0
 8006c26:	9d01      	ldr	r5, [sp, #4]
 8006c28:	9904      	ldr	r1, [sp, #16]
 8006c2a:	c901      	ldmia	r1!, {r0}
 8006c2c:	682b      	ldr	r3, [r5, #0]
 8006c2e:	b287      	uxth	r7, r0
 8006c30:	b29a      	uxth	r2, r3
 8006c32:	1bd2      	subs	r2, r2, r7
 8006c34:	1992      	adds	r2, r2, r6
 8006c36:	0c00      	lsrs	r0, r0, #16
 8006c38:	0c1b      	lsrs	r3, r3, #16
 8006c3a:	1a1b      	subs	r3, r3, r0
 8006c3c:	1410      	asrs	r0, r2, #16
 8006c3e:	181b      	adds	r3, r3, r0
 8006c40:	141e      	asrs	r6, r3, #16
 8006c42:	b292      	uxth	r2, r2
 8006c44:	041b      	lsls	r3, r3, #16
 8006c46:	431a      	orrs	r2, r3
 8006c48:	9b05      	ldr	r3, [sp, #20]
 8006c4a:	c504      	stmia	r5!, {r2}
 8006c4c:	428b      	cmp	r3, r1
 8006c4e:	d2ec      	bcs.n	8006c2a <quorem+0xa0>
 8006c50:	9a01      	ldr	r2, [sp, #4]
 8006c52:	00a3      	lsls	r3, r4, #2
 8006c54:	18d3      	adds	r3, r2, r3
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	2a00      	cmp	r2, #0
 8006c5a:	d014      	beq.n	8006c86 <quorem+0xfc>
 8006c5c:	9b02      	ldr	r3, [sp, #8]
 8006c5e:	3301      	adds	r3, #1
 8006c60:	9302      	str	r3, [sp, #8]
 8006c62:	9802      	ldr	r0, [sp, #8]
 8006c64:	b009      	add	sp, #36	@ 0x24
 8006c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c68:	682b      	ldr	r3, [r5, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d104      	bne.n	8006c78 <quorem+0xee>
 8006c6e:	3c01      	subs	r4, #1
 8006c70:	9b01      	ldr	r3, [sp, #4]
 8006c72:	3d04      	subs	r5, #4
 8006c74:	42ab      	cmp	r3, r5
 8006c76:	d3f7      	bcc.n	8006c68 <quorem+0xde>
 8006c78:	9b03      	ldr	r3, [sp, #12]
 8006c7a:	611c      	str	r4, [r3, #16]
 8006c7c:	e7cc      	b.n	8006c18 <quorem+0x8e>
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	2a00      	cmp	r2, #0
 8006c82:	d104      	bne.n	8006c8e <quorem+0x104>
 8006c84:	3c01      	subs	r4, #1
 8006c86:	9a01      	ldr	r2, [sp, #4]
 8006c88:	3b04      	subs	r3, #4
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d3f7      	bcc.n	8006c7e <quorem+0xf4>
 8006c8e:	9b03      	ldr	r3, [sp, #12]
 8006c90:	611c      	str	r4, [r3, #16]
 8006c92:	e7e3      	b.n	8006c5c <quorem+0xd2>

08006c94 <_dtoa_r>:
 8006c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c96:	0014      	movs	r4, r2
 8006c98:	001d      	movs	r5, r3
 8006c9a:	69c6      	ldr	r6, [r0, #28]
 8006c9c:	b09d      	sub	sp, #116	@ 0x74
 8006c9e:	940a      	str	r4, [sp, #40]	@ 0x28
 8006ca0:	950b      	str	r5, [sp, #44]	@ 0x2c
 8006ca2:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8006ca4:	9003      	str	r0, [sp, #12]
 8006ca6:	2e00      	cmp	r6, #0
 8006ca8:	d10f      	bne.n	8006cca <_dtoa_r+0x36>
 8006caa:	2010      	movs	r0, #16
 8006cac:	f7fe ff2a 	bl	8005b04 <malloc>
 8006cb0:	9b03      	ldr	r3, [sp, #12]
 8006cb2:	1e02      	subs	r2, r0, #0
 8006cb4:	61d8      	str	r0, [r3, #28]
 8006cb6:	d104      	bne.n	8006cc2 <_dtoa_r+0x2e>
 8006cb8:	21ef      	movs	r1, #239	@ 0xef
 8006cba:	4bc7      	ldr	r3, [pc, #796]	@ (8006fd8 <_dtoa_r+0x344>)
 8006cbc:	48c7      	ldr	r0, [pc, #796]	@ (8006fdc <_dtoa_r+0x348>)
 8006cbe:	f7fe fed5 	bl	8005a6c <__assert_func>
 8006cc2:	6046      	str	r6, [r0, #4]
 8006cc4:	6086      	str	r6, [r0, #8]
 8006cc6:	6006      	str	r6, [r0, #0]
 8006cc8:	60c6      	str	r6, [r0, #12]
 8006cca:	9b03      	ldr	r3, [sp, #12]
 8006ccc:	69db      	ldr	r3, [r3, #28]
 8006cce:	6819      	ldr	r1, [r3, #0]
 8006cd0:	2900      	cmp	r1, #0
 8006cd2:	d00b      	beq.n	8006cec <_dtoa_r+0x58>
 8006cd4:	685a      	ldr	r2, [r3, #4]
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	4093      	lsls	r3, r2
 8006cda:	604a      	str	r2, [r1, #4]
 8006cdc:	608b      	str	r3, [r1, #8]
 8006cde:	9803      	ldr	r0, [sp, #12]
 8006ce0:	f000 fe56 	bl	8007990 <_Bfree>
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	9b03      	ldr	r3, [sp, #12]
 8006ce8:	69db      	ldr	r3, [r3, #28]
 8006cea:	601a      	str	r2, [r3, #0]
 8006cec:	2d00      	cmp	r5, #0
 8006cee:	da1e      	bge.n	8006d2e <_dtoa_r+0x9a>
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	603b      	str	r3, [r7, #0]
 8006cf4:	006b      	lsls	r3, r5, #1
 8006cf6:	085b      	lsrs	r3, r3, #1
 8006cf8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006cfa:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006cfc:	4bb8      	ldr	r3, [pc, #736]	@ (8006fe0 <_dtoa_r+0x34c>)
 8006cfe:	4ab8      	ldr	r2, [pc, #736]	@ (8006fe0 <_dtoa_r+0x34c>)
 8006d00:	403b      	ands	r3, r7
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d116      	bne.n	8006d34 <_dtoa_r+0xa0>
 8006d06:	4bb7      	ldr	r3, [pc, #732]	@ (8006fe4 <_dtoa_r+0x350>)
 8006d08:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006d0a:	6013      	str	r3, [r2, #0]
 8006d0c:	033b      	lsls	r3, r7, #12
 8006d0e:	0b1b      	lsrs	r3, r3, #12
 8006d10:	4323      	orrs	r3, r4
 8006d12:	d101      	bne.n	8006d18 <_dtoa_r+0x84>
 8006d14:	f000 fd80 	bl	8007818 <_dtoa_r+0xb84>
 8006d18:	4bb3      	ldr	r3, [pc, #716]	@ (8006fe8 <_dtoa_r+0x354>)
 8006d1a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006d1c:	9308      	str	r3, [sp, #32]
 8006d1e:	2a00      	cmp	r2, #0
 8006d20:	d002      	beq.n	8006d28 <_dtoa_r+0x94>
 8006d22:	4bb2      	ldr	r3, [pc, #712]	@ (8006fec <_dtoa_r+0x358>)
 8006d24:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006d26:	6013      	str	r3, [r2, #0]
 8006d28:	9808      	ldr	r0, [sp, #32]
 8006d2a:	b01d      	add	sp, #116	@ 0x74
 8006d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d2e:	2300      	movs	r3, #0
 8006d30:	603b      	str	r3, [r7, #0]
 8006d32:	e7e2      	b.n	8006cfa <_dtoa_r+0x66>
 8006d34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d38:	9212      	str	r2, [sp, #72]	@ 0x48
 8006d3a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006d3c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006d3e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006d40:	2200      	movs	r2, #0
 8006d42:	2300      	movs	r3, #0
 8006d44:	f7f9 fb82 	bl	800044c <__aeabi_dcmpeq>
 8006d48:	1e06      	subs	r6, r0, #0
 8006d4a:	d00b      	beq.n	8006d64 <_dtoa_r+0xd0>
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006d50:	6013      	str	r3, [r2, #0]
 8006d52:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d002      	beq.n	8006d5e <_dtoa_r+0xca>
 8006d58:	4ba5      	ldr	r3, [pc, #660]	@ (8006ff0 <_dtoa_r+0x35c>)
 8006d5a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006d5c:	6013      	str	r3, [r2, #0]
 8006d5e:	4ba5      	ldr	r3, [pc, #660]	@ (8006ff4 <_dtoa_r+0x360>)
 8006d60:	9308      	str	r3, [sp, #32]
 8006d62:	e7e1      	b.n	8006d28 <_dtoa_r+0x94>
 8006d64:	ab1a      	add	r3, sp, #104	@ 0x68
 8006d66:	9301      	str	r3, [sp, #4]
 8006d68:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006d6a:	9300      	str	r3, [sp, #0]
 8006d6c:	9803      	ldr	r0, [sp, #12]
 8006d6e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006d70:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006d72:	f001 f905 	bl	8007f80 <__d2b>
 8006d76:	007a      	lsls	r2, r7, #1
 8006d78:	9005      	str	r0, [sp, #20]
 8006d7a:	0d52      	lsrs	r2, r2, #21
 8006d7c:	d100      	bne.n	8006d80 <_dtoa_r+0xec>
 8006d7e:	e07b      	b.n	8006e78 <_dtoa_r+0x1e4>
 8006d80:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006d82:	9618      	str	r6, [sp, #96]	@ 0x60
 8006d84:	0319      	lsls	r1, r3, #12
 8006d86:	4b9c      	ldr	r3, [pc, #624]	@ (8006ff8 <_dtoa_r+0x364>)
 8006d88:	0b09      	lsrs	r1, r1, #12
 8006d8a:	430b      	orrs	r3, r1
 8006d8c:	499b      	ldr	r1, [pc, #620]	@ (8006ffc <_dtoa_r+0x368>)
 8006d8e:	1857      	adds	r7, r2, r1
 8006d90:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006d92:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006d94:	0019      	movs	r1, r3
 8006d96:	2200      	movs	r2, #0
 8006d98:	4b99      	ldr	r3, [pc, #612]	@ (8007000 <_dtoa_r+0x36c>)
 8006d9a:	f7fb f949 	bl	8002030 <__aeabi_dsub>
 8006d9e:	4a99      	ldr	r2, [pc, #612]	@ (8007004 <_dtoa_r+0x370>)
 8006da0:	4b99      	ldr	r3, [pc, #612]	@ (8007008 <_dtoa_r+0x374>)
 8006da2:	f7fa fe5f 	bl	8001a64 <__aeabi_dmul>
 8006da6:	4a99      	ldr	r2, [pc, #612]	@ (800700c <_dtoa_r+0x378>)
 8006da8:	4b99      	ldr	r3, [pc, #612]	@ (8007010 <_dtoa_r+0x37c>)
 8006daa:	f7f9 fe5b 	bl	8000a64 <__aeabi_dadd>
 8006dae:	0004      	movs	r4, r0
 8006db0:	0038      	movs	r0, r7
 8006db2:	000d      	movs	r5, r1
 8006db4:	f7fb fda4 	bl	8002900 <__aeabi_i2d>
 8006db8:	4a96      	ldr	r2, [pc, #600]	@ (8007014 <_dtoa_r+0x380>)
 8006dba:	4b97      	ldr	r3, [pc, #604]	@ (8007018 <_dtoa_r+0x384>)
 8006dbc:	f7fa fe52 	bl	8001a64 <__aeabi_dmul>
 8006dc0:	0002      	movs	r2, r0
 8006dc2:	000b      	movs	r3, r1
 8006dc4:	0020      	movs	r0, r4
 8006dc6:	0029      	movs	r1, r5
 8006dc8:	f7f9 fe4c 	bl	8000a64 <__aeabi_dadd>
 8006dcc:	0004      	movs	r4, r0
 8006dce:	000d      	movs	r5, r1
 8006dd0:	f7fb fd5a 	bl	8002888 <__aeabi_d2iz>
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	9004      	str	r0, [sp, #16]
 8006dd8:	2300      	movs	r3, #0
 8006dda:	0020      	movs	r0, r4
 8006ddc:	0029      	movs	r1, r5
 8006dde:	f7f9 fb3b 	bl	8000458 <__aeabi_dcmplt>
 8006de2:	2800      	cmp	r0, #0
 8006de4:	d00b      	beq.n	8006dfe <_dtoa_r+0x16a>
 8006de6:	9804      	ldr	r0, [sp, #16]
 8006de8:	f7fb fd8a 	bl	8002900 <__aeabi_i2d>
 8006dec:	002b      	movs	r3, r5
 8006dee:	0022      	movs	r2, r4
 8006df0:	f7f9 fb2c 	bl	800044c <__aeabi_dcmpeq>
 8006df4:	4243      	negs	r3, r0
 8006df6:	4158      	adcs	r0, r3
 8006df8:	9b04      	ldr	r3, [sp, #16]
 8006dfa:	1a1b      	subs	r3, r3, r0
 8006dfc:	9304      	str	r3, [sp, #16]
 8006dfe:	2301      	movs	r3, #1
 8006e00:	9315      	str	r3, [sp, #84]	@ 0x54
 8006e02:	9b04      	ldr	r3, [sp, #16]
 8006e04:	2b16      	cmp	r3, #22
 8006e06:	d810      	bhi.n	8006e2a <_dtoa_r+0x196>
 8006e08:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006e0a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006e0c:	9a04      	ldr	r2, [sp, #16]
 8006e0e:	4b83      	ldr	r3, [pc, #524]	@ (800701c <_dtoa_r+0x388>)
 8006e10:	00d2      	lsls	r2, r2, #3
 8006e12:	189b      	adds	r3, r3, r2
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	f7f9 fb1e 	bl	8000458 <__aeabi_dcmplt>
 8006e1c:	2800      	cmp	r0, #0
 8006e1e:	d047      	beq.n	8006eb0 <_dtoa_r+0x21c>
 8006e20:	9b04      	ldr	r3, [sp, #16]
 8006e22:	3b01      	subs	r3, #1
 8006e24:	9304      	str	r3, [sp, #16]
 8006e26:	2300      	movs	r3, #0
 8006e28:	9315      	str	r3, [sp, #84]	@ 0x54
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8006e2e:	9206      	str	r2, [sp, #24]
 8006e30:	1bdb      	subs	r3, r3, r7
 8006e32:	1e5a      	subs	r2, r3, #1
 8006e34:	d53e      	bpl.n	8006eb4 <_dtoa_r+0x220>
 8006e36:	2201      	movs	r2, #1
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	9306      	str	r3, [sp, #24]
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	930d      	str	r3, [sp, #52]	@ 0x34
 8006e40:	9b04      	ldr	r3, [sp, #16]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	db38      	blt.n	8006eb8 <_dtoa_r+0x224>
 8006e46:	9a04      	ldr	r2, [sp, #16]
 8006e48:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e4a:	4694      	mov	ip, r2
 8006e4c:	4463      	add	r3, ip
 8006e4e:	930d      	str	r3, [sp, #52]	@ 0x34
 8006e50:	2300      	movs	r3, #0
 8006e52:	9214      	str	r2, [sp, #80]	@ 0x50
 8006e54:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006e56:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006e58:	2401      	movs	r4, #1
 8006e5a:	2b09      	cmp	r3, #9
 8006e5c:	d862      	bhi.n	8006f24 <_dtoa_r+0x290>
 8006e5e:	2b05      	cmp	r3, #5
 8006e60:	dd02      	ble.n	8006e68 <_dtoa_r+0x1d4>
 8006e62:	2400      	movs	r4, #0
 8006e64:	3b04      	subs	r3, #4
 8006e66:	9322      	str	r3, [sp, #136]	@ 0x88
 8006e68:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006e6a:	1e98      	subs	r0, r3, #2
 8006e6c:	2803      	cmp	r0, #3
 8006e6e:	d863      	bhi.n	8006f38 <_dtoa_r+0x2a4>
 8006e70:	f7f9 f952 	bl	8000118 <__gnu_thumb1_case_uqi>
 8006e74:	2b385654 	.word	0x2b385654
 8006e78:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8006e7a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8006e7c:	18f6      	adds	r6, r6, r3
 8006e7e:	4b68      	ldr	r3, [pc, #416]	@ (8007020 <_dtoa_r+0x38c>)
 8006e80:	18f2      	adds	r2, r6, r3
 8006e82:	2a20      	cmp	r2, #32
 8006e84:	dd0f      	ble.n	8006ea6 <_dtoa_r+0x212>
 8006e86:	2340      	movs	r3, #64	@ 0x40
 8006e88:	1a9b      	subs	r3, r3, r2
 8006e8a:	409f      	lsls	r7, r3
 8006e8c:	4b65      	ldr	r3, [pc, #404]	@ (8007024 <_dtoa_r+0x390>)
 8006e8e:	0038      	movs	r0, r7
 8006e90:	18f3      	adds	r3, r6, r3
 8006e92:	40dc      	lsrs	r4, r3
 8006e94:	4320      	orrs	r0, r4
 8006e96:	f7fb fd61 	bl	800295c <__aeabi_ui2d>
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	4b62      	ldr	r3, [pc, #392]	@ (8007028 <_dtoa_r+0x394>)
 8006e9e:	1e77      	subs	r7, r6, #1
 8006ea0:	18cb      	adds	r3, r1, r3
 8006ea2:	9218      	str	r2, [sp, #96]	@ 0x60
 8006ea4:	e776      	b.n	8006d94 <_dtoa_r+0x100>
 8006ea6:	2320      	movs	r3, #32
 8006ea8:	0020      	movs	r0, r4
 8006eaa:	1a9b      	subs	r3, r3, r2
 8006eac:	4098      	lsls	r0, r3
 8006eae:	e7f2      	b.n	8006e96 <_dtoa_r+0x202>
 8006eb0:	9015      	str	r0, [sp, #84]	@ 0x54
 8006eb2:	e7ba      	b.n	8006e2a <_dtoa_r+0x196>
 8006eb4:	920d      	str	r2, [sp, #52]	@ 0x34
 8006eb6:	e7c3      	b.n	8006e40 <_dtoa_r+0x1ac>
 8006eb8:	9b06      	ldr	r3, [sp, #24]
 8006eba:	9a04      	ldr	r2, [sp, #16]
 8006ebc:	1a9b      	subs	r3, r3, r2
 8006ebe:	9306      	str	r3, [sp, #24]
 8006ec0:	4253      	negs	r3, r2
 8006ec2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	9314      	str	r3, [sp, #80]	@ 0x50
 8006ec8:	e7c5      	b.n	8006e56 <_dtoa_r+0x1c2>
 8006eca:	2301      	movs	r3, #1
 8006ecc:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006ece:	9310      	str	r3, [sp, #64]	@ 0x40
 8006ed0:	4694      	mov	ip, r2
 8006ed2:	9b04      	ldr	r3, [sp, #16]
 8006ed4:	4463      	add	r3, ip
 8006ed6:	930e      	str	r3, [sp, #56]	@ 0x38
 8006ed8:	3301      	adds	r3, #1
 8006eda:	9309      	str	r3, [sp, #36]	@ 0x24
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	dc08      	bgt.n	8006ef2 <_dtoa_r+0x25e>
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e006      	b.n	8006ef2 <_dtoa_r+0x25e>
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	9310      	str	r3, [sp, #64]	@ 0x40
 8006ee8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	dd28      	ble.n	8006f40 <_dtoa_r+0x2ac>
 8006eee:	930e      	str	r3, [sp, #56]	@ 0x38
 8006ef0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ef2:	9a03      	ldr	r2, [sp, #12]
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	69d0      	ldr	r0, [r2, #28]
 8006ef8:	2204      	movs	r2, #4
 8006efa:	0015      	movs	r5, r2
 8006efc:	3514      	adds	r5, #20
 8006efe:	429d      	cmp	r5, r3
 8006f00:	d923      	bls.n	8006f4a <_dtoa_r+0x2b6>
 8006f02:	6041      	str	r1, [r0, #4]
 8006f04:	9803      	ldr	r0, [sp, #12]
 8006f06:	f000 fcff 	bl	8007908 <_Balloc>
 8006f0a:	9008      	str	r0, [sp, #32]
 8006f0c:	2800      	cmp	r0, #0
 8006f0e:	d11f      	bne.n	8006f50 <_dtoa_r+0x2bc>
 8006f10:	21b0      	movs	r1, #176	@ 0xb0
 8006f12:	4b46      	ldr	r3, [pc, #280]	@ (800702c <_dtoa_r+0x398>)
 8006f14:	4831      	ldr	r0, [pc, #196]	@ (8006fdc <_dtoa_r+0x348>)
 8006f16:	9a08      	ldr	r2, [sp, #32]
 8006f18:	31ff      	adds	r1, #255	@ 0xff
 8006f1a:	e6d0      	b.n	8006cbe <_dtoa_r+0x2a>
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	e7e2      	b.n	8006ee6 <_dtoa_r+0x252>
 8006f20:	2300      	movs	r3, #0
 8006f22:	e7d3      	b.n	8006ecc <_dtoa_r+0x238>
 8006f24:	2300      	movs	r3, #0
 8006f26:	9410      	str	r4, [sp, #64]	@ 0x40
 8006f28:	9322      	str	r3, [sp, #136]	@ 0x88
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	930e      	str	r3, [sp, #56]	@ 0x38
 8006f30:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f32:	3313      	adds	r3, #19
 8006f34:	9223      	str	r2, [sp, #140]	@ 0x8c
 8006f36:	e7dc      	b.n	8006ef2 <_dtoa_r+0x25e>
 8006f38:	2301      	movs	r3, #1
 8006f3a:	9310      	str	r3, [sp, #64]	@ 0x40
 8006f3c:	3b02      	subs	r3, #2
 8006f3e:	e7f5      	b.n	8006f2c <_dtoa_r+0x298>
 8006f40:	2301      	movs	r3, #1
 8006f42:	001a      	movs	r2, r3
 8006f44:	930e      	str	r3, [sp, #56]	@ 0x38
 8006f46:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f48:	e7f4      	b.n	8006f34 <_dtoa_r+0x2a0>
 8006f4a:	3101      	adds	r1, #1
 8006f4c:	0052      	lsls	r2, r2, #1
 8006f4e:	e7d4      	b.n	8006efa <_dtoa_r+0x266>
 8006f50:	9b03      	ldr	r3, [sp, #12]
 8006f52:	9a08      	ldr	r2, [sp, #32]
 8006f54:	69db      	ldr	r3, [r3, #28]
 8006f56:	601a      	str	r2, [r3, #0]
 8006f58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f5a:	2b0e      	cmp	r3, #14
 8006f5c:	d900      	bls.n	8006f60 <_dtoa_r+0x2cc>
 8006f5e:	e0d6      	b.n	800710e <_dtoa_r+0x47a>
 8006f60:	2c00      	cmp	r4, #0
 8006f62:	d100      	bne.n	8006f66 <_dtoa_r+0x2d2>
 8006f64:	e0d3      	b.n	800710e <_dtoa_r+0x47a>
 8006f66:	9b04      	ldr	r3, [sp, #16]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	dd63      	ble.n	8007034 <_dtoa_r+0x3a0>
 8006f6c:	210f      	movs	r1, #15
 8006f6e:	9a04      	ldr	r2, [sp, #16]
 8006f70:	4b2a      	ldr	r3, [pc, #168]	@ (800701c <_dtoa_r+0x388>)
 8006f72:	400a      	ands	r2, r1
 8006f74:	00d2      	lsls	r2, r2, #3
 8006f76:	189b      	adds	r3, r3, r2
 8006f78:	681e      	ldr	r6, [r3, #0]
 8006f7a:	685f      	ldr	r7, [r3, #4]
 8006f7c:	9b04      	ldr	r3, [sp, #16]
 8006f7e:	2402      	movs	r4, #2
 8006f80:	111d      	asrs	r5, r3, #4
 8006f82:	05db      	lsls	r3, r3, #23
 8006f84:	d50a      	bpl.n	8006f9c <_dtoa_r+0x308>
 8006f86:	4b2a      	ldr	r3, [pc, #168]	@ (8007030 <_dtoa_r+0x39c>)
 8006f88:	400d      	ands	r5, r1
 8006f8a:	6a1a      	ldr	r2, [r3, #32]
 8006f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f8e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006f90:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006f92:	f7fa f92d 	bl	80011f0 <__aeabi_ddiv>
 8006f96:	900a      	str	r0, [sp, #40]	@ 0x28
 8006f98:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006f9a:	3401      	adds	r4, #1
 8006f9c:	4b24      	ldr	r3, [pc, #144]	@ (8007030 <_dtoa_r+0x39c>)
 8006f9e:	930c      	str	r3, [sp, #48]	@ 0x30
 8006fa0:	2d00      	cmp	r5, #0
 8006fa2:	d108      	bne.n	8006fb6 <_dtoa_r+0x322>
 8006fa4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006fa6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006fa8:	0032      	movs	r2, r6
 8006faa:	003b      	movs	r3, r7
 8006fac:	f7fa f920 	bl	80011f0 <__aeabi_ddiv>
 8006fb0:	900a      	str	r0, [sp, #40]	@ 0x28
 8006fb2:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006fb4:	e059      	b.n	800706a <_dtoa_r+0x3d6>
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	421d      	tst	r5, r3
 8006fba:	d009      	beq.n	8006fd0 <_dtoa_r+0x33c>
 8006fbc:	18e4      	adds	r4, r4, r3
 8006fbe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006fc0:	0030      	movs	r0, r6
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	0039      	movs	r1, r7
 8006fc8:	f7fa fd4c 	bl	8001a64 <__aeabi_dmul>
 8006fcc:	0006      	movs	r6, r0
 8006fce:	000f      	movs	r7, r1
 8006fd0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006fd2:	106d      	asrs	r5, r5, #1
 8006fd4:	3308      	adds	r3, #8
 8006fd6:	e7e2      	b.n	8006f9e <_dtoa_r+0x30a>
 8006fd8:	08009329 	.word	0x08009329
 8006fdc:	08009340 	.word	0x08009340
 8006fe0:	7ff00000 	.word	0x7ff00000
 8006fe4:	0000270f 	.word	0x0000270f
 8006fe8:	08009325 	.word	0x08009325
 8006fec:	08009328 	.word	0x08009328
 8006ff0:	080092f9 	.word	0x080092f9
 8006ff4:	080092f8 	.word	0x080092f8
 8006ff8:	3ff00000 	.word	0x3ff00000
 8006ffc:	fffffc01 	.word	0xfffffc01
 8007000:	3ff80000 	.word	0x3ff80000
 8007004:	636f4361 	.word	0x636f4361
 8007008:	3fd287a7 	.word	0x3fd287a7
 800700c:	8b60c8b3 	.word	0x8b60c8b3
 8007010:	3fc68a28 	.word	0x3fc68a28
 8007014:	509f79fb 	.word	0x509f79fb
 8007018:	3fd34413 	.word	0x3fd34413
 800701c:	08009558 	.word	0x08009558
 8007020:	00000432 	.word	0x00000432
 8007024:	00000412 	.word	0x00000412
 8007028:	fe100000 	.word	0xfe100000
 800702c:	08009398 	.word	0x08009398
 8007030:	08009530 	.word	0x08009530
 8007034:	9b04      	ldr	r3, [sp, #16]
 8007036:	2402      	movs	r4, #2
 8007038:	2b00      	cmp	r3, #0
 800703a:	d016      	beq.n	800706a <_dtoa_r+0x3d6>
 800703c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800703e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007040:	220f      	movs	r2, #15
 8007042:	425d      	negs	r5, r3
 8007044:	402a      	ands	r2, r5
 8007046:	4bd5      	ldr	r3, [pc, #852]	@ (800739c <_dtoa_r+0x708>)
 8007048:	00d2      	lsls	r2, r2, #3
 800704a:	189b      	adds	r3, r3, r2
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	f7fa fd08 	bl	8001a64 <__aeabi_dmul>
 8007054:	2701      	movs	r7, #1
 8007056:	2300      	movs	r3, #0
 8007058:	900a      	str	r0, [sp, #40]	@ 0x28
 800705a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800705c:	4ed0      	ldr	r6, [pc, #832]	@ (80073a0 <_dtoa_r+0x70c>)
 800705e:	112d      	asrs	r5, r5, #4
 8007060:	2d00      	cmp	r5, #0
 8007062:	d000      	beq.n	8007066 <_dtoa_r+0x3d2>
 8007064:	e095      	b.n	8007192 <_dtoa_r+0x4fe>
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1a2      	bne.n	8006fb0 <_dtoa_r+0x31c>
 800706a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800706c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800706e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007070:	2b00      	cmp	r3, #0
 8007072:	d100      	bne.n	8007076 <_dtoa_r+0x3e2>
 8007074:	e098      	b.n	80071a8 <_dtoa_r+0x514>
 8007076:	2200      	movs	r2, #0
 8007078:	0030      	movs	r0, r6
 800707a:	0039      	movs	r1, r7
 800707c:	4bc9      	ldr	r3, [pc, #804]	@ (80073a4 <_dtoa_r+0x710>)
 800707e:	f7f9 f9eb 	bl	8000458 <__aeabi_dcmplt>
 8007082:	2800      	cmp	r0, #0
 8007084:	d100      	bne.n	8007088 <_dtoa_r+0x3f4>
 8007086:	e08f      	b.n	80071a8 <_dtoa_r+0x514>
 8007088:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800708a:	2b00      	cmp	r3, #0
 800708c:	d100      	bne.n	8007090 <_dtoa_r+0x3fc>
 800708e:	e08b      	b.n	80071a8 <_dtoa_r+0x514>
 8007090:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007092:	2b00      	cmp	r3, #0
 8007094:	dd37      	ble.n	8007106 <_dtoa_r+0x472>
 8007096:	9b04      	ldr	r3, [sp, #16]
 8007098:	2200      	movs	r2, #0
 800709a:	3b01      	subs	r3, #1
 800709c:	930c      	str	r3, [sp, #48]	@ 0x30
 800709e:	0030      	movs	r0, r6
 80070a0:	4bc1      	ldr	r3, [pc, #772]	@ (80073a8 <_dtoa_r+0x714>)
 80070a2:	0039      	movs	r1, r7
 80070a4:	f7fa fcde 	bl	8001a64 <__aeabi_dmul>
 80070a8:	900a      	str	r0, [sp, #40]	@ 0x28
 80070aa:	910b      	str	r1, [sp, #44]	@ 0x2c
 80070ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070ae:	3401      	adds	r4, #1
 80070b0:	0020      	movs	r0, r4
 80070b2:	9311      	str	r3, [sp, #68]	@ 0x44
 80070b4:	f7fb fc24 	bl	8002900 <__aeabi_i2d>
 80070b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80070ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070bc:	f7fa fcd2 	bl	8001a64 <__aeabi_dmul>
 80070c0:	4bba      	ldr	r3, [pc, #744]	@ (80073ac <_dtoa_r+0x718>)
 80070c2:	2200      	movs	r2, #0
 80070c4:	f7f9 fcce 	bl	8000a64 <__aeabi_dadd>
 80070c8:	4bb9      	ldr	r3, [pc, #740]	@ (80073b0 <_dtoa_r+0x71c>)
 80070ca:	0006      	movs	r6, r0
 80070cc:	18cf      	adds	r7, r1, r3
 80070ce:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d16d      	bne.n	80071b0 <_dtoa_r+0x51c>
 80070d4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80070d6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80070d8:	2200      	movs	r2, #0
 80070da:	4bb6      	ldr	r3, [pc, #728]	@ (80073b4 <_dtoa_r+0x720>)
 80070dc:	f7fa ffa8 	bl	8002030 <__aeabi_dsub>
 80070e0:	0032      	movs	r2, r6
 80070e2:	003b      	movs	r3, r7
 80070e4:	0004      	movs	r4, r0
 80070e6:	000d      	movs	r5, r1
 80070e8:	f7f9 f9ca 	bl	8000480 <__aeabi_dcmpgt>
 80070ec:	2800      	cmp	r0, #0
 80070ee:	d000      	beq.n	80070f2 <_dtoa_r+0x45e>
 80070f0:	e2b6      	b.n	8007660 <_dtoa_r+0x9cc>
 80070f2:	2180      	movs	r1, #128	@ 0x80
 80070f4:	0609      	lsls	r1, r1, #24
 80070f6:	187b      	adds	r3, r7, r1
 80070f8:	0032      	movs	r2, r6
 80070fa:	0020      	movs	r0, r4
 80070fc:	0029      	movs	r1, r5
 80070fe:	f7f9 f9ab 	bl	8000458 <__aeabi_dcmplt>
 8007102:	2800      	cmp	r0, #0
 8007104:	d128      	bne.n	8007158 <_dtoa_r+0x4c4>
 8007106:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007108:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800710a:	930a      	str	r3, [sp, #40]	@ 0x28
 800710c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800710e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8007110:	2b00      	cmp	r3, #0
 8007112:	da00      	bge.n	8007116 <_dtoa_r+0x482>
 8007114:	e174      	b.n	8007400 <_dtoa_r+0x76c>
 8007116:	9a04      	ldr	r2, [sp, #16]
 8007118:	2a0e      	cmp	r2, #14
 800711a:	dd00      	ble.n	800711e <_dtoa_r+0x48a>
 800711c:	e170      	b.n	8007400 <_dtoa_r+0x76c>
 800711e:	4b9f      	ldr	r3, [pc, #636]	@ (800739c <_dtoa_r+0x708>)
 8007120:	00d2      	lsls	r2, r2, #3
 8007122:	189b      	adds	r3, r3, r2
 8007124:	685c      	ldr	r4, [r3, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	9306      	str	r3, [sp, #24]
 800712a:	9407      	str	r4, [sp, #28]
 800712c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800712e:	2b00      	cmp	r3, #0
 8007130:	db00      	blt.n	8007134 <_dtoa_r+0x4a0>
 8007132:	e0e7      	b.n	8007304 <_dtoa_r+0x670>
 8007134:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007136:	2b00      	cmp	r3, #0
 8007138:	dd00      	ble.n	800713c <_dtoa_r+0x4a8>
 800713a:	e0e3      	b.n	8007304 <_dtoa_r+0x670>
 800713c:	d10c      	bne.n	8007158 <_dtoa_r+0x4c4>
 800713e:	9806      	ldr	r0, [sp, #24]
 8007140:	9907      	ldr	r1, [sp, #28]
 8007142:	2200      	movs	r2, #0
 8007144:	4b9b      	ldr	r3, [pc, #620]	@ (80073b4 <_dtoa_r+0x720>)
 8007146:	f7fa fc8d 	bl	8001a64 <__aeabi_dmul>
 800714a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800714c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800714e:	f7f9 f9a1 	bl	8000494 <__aeabi_dcmpge>
 8007152:	2800      	cmp	r0, #0
 8007154:	d100      	bne.n	8007158 <_dtoa_r+0x4c4>
 8007156:	e286      	b.n	8007666 <_dtoa_r+0x9d2>
 8007158:	2600      	movs	r6, #0
 800715a:	0037      	movs	r7, r6
 800715c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800715e:	9c08      	ldr	r4, [sp, #32]
 8007160:	43db      	mvns	r3, r3
 8007162:	930c      	str	r3, [sp, #48]	@ 0x30
 8007164:	9704      	str	r7, [sp, #16]
 8007166:	2700      	movs	r7, #0
 8007168:	0031      	movs	r1, r6
 800716a:	9803      	ldr	r0, [sp, #12]
 800716c:	f000 fc10 	bl	8007990 <_Bfree>
 8007170:	9b04      	ldr	r3, [sp, #16]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d100      	bne.n	8007178 <_dtoa_r+0x4e4>
 8007176:	e0bb      	b.n	80072f0 <_dtoa_r+0x65c>
 8007178:	2f00      	cmp	r7, #0
 800717a:	d005      	beq.n	8007188 <_dtoa_r+0x4f4>
 800717c:	429f      	cmp	r7, r3
 800717e:	d003      	beq.n	8007188 <_dtoa_r+0x4f4>
 8007180:	0039      	movs	r1, r7
 8007182:	9803      	ldr	r0, [sp, #12]
 8007184:	f000 fc04 	bl	8007990 <_Bfree>
 8007188:	9904      	ldr	r1, [sp, #16]
 800718a:	9803      	ldr	r0, [sp, #12]
 800718c:	f000 fc00 	bl	8007990 <_Bfree>
 8007190:	e0ae      	b.n	80072f0 <_dtoa_r+0x65c>
 8007192:	423d      	tst	r5, r7
 8007194:	d005      	beq.n	80071a2 <_dtoa_r+0x50e>
 8007196:	6832      	ldr	r2, [r6, #0]
 8007198:	6873      	ldr	r3, [r6, #4]
 800719a:	f7fa fc63 	bl	8001a64 <__aeabi_dmul>
 800719e:	003b      	movs	r3, r7
 80071a0:	3401      	adds	r4, #1
 80071a2:	106d      	asrs	r5, r5, #1
 80071a4:	3608      	adds	r6, #8
 80071a6:	e75b      	b.n	8007060 <_dtoa_r+0x3cc>
 80071a8:	9b04      	ldr	r3, [sp, #16]
 80071aa:	930c      	str	r3, [sp, #48]	@ 0x30
 80071ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071ae:	e77f      	b.n	80070b0 <_dtoa_r+0x41c>
 80071b0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80071b2:	4b7a      	ldr	r3, [pc, #488]	@ (800739c <_dtoa_r+0x708>)
 80071b4:	3a01      	subs	r2, #1
 80071b6:	00d2      	lsls	r2, r2, #3
 80071b8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80071ba:	189b      	adds	r3, r3, r2
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	2900      	cmp	r1, #0
 80071c2:	d04c      	beq.n	800725e <_dtoa_r+0x5ca>
 80071c4:	2000      	movs	r0, #0
 80071c6:	497c      	ldr	r1, [pc, #496]	@ (80073b8 <_dtoa_r+0x724>)
 80071c8:	f7fa f812 	bl	80011f0 <__aeabi_ddiv>
 80071cc:	0032      	movs	r2, r6
 80071ce:	003b      	movs	r3, r7
 80071d0:	f7fa ff2e 	bl	8002030 <__aeabi_dsub>
 80071d4:	9a08      	ldr	r2, [sp, #32]
 80071d6:	0006      	movs	r6, r0
 80071d8:	4694      	mov	ip, r2
 80071da:	000f      	movs	r7, r1
 80071dc:	9b08      	ldr	r3, [sp, #32]
 80071de:	9316      	str	r3, [sp, #88]	@ 0x58
 80071e0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80071e2:	4463      	add	r3, ip
 80071e4:	9311      	str	r3, [sp, #68]	@ 0x44
 80071e6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80071e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80071ea:	f7fb fb4d 	bl	8002888 <__aeabi_d2iz>
 80071ee:	0005      	movs	r5, r0
 80071f0:	f7fb fb86 	bl	8002900 <__aeabi_i2d>
 80071f4:	0002      	movs	r2, r0
 80071f6:	000b      	movs	r3, r1
 80071f8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80071fa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80071fc:	f7fa ff18 	bl	8002030 <__aeabi_dsub>
 8007200:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007202:	3530      	adds	r5, #48	@ 0x30
 8007204:	1c5c      	adds	r4, r3, #1
 8007206:	701d      	strb	r5, [r3, #0]
 8007208:	0032      	movs	r2, r6
 800720a:	003b      	movs	r3, r7
 800720c:	900a      	str	r0, [sp, #40]	@ 0x28
 800720e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007210:	f7f9 f922 	bl	8000458 <__aeabi_dcmplt>
 8007214:	2800      	cmp	r0, #0
 8007216:	d16b      	bne.n	80072f0 <_dtoa_r+0x65c>
 8007218:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800721a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800721c:	2000      	movs	r0, #0
 800721e:	4961      	ldr	r1, [pc, #388]	@ (80073a4 <_dtoa_r+0x710>)
 8007220:	f7fa ff06 	bl	8002030 <__aeabi_dsub>
 8007224:	0032      	movs	r2, r6
 8007226:	003b      	movs	r3, r7
 8007228:	f7f9 f916 	bl	8000458 <__aeabi_dcmplt>
 800722c:	2800      	cmp	r0, #0
 800722e:	d000      	beq.n	8007232 <_dtoa_r+0x59e>
 8007230:	e0c6      	b.n	80073c0 <_dtoa_r+0x72c>
 8007232:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007234:	42a3      	cmp	r3, r4
 8007236:	d100      	bne.n	800723a <_dtoa_r+0x5a6>
 8007238:	e765      	b.n	8007106 <_dtoa_r+0x472>
 800723a:	2200      	movs	r2, #0
 800723c:	0030      	movs	r0, r6
 800723e:	0039      	movs	r1, r7
 8007240:	4b59      	ldr	r3, [pc, #356]	@ (80073a8 <_dtoa_r+0x714>)
 8007242:	f7fa fc0f 	bl	8001a64 <__aeabi_dmul>
 8007246:	2200      	movs	r2, #0
 8007248:	0006      	movs	r6, r0
 800724a:	000f      	movs	r7, r1
 800724c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800724e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007250:	4b55      	ldr	r3, [pc, #340]	@ (80073a8 <_dtoa_r+0x714>)
 8007252:	f7fa fc07 	bl	8001a64 <__aeabi_dmul>
 8007256:	9416      	str	r4, [sp, #88]	@ 0x58
 8007258:	900a      	str	r0, [sp, #40]	@ 0x28
 800725a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800725c:	e7c3      	b.n	80071e6 <_dtoa_r+0x552>
 800725e:	0030      	movs	r0, r6
 8007260:	0039      	movs	r1, r7
 8007262:	f7fa fbff 	bl	8001a64 <__aeabi_dmul>
 8007266:	9d08      	ldr	r5, [sp, #32]
 8007268:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800726a:	002b      	movs	r3, r5
 800726c:	4694      	mov	ip, r2
 800726e:	9016      	str	r0, [sp, #88]	@ 0x58
 8007270:	9117      	str	r1, [sp, #92]	@ 0x5c
 8007272:	4463      	add	r3, ip
 8007274:	9319      	str	r3, [sp, #100]	@ 0x64
 8007276:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007278:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800727a:	f7fb fb05 	bl	8002888 <__aeabi_d2iz>
 800727e:	0004      	movs	r4, r0
 8007280:	f7fb fb3e 	bl	8002900 <__aeabi_i2d>
 8007284:	000b      	movs	r3, r1
 8007286:	0002      	movs	r2, r0
 8007288:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800728a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800728c:	f7fa fed0 	bl	8002030 <__aeabi_dsub>
 8007290:	3430      	adds	r4, #48	@ 0x30
 8007292:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007294:	702c      	strb	r4, [r5, #0]
 8007296:	3501      	adds	r5, #1
 8007298:	0006      	movs	r6, r0
 800729a:	000f      	movs	r7, r1
 800729c:	42ab      	cmp	r3, r5
 800729e:	d12a      	bne.n	80072f6 <_dtoa_r+0x662>
 80072a0:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80072a2:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80072a4:	9b08      	ldr	r3, [sp, #32]
 80072a6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80072a8:	469c      	mov	ip, r3
 80072aa:	2200      	movs	r2, #0
 80072ac:	4b42      	ldr	r3, [pc, #264]	@ (80073b8 <_dtoa_r+0x724>)
 80072ae:	4464      	add	r4, ip
 80072b0:	f7f9 fbd8 	bl	8000a64 <__aeabi_dadd>
 80072b4:	0002      	movs	r2, r0
 80072b6:	000b      	movs	r3, r1
 80072b8:	0030      	movs	r0, r6
 80072ba:	0039      	movs	r1, r7
 80072bc:	f7f9 f8e0 	bl	8000480 <__aeabi_dcmpgt>
 80072c0:	2800      	cmp	r0, #0
 80072c2:	d000      	beq.n	80072c6 <_dtoa_r+0x632>
 80072c4:	e07c      	b.n	80073c0 <_dtoa_r+0x72c>
 80072c6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80072c8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80072ca:	2000      	movs	r0, #0
 80072cc:	493a      	ldr	r1, [pc, #232]	@ (80073b8 <_dtoa_r+0x724>)
 80072ce:	f7fa feaf 	bl	8002030 <__aeabi_dsub>
 80072d2:	0002      	movs	r2, r0
 80072d4:	000b      	movs	r3, r1
 80072d6:	0030      	movs	r0, r6
 80072d8:	0039      	movs	r1, r7
 80072da:	f7f9 f8bd 	bl	8000458 <__aeabi_dcmplt>
 80072de:	2800      	cmp	r0, #0
 80072e0:	d100      	bne.n	80072e4 <_dtoa_r+0x650>
 80072e2:	e710      	b.n	8007106 <_dtoa_r+0x472>
 80072e4:	0023      	movs	r3, r4
 80072e6:	3c01      	subs	r4, #1
 80072e8:	7822      	ldrb	r2, [r4, #0]
 80072ea:	2a30      	cmp	r2, #48	@ 0x30
 80072ec:	d0fa      	beq.n	80072e4 <_dtoa_r+0x650>
 80072ee:	001c      	movs	r4, r3
 80072f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80072f2:	9304      	str	r3, [sp, #16]
 80072f4:	e042      	b.n	800737c <_dtoa_r+0x6e8>
 80072f6:	2200      	movs	r2, #0
 80072f8:	4b2b      	ldr	r3, [pc, #172]	@ (80073a8 <_dtoa_r+0x714>)
 80072fa:	f7fa fbb3 	bl	8001a64 <__aeabi_dmul>
 80072fe:	900a      	str	r0, [sp, #40]	@ 0x28
 8007300:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007302:	e7b8      	b.n	8007276 <_dtoa_r+0x5e2>
 8007304:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007306:	9d08      	ldr	r5, [sp, #32]
 8007308:	3b01      	subs	r3, #1
 800730a:	195b      	adds	r3, r3, r5
 800730c:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800730e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007310:	930a      	str	r3, [sp, #40]	@ 0x28
 8007312:	9a06      	ldr	r2, [sp, #24]
 8007314:	9b07      	ldr	r3, [sp, #28]
 8007316:	0030      	movs	r0, r6
 8007318:	0039      	movs	r1, r7
 800731a:	f7f9 ff69 	bl	80011f0 <__aeabi_ddiv>
 800731e:	f7fb fab3 	bl	8002888 <__aeabi_d2iz>
 8007322:	9009      	str	r0, [sp, #36]	@ 0x24
 8007324:	f7fb faec 	bl	8002900 <__aeabi_i2d>
 8007328:	9a06      	ldr	r2, [sp, #24]
 800732a:	9b07      	ldr	r3, [sp, #28]
 800732c:	f7fa fb9a 	bl	8001a64 <__aeabi_dmul>
 8007330:	0002      	movs	r2, r0
 8007332:	000b      	movs	r3, r1
 8007334:	0030      	movs	r0, r6
 8007336:	0039      	movs	r1, r7
 8007338:	f7fa fe7a 	bl	8002030 <__aeabi_dsub>
 800733c:	002b      	movs	r3, r5
 800733e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007340:	3501      	adds	r5, #1
 8007342:	3230      	adds	r2, #48	@ 0x30
 8007344:	701a      	strb	r2, [r3, #0]
 8007346:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007348:	002c      	movs	r4, r5
 800734a:	429a      	cmp	r2, r3
 800734c:	d14b      	bne.n	80073e6 <_dtoa_r+0x752>
 800734e:	0002      	movs	r2, r0
 8007350:	000b      	movs	r3, r1
 8007352:	f7f9 fb87 	bl	8000a64 <__aeabi_dadd>
 8007356:	9a06      	ldr	r2, [sp, #24]
 8007358:	9b07      	ldr	r3, [sp, #28]
 800735a:	0006      	movs	r6, r0
 800735c:	000f      	movs	r7, r1
 800735e:	f7f9 f88f 	bl	8000480 <__aeabi_dcmpgt>
 8007362:	2800      	cmp	r0, #0
 8007364:	d12a      	bne.n	80073bc <_dtoa_r+0x728>
 8007366:	9a06      	ldr	r2, [sp, #24]
 8007368:	9b07      	ldr	r3, [sp, #28]
 800736a:	0030      	movs	r0, r6
 800736c:	0039      	movs	r1, r7
 800736e:	f7f9 f86d 	bl	800044c <__aeabi_dcmpeq>
 8007372:	2800      	cmp	r0, #0
 8007374:	d002      	beq.n	800737c <_dtoa_r+0x6e8>
 8007376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007378:	07dd      	lsls	r5, r3, #31
 800737a:	d41f      	bmi.n	80073bc <_dtoa_r+0x728>
 800737c:	9905      	ldr	r1, [sp, #20]
 800737e:	9803      	ldr	r0, [sp, #12]
 8007380:	f000 fb06 	bl	8007990 <_Bfree>
 8007384:	2300      	movs	r3, #0
 8007386:	7023      	strb	r3, [r4, #0]
 8007388:	9b04      	ldr	r3, [sp, #16]
 800738a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800738c:	3301      	adds	r3, #1
 800738e:	6013      	str	r3, [r2, #0]
 8007390:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8007392:	2b00      	cmp	r3, #0
 8007394:	d100      	bne.n	8007398 <_dtoa_r+0x704>
 8007396:	e4c7      	b.n	8006d28 <_dtoa_r+0x94>
 8007398:	601c      	str	r4, [r3, #0]
 800739a:	e4c5      	b.n	8006d28 <_dtoa_r+0x94>
 800739c:	08009558 	.word	0x08009558
 80073a0:	08009530 	.word	0x08009530
 80073a4:	3ff00000 	.word	0x3ff00000
 80073a8:	40240000 	.word	0x40240000
 80073ac:	401c0000 	.word	0x401c0000
 80073b0:	fcc00000 	.word	0xfcc00000
 80073b4:	40140000 	.word	0x40140000
 80073b8:	3fe00000 	.word	0x3fe00000
 80073bc:	9b04      	ldr	r3, [sp, #16]
 80073be:	930c      	str	r3, [sp, #48]	@ 0x30
 80073c0:	0023      	movs	r3, r4
 80073c2:	001c      	movs	r4, r3
 80073c4:	3b01      	subs	r3, #1
 80073c6:	781a      	ldrb	r2, [r3, #0]
 80073c8:	2a39      	cmp	r2, #57	@ 0x39
 80073ca:	d108      	bne.n	80073de <_dtoa_r+0x74a>
 80073cc:	9a08      	ldr	r2, [sp, #32]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d1f7      	bne.n	80073c2 <_dtoa_r+0x72e>
 80073d2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80073d4:	9908      	ldr	r1, [sp, #32]
 80073d6:	3201      	adds	r2, #1
 80073d8:	920c      	str	r2, [sp, #48]	@ 0x30
 80073da:	2230      	movs	r2, #48	@ 0x30
 80073dc:	700a      	strb	r2, [r1, #0]
 80073de:	781a      	ldrb	r2, [r3, #0]
 80073e0:	3201      	adds	r2, #1
 80073e2:	701a      	strb	r2, [r3, #0]
 80073e4:	e784      	b.n	80072f0 <_dtoa_r+0x65c>
 80073e6:	2200      	movs	r2, #0
 80073e8:	4bc6      	ldr	r3, [pc, #792]	@ (8007704 <_dtoa_r+0xa70>)
 80073ea:	f7fa fb3b 	bl	8001a64 <__aeabi_dmul>
 80073ee:	2200      	movs	r2, #0
 80073f0:	2300      	movs	r3, #0
 80073f2:	0006      	movs	r6, r0
 80073f4:	000f      	movs	r7, r1
 80073f6:	f7f9 f829 	bl	800044c <__aeabi_dcmpeq>
 80073fa:	2800      	cmp	r0, #0
 80073fc:	d089      	beq.n	8007312 <_dtoa_r+0x67e>
 80073fe:	e7bd      	b.n	800737c <_dtoa_r+0x6e8>
 8007400:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8007402:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8007404:	9c06      	ldr	r4, [sp, #24]
 8007406:	2f00      	cmp	r7, #0
 8007408:	d014      	beq.n	8007434 <_dtoa_r+0x7a0>
 800740a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800740c:	2a01      	cmp	r2, #1
 800740e:	dd00      	ble.n	8007412 <_dtoa_r+0x77e>
 8007410:	e0e4      	b.n	80075dc <_dtoa_r+0x948>
 8007412:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8007414:	2a00      	cmp	r2, #0
 8007416:	d100      	bne.n	800741a <_dtoa_r+0x786>
 8007418:	e0da      	b.n	80075d0 <_dtoa_r+0x93c>
 800741a:	4abb      	ldr	r2, [pc, #748]	@ (8007708 <_dtoa_r+0xa74>)
 800741c:	189b      	adds	r3, r3, r2
 800741e:	9a06      	ldr	r2, [sp, #24]
 8007420:	2101      	movs	r1, #1
 8007422:	18d2      	adds	r2, r2, r3
 8007424:	9206      	str	r2, [sp, #24]
 8007426:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007428:	9803      	ldr	r0, [sp, #12]
 800742a:	18d3      	adds	r3, r2, r3
 800742c:	930d      	str	r3, [sp, #52]	@ 0x34
 800742e:	f000 fb67 	bl	8007b00 <__i2b>
 8007432:	0007      	movs	r7, r0
 8007434:	2c00      	cmp	r4, #0
 8007436:	d00e      	beq.n	8007456 <_dtoa_r+0x7c2>
 8007438:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800743a:	2b00      	cmp	r3, #0
 800743c:	dd0b      	ble.n	8007456 <_dtoa_r+0x7c2>
 800743e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007440:	0023      	movs	r3, r4
 8007442:	4294      	cmp	r4, r2
 8007444:	dd00      	ble.n	8007448 <_dtoa_r+0x7b4>
 8007446:	0013      	movs	r3, r2
 8007448:	9a06      	ldr	r2, [sp, #24]
 800744a:	1ae4      	subs	r4, r4, r3
 800744c:	1ad2      	subs	r2, r2, r3
 800744e:	9206      	str	r2, [sp, #24]
 8007450:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007452:	1ad3      	subs	r3, r2, r3
 8007454:	930d      	str	r3, [sp, #52]	@ 0x34
 8007456:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007458:	2b00      	cmp	r3, #0
 800745a:	d021      	beq.n	80074a0 <_dtoa_r+0x80c>
 800745c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800745e:	2b00      	cmp	r3, #0
 8007460:	d100      	bne.n	8007464 <_dtoa_r+0x7d0>
 8007462:	e0d3      	b.n	800760c <_dtoa_r+0x978>
 8007464:	9e05      	ldr	r6, [sp, #20]
 8007466:	2d00      	cmp	r5, #0
 8007468:	d014      	beq.n	8007494 <_dtoa_r+0x800>
 800746a:	0039      	movs	r1, r7
 800746c:	002a      	movs	r2, r5
 800746e:	9803      	ldr	r0, [sp, #12]
 8007470:	f000 fc08 	bl	8007c84 <__pow5mult>
 8007474:	9a05      	ldr	r2, [sp, #20]
 8007476:	0001      	movs	r1, r0
 8007478:	0007      	movs	r7, r0
 800747a:	9803      	ldr	r0, [sp, #12]
 800747c:	f000 fb58 	bl	8007b30 <__multiply>
 8007480:	0006      	movs	r6, r0
 8007482:	9905      	ldr	r1, [sp, #20]
 8007484:	9803      	ldr	r0, [sp, #12]
 8007486:	f000 fa83 	bl	8007990 <_Bfree>
 800748a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800748c:	9605      	str	r6, [sp, #20]
 800748e:	1b5b      	subs	r3, r3, r5
 8007490:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007492:	d005      	beq.n	80074a0 <_dtoa_r+0x80c>
 8007494:	0031      	movs	r1, r6
 8007496:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007498:	9803      	ldr	r0, [sp, #12]
 800749a:	f000 fbf3 	bl	8007c84 <__pow5mult>
 800749e:	9005      	str	r0, [sp, #20]
 80074a0:	2101      	movs	r1, #1
 80074a2:	9803      	ldr	r0, [sp, #12]
 80074a4:	f000 fb2c 	bl	8007b00 <__i2b>
 80074a8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80074aa:	0006      	movs	r6, r0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d100      	bne.n	80074b2 <_dtoa_r+0x81e>
 80074b0:	e1bc      	b.n	800782c <_dtoa_r+0xb98>
 80074b2:	001a      	movs	r2, r3
 80074b4:	0001      	movs	r1, r0
 80074b6:	9803      	ldr	r0, [sp, #12]
 80074b8:	f000 fbe4 	bl	8007c84 <__pow5mult>
 80074bc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80074be:	0006      	movs	r6, r0
 80074c0:	2500      	movs	r5, #0
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	dc16      	bgt.n	80074f4 <_dtoa_r+0x860>
 80074c6:	2500      	movs	r5, #0
 80074c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074ca:	42ab      	cmp	r3, r5
 80074cc:	d10e      	bne.n	80074ec <_dtoa_r+0x858>
 80074ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074d0:	031b      	lsls	r3, r3, #12
 80074d2:	42ab      	cmp	r3, r5
 80074d4:	d10a      	bne.n	80074ec <_dtoa_r+0x858>
 80074d6:	4b8d      	ldr	r3, [pc, #564]	@ (800770c <_dtoa_r+0xa78>)
 80074d8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80074da:	4213      	tst	r3, r2
 80074dc:	d006      	beq.n	80074ec <_dtoa_r+0x858>
 80074de:	9b06      	ldr	r3, [sp, #24]
 80074e0:	3501      	adds	r5, #1
 80074e2:	3301      	adds	r3, #1
 80074e4:	9306      	str	r3, [sp, #24]
 80074e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80074e8:	3301      	adds	r3, #1
 80074ea:	930d      	str	r3, [sp, #52]	@ 0x34
 80074ec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80074ee:	2001      	movs	r0, #1
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d008      	beq.n	8007506 <_dtoa_r+0x872>
 80074f4:	6933      	ldr	r3, [r6, #16]
 80074f6:	3303      	adds	r3, #3
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	18f3      	adds	r3, r6, r3
 80074fc:	6858      	ldr	r0, [r3, #4]
 80074fe:	f000 faaf 	bl	8007a60 <__hi0bits>
 8007502:	2320      	movs	r3, #32
 8007504:	1a18      	subs	r0, r3, r0
 8007506:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007508:	1818      	adds	r0, r3, r0
 800750a:	0002      	movs	r2, r0
 800750c:	231f      	movs	r3, #31
 800750e:	401a      	ands	r2, r3
 8007510:	4218      	tst	r0, r3
 8007512:	d100      	bne.n	8007516 <_dtoa_r+0x882>
 8007514:	e081      	b.n	800761a <_dtoa_r+0x986>
 8007516:	3301      	adds	r3, #1
 8007518:	1a9b      	subs	r3, r3, r2
 800751a:	2b04      	cmp	r3, #4
 800751c:	dd79      	ble.n	8007612 <_dtoa_r+0x97e>
 800751e:	231c      	movs	r3, #28
 8007520:	1a9b      	subs	r3, r3, r2
 8007522:	9a06      	ldr	r2, [sp, #24]
 8007524:	18e4      	adds	r4, r4, r3
 8007526:	18d2      	adds	r2, r2, r3
 8007528:	9206      	str	r2, [sp, #24]
 800752a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800752c:	18d3      	adds	r3, r2, r3
 800752e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007530:	9b06      	ldr	r3, [sp, #24]
 8007532:	2b00      	cmp	r3, #0
 8007534:	dd05      	ble.n	8007542 <_dtoa_r+0x8ae>
 8007536:	001a      	movs	r2, r3
 8007538:	9905      	ldr	r1, [sp, #20]
 800753a:	9803      	ldr	r0, [sp, #12]
 800753c:	f000 fbfe 	bl	8007d3c <__lshift>
 8007540:	9005      	str	r0, [sp, #20]
 8007542:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007544:	2b00      	cmp	r3, #0
 8007546:	dd05      	ble.n	8007554 <_dtoa_r+0x8c0>
 8007548:	0031      	movs	r1, r6
 800754a:	001a      	movs	r2, r3
 800754c:	9803      	ldr	r0, [sp, #12]
 800754e:	f000 fbf5 	bl	8007d3c <__lshift>
 8007552:	0006      	movs	r6, r0
 8007554:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007556:	2b00      	cmp	r3, #0
 8007558:	d061      	beq.n	800761e <_dtoa_r+0x98a>
 800755a:	0031      	movs	r1, r6
 800755c:	9805      	ldr	r0, [sp, #20]
 800755e:	f000 fc59 	bl	8007e14 <__mcmp>
 8007562:	2800      	cmp	r0, #0
 8007564:	da5b      	bge.n	800761e <_dtoa_r+0x98a>
 8007566:	9b04      	ldr	r3, [sp, #16]
 8007568:	220a      	movs	r2, #10
 800756a:	3b01      	subs	r3, #1
 800756c:	930c      	str	r3, [sp, #48]	@ 0x30
 800756e:	9905      	ldr	r1, [sp, #20]
 8007570:	2300      	movs	r3, #0
 8007572:	9803      	ldr	r0, [sp, #12]
 8007574:	f000 fa30 	bl	80079d8 <__multadd>
 8007578:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800757a:	9005      	str	r0, [sp, #20]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d100      	bne.n	8007582 <_dtoa_r+0x8ee>
 8007580:	e15b      	b.n	800783a <_dtoa_r+0xba6>
 8007582:	2300      	movs	r3, #0
 8007584:	0039      	movs	r1, r7
 8007586:	220a      	movs	r2, #10
 8007588:	9803      	ldr	r0, [sp, #12]
 800758a:	f000 fa25 	bl	80079d8 <__multadd>
 800758e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007590:	0007      	movs	r7, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	dc4d      	bgt.n	8007632 <_dtoa_r+0x99e>
 8007596:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007598:	2b02      	cmp	r3, #2
 800759a:	dd46      	ble.n	800762a <_dtoa_r+0x996>
 800759c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d000      	beq.n	80075a4 <_dtoa_r+0x910>
 80075a2:	e5db      	b.n	800715c <_dtoa_r+0x4c8>
 80075a4:	0031      	movs	r1, r6
 80075a6:	2205      	movs	r2, #5
 80075a8:	9803      	ldr	r0, [sp, #12]
 80075aa:	f000 fa15 	bl	80079d8 <__multadd>
 80075ae:	0006      	movs	r6, r0
 80075b0:	0001      	movs	r1, r0
 80075b2:	9805      	ldr	r0, [sp, #20]
 80075b4:	f000 fc2e 	bl	8007e14 <__mcmp>
 80075b8:	2800      	cmp	r0, #0
 80075ba:	dc00      	bgt.n	80075be <_dtoa_r+0x92a>
 80075bc:	e5ce      	b.n	800715c <_dtoa_r+0x4c8>
 80075be:	9b08      	ldr	r3, [sp, #32]
 80075c0:	9a08      	ldr	r2, [sp, #32]
 80075c2:	1c5c      	adds	r4, r3, #1
 80075c4:	2331      	movs	r3, #49	@ 0x31
 80075c6:	7013      	strb	r3, [r2, #0]
 80075c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80075ca:	3301      	adds	r3, #1
 80075cc:	930c      	str	r3, [sp, #48]	@ 0x30
 80075ce:	e5c9      	b.n	8007164 <_dtoa_r+0x4d0>
 80075d0:	2336      	movs	r3, #54	@ 0x36
 80075d2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80075d4:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80075d6:	1a9b      	subs	r3, r3, r2
 80075d8:	9c06      	ldr	r4, [sp, #24]
 80075da:	e720      	b.n	800741e <_dtoa_r+0x78a>
 80075dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075de:	1e5d      	subs	r5, r3, #1
 80075e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075e2:	42ab      	cmp	r3, r5
 80075e4:	db08      	blt.n	80075f8 <_dtoa_r+0x964>
 80075e6:	1b5d      	subs	r5, r3, r5
 80075e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	daf4      	bge.n	80075d8 <_dtoa_r+0x944>
 80075ee:	9b06      	ldr	r3, [sp, #24]
 80075f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075f2:	1a9c      	subs	r4, r3, r2
 80075f4:	2300      	movs	r3, #0
 80075f6:	e712      	b.n	800741e <_dtoa_r+0x78a>
 80075f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075fa:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80075fc:	1aeb      	subs	r3, r5, r3
 80075fe:	18d3      	adds	r3, r2, r3
 8007600:	9314      	str	r3, [sp, #80]	@ 0x50
 8007602:	950f      	str	r5, [sp, #60]	@ 0x3c
 8007604:	9c06      	ldr	r4, [sp, #24]
 8007606:	2500      	movs	r5, #0
 8007608:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800760a:	e708      	b.n	800741e <_dtoa_r+0x78a>
 800760c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800760e:	9905      	ldr	r1, [sp, #20]
 8007610:	e742      	b.n	8007498 <_dtoa_r+0x804>
 8007612:	2b04      	cmp	r3, #4
 8007614:	d08c      	beq.n	8007530 <_dtoa_r+0x89c>
 8007616:	331c      	adds	r3, #28
 8007618:	e783      	b.n	8007522 <_dtoa_r+0x88e>
 800761a:	0013      	movs	r3, r2
 800761c:	e7fb      	b.n	8007616 <_dtoa_r+0x982>
 800761e:	9b04      	ldr	r3, [sp, #16]
 8007620:	930c      	str	r3, [sp, #48]	@ 0x30
 8007622:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007624:	930e      	str	r3, [sp, #56]	@ 0x38
 8007626:	2b00      	cmp	r3, #0
 8007628:	ddb5      	ble.n	8007596 <_dtoa_r+0x902>
 800762a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800762c:	2b00      	cmp	r3, #0
 800762e:	d100      	bne.n	8007632 <_dtoa_r+0x99e>
 8007630:	e107      	b.n	8007842 <_dtoa_r+0xbae>
 8007632:	2c00      	cmp	r4, #0
 8007634:	dd05      	ble.n	8007642 <_dtoa_r+0x9ae>
 8007636:	0039      	movs	r1, r7
 8007638:	0022      	movs	r2, r4
 800763a:	9803      	ldr	r0, [sp, #12]
 800763c:	f000 fb7e 	bl	8007d3c <__lshift>
 8007640:	0007      	movs	r7, r0
 8007642:	9704      	str	r7, [sp, #16]
 8007644:	2d00      	cmp	r5, #0
 8007646:	d020      	beq.n	800768a <_dtoa_r+0x9f6>
 8007648:	6879      	ldr	r1, [r7, #4]
 800764a:	9803      	ldr	r0, [sp, #12]
 800764c:	f000 f95c 	bl	8007908 <_Balloc>
 8007650:	1e04      	subs	r4, r0, #0
 8007652:	d10c      	bne.n	800766e <_dtoa_r+0x9da>
 8007654:	0022      	movs	r2, r4
 8007656:	4b2e      	ldr	r3, [pc, #184]	@ (8007710 <_dtoa_r+0xa7c>)
 8007658:	482e      	ldr	r0, [pc, #184]	@ (8007714 <_dtoa_r+0xa80>)
 800765a:	492f      	ldr	r1, [pc, #188]	@ (8007718 <_dtoa_r+0xa84>)
 800765c:	f7ff fb2f 	bl	8006cbe <_dtoa_r+0x2a>
 8007660:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8007662:	0037      	movs	r7, r6
 8007664:	e7ab      	b.n	80075be <_dtoa_r+0x92a>
 8007666:	9b04      	ldr	r3, [sp, #16]
 8007668:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800766a:	930c      	str	r3, [sp, #48]	@ 0x30
 800766c:	e7f9      	b.n	8007662 <_dtoa_r+0x9ce>
 800766e:	0039      	movs	r1, r7
 8007670:	693a      	ldr	r2, [r7, #16]
 8007672:	310c      	adds	r1, #12
 8007674:	3202      	adds	r2, #2
 8007676:	0092      	lsls	r2, r2, #2
 8007678:	300c      	adds	r0, #12
 800767a:	f7ff fa7d 	bl	8006b78 <memcpy>
 800767e:	2201      	movs	r2, #1
 8007680:	0021      	movs	r1, r4
 8007682:	9803      	ldr	r0, [sp, #12]
 8007684:	f000 fb5a 	bl	8007d3c <__lshift>
 8007688:	9004      	str	r0, [sp, #16]
 800768a:	9b08      	ldr	r3, [sp, #32]
 800768c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800768e:	9306      	str	r3, [sp, #24]
 8007690:	3b01      	subs	r3, #1
 8007692:	189b      	adds	r3, r3, r2
 8007694:	2201      	movs	r2, #1
 8007696:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007698:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800769a:	4013      	ands	r3, r2
 800769c:	930e      	str	r3, [sp, #56]	@ 0x38
 800769e:	0031      	movs	r1, r6
 80076a0:	9805      	ldr	r0, [sp, #20]
 80076a2:	f7ff fa72 	bl	8006b8a <quorem>
 80076a6:	0039      	movs	r1, r7
 80076a8:	0005      	movs	r5, r0
 80076aa:	900a      	str	r0, [sp, #40]	@ 0x28
 80076ac:	9805      	ldr	r0, [sp, #20]
 80076ae:	f000 fbb1 	bl	8007e14 <__mcmp>
 80076b2:	9a04      	ldr	r2, [sp, #16]
 80076b4:	900d      	str	r0, [sp, #52]	@ 0x34
 80076b6:	0031      	movs	r1, r6
 80076b8:	9803      	ldr	r0, [sp, #12]
 80076ba:	f000 fbc7 	bl	8007e4c <__mdiff>
 80076be:	2201      	movs	r2, #1
 80076c0:	68c3      	ldr	r3, [r0, #12]
 80076c2:	0004      	movs	r4, r0
 80076c4:	3530      	adds	r5, #48	@ 0x30
 80076c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d104      	bne.n	80076d6 <_dtoa_r+0xa42>
 80076cc:	0001      	movs	r1, r0
 80076ce:	9805      	ldr	r0, [sp, #20]
 80076d0:	f000 fba0 	bl	8007e14 <__mcmp>
 80076d4:	9009      	str	r0, [sp, #36]	@ 0x24
 80076d6:	0021      	movs	r1, r4
 80076d8:	9803      	ldr	r0, [sp, #12]
 80076da:	f000 f959 	bl	8007990 <_Bfree>
 80076de:	9b06      	ldr	r3, [sp, #24]
 80076e0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80076e2:	1c5c      	adds	r4, r3, #1
 80076e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076e6:	4313      	orrs	r3, r2
 80076e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80076ea:	4313      	orrs	r3, r2
 80076ec:	d116      	bne.n	800771c <_dtoa_r+0xa88>
 80076ee:	2d39      	cmp	r5, #57	@ 0x39
 80076f0:	d02f      	beq.n	8007752 <_dtoa_r+0xabe>
 80076f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	dd01      	ble.n	80076fc <_dtoa_r+0xa68>
 80076f8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80076fa:	3531      	adds	r5, #49	@ 0x31
 80076fc:	9b06      	ldr	r3, [sp, #24]
 80076fe:	701d      	strb	r5, [r3, #0]
 8007700:	e532      	b.n	8007168 <_dtoa_r+0x4d4>
 8007702:	46c0      	nop			@ (mov r8, r8)
 8007704:	40240000 	.word	0x40240000
 8007708:	00000433 	.word	0x00000433
 800770c:	7ff00000 	.word	0x7ff00000
 8007710:	08009398 	.word	0x08009398
 8007714:	08009340 	.word	0x08009340
 8007718:	000002ef 	.word	0x000002ef
 800771c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800771e:	2b00      	cmp	r3, #0
 8007720:	db04      	blt.n	800772c <_dtoa_r+0xa98>
 8007722:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007724:	4313      	orrs	r3, r2
 8007726:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007728:	4313      	orrs	r3, r2
 800772a:	d11e      	bne.n	800776a <_dtoa_r+0xad6>
 800772c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800772e:	2b00      	cmp	r3, #0
 8007730:	dde4      	ble.n	80076fc <_dtoa_r+0xa68>
 8007732:	9905      	ldr	r1, [sp, #20]
 8007734:	2201      	movs	r2, #1
 8007736:	9803      	ldr	r0, [sp, #12]
 8007738:	f000 fb00 	bl	8007d3c <__lshift>
 800773c:	0031      	movs	r1, r6
 800773e:	9005      	str	r0, [sp, #20]
 8007740:	f000 fb68 	bl	8007e14 <__mcmp>
 8007744:	2800      	cmp	r0, #0
 8007746:	dc02      	bgt.n	800774e <_dtoa_r+0xaba>
 8007748:	d1d8      	bne.n	80076fc <_dtoa_r+0xa68>
 800774a:	07eb      	lsls	r3, r5, #31
 800774c:	d5d6      	bpl.n	80076fc <_dtoa_r+0xa68>
 800774e:	2d39      	cmp	r5, #57	@ 0x39
 8007750:	d1d2      	bne.n	80076f8 <_dtoa_r+0xa64>
 8007752:	2339      	movs	r3, #57	@ 0x39
 8007754:	9a06      	ldr	r2, [sp, #24]
 8007756:	7013      	strb	r3, [r2, #0]
 8007758:	0023      	movs	r3, r4
 800775a:	001c      	movs	r4, r3
 800775c:	3b01      	subs	r3, #1
 800775e:	781a      	ldrb	r2, [r3, #0]
 8007760:	2a39      	cmp	r2, #57	@ 0x39
 8007762:	d050      	beq.n	8007806 <_dtoa_r+0xb72>
 8007764:	3201      	adds	r2, #1
 8007766:	701a      	strb	r2, [r3, #0]
 8007768:	e4fe      	b.n	8007168 <_dtoa_r+0x4d4>
 800776a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800776c:	2b00      	cmp	r3, #0
 800776e:	dd03      	ble.n	8007778 <_dtoa_r+0xae4>
 8007770:	2d39      	cmp	r5, #57	@ 0x39
 8007772:	d0ee      	beq.n	8007752 <_dtoa_r+0xabe>
 8007774:	3501      	adds	r5, #1
 8007776:	e7c1      	b.n	80076fc <_dtoa_r+0xa68>
 8007778:	9b06      	ldr	r3, [sp, #24]
 800777a:	9a06      	ldr	r2, [sp, #24]
 800777c:	701d      	strb	r5, [r3, #0]
 800777e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007780:	4293      	cmp	r3, r2
 8007782:	d02b      	beq.n	80077dc <_dtoa_r+0xb48>
 8007784:	2300      	movs	r3, #0
 8007786:	220a      	movs	r2, #10
 8007788:	9905      	ldr	r1, [sp, #20]
 800778a:	9803      	ldr	r0, [sp, #12]
 800778c:	f000 f924 	bl	80079d8 <__multadd>
 8007790:	9b04      	ldr	r3, [sp, #16]
 8007792:	9005      	str	r0, [sp, #20]
 8007794:	429f      	cmp	r7, r3
 8007796:	d109      	bne.n	80077ac <_dtoa_r+0xb18>
 8007798:	0039      	movs	r1, r7
 800779a:	2300      	movs	r3, #0
 800779c:	220a      	movs	r2, #10
 800779e:	9803      	ldr	r0, [sp, #12]
 80077a0:	f000 f91a 	bl	80079d8 <__multadd>
 80077a4:	0007      	movs	r7, r0
 80077a6:	9004      	str	r0, [sp, #16]
 80077a8:	9406      	str	r4, [sp, #24]
 80077aa:	e778      	b.n	800769e <_dtoa_r+0xa0a>
 80077ac:	0039      	movs	r1, r7
 80077ae:	2300      	movs	r3, #0
 80077b0:	220a      	movs	r2, #10
 80077b2:	9803      	ldr	r0, [sp, #12]
 80077b4:	f000 f910 	bl	80079d8 <__multadd>
 80077b8:	2300      	movs	r3, #0
 80077ba:	0007      	movs	r7, r0
 80077bc:	220a      	movs	r2, #10
 80077be:	9904      	ldr	r1, [sp, #16]
 80077c0:	9803      	ldr	r0, [sp, #12]
 80077c2:	f000 f909 	bl	80079d8 <__multadd>
 80077c6:	9004      	str	r0, [sp, #16]
 80077c8:	e7ee      	b.n	80077a8 <_dtoa_r+0xb14>
 80077ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077cc:	2401      	movs	r4, #1
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	dd00      	ble.n	80077d4 <_dtoa_r+0xb40>
 80077d2:	001c      	movs	r4, r3
 80077d4:	9704      	str	r7, [sp, #16]
 80077d6:	2700      	movs	r7, #0
 80077d8:	9b08      	ldr	r3, [sp, #32]
 80077da:	191c      	adds	r4, r3, r4
 80077dc:	9905      	ldr	r1, [sp, #20]
 80077de:	2201      	movs	r2, #1
 80077e0:	9803      	ldr	r0, [sp, #12]
 80077e2:	f000 faab 	bl	8007d3c <__lshift>
 80077e6:	0031      	movs	r1, r6
 80077e8:	9005      	str	r0, [sp, #20]
 80077ea:	f000 fb13 	bl	8007e14 <__mcmp>
 80077ee:	2800      	cmp	r0, #0
 80077f0:	dcb2      	bgt.n	8007758 <_dtoa_r+0xac4>
 80077f2:	d101      	bne.n	80077f8 <_dtoa_r+0xb64>
 80077f4:	07ed      	lsls	r5, r5, #31
 80077f6:	d4af      	bmi.n	8007758 <_dtoa_r+0xac4>
 80077f8:	0023      	movs	r3, r4
 80077fa:	001c      	movs	r4, r3
 80077fc:	3b01      	subs	r3, #1
 80077fe:	781a      	ldrb	r2, [r3, #0]
 8007800:	2a30      	cmp	r2, #48	@ 0x30
 8007802:	d0fa      	beq.n	80077fa <_dtoa_r+0xb66>
 8007804:	e4b0      	b.n	8007168 <_dtoa_r+0x4d4>
 8007806:	9a08      	ldr	r2, [sp, #32]
 8007808:	429a      	cmp	r2, r3
 800780a:	d1a6      	bne.n	800775a <_dtoa_r+0xac6>
 800780c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800780e:	3301      	adds	r3, #1
 8007810:	930c      	str	r3, [sp, #48]	@ 0x30
 8007812:	2331      	movs	r3, #49	@ 0x31
 8007814:	7013      	strb	r3, [r2, #0]
 8007816:	e4a7      	b.n	8007168 <_dtoa_r+0x4d4>
 8007818:	4b14      	ldr	r3, [pc, #80]	@ (800786c <_dtoa_r+0xbd8>)
 800781a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800781c:	9308      	str	r3, [sp, #32]
 800781e:	4b14      	ldr	r3, [pc, #80]	@ (8007870 <_dtoa_r+0xbdc>)
 8007820:	2a00      	cmp	r2, #0
 8007822:	d001      	beq.n	8007828 <_dtoa_r+0xb94>
 8007824:	f7ff fa7e 	bl	8006d24 <_dtoa_r+0x90>
 8007828:	f7ff fa7e 	bl	8006d28 <_dtoa_r+0x94>
 800782c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800782e:	2b01      	cmp	r3, #1
 8007830:	dc00      	bgt.n	8007834 <_dtoa_r+0xba0>
 8007832:	e648      	b.n	80074c6 <_dtoa_r+0x832>
 8007834:	2001      	movs	r0, #1
 8007836:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8007838:	e665      	b.n	8007506 <_dtoa_r+0x872>
 800783a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800783c:	2b00      	cmp	r3, #0
 800783e:	dc00      	bgt.n	8007842 <_dtoa_r+0xbae>
 8007840:	e6a9      	b.n	8007596 <_dtoa_r+0x902>
 8007842:	2400      	movs	r4, #0
 8007844:	0031      	movs	r1, r6
 8007846:	9805      	ldr	r0, [sp, #20]
 8007848:	f7ff f99f 	bl	8006b8a <quorem>
 800784c:	9b08      	ldr	r3, [sp, #32]
 800784e:	3030      	adds	r0, #48	@ 0x30
 8007850:	5518      	strb	r0, [r3, r4]
 8007852:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007854:	3401      	adds	r4, #1
 8007856:	0005      	movs	r5, r0
 8007858:	42a3      	cmp	r3, r4
 800785a:	ddb6      	ble.n	80077ca <_dtoa_r+0xb36>
 800785c:	2300      	movs	r3, #0
 800785e:	220a      	movs	r2, #10
 8007860:	9905      	ldr	r1, [sp, #20]
 8007862:	9803      	ldr	r0, [sp, #12]
 8007864:	f000 f8b8 	bl	80079d8 <__multadd>
 8007868:	9005      	str	r0, [sp, #20]
 800786a:	e7eb      	b.n	8007844 <_dtoa_r+0xbb0>
 800786c:	0800931c 	.word	0x0800931c
 8007870:	08009324 	.word	0x08009324

08007874 <_free_r>:
 8007874:	b570      	push	{r4, r5, r6, lr}
 8007876:	0005      	movs	r5, r0
 8007878:	1e0c      	subs	r4, r1, #0
 800787a:	d010      	beq.n	800789e <_free_r+0x2a>
 800787c:	3c04      	subs	r4, #4
 800787e:	6823      	ldr	r3, [r4, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	da00      	bge.n	8007886 <_free_r+0x12>
 8007884:	18e4      	adds	r4, r4, r3
 8007886:	0028      	movs	r0, r5
 8007888:	f7fe f9e8 	bl	8005c5c <__malloc_lock>
 800788c:	4a1d      	ldr	r2, [pc, #116]	@ (8007904 <_free_r+0x90>)
 800788e:	6813      	ldr	r3, [r2, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d105      	bne.n	80078a0 <_free_r+0x2c>
 8007894:	6063      	str	r3, [r4, #4]
 8007896:	6014      	str	r4, [r2, #0]
 8007898:	0028      	movs	r0, r5
 800789a:	f7fe f9e7 	bl	8005c6c <__malloc_unlock>
 800789e:	bd70      	pop	{r4, r5, r6, pc}
 80078a0:	42a3      	cmp	r3, r4
 80078a2:	d908      	bls.n	80078b6 <_free_r+0x42>
 80078a4:	6820      	ldr	r0, [r4, #0]
 80078a6:	1821      	adds	r1, r4, r0
 80078a8:	428b      	cmp	r3, r1
 80078aa:	d1f3      	bne.n	8007894 <_free_r+0x20>
 80078ac:	6819      	ldr	r1, [r3, #0]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	1809      	adds	r1, r1, r0
 80078b2:	6021      	str	r1, [r4, #0]
 80078b4:	e7ee      	b.n	8007894 <_free_r+0x20>
 80078b6:	001a      	movs	r2, r3
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d001      	beq.n	80078c2 <_free_r+0x4e>
 80078be:	42a3      	cmp	r3, r4
 80078c0:	d9f9      	bls.n	80078b6 <_free_r+0x42>
 80078c2:	6811      	ldr	r1, [r2, #0]
 80078c4:	1850      	adds	r0, r2, r1
 80078c6:	42a0      	cmp	r0, r4
 80078c8:	d10b      	bne.n	80078e2 <_free_r+0x6e>
 80078ca:	6820      	ldr	r0, [r4, #0]
 80078cc:	1809      	adds	r1, r1, r0
 80078ce:	1850      	adds	r0, r2, r1
 80078d0:	6011      	str	r1, [r2, #0]
 80078d2:	4283      	cmp	r3, r0
 80078d4:	d1e0      	bne.n	8007898 <_free_r+0x24>
 80078d6:	6818      	ldr	r0, [r3, #0]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	1841      	adds	r1, r0, r1
 80078dc:	6011      	str	r1, [r2, #0]
 80078de:	6053      	str	r3, [r2, #4]
 80078e0:	e7da      	b.n	8007898 <_free_r+0x24>
 80078e2:	42a0      	cmp	r0, r4
 80078e4:	d902      	bls.n	80078ec <_free_r+0x78>
 80078e6:	230c      	movs	r3, #12
 80078e8:	602b      	str	r3, [r5, #0]
 80078ea:	e7d5      	b.n	8007898 <_free_r+0x24>
 80078ec:	6820      	ldr	r0, [r4, #0]
 80078ee:	1821      	adds	r1, r4, r0
 80078f0:	428b      	cmp	r3, r1
 80078f2:	d103      	bne.n	80078fc <_free_r+0x88>
 80078f4:	6819      	ldr	r1, [r3, #0]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	1809      	adds	r1, r1, r0
 80078fa:	6021      	str	r1, [r4, #0]
 80078fc:	6063      	str	r3, [r4, #4]
 80078fe:	6054      	str	r4, [r2, #4]
 8007900:	e7ca      	b.n	8007898 <_free_r+0x24>
 8007902:	46c0      	nop			@ (mov r8, r8)
 8007904:	20000488 	.word	0x20000488

08007908 <_Balloc>:
 8007908:	b570      	push	{r4, r5, r6, lr}
 800790a:	69c5      	ldr	r5, [r0, #28]
 800790c:	0006      	movs	r6, r0
 800790e:	000c      	movs	r4, r1
 8007910:	2d00      	cmp	r5, #0
 8007912:	d10e      	bne.n	8007932 <_Balloc+0x2a>
 8007914:	2010      	movs	r0, #16
 8007916:	f7fe f8f5 	bl	8005b04 <malloc>
 800791a:	1e02      	subs	r2, r0, #0
 800791c:	61f0      	str	r0, [r6, #28]
 800791e:	d104      	bne.n	800792a <_Balloc+0x22>
 8007920:	216b      	movs	r1, #107	@ 0x6b
 8007922:	4b19      	ldr	r3, [pc, #100]	@ (8007988 <_Balloc+0x80>)
 8007924:	4819      	ldr	r0, [pc, #100]	@ (800798c <_Balloc+0x84>)
 8007926:	f7fe f8a1 	bl	8005a6c <__assert_func>
 800792a:	6045      	str	r5, [r0, #4]
 800792c:	6085      	str	r5, [r0, #8]
 800792e:	6005      	str	r5, [r0, #0]
 8007930:	60c5      	str	r5, [r0, #12]
 8007932:	69f5      	ldr	r5, [r6, #28]
 8007934:	68eb      	ldr	r3, [r5, #12]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d013      	beq.n	8007962 <_Balloc+0x5a>
 800793a:	69f3      	ldr	r3, [r6, #28]
 800793c:	00a2      	lsls	r2, r4, #2
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	189b      	adds	r3, r3, r2
 8007942:	6818      	ldr	r0, [r3, #0]
 8007944:	2800      	cmp	r0, #0
 8007946:	d118      	bne.n	800797a <_Balloc+0x72>
 8007948:	2101      	movs	r1, #1
 800794a:	000d      	movs	r5, r1
 800794c:	40a5      	lsls	r5, r4
 800794e:	1d6a      	adds	r2, r5, #5
 8007950:	0030      	movs	r0, r6
 8007952:	0092      	lsls	r2, r2, #2
 8007954:	f7fe f8a8 	bl	8005aa8 <_calloc_r>
 8007958:	2800      	cmp	r0, #0
 800795a:	d00c      	beq.n	8007976 <_Balloc+0x6e>
 800795c:	6044      	str	r4, [r0, #4]
 800795e:	6085      	str	r5, [r0, #8]
 8007960:	e00d      	b.n	800797e <_Balloc+0x76>
 8007962:	2221      	movs	r2, #33	@ 0x21
 8007964:	2104      	movs	r1, #4
 8007966:	0030      	movs	r0, r6
 8007968:	f7fe f89e 	bl	8005aa8 <_calloc_r>
 800796c:	69f3      	ldr	r3, [r6, #28]
 800796e:	60e8      	str	r0, [r5, #12]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d1e1      	bne.n	800793a <_Balloc+0x32>
 8007976:	2000      	movs	r0, #0
 8007978:	bd70      	pop	{r4, r5, r6, pc}
 800797a:	6802      	ldr	r2, [r0, #0]
 800797c:	601a      	str	r2, [r3, #0]
 800797e:	2300      	movs	r3, #0
 8007980:	6103      	str	r3, [r0, #16]
 8007982:	60c3      	str	r3, [r0, #12]
 8007984:	e7f8      	b.n	8007978 <_Balloc+0x70>
 8007986:	46c0      	nop			@ (mov r8, r8)
 8007988:	08009329 	.word	0x08009329
 800798c:	080093a9 	.word	0x080093a9

08007990 <_Bfree>:
 8007990:	b570      	push	{r4, r5, r6, lr}
 8007992:	69c6      	ldr	r6, [r0, #28]
 8007994:	0005      	movs	r5, r0
 8007996:	000c      	movs	r4, r1
 8007998:	2e00      	cmp	r6, #0
 800799a:	d10e      	bne.n	80079ba <_Bfree+0x2a>
 800799c:	2010      	movs	r0, #16
 800799e:	f7fe f8b1 	bl	8005b04 <malloc>
 80079a2:	1e02      	subs	r2, r0, #0
 80079a4:	61e8      	str	r0, [r5, #28]
 80079a6:	d104      	bne.n	80079b2 <_Bfree+0x22>
 80079a8:	218f      	movs	r1, #143	@ 0x8f
 80079aa:	4b09      	ldr	r3, [pc, #36]	@ (80079d0 <_Bfree+0x40>)
 80079ac:	4809      	ldr	r0, [pc, #36]	@ (80079d4 <_Bfree+0x44>)
 80079ae:	f7fe f85d 	bl	8005a6c <__assert_func>
 80079b2:	6046      	str	r6, [r0, #4]
 80079b4:	6086      	str	r6, [r0, #8]
 80079b6:	6006      	str	r6, [r0, #0]
 80079b8:	60c6      	str	r6, [r0, #12]
 80079ba:	2c00      	cmp	r4, #0
 80079bc:	d007      	beq.n	80079ce <_Bfree+0x3e>
 80079be:	69eb      	ldr	r3, [r5, #28]
 80079c0:	6862      	ldr	r2, [r4, #4]
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	0092      	lsls	r2, r2, #2
 80079c6:	189b      	adds	r3, r3, r2
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	6022      	str	r2, [r4, #0]
 80079cc:	601c      	str	r4, [r3, #0]
 80079ce:	bd70      	pop	{r4, r5, r6, pc}
 80079d0:	08009329 	.word	0x08009329
 80079d4:	080093a9 	.word	0x080093a9

080079d8 <__multadd>:
 80079d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079da:	000f      	movs	r7, r1
 80079dc:	9001      	str	r0, [sp, #4]
 80079de:	000c      	movs	r4, r1
 80079e0:	001e      	movs	r6, r3
 80079e2:	2000      	movs	r0, #0
 80079e4:	690d      	ldr	r5, [r1, #16]
 80079e6:	3714      	adds	r7, #20
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	3001      	adds	r0, #1
 80079ec:	b299      	uxth	r1, r3
 80079ee:	4351      	muls	r1, r2
 80079f0:	0c1b      	lsrs	r3, r3, #16
 80079f2:	4353      	muls	r3, r2
 80079f4:	1989      	adds	r1, r1, r6
 80079f6:	0c0e      	lsrs	r6, r1, #16
 80079f8:	199b      	adds	r3, r3, r6
 80079fa:	0c1e      	lsrs	r6, r3, #16
 80079fc:	b289      	uxth	r1, r1
 80079fe:	041b      	lsls	r3, r3, #16
 8007a00:	185b      	adds	r3, r3, r1
 8007a02:	c708      	stmia	r7!, {r3}
 8007a04:	4285      	cmp	r5, r0
 8007a06:	dcef      	bgt.n	80079e8 <__multadd+0x10>
 8007a08:	2e00      	cmp	r6, #0
 8007a0a:	d022      	beq.n	8007a52 <__multadd+0x7a>
 8007a0c:	68a3      	ldr	r3, [r4, #8]
 8007a0e:	42ab      	cmp	r3, r5
 8007a10:	dc19      	bgt.n	8007a46 <__multadd+0x6e>
 8007a12:	6861      	ldr	r1, [r4, #4]
 8007a14:	9801      	ldr	r0, [sp, #4]
 8007a16:	3101      	adds	r1, #1
 8007a18:	f7ff ff76 	bl	8007908 <_Balloc>
 8007a1c:	1e07      	subs	r7, r0, #0
 8007a1e:	d105      	bne.n	8007a2c <__multadd+0x54>
 8007a20:	003a      	movs	r2, r7
 8007a22:	21ba      	movs	r1, #186	@ 0xba
 8007a24:	4b0c      	ldr	r3, [pc, #48]	@ (8007a58 <__multadd+0x80>)
 8007a26:	480d      	ldr	r0, [pc, #52]	@ (8007a5c <__multadd+0x84>)
 8007a28:	f7fe f820 	bl	8005a6c <__assert_func>
 8007a2c:	0021      	movs	r1, r4
 8007a2e:	6922      	ldr	r2, [r4, #16]
 8007a30:	310c      	adds	r1, #12
 8007a32:	3202      	adds	r2, #2
 8007a34:	0092      	lsls	r2, r2, #2
 8007a36:	300c      	adds	r0, #12
 8007a38:	f7ff f89e 	bl	8006b78 <memcpy>
 8007a3c:	0021      	movs	r1, r4
 8007a3e:	9801      	ldr	r0, [sp, #4]
 8007a40:	f7ff ffa6 	bl	8007990 <_Bfree>
 8007a44:	003c      	movs	r4, r7
 8007a46:	1d2b      	adds	r3, r5, #4
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	18e3      	adds	r3, r4, r3
 8007a4c:	3501      	adds	r5, #1
 8007a4e:	605e      	str	r6, [r3, #4]
 8007a50:	6125      	str	r5, [r4, #16]
 8007a52:	0020      	movs	r0, r4
 8007a54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007a56:	46c0      	nop			@ (mov r8, r8)
 8007a58:	08009398 	.word	0x08009398
 8007a5c:	080093a9 	.word	0x080093a9

08007a60 <__hi0bits>:
 8007a60:	2280      	movs	r2, #128	@ 0x80
 8007a62:	0003      	movs	r3, r0
 8007a64:	0252      	lsls	r2, r2, #9
 8007a66:	2000      	movs	r0, #0
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d201      	bcs.n	8007a70 <__hi0bits+0x10>
 8007a6c:	041b      	lsls	r3, r3, #16
 8007a6e:	3010      	adds	r0, #16
 8007a70:	2280      	movs	r2, #128	@ 0x80
 8007a72:	0452      	lsls	r2, r2, #17
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d201      	bcs.n	8007a7c <__hi0bits+0x1c>
 8007a78:	3008      	adds	r0, #8
 8007a7a:	021b      	lsls	r3, r3, #8
 8007a7c:	2280      	movs	r2, #128	@ 0x80
 8007a7e:	0552      	lsls	r2, r2, #21
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d201      	bcs.n	8007a88 <__hi0bits+0x28>
 8007a84:	3004      	adds	r0, #4
 8007a86:	011b      	lsls	r3, r3, #4
 8007a88:	2280      	movs	r2, #128	@ 0x80
 8007a8a:	05d2      	lsls	r2, r2, #23
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d201      	bcs.n	8007a94 <__hi0bits+0x34>
 8007a90:	3002      	adds	r0, #2
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	db03      	blt.n	8007aa0 <__hi0bits+0x40>
 8007a98:	3001      	adds	r0, #1
 8007a9a:	4213      	tst	r3, r2
 8007a9c:	d100      	bne.n	8007aa0 <__hi0bits+0x40>
 8007a9e:	2020      	movs	r0, #32
 8007aa0:	4770      	bx	lr

08007aa2 <__lo0bits>:
 8007aa2:	6803      	ldr	r3, [r0, #0]
 8007aa4:	0001      	movs	r1, r0
 8007aa6:	2207      	movs	r2, #7
 8007aa8:	0018      	movs	r0, r3
 8007aaa:	4010      	ands	r0, r2
 8007aac:	4213      	tst	r3, r2
 8007aae:	d00d      	beq.n	8007acc <__lo0bits+0x2a>
 8007ab0:	3a06      	subs	r2, #6
 8007ab2:	2000      	movs	r0, #0
 8007ab4:	4213      	tst	r3, r2
 8007ab6:	d105      	bne.n	8007ac4 <__lo0bits+0x22>
 8007ab8:	3002      	adds	r0, #2
 8007aba:	4203      	tst	r3, r0
 8007abc:	d003      	beq.n	8007ac6 <__lo0bits+0x24>
 8007abe:	40d3      	lsrs	r3, r2
 8007ac0:	0010      	movs	r0, r2
 8007ac2:	600b      	str	r3, [r1, #0]
 8007ac4:	4770      	bx	lr
 8007ac6:	089b      	lsrs	r3, r3, #2
 8007ac8:	600b      	str	r3, [r1, #0]
 8007aca:	e7fb      	b.n	8007ac4 <__lo0bits+0x22>
 8007acc:	b29a      	uxth	r2, r3
 8007ace:	2a00      	cmp	r2, #0
 8007ad0:	d101      	bne.n	8007ad6 <__lo0bits+0x34>
 8007ad2:	2010      	movs	r0, #16
 8007ad4:	0c1b      	lsrs	r3, r3, #16
 8007ad6:	b2da      	uxtb	r2, r3
 8007ad8:	2a00      	cmp	r2, #0
 8007ada:	d101      	bne.n	8007ae0 <__lo0bits+0x3e>
 8007adc:	3008      	adds	r0, #8
 8007ade:	0a1b      	lsrs	r3, r3, #8
 8007ae0:	071a      	lsls	r2, r3, #28
 8007ae2:	d101      	bne.n	8007ae8 <__lo0bits+0x46>
 8007ae4:	3004      	adds	r0, #4
 8007ae6:	091b      	lsrs	r3, r3, #4
 8007ae8:	079a      	lsls	r2, r3, #30
 8007aea:	d101      	bne.n	8007af0 <__lo0bits+0x4e>
 8007aec:	3002      	adds	r0, #2
 8007aee:	089b      	lsrs	r3, r3, #2
 8007af0:	07da      	lsls	r2, r3, #31
 8007af2:	d4e9      	bmi.n	8007ac8 <__lo0bits+0x26>
 8007af4:	3001      	adds	r0, #1
 8007af6:	085b      	lsrs	r3, r3, #1
 8007af8:	d1e6      	bne.n	8007ac8 <__lo0bits+0x26>
 8007afa:	2020      	movs	r0, #32
 8007afc:	e7e2      	b.n	8007ac4 <__lo0bits+0x22>
	...

08007b00 <__i2b>:
 8007b00:	b510      	push	{r4, lr}
 8007b02:	000c      	movs	r4, r1
 8007b04:	2101      	movs	r1, #1
 8007b06:	f7ff feff 	bl	8007908 <_Balloc>
 8007b0a:	2800      	cmp	r0, #0
 8007b0c:	d107      	bne.n	8007b1e <__i2b+0x1e>
 8007b0e:	2146      	movs	r1, #70	@ 0x46
 8007b10:	4c05      	ldr	r4, [pc, #20]	@ (8007b28 <__i2b+0x28>)
 8007b12:	0002      	movs	r2, r0
 8007b14:	4b05      	ldr	r3, [pc, #20]	@ (8007b2c <__i2b+0x2c>)
 8007b16:	0020      	movs	r0, r4
 8007b18:	31ff      	adds	r1, #255	@ 0xff
 8007b1a:	f7fd ffa7 	bl	8005a6c <__assert_func>
 8007b1e:	2301      	movs	r3, #1
 8007b20:	6144      	str	r4, [r0, #20]
 8007b22:	6103      	str	r3, [r0, #16]
 8007b24:	bd10      	pop	{r4, pc}
 8007b26:	46c0      	nop			@ (mov r8, r8)
 8007b28:	080093a9 	.word	0x080093a9
 8007b2c:	08009398 	.word	0x08009398

08007b30 <__multiply>:
 8007b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b32:	0014      	movs	r4, r2
 8007b34:	690a      	ldr	r2, [r1, #16]
 8007b36:	6923      	ldr	r3, [r4, #16]
 8007b38:	000d      	movs	r5, r1
 8007b3a:	b089      	sub	sp, #36	@ 0x24
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	db02      	blt.n	8007b46 <__multiply+0x16>
 8007b40:	0023      	movs	r3, r4
 8007b42:	000c      	movs	r4, r1
 8007b44:	001d      	movs	r5, r3
 8007b46:	6927      	ldr	r7, [r4, #16]
 8007b48:	692e      	ldr	r6, [r5, #16]
 8007b4a:	6861      	ldr	r1, [r4, #4]
 8007b4c:	19bb      	adds	r3, r7, r6
 8007b4e:	9300      	str	r3, [sp, #0]
 8007b50:	68a3      	ldr	r3, [r4, #8]
 8007b52:	19ba      	adds	r2, r7, r6
 8007b54:	4293      	cmp	r3, r2
 8007b56:	da00      	bge.n	8007b5a <__multiply+0x2a>
 8007b58:	3101      	adds	r1, #1
 8007b5a:	f7ff fed5 	bl	8007908 <_Balloc>
 8007b5e:	4684      	mov	ip, r0
 8007b60:	2800      	cmp	r0, #0
 8007b62:	d106      	bne.n	8007b72 <__multiply+0x42>
 8007b64:	21b1      	movs	r1, #177	@ 0xb1
 8007b66:	4662      	mov	r2, ip
 8007b68:	4b44      	ldr	r3, [pc, #272]	@ (8007c7c <__multiply+0x14c>)
 8007b6a:	4845      	ldr	r0, [pc, #276]	@ (8007c80 <__multiply+0x150>)
 8007b6c:	0049      	lsls	r1, r1, #1
 8007b6e:	f7fd ff7d 	bl	8005a6c <__assert_func>
 8007b72:	0002      	movs	r2, r0
 8007b74:	19bb      	adds	r3, r7, r6
 8007b76:	3214      	adds	r2, #20
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	18d3      	adds	r3, r2, r3
 8007b7c:	9301      	str	r3, [sp, #4]
 8007b7e:	2100      	movs	r1, #0
 8007b80:	0013      	movs	r3, r2
 8007b82:	9801      	ldr	r0, [sp, #4]
 8007b84:	4283      	cmp	r3, r0
 8007b86:	d328      	bcc.n	8007bda <__multiply+0xaa>
 8007b88:	0023      	movs	r3, r4
 8007b8a:	00bf      	lsls	r7, r7, #2
 8007b8c:	3314      	adds	r3, #20
 8007b8e:	9304      	str	r3, [sp, #16]
 8007b90:	3514      	adds	r5, #20
 8007b92:	19db      	adds	r3, r3, r7
 8007b94:	00b6      	lsls	r6, r6, #2
 8007b96:	9302      	str	r3, [sp, #8]
 8007b98:	19ab      	adds	r3, r5, r6
 8007b9a:	9307      	str	r3, [sp, #28]
 8007b9c:	2304      	movs	r3, #4
 8007b9e:	9305      	str	r3, [sp, #20]
 8007ba0:	0023      	movs	r3, r4
 8007ba2:	9902      	ldr	r1, [sp, #8]
 8007ba4:	3315      	adds	r3, #21
 8007ba6:	4299      	cmp	r1, r3
 8007ba8:	d305      	bcc.n	8007bb6 <__multiply+0x86>
 8007baa:	1b0c      	subs	r4, r1, r4
 8007bac:	3c15      	subs	r4, #21
 8007bae:	08a4      	lsrs	r4, r4, #2
 8007bb0:	3401      	adds	r4, #1
 8007bb2:	00a3      	lsls	r3, r4, #2
 8007bb4:	9305      	str	r3, [sp, #20]
 8007bb6:	9b07      	ldr	r3, [sp, #28]
 8007bb8:	429d      	cmp	r5, r3
 8007bba:	d310      	bcc.n	8007bde <__multiply+0xae>
 8007bbc:	9b00      	ldr	r3, [sp, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	dd05      	ble.n	8007bce <__multiply+0x9e>
 8007bc2:	9b01      	ldr	r3, [sp, #4]
 8007bc4:	3b04      	subs	r3, #4
 8007bc6:	9301      	str	r3, [sp, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d052      	beq.n	8007c74 <__multiply+0x144>
 8007bce:	4663      	mov	r3, ip
 8007bd0:	4660      	mov	r0, ip
 8007bd2:	9a00      	ldr	r2, [sp, #0]
 8007bd4:	611a      	str	r2, [r3, #16]
 8007bd6:	b009      	add	sp, #36	@ 0x24
 8007bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bda:	c302      	stmia	r3!, {r1}
 8007bdc:	e7d1      	b.n	8007b82 <__multiply+0x52>
 8007bde:	682c      	ldr	r4, [r5, #0]
 8007be0:	b2a4      	uxth	r4, r4
 8007be2:	2c00      	cmp	r4, #0
 8007be4:	d01f      	beq.n	8007c26 <__multiply+0xf6>
 8007be6:	2300      	movs	r3, #0
 8007be8:	0017      	movs	r7, r2
 8007bea:	9e04      	ldr	r6, [sp, #16]
 8007bec:	9303      	str	r3, [sp, #12]
 8007bee:	ce08      	ldmia	r6!, {r3}
 8007bf0:	6839      	ldr	r1, [r7, #0]
 8007bf2:	9306      	str	r3, [sp, #24]
 8007bf4:	466b      	mov	r3, sp
 8007bf6:	8b1b      	ldrh	r3, [r3, #24]
 8007bf8:	b288      	uxth	r0, r1
 8007bfa:	4363      	muls	r3, r4
 8007bfc:	181b      	adds	r3, r3, r0
 8007bfe:	9803      	ldr	r0, [sp, #12]
 8007c00:	0c09      	lsrs	r1, r1, #16
 8007c02:	181b      	adds	r3, r3, r0
 8007c04:	9806      	ldr	r0, [sp, #24]
 8007c06:	0c00      	lsrs	r0, r0, #16
 8007c08:	4360      	muls	r0, r4
 8007c0a:	1840      	adds	r0, r0, r1
 8007c0c:	0c19      	lsrs	r1, r3, #16
 8007c0e:	1841      	adds	r1, r0, r1
 8007c10:	0c08      	lsrs	r0, r1, #16
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	0409      	lsls	r1, r1, #16
 8007c16:	4319      	orrs	r1, r3
 8007c18:	9b02      	ldr	r3, [sp, #8]
 8007c1a:	9003      	str	r0, [sp, #12]
 8007c1c:	c702      	stmia	r7!, {r1}
 8007c1e:	42b3      	cmp	r3, r6
 8007c20:	d8e5      	bhi.n	8007bee <__multiply+0xbe>
 8007c22:	9b05      	ldr	r3, [sp, #20]
 8007c24:	50d0      	str	r0, [r2, r3]
 8007c26:	682c      	ldr	r4, [r5, #0]
 8007c28:	0c24      	lsrs	r4, r4, #16
 8007c2a:	d020      	beq.n	8007c6e <__multiply+0x13e>
 8007c2c:	2100      	movs	r1, #0
 8007c2e:	0010      	movs	r0, r2
 8007c30:	6813      	ldr	r3, [r2, #0]
 8007c32:	9e04      	ldr	r6, [sp, #16]
 8007c34:	9103      	str	r1, [sp, #12]
 8007c36:	6831      	ldr	r1, [r6, #0]
 8007c38:	6807      	ldr	r7, [r0, #0]
 8007c3a:	b289      	uxth	r1, r1
 8007c3c:	4361      	muls	r1, r4
 8007c3e:	0c3f      	lsrs	r7, r7, #16
 8007c40:	19c9      	adds	r1, r1, r7
 8007c42:	9f03      	ldr	r7, [sp, #12]
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	19c9      	adds	r1, r1, r7
 8007c48:	040f      	lsls	r7, r1, #16
 8007c4a:	431f      	orrs	r7, r3
 8007c4c:	6007      	str	r7, [r0, #0]
 8007c4e:	ce80      	ldmia	r6!, {r7}
 8007c50:	6843      	ldr	r3, [r0, #4]
 8007c52:	0c3f      	lsrs	r7, r7, #16
 8007c54:	4367      	muls	r7, r4
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	0c09      	lsrs	r1, r1, #16
 8007c5a:	18fb      	adds	r3, r7, r3
 8007c5c:	185b      	adds	r3, r3, r1
 8007c5e:	0c19      	lsrs	r1, r3, #16
 8007c60:	9103      	str	r1, [sp, #12]
 8007c62:	9902      	ldr	r1, [sp, #8]
 8007c64:	3004      	adds	r0, #4
 8007c66:	42b1      	cmp	r1, r6
 8007c68:	d8e5      	bhi.n	8007c36 <__multiply+0x106>
 8007c6a:	9905      	ldr	r1, [sp, #20]
 8007c6c:	5053      	str	r3, [r2, r1]
 8007c6e:	3504      	adds	r5, #4
 8007c70:	3204      	adds	r2, #4
 8007c72:	e7a0      	b.n	8007bb6 <__multiply+0x86>
 8007c74:	9b00      	ldr	r3, [sp, #0]
 8007c76:	3b01      	subs	r3, #1
 8007c78:	9300      	str	r3, [sp, #0]
 8007c7a:	e79f      	b.n	8007bbc <__multiply+0x8c>
 8007c7c:	08009398 	.word	0x08009398
 8007c80:	080093a9 	.word	0x080093a9

08007c84 <__pow5mult>:
 8007c84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c86:	2303      	movs	r3, #3
 8007c88:	0015      	movs	r5, r2
 8007c8a:	0007      	movs	r7, r0
 8007c8c:	000e      	movs	r6, r1
 8007c8e:	401a      	ands	r2, r3
 8007c90:	421d      	tst	r5, r3
 8007c92:	d008      	beq.n	8007ca6 <__pow5mult+0x22>
 8007c94:	4925      	ldr	r1, [pc, #148]	@ (8007d2c <__pow5mult+0xa8>)
 8007c96:	3a01      	subs	r2, #1
 8007c98:	0092      	lsls	r2, r2, #2
 8007c9a:	5852      	ldr	r2, [r2, r1]
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	0031      	movs	r1, r6
 8007ca0:	f7ff fe9a 	bl	80079d8 <__multadd>
 8007ca4:	0006      	movs	r6, r0
 8007ca6:	10ad      	asrs	r5, r5, #2
 8007ca8:	d03d      	beq.n	8007d26 <__pow5mult+0xa2>
 8007caa:	69fc      	ldr	r4, [r7, #28]
 8007cac:	2c00      	cmp	r4, #0
 8007cae:	d10f      	bne.n	8007cd0 <__pow5mult+0x4c>
 8007cb0:	2010      	movs	r0, #16
 8007cb2:	f7fd ff27 	bl	8005b04 <malloc>
 8007cb6:	1e02      	subs	r2, r0, #0
 8007cb8:	61f8      	str	r0, [r7, #28]
 8007cba:	d105      	bne.n	8007cc8 <__pow5mult+0x44>
 8007cbc:	21b4      	movs	r1, #180	@ 0xb4
 8007cbe:	4b1c      	ldr	r3, [pc, #112]	@ (8007d30 <__pow5mult+0xac>)
 8007cc0:	481c      	ldr	r0, [pc, #112]	@ (8007d34 <__pow5mult+0xb0>)
 8007cc2:	31ff      	adds	r1, #255	@ 0xff
 8007cc4:	f7fd fed2 	bl	8005a6c <__assert_func>
 8007cc8:	6044      	str	r4, [r0, #4]
 8007cca:	6084      	str	r4, [r0, #8]
 8007ccc:	6004      	str	r4, [r0, #0]
 8007cce:	60c4      	str	r4, [r0, #12]
 8007cd0:	69fb      	ldr	r3, [r7, #28]
 8007cd2:	689c      	ldr	r4, [r3, #8]
 8007cd4:	9301      	str	r3, [sp, #4]
 8007cd6:	2c00      	cmp	r4, #0
 8007cd8:	d108      	bne.n	8007cec <__pow5mult+0x68>
 8007cda:	0038      	movs	r0, r7
 8007cdc:	4916      	ldr	r1, [pc, #88]	@ (8007d38 <__pow5mult+0xb4>)
 8007cde:	f7ff ff0f 	bl	8007b00 <__i2b>
 8007ce2:	9b01      	ldr	r3, [sp, #4]
 8007ce4:	0004      	movs	r4, r0
 8007ce6:	6098      	str	r0, [r3, #8]
 8007ce8:	2300      	movs	r3, #0
 8007cea:	6003      	str	r3, [r0, #0]
 8007cec:	2301      	movs	r3, #1
 8007cee:	421d      	tst	r5, r3
 8007cf0:	d00a      	beq.n	8007d08 <__pow5mult+0x84>
 8007cf2:	0031      	movs	r1, r6
 8007cf4:	0022      	movs	r2, r4
 8007cf6:	0038      	movs	r0, r7
 8007cf8:	f7ff ff1a 	bl	8007b30 <__multiply>
 8007cfc:	0031      	movs	r1, r6
 8007cfe:	9001      	str	r0, [sp, #4]
 8007d00:	0038      	movs	r0, r7
 8007d02:	f7ff fe45 	bl	8007990 <_Bfree>
 8007d06:	9e01      	ldr	r6, [sp, #4]
 8007d08:	106d      	asrs	r5, r5, #1
 8007d0a:	d00c      	beq.n	8007d26 <__pow5mult+0xa2>
 8007d0c:	6820      	ldr	r0, [r4, #0]
 8007d0e:	2800      	cmp	r0, #0
 8007d10:	d107      	bne.n	8007d22 <__pow5mult+0x9e>
 8007d12:	0022      	movs	r2, r4
 8007d14:	0021      	movs	r1, r4
 8007d16:	0038      	movs	r0, r7
 8007d18:	f7ff ff0a 	bl	8007b30 <__multiply>
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	6020      	str	r0, [r4, #0]
 8007d20:	6003      	str	r3, [r0, #0]
 8007d22:	0004      	movs	r4, r0
 8007d24:	e7e2      	b.n	8007cec <__pow5mult+0x68>
 8007d26:	0030      	movs	r0, r6
 8007d28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007d2a:	46c0      	nop			@ (mov r8, r8)
 8007d2c:	08009520 	.word	0x08009520
 8007d30:	08009329 	.word	0x08009329
 8007d34:	080093a9 	.word	0x080093a9
 8007d38:	00000271 	.word	0x00000271

08007d3c <__lshift>:
 8007d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d3e:	000c      	movs	r4, r1
 8007d40:	0016      	movs	r6, r2
 8007d42:	6923      	ldr	r3, [r4, #16]
 8007d44:	1157      	asrs	r7, r2, #5
 8007d46:	b085      	sub	sp, #20
 8007d48:	18fb      	adds	r3, r7, r3
 8007d4a:	9301      	str	r3, [sp, #4]
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	9300      	str	r3, [sp, #0]
 8007d50:	6849      	ldr	r1, [r1, #4]
 8007d52:	68a3      	ldr	r3, [r4, #8]
 8007d54:	9002      	str	r0, [sp, #8]
 8007d56:	9a00      	ldr	r2, [sp, #0]
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	db10      	blt.n	8007d7e <__lshift+0x42>
 8007d5c:	9802      	ldr	r0, [sp, #8]
 8007d5e:	f7ff fdd3 	bl	8007908 <_Balloc>
 8007d62:	2300      	movs	r3, #0
 8007d64:	0001      	movs	r1, r0
 8007d66:	0005      	movs	r5, r0
 8007d68:	001a      	movs	r2, r3
 8007d6a:	3114      	adds	r1, #20
 8007d6c:	4298      	cmp	r0, r3
 8007d6e:	d10c      	bne.n	8007d8a <__lshift+0x4e>
 8007d70:	21ef      	movs	r1, #239	@ 0xef
 8007d72:	002a      	movs	r2, r5
 8007d74:	4b25      	ldr	r3, [pc, #148]	@ (8007e0c <__lshift+0xd0>)
 8007d76:	4826      	ldr	r0, [pc, #152]	@ (8007e10 <__lshift+0xd4>)
 8007d78:	0049      	lsls	r1, r1, #1
 8007d7a:	f7fd fe77 	bl	8005a6c <__assert_func>
 8007d7e:	3101      	adds	r1, #1
 8007d80:	005b      	lsls	r3, r3, #1
 8007d82:	e7e8      	b.n	8007d56 <__lshift+0x1a>
 8007d84:	0098      	lsls	r0, r3, #2
 8007d86:	500a      	str	r2, [r1, r0]
 8007d88:	3301      	adds	r3, #1
 8007d8a:	42bb      	cmp	r3, r7
 8007d8c:	dbfa      	blt.n	8007d84 <__lshift+0x48>
 8007d8e:	43fb      	mvns	r3, r7
 8007d90:	17db      	asrs	r3, r3, #31
 8007d92:	401f      	ands	r7, r3
 8007d94:	00bf      	lsls	r7, r7, #2
 8007d96:	0023      	movs	r3, r4
 8007d98:	201f      	movs	r0, #31
 8007d9a:	19c9      	adds	r1, r1, r7
 8007d9c:	0037      	movs	r7, r6
 8007d9e:	6922      	ldr	r2, [r4, #16]
 8007da0:	3314      	adds	r3, #20
 8007da2:	0092      	lsls	r2, r2, #2
 8007da4:	189a      	adds	r2, r3, r2
 8007da6:	4007      	ands	r7, r0
 8007da8:	4206      	tst	r6, r0
 8007daa:	d029      	beq.n	8007e00 <__lshift+0xc4>
 8007dac:	3001      	adds	r0, #1
 8007dae:	1bc0      	subs	r0, r0, r7
 8007db0:	9003      	str	r0, [sp, #12]
 8007db2:	468c      	mov	ip, r1
 8007db4:	2000      	movs	r0, #0
 8007db6:	681e      	ldr	r6, [r3, #0]
 8007db8:	40be      	lsls	r6, r7
 8007dba:	4306      	orrs	r6, r0
 8007dbc:	4660      	mov	r0, ip
 8007dbe:	c040      	stmia	r0!, {r6}
 8007dc0:	4684      	mov	ip, r0
 8007dc2:	9e03      	ldr	r6, [sp, #12]
 8007dc4:	cb01      	ldmia	r3!, {r0}
 8007dc6:	40f0      	lsrs	r0, r6
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d8f4      	bhi.n	8007db6 <__lshift+0x7a>
 8007dcc:	0026      	movs	r6, r4
 8007dce:	3615      	adds	r6, #21
 8007dd0:	2304      	movs	r3, #4
 8007dd2:	42b2      	cmp	r2, r6
 8007dd4:	d304      	bcc.n	8007de0 <__lshift+0xa4>
 8007dd6:	1b13      	subs	r3, r2, r4
 8007dd8:	3b15      	subs	r3, #21
 8007dda:	089b      	lsrs	r3, r3, #2
 8007ddc:	3301      	adds	r3, #1
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	50c8      	str	r0, [r1, r3]
 8007de2:	2800      	cmp	r0, #0
 8007de4:	d002      	beq.n	8007dec <__lshift+0xb0>
 8007de6:	9b01      	ldr	r3, [sp, #4]
 8007de8:	3302      	adds	r3, #2
 8007dea:	9300      	str	r3, [sp, #0]
 8007dec:	9b00      	ldr	r3, [sp, #0]
 8007dee:	9802      	ldr	r0, [sp, #8]
 8007df0:	3b01      	subs	r3, #1
 8007df2:	0021      	movs	r1, r4
 8007df4:	612b      	str	r3, [r5, #16]
 8007df6:	f7ff fdcb 	bl	8007990 <_Bfree>
 8007dfa:	0028      	movs	r0, r5
 8007dfc:	b005      	add	sp, #20
 8007dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e00:	cb01      	ldmia	r3!, {r0}
 8007e02:	c101      	stmia	r1!, {r0}
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d8fb      	bhi.n	8007e00 <__lshift+0xc4>
 8007e08:	e7f0      	b.n	8007dec <__lshift+0xb0>
 8007e0a:	46c0      	nop			@ (mov r8, r8)
 8007e0c:	08009398 	.word	0x08009398
 8007e10:	080093a9 	.word	0x080093a9

08007e14 <__mcmp>:
 8007e14:	b530      	push	{r4, r5, lr}
 8007e16:	690b      	ldr	r3, [r1, #16]
 8007e18:	6904      	ldr	r4, [r0, #16]
 8007e1a:	0002      	movs	r2, r0
 8007e1c:	1ae0      	subs	r0, r4, r3
 8007e1e:	429c      	cmp	r4, r3
 8007e20:	d10f      	bne.n	8007e42 <__mcmp+0x2e>
 8007e22:	3214      	adds	r2, #20
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	3114      	adds	r1, #20
 8007e28:	0014      	movs	r4, r2
 8007e2a:	18c9      	adds	r1, r1, r3
 8007e2c:	18d2      	adds	r2, r2, r3
 8007e2e:	3a04      	subs	r2, #4
 8007e30:	3904      	subs	r1, #4
 8007e32:	6815      	ldr	r5, [r2, #0]
 8007e34:	680b      	ldr	r3, [r1, #0]
 8007e36:	429d      	cmp	r5, r3
 8007e38:	d004      	beq.n	8007e44 <__mcmp+0x30>
 8007e3a:	2001      	movs	r0, #1
 8007e3c:	429d      	cmp	r5, r3
 8007e3e:	d200      	bcs.n	8007e42 <__mcmp+0x2e>
 8007e40:	3802      	subs	r0, #2
 8007e42:	bd30      	pop	{r4, r5, pc}
 8007e44:	4294      	cmp	r4, r2
 8007e46:	d3f2      	bcc.n	8007e2e <__mcmp+0x1a>
 8007e48:	e7fb      	b.n	8007e42 <__mcmp+0x2e>
	...

08007e4c <__mdiff>:
 8007e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e4e:	000c      	movs	r4, r1
 8007e50:	b087      	sub	sp, #28
 8007e52:	9000      	str	r0, [sp, #0]
 8007e54:	0011      	movs	r1, r2
 8007e56:	0020      	movs	r0, r4
 8007e58:	0017      	movs	r7, r2
 8007e5a:	f7ff ffdb 	bl	8007e14 <__mcmp>
 8007e5e:	1e05      	subs	r5, r0, #0
 8007e60:	d110      	bne.n	8007e84 <__mdiff+0x38>
 8007e62:	0001      	movs	r1, r0
 8007e64:	9800      	ldr	r0, [sp, #0]
 8007e66:	f7ff fd4f 	bl	8007908 <_Balloc>
 8007e6a:	1e02      	subs	r2, r0, #0
 8007e6c:	d104      	bne.n	8007e78 <__mdiff+0x2c>
 8007e6e:	4b40      	ldr	r3, [pc, #256]	@ (8007f70 <__mdiff+0x124>)
 8007e70:	4840      	ldr	r0, [pc, #256]	@ (8007f74 <__mdiff+0x128>)
 8007e72:	4941      	ldr	r1, [pc, #260]	@ (8007f78 <__mdiff+0x12c>)
 8007e74:	f7fd fdfa 	bl	8005a6c <__assert_func>
 8007e78:	2301      	movs	r3, #1
 8007e7a:	6145      	str	r5, [r0, #20]
 8007e7c:	6103      	str	r3, [r0, #16]
 8007e7e:	0010      	movs	r0, r2
 8007e80:	b007      	add	sp, #28
 8007e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e84:	2600      	movs	r6, #0
 8007e86:	42b0      	cmp	r0, r6
 8007e88:	da03      	bge.n	8007e92 <__mdiff+0x46>
 8007e8a:	0023      	movs	r3, r4
 8007e8c:	003c      	movs	r4, r7
 8007e8e:	001f      	movs	r7, r3
 8007e90:	3601      	adds	r6, #1
 8007e92:	6861      	ldr	r1, [r4, #4]
 8007e94:	9800      	ldr	r0, [sp, #0]
 8007e96:	f7ff fd37 	bl	8007908 <_Balloc>
 8007e9a:	1e02      	subs	r2, r0, #0
 8007e9c:	d103      	bne.n	8007ea6 <__mdiff+0x5a>
 8007e9e:	4b34      	ldr	r3, [pc, #208]	@ (8007f70 <__mdiff+0x124>)
 8007ea0:	4834      	ldr	r0, [pc, #208]	@ (8007f74 <__mdiff+0x128>)
 8007ea2:	4936      	ldr	r1, [pc, #216]	@ (8007f7c <__mdiff+0x130>)
 8007ea4:	e7e6      	b.n	8007e74 <__mdiff+0x28>
 8007ea6:	6923      	ldr	r3, [r4, #16]
 8007ea8:	3414      	adds	r4, #20
 8007eaa:	9300      	str	r3, [sp, #0]
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	18e3      	adds	r3, r4, r3
 8007eb0:	0021      	movs	r1, r4
 8007eb2:	9401      	str	r4, [sp, #4]
 8007eb4:	003c      	movs	r4, r7
 8007eb6:	9302      	str	r3, [sp, #8]
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	3414      	adds	r4, #20
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	18e3      	adds	r3, r4, r3
 8007ec0:	9303      	str	r3, [sp, #12]
 8007ec2:	0003      	movs	r3, r0
 8007ec4:	60c6      	str	r6, [r0, #12]
 8007ec6:	468c      	mov	ip, r1
 8007ec8:	2000      	movs	r0, #0
 8007eca:	3314      	adds	r3, #20
 8007ecc:	9304      	str	r3, [sp, #16]
 8007ece:	9305      	str	r3, [sp, #20]
 8007ed0:	4663      	mov	r3, ip
 8007ed2:	cb20      	ldmia	r3!, {r5}
 8007ed4:	b2a9      	uxth	r1, r5
 8007ed6:	000e      	movs	r6, r1
 8007ed8:	469c      	mov	ip, r3
 8007eda:	cc08      	ldmia	r4!, {r3}
 8007edc:	0c2d      	lsrs	r5, r5, #16
 8007ede:	b299      	uxth	r1, r3
 8007ee0:	1a71      	subs	r1, r6, r1
 8007ee2:	1809      	adds	r1, r1, r0
 8007ee4:	0c1b      	lsrs	r3, r3, #16
 8007ee6:	1408      	asrs	r0, r1, #16
 8007ee8:	1aeb      	subs	r3, r5, r3
 8007eea:	181b      	adds	r3, r3, r0
 8007eec:	1418      	asrs	r0, r3, #16
 8007eee:	b289      	uxth	r1, r1
 8007ef0:	041b      	lsls	r3, r3, #16
 8007ef2:	4319      	orrs	r1, r3
 8007ef4:	9b05      	ldr	r3, [sp, #20]
 8007ef6:	c302      	stmia	r3!, {r1}
 8007ef8:	9305      	str	r3, [sp, #20]
 8007efa:	9b03      	ldr	r3, [sp, #12]
 8007efc:	42a3      	cmp	r3, r4
 8007efe:	d8e7      	bhi.n	8007ed0 <__mdiff+0x84>
 8007f00:	0039      	movs	r1, r7
 8007f02:	9c03      	ldr	r4, [sp, #12]
 8007f04:	3115      	adds	r1, #21
 8007f06:	2304      	movs	r3, #4
 8007f08:	428c      	cmp	r4, r1
 8007f0a:	d304      	bcc.n	8007f16 <__mdiff+0xca>
 8007f0c:	1be3      	subs	r3, r4, r7
 8007f0e:	3b15      	subs	r3, #21
 8007f10:	089b      	lsrs	r3, r3, #2
 8007f12:	3301      	adds	r3, #1
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	9901      	ldr	r1, [sp, #4]
 8007f18:	18cd      	adds	r5, r1, r3
 8007f1a:	9904      	ldr	r1, [sp, #16]
 8007f1c:	002e      	movs	r6, r5
 8007f1e:	18cb      	adds	r3, r1, r3
 8007f20:	001f      	movs	r7, r3
 8007f22:	9902      	ldr	r1, [sp, #8]
 8007f24:	428e      	cmp	r6, r1
 8007f26:	d311      	bcc.n	8007f4c <__mdiff+0x100>
 8007f28:	9c02      	ldr	r4, [sp, #8]
 8007f2a:	1ee9      	subs	r1, r5, #3
 8007f2c:	2000      	movs	r0, #0
 8007f2e:	428c      	cmp	r4, r1
 8007f30:	d304      	bcc.n	8007f3c <__mdiff+0xf0>
 8007f32:	0021      	movs	r1, r4
 8007f34:	3103      	adds	r1, #3
 8007f36:	1b49      	subs	r1, r1, r5
 8007f38:	0889      	lsrs	r1, r1, #2
 8007f3a:	0088      	lsls	r0, r1, #2
 8007f3c:	181b      	adds	r3, r3, r0
 8007f3e:	3b04      	subs	r3, #4
 8007f40:	6819      	ldr	r1, [r3, #0]
 8007f42:	2900      	cmp	r1, #0
 8007f44:	d010      	beq.n	8007f68 <__mdiff+0x11c>
 8007f46:	9b00      	ldr	r3, [sp, #0]
 8007f48:	6113      	str	r3, [r2, #16]
 8007f4a:	e798      	b.n	8007e7e <__mdiff+0x32>
 8007f4c:	4684      	mov	ip, r0
 8007f4e:	ce02      	ldmia	r6!, {r1}
 8007f50:	b288      	uxth	r0, r1
 8007f52:	4460      	add	r0, ip
 8007f54:	1400      	asrs	r0, r0, #16
 8007f56:	0c0c      	lsrs	r4, r1, #16
 8007f58:	1904      	adds	r4, r0, r4
 8007f5a:	4461      	add	r1, ip
 8007f5c:	1420      	asrs	r0, r4, #16
 8007f5e:	b289      	uxth	r1, r1
 8007f60:	0424      	lsls	r4, r4, #16
 8007f62:	4321      	orrs	r1, r4
 8007f64:	c702      	stmia	r7!, {r1}
 8007f66:	e7dc      	b.n	8007f22 <__mdiff+0xd6>
 8007f68:	9900      	ldr	r1, [sp, #0]
 8007f6a:	3901      	subs	r1, #1
 8007f6c:	9100      	str	r1, [sp, #0]
 8007f6e:	e7e6      	b.n	8007f3e <__mdiff+0xf2>
 8007f70:	08009398 	.word	0x08009398
 8007f74:	080093a9 	.word	0x080093a9
 8007f78:	00000237 	.word	0x00000237
 8007f7c:	00000245 	.word	0x00000245

08007f80 <__d2b>:
 8007f80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f82:	2101      	movs	r1, #1
 8007f84:	0016      	movs	r6, r2
 8007f86:	001f      	movs	r7, r3
 8007f88:	f7ff fcbe 	bl	8007908 <_Balloc>
 8007f8c:	1e04      	subs	r4, r0, #0
 8007f8e:	d105      	bne.n	8007f9c <__d2b+0x1c>
 8007f90:	0022      	movs	r2, r4
 8007f92:	4b25      	ldr	r3, [pc, #148]	@ (8008028 <__d2b+0xa8>)
 8007f94:	4825      	ldr	r0, [pc, #148]	@ (800802c <__d2b+0xac>)
 8007f96:	4926      	ldr	r1, [pc, #152]	@ (8008030 <__d2b+0xb0>)
 8007f98:	f7fd fd68 	bl	8005a6c <__assert_func>
 8007f9c:	033b      	lsls	r3, r7, #12
 8007f9e:	007d      	lsls	r5, r7, #1
 8007fa0:	0b1b      	lsrs	r3, r3, #12
 8007fa2:	0d6d      	lsrs	r5, r5, #21
 8007fa4:	d002      	beq.n	8007fac <__d2b+0x2c>
 8007fa6:	2280      	movs	r2, #128	@ 0x80
 8007fa8:	0352      	lsls	r2, r2, #13
 8007faa:	4313      	orrs	r3, r2
 8007fac:	9301      	str	r3, [sp, #4]
 8007fae:	2e00      	cmp	r6, #0
 8007fb0:	d025      	beq.n	8007ffe <__d2b+0x7e>
 8007fb2:	4668      	mov	r0, sp
 8007fb4:	9600      	str	r6, [sp, #0]
 8007fb6:	f7ff fd74 	bl	8007aa2 <__lo0bits>
 8007fba:	9b01      	ldr	r3, [sp, #4]
 8007fbc:	9900      	ldr	r1, [sp, #0]
 8007fbe:	2800      	cmp	r0, #0
 8007fc0:	d01b      	beq.n	8007ffa <__d2b+0x7a>
 8007fc2:	2220      	movs	r2, #32
 8007fc4:	001e      	movs	r6, r3
 8007fc6:	1a12      	subs	r2, r2, r0
 8007fc8:	4096      	lsls	r6, r2
 8007fca:	0032      	movs	r2, r6
 8007fcc:	40c3      	lsrs	r3, r0
 8007fce:	430a      	orrs	r2, r1
 8007fd0:	6162      	str	r2, [r4, #20]
 8007fd2:	9301      	str	r3, [sp, #4]
 8007fd4:	9e01      	ldr	r6, [sp, #4]
 8007fd6:	61a6      	str	r6, [r4, #24]
 8007fd8:	1e73      	subs	r3, r6, #1
 8007fda:	419e      	sbcs	r6, r3
 8007fdc:	3601      	adds	r6, #1
 8007fde:	6126      	str	r6, [r4, #16]
 8007fe0:	2d00      	cmp	r5, #0
 8007fe2:	d014      	beq.n	800800e <__d2b+0x8e>
 8007fe4:	2635      	movs	r6, #53	@ 0x35
 8007fe6:	4b13      	ldr	r3, [pc, #76]	@ (8008034 <__d2b+0xb4>)
 8007fe8:	18ed      	adds	r5, r5, r3
 8007fea:	9b08      	ldr	r3, [sp, #32]
 8007fec:	182d      	adds	r5, r5, r0
 8007fee:	601d      	str	r5, [r3, #0]
 8007ff0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ff2:	1a36      	subs	r6, r6, r0
 8007ff4:	601e      	str	r6, [r3, #0]
 8007ff6:	0020      	movs	r0, r4
 8007ff8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007ffa:	6161      	str	r1, [r4, #20]
 8007ffc:	e7ea      	b.n	8007fd4 <__d2b+0x54>
 8007ffe:	a801      	add	r0, sp, #4
 8008000:	f7ff fd4f 	bl	8007aa2 <__lo0bits>
 8008004:	9b01      	ldr	r3, [sp, #4]
 8008006:	2601      	movs	r6, #1
 8008008:	6163      	str	r3, [r4, #20]
 800800a:	3020      	adds	r0, #32
 800800c:	e7e7      	b.n	8007fde <__d2b+0x5e>
 800800e:	4b0a      	ldr	r3, [pc, #40]	@ (8008038 <__d2b+0xb8>)
 8008010:	18c0      	adds	r0, r0, r3
 8008012:	9b08      	ldr	r3, [sp, #32]
 8008014:	6018      	str	r0, [r3, #0]
 8008016:	4b09      	ldr	r3, [pc, #36]	@ (800803c <__d2b+0xbc>)
 8008018:	18f3      	adds	r3, r6, r3
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	18e3      	adds	r3, r4, r3
 800801e:	6958      	ldr	r0, [r3, #20]
 8008020:	f7ff fd1e 	bl	8007a60 <__hi0bits>
 8008024:	0176      	lsls	r6, r6, #5
 8008026:	e7e3      	b.n	8007ff0 <__d2b+0x70>
 8008028:	08009398 	.word	0x08009398
 800802c:	080093a9 	.word	0x080093a9
 8008030:	0000030f 	.word	0x0000030f
 8008034:	fffffbcd 	.word	0xfffffbcd
 8008038:	fffffbce 	.word	0xfffffbce
 800803c:	3fffffff 	.word	0x3fffffff

08008040 <__sfputc_r>:
 8008040:	6893      	ldr	r3, [r2, #8]
 8008042:	b510      	push	{r4, lr}
 8008044:	3b01      	subs	r3, #1
 8008046:	6093      	str	r3, [r2, #8]
 8008048:	2b00      	cmp	r3, #0
 800804a:	da04      	bge.n	8008056 <__sfputc_r+0x16>
 800804c:	6994      	ldr	r4, [r2, #24]
 800804e:	42a3      	cmp	r3, r4
 8008050:	db07      	blt.n	8008062 <__sfputc_r+0x22>
 8008052:	290a      	cmp	r1, #10
 8008054:	d005      	beq.n	8008062 <__sfputc_r+0x22>
 8008056:	6813      	ldr	r3, [r2, #0]
 8008058:	1c58      	adds	r0, r3, #1
 800805a:	6010      	str	r0, [r2, #0]
 800805c:	7019      	strb	r1, [r3, #0]
 800805e:	0008      	movs	r0, r1
 8008060:	bd10      	pop	{r4, pc}
 8008062:	f7fe fbfb 	bl	800685c <__swbuf_r>
 8008066:	0001      	movs	r1, r0
 8008068:	e7f9      	b.n	800805e <__sfputc_r+0x1e>

0800806a <__sfputs_r>:
 800806a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800806c:	0006      	movs	r6, r0
 800806e:	000f      	movs	r7, r1
 8008070:	0014      	movs	r4, r2
 8008072:	18d5      	adds	r5, r2, r3
 8008074:	42ac      	cmp	r4, r5
 8008076:	d101      	bne.n	800807c <__sfputs_r+0x12>
 8008078:	2000      	movs	r0, #0
 800807a:	e007      	b.n	800808c <__sfputs_r+0x22>
 800807c:	7821      	ldrb	r1, [r4, #0]
 800807e:	003a      	movs	r2, r7
 8008080:	0030      	movs	r0, r6
 8008082:	f7ff ffdd 	bl	8008040 <__sfputc_r>
 8008086:	3401      	adds	r4, #1
 8008088:	1c43      	adds	r3, r0, #1
 800808a:	d1f3      	bne.n	8008074 <__sfputs_r+0xa>
 800808c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008090 <_vfiprintf_r>:
 8008090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008092:	b0a1      	sub	sp, #132	@ 0x84
 8008094:	000f      	movs	r7, r1
 8008096:	0015      	movs	r5, r2
 8008098:	001e      	movs	r6, r3
 800809a:	9003      	str	r0, [sp, #12]
 800809c:	2800      	cmp	r0, #0
 800809e:	d004      	beq.n	80080aa <_vfiprintf_r+0x1a>
 80080a0:	6a03      	ldr	r3, [r0, #32]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d101      	bne.n	80080aa <_vfiprintf_r+0x1a>
 80080a6:	f7fe fad9 	bl	800665c <__sinit>
 80080aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80080ac:	07db      	lsls	r3, r3, #31
 80080ae:	d405      	bmi.n	80080bc <_vfiprintf_r+0x2c>
 80080b0:	89bb      	ldrh	r3, [r7, #12]
 80080b2:	059b      	lsls	r3, r3, #22
 80080b4:	d402      	bmi.n	80080bc <_vfiprintf_r+0x2c>
 80080b6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80080b8:	f7fe fd51 	bl	8006b5e <__retarget_lock_acquire_recursive>
 80080bc:	89bb      	ldrh	r3, [r7, #12]
 80080be:	071b      	lsls	r3, r3, #28
 80080c0:	d502      	bpl.n	80080c8 <_vfiprintf_r+0x38>
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d113      	bne.n	80080f0 <_vfiprintf_r+0x60>
 80080c8:	0039      	movs	r1, r7
 80080ca:	9803      	ldr	r0, [sp, #12]
 80080cc:	f7fe fc08 	bl	80068e0 <__swsetup_r>
 80080d0:	2800      	cmp	r0, #0
 80080d2:	d00d      	beq.n	80080f0 <_vfiprintf_r+0x60>
 80080d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80080d6:	07db      	lsls	r3, r3, #31
 80080d8:	d503      	bpl.n	80080e2 <_vfiprintf_r+0x52>
 80080da:	2001      	movs	r0, #1
 80080dc:	4240      	negs	r0, r0
 80080de:	b021      	add	sp, #132	@ 0x84
 80080e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080e2:	89bb      	ldrh	r3, [r7, #12]
 80080e4:	059b      	lsls	r3, r3, #22
 80080e6:	d4f8      	bmi.n	80080da <_vfiprintf_r+0x4a>
 80080e8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80080ea:	f7fe fd39 	bl	8006b60 <__retarget_lock_release_recursive>
 80080ee:	e7f4      	b.n	80080da <_vfiprintf_r+0x4a>
 80080f0:	2300      	movs	r3, #0
 80080f2:	ac08      	add	r4, sp, #32
 80080f4:	6163      	str	r3, [r4, #20]
 80080f6:	3320      	adds	r3, #32
 80080f8:	7663      	strb	r3, [r4, #25]
 80080fa:	3310      	adds	r3, #16
 80080fc:	76a3      	strb	r3, [r4, #26]
 80080fe:	9607      	str	r6, [sp, #28]
 8008100:	002e      	movs	r6, r5
 8008102:	7833      	ldrb	r3, [r6, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d001      	beq.n	800810c <_vfiprintf_r+0x7c>
 8008108:	2b25      	cmp	r3, #37	@ 0x25
 800810a:	d148      	bne.n	800819e <_vfiprintf_r+0x10e>
 800810c:	1b73      	subs	r3, r6, r5
 800810e:	9305      	str	r3, [sp, #20]
 8008110:	42ae      	cmp	r6, r5
 8008112:	d00b      	beq.n	800812c <_vfiprintf_r+0x9c>
 8008114:	002a      	movs	r2, r5
 8008116:	0039      	movs	r1, r7
 8008118:	9803      	ldr	r0, [sp, #12]
 800811a:	f7ff ffa6 	bl	800806a <__sfputs_r>
 800811e:	3001      	adds	r0, #1
 8008120:	d100      	bne.n	8008124 <_vfiprintf_r+0x94>
 8008122:	e0ae      	b.n	8008282 <_vfiprintf_r+0x1f2>
 8008124:	6963      	ldr	r3, [r4, #20]
 8008126:	9a05      	ldr	r2, [sp, #20]
 8008128:	189b      	adds	r3, r3, r2
 800812a:	6163      	str	r3, [r4, #20]
 800812c:	7833      	ldrb	r3, [r6, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d100      	bne.n	8008134 <_vfiprintf_r+0xa4>
 8008132:	e0a6      	b.n	8008282 <_vfiprintf_r+0x1f2>
 8008134:	2201      	movs	r2, #1
 8008136:	2300      	movs	r3, #0
 8008138:	4252      	negs	r2, r2
 800813a:	6062      	str	r2, [r4, #4]
 800813c:	a904      	add	r1, sp, #16
 800813e:	3254      	adds	r2, #84	@ 0x54
 8008140:	1852      	adds	r2, r2, r1
 8008142:	1c75      	adds	r5, r6, #1
 8008144:	6023      	str	r3, [r4, #0]
 8008146:	60e3      	str	r3, [r4, #12]
 8008148:	60a3      	str	r3, [r4, #8]
 800814a:	7013      	strb	r3, [r2, #0]
 800814c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800814e:	4b59      	ldr	r3, [pc, #356]	@ (80082b4 <_vfiprintf_r+0x224>)
 8008150:	2205      	movs	r2, #5
 8008152:	0018      	movs	r0, r3
 8008154:	7829      	ldrb	r1, [r5, #0]
 8008156:	9305      	str	r3, [sp, #20]
 8008158:	f7fe fd03 	bl	8006b62 <memchr>
 800815c:	1c6e      	adds	r6, r5, #1
 800815e:	2800      	cmp	r0, #0
 8008160:	d11f      	bne.n	80081a2 <_vfiprintf_r+0x112>
 8008162:	6822      	ldr	r2, [r4, #0]
 8008164:	06d3      	lsls	r3, r2, #27
 8008166:	d504      	bpl.n	8008172 <_vfiprintf_r+0xe2>
 8008168:	2353      	movs	r3, #83	@ 0x53
 800816a:	a904      	add	r1, sp, #16
 800816c:	185b      	adds	r3, r3, r1
 800816e:	2120      	movs	r1, #32
 8008170:	7019      	strb	r1, [r3, #0]
 8008172:	0713      	lsls	r3, r2, #28
 8008174:	d504      	bpl.n	8008180 <_vfiprintf_r+0xf0>
 8008176:	2353      	movs	r3, #83	@ 0x53
 8008178:	a904      	add	r1, sp, #16
 800817a:	185b      	adds	r3, r3, r1
 800817c:	212b      	movs	r1, #43	@ 0x2b
 800817e:	7019      	strb	r1, [r3, #0]
 8008180:	782b      	ldrb	r3, [r5, #0]
 8008182:	2b2a      	cmp	r3, #42	@ 0x2a
 8008184:	d016      	beq.n	80081b4 <_vfiprintf_r+0x124>
 8008186:	002e      	movs	r6, r5
 8008188:	2100      	movs	r1, #0
 800818a:	200a      	movs	r0, #10
 800818c:	68e3      	ldr	r3, [r4, #12]
 800818e:	7832      	ldrb	r2, [r6, #0]
 8008190:	1c75      	adds	r5, r6, #1
 8008192:	3a30      	subs	r2, #48	@ 0x30
 8008194:	2a09      	cmp	r2, #9
 8008196:	d950      	bls.n	800823a <_vfiprintf_r+0x1aa>
 8008198:	2900      	cmp	r1, #0
 800819a:	d111      	bne.n	80081c0 <_vfiprintf_r+0x130>
 800819c:	e017      	b.n	80081ce <_vfiprintf_r+0x13e>
 800819e:	3601      	adds	r6, #1
 80081a0:	e7af      	b.n	8008102 <_vfiprintf_r+0x72>
 80081a2:	9b05      	ldr	r3, [sp, #20]
 80081a4:	6822      	ldr	r2, [r4, #0]
 80081a6:	1ac0      	subs	r0, r0, r3
 80081a8:	2301      	movs	r3, #1
 80081aa:	4083      	lsls	r3, r0
 80081ac:	4313      	orrs	r3, r2
 80081ae:	0035      	movs	r5, r6
 80081b0:	6023      	str	r3, [r4, #0]
 80081b2:	e7cc      	b.n	800814e <_vfiprintf_r+0xbe>
 80081b4:	9b07      	ldr	r3, [sp, #28]
 80081b6:	1d19      	adds	r1, r3, #4
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	9107      	str	r1, [sp, #28]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	db01      	blt.n	80081c4 <_vfiprintf_r+0x134>
 80081c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80081c2:	e004      	b.n	80081ce <_vfiprintf_r+0x13e>
 80081c4:	425b      	negs	r3, r3
 80081c6:	60e3      	str	r3, [r4, #12]
 80081c8:	2302      	movs	r3, #2
 80081ca:	4313      	orrs	r3, r2
 80081cc:	6023      	str	r3, [r4, #0]
 80081ce:	7833      	ldrb	r3, [r6, #0]
 80081d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80081d2:	d10c      	bne.n	80081ee <_vfiprintf_r+0x15e>
 80081d4:	7873      	ldrb	r3, [r6, #1]
 80081d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80081d8:	d134      	bne.n	8008244 <_vfiprintf_r+0x1b4>
 80081da:	9b07      	ldr	r3, [sp, #28]
 80081dc:	3602      	adds	r6, #2
 80081de:	1d1a      	adds	r2, r3, #4
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	9207      	str	r2, [sp, #28]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	da01      	bge.n	80081ec <_vfiprintf_r+0x15c>
 80081e8:	2301      	movs	r3, #1
 80081ea:	425b      	negs	r3, r3
 80081ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80081ee:	4d32      	ldr	r5, [pc, #200]	@ (80082b8 <_vfiprintf_r+0x228>)
 80081f0:	2203      	movs	r2, #3
 80081f2:	0028      	movs	r0, r5
 80081f4:	7831      	ldrb	r1, [r6, #0]
 80081f6:	f7fe fcb4 	bl	8006b62 <memchr>
 80081fa:	2800      	cmp	r0, #0
 80081fc:	d006      	beq.n	800820c <_vfiprintf_r+0x17c>
 80081fe:	2340      	movs	r3, #64	@ 0x40
 8008200:	1b40      	subs	r0, r0, r5
 8008202:	4083      	lsls	r3, r0
 8008204:	6822      	ldr	r2, [r4, #0]
 8008206:	3601      	adds	r6, #1
 8008208:	4313      	orrs	r3, r2
 800820a:	6023      	str	r3, [r4, #0]
 800820c:	7831      	ldrb	r1, [r6, #0]
 800820e:	2206      	movs	r2, #6
 8008210:	482a      	ldr	r0, [pc, #168]	@ (80082bc <_vfiprintf_r+0x22c>)
 8008212:	1c75      	adds	r5, r6, #1
 8008214:	7621      	strb	r1, [r4, #24]
 8008216:	f7fe fca4 	bl	8006b62 <memchr>
 800821a:	2800      	cmp	r0, #0
 800821c:	d040      	beq.n	80082a0 <_vfiprintf_r+0x210>
 800821e:	4b28      	ldr	r3, [pc, #160]	@ (80082c0 <_vfiprintf_r+0x230>)
 8008220:	2b00      	cmp	r3, #0
 8008222:	d122      	bne.n	800826a <_vfiprintf_r+0x1da>
 8008224:	2207      	movs	r2, #7
 8008226:	9b07      	ldr	r3, [sp, #28]
 8008228:	3307      	adds	r3, #7
 800822a:	4393      	bics	r3, r2
 800822c:	3308      	adds	r3, #8
 800822e:	9307      	str	r3, [sp, #28]
 8008230:	6963      	ldr	r3, [r4, #20]
 8008232:	9a04      	ldr	r2, [sp, #16]
 8008234:	189b      	adds	r3, r3, r2
 8008236:	6163      	str	r3, [r4, #20]
 8008238:	e762      	b.n	8008100 <_vfiprintf_r+0x70>
 800823a:	4343      	muls	r3, r0
 800823c:	002e      	movs	r6, r5
 800823e:	2101      	movs	r1, #1
 8008240:	189b      	adds	r3, r3, r2
 8008242:	e7a4      	b.n	800818e <_vfiprintf_r+0xfe>
 8008244:	2300      	movs	r3, #0
 8008246:	200a      	movs	r0, #10
 8008248:	0019      	movs	r1, r3
 800824a:	3601      	adds	r6, #1
 800824c:	6063      	str	r3, [r4, #4]
 800824e:	7832      	ldrb	r2, [r6, #0]
 8008250:	1c75      	adds	r5, r6, #1
 8008252:	3a30      	subs	r2, #48	@ 0x30
 8008254:	2a09      	cmp	r2, #9
 8008256:	d903      	bls.n	8008260 <_vfiprintf_r+0x1d0>
 8008258:	2b00      	cmp	r3, #0
 800825a:	d0c8      	beq.n	80081ee <_vfiprintf_r+0x15e>
 800825c:	9109      	str	r1, [sp, #36]	@ 0x24
 800825e:	e7c6      	b.n	80081ee <_vfiprintf_r+0x15e>
 8008260:	4341      	muls	r1, r0
 8008262:	002e      	movs	r6, r5
 8008264:	2301      	movs	r3, #1
 8008266:	1889      	adds	r1, r1, r2
 8008268:	e7f1      	b.n	800824e <_vfiprintf_r+0x1be>
 800826a:	aa07      	add	r2, sp, #28
 800826c:	9200      	str	r2, [sp, #0]
 800826e:	0021      	movs	r1, r4
 8008270:	003a      	movs	r2, r7
 8008272:	4b14      	ldr	r3, [pc, #80]	@ (80082c4 <_vfiprintf_r+0x234>)
 8008274:	9803      	ldr	r0, [sp, #12]
 8008276:	f7fd fda7 	bl	8005dc8 <_printf_float>
 800827a:	9004      	str	r0, [sp, #16]
 800827c:	9b04      	ldr	r3, [sp, #16]
 800827e:	3301      	adds	r3, #1
 8008280:	d1d6      	bne.n	8008230 <_vfiprintf_r+0x1a0>
 8008282:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008284:	07db      	lsls	r3, r3, #31
 8008286:	d405      	bmi.n	8008294 <_vfiprintf_r+0x204>
 8008288:	89bb      	ldrh	r3, [r7, #12]
 800828a:	059b      	lsls	r3, r3, #22
 800828c:	d402      	bmi.n	8008294 <_vfiprintf_r+0x204>
 800828e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8008290:	f7fe fc66 	bl	8006b60 <__retarget_lock_release_recursive>
 8008294:	89bb      	ldrh	r3, [r7, #12]
 8008296:	065b      	lsls	r3, r3, #25
 8008298:	d500      	bpl.n	800829c <_vfiprintf_r+0x20c>
 800829a:	e71e      	b.n	80080da <_vfiprintf_r+0x4a>
 800829c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800829e:	e71e      	b.n	80080de <_vfiprintf_r+0x4e>
 80082a0:	aa07      	add	r2, sp, #28
 80082a2:	9200      	str	r2, [sp, #0]
 80082a4:	0021      	movs	r1, r4
 80082a6:	003a      	movs	r2, r7
 80082a8:	4b06      	ldr	r3, [pc, #24]	@ (80082c4 <_vfiprintf_r+0x234>)
 80082aa:	9803      	ldr	r0, [sp, #12]
 80082ac:	f7fe f83a 	bl	8006324 <_printf_i>
 80082b0:	e7e3      	b.n	800827a <_vfiprintf_r+0x1ea>
 80082b2:	46c0      	nop			@ (mov r8, r8)
 80082b4:	08009402 	.word	0x08009402
 80082b8:	08009408 	.word	0x08009408
 80082bc:	0800940c 	.word	0x0800940c
 80082c0:	08005dc9 	.word	0x08005dc9
 80082c4:	0800806b 	.word	0x0800806b

080082c8 <__sflush_r>:
 80082c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082ca:	220c      	movs	r2, #12
 80082cc:	5e8b      	ldrsh	r3, [r1, r2]
 80082ce:	0005      	movs	r5, r0
 80082d0:	000c      	movs	r4, r1
 80082d2:	071a      	lsls	r2, r3, #28
 80082d4:	d456      	bmi.n	8008384 <__sflush_r+0xbc>
 80082d6:	684a      	ldr	r2, [r1, #4]
 80082d8:	2a00      	cmp	r2, #0
 80082da:	dc02      	bgt.n	80082e2 <__sflush_r+0x1a>
 80082dc:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80082de:	2a00      	cmp	r2, #0
 80082e0:	dd4e      	ble.n	8008380 <__sflush_r+0xb8>
 80082e2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80082e4:	2f00      	cmp	r7, #0
 80082e6:	d04b      	beq.n	8008380 <__sflush_r+0xb8>
 80082e8:	2200      	movs	r2, #0
 80082ea:	2080      	movs	r0, #128	@ 0x80
 80082ec:	682e      	ldr	r6, [r5, #0]
 80082ee:	602a      	str	r2, [r5, #0]
 80082f0:	001a      	movs	r2, r3
 80082f2:	0140      	lsls	r0, r0, #5
 80082f4:	6a21      	ldr	r1, [r4, #32]
 80082f6:	4002      	ands	r2, r0
 80082f8:	4203      	tst	r3, r0
 80082fa:	d033      	beq.n	8008364 <__sflush_r+0x9c>
 80082fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80082fe:	89a3      	ldrh	r3, [r4, #12]
 8008300:	075b      	lsls	r3, r3, #29
 8008302:	d506      	bpl.n	8008312 <__sflush_r+0x4a>
 8008304:	6863      	ldr	r3, [r4, #4]
 8008306:	1ad2      	subs	r2, r2, r3
 8008308:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800830a:	2b00      	cmp	r3, #0
 800830c:	d001      	beq.n	8008312 <__sflush_r+0x4a>
 800830e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008310:	1ad2      	subs	r2, r2, r3
 8008312:	2300      	movs	r3, #0
 8008314:	0028      	movs	r0, r5
 8008316:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8008318:	6a21      	ldr	r1, [r4, #32]
 800831a:	47b8      	blx	r7
 800831c:	89a2      	ldrh	r2, [r4, #12]
 800831e:	1c43      	adds	r3, r0, #1
 8008320:	d106      	bne.n	8008330 <__sflush_r+0x68>
 8008322:	6829      	ldr	r1, [r5, #0]
 8008324:	291d      	cmp	r1, #29
 8008326:	d846      	bhi.n	80083b6 <__sflush_r+0xee>
 8008328:	4b29      	ldr	r3, [pc, #164]	@ (80083d0 <__sflush_r+0x108>)
 800832a:	40cb      	lsrs	r3, r1
 800832c:	07db      	lsls	r3, r3, #31
 800832e:	d542      	bpl.n	80083b6 <__sflush_r+0xee>
 8008330:	2300      	movs	r3, #0
 8008332:	6063      	str	r3, [r4, #4]
 8008334:	6923      	ldr	r3, [r4, #16]
 8008336:	6023      	str	r3, [r4, #0]
 8008338:	04d2      	lsls	r2, r2, #19
 800833a:	d505      	bpl.n	8008348 <__sflush_r+0x80>
 800833c:	1c43      	adds	r3, r0, #1
 800833e:	d102      	bne.n	8008346 <__sflush_r+0x7e>
 8008340:	682b      	ldr	r3, [r5, #0]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d100      	bne.n	8008348 <__sflush_r+0x80>
 8008346:	6560      	str	r0, [r4, #84]	@ 0x54
 8008348:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800834a:	602e      	str	r6, [r5, #0]
 800834c:	2900      	cmp	r1, #0
 800834e:	d017      	beq.n	8008380 <__sflush_r+0xb8>
 8008350:	0023      	movs	r3, r4
 8008352:	3344      	adds	r3, #68	@ 0x44
 8008354:	4299      	cmp	r1, r3
 8008356:	d002      	beq.n	800835e <__sflush_r+0x96>
 8008358:	0028      	movs	r0, r5
 800835a:	f7ff fa8b 	bl	8007874 <_free_r>
 800835e:	2300      	movs	r3, #0
 8008360:	6363      	str	r3, [r4, #52]	@ 0x34
 8008362:	e00d      	b.n	8008380 <__sflush_r+0xb8>
 8008364:	2301      	movs	r3, #1
 8008366:	0028      	movs	r0, r5
 8008368:	47b8      	blx	r7
 800836a:	0002      	movs	r2, r0
 800836c:	1c43      	adds	r3, r0, #1
 800836e:	d1c6      	bne.n	80082fe <__sflush_r+0x36>
 8008370:	682b      	ldr	r3, [r5, #0]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d0c3      	beq.n	80082fe <__sflush_r+0x36>
 8008376:	2b1d      	cmp	r3, #29
 8008378:	d001      	beq.n	800837e <__sflush_r+0xb6>
 800837a:	2b16      	cmp	r3, #22
 800837c:	d11a      	bne.n	80083b4 <__sflush_r+0xec>
 800837e:	602e      	str	r6, [r5, #0]
 8008380:	2000      	movs	r0, #0
 8008382:	e01e      	b.n	80083c2 <__sflush_r+0xfa>
 8008384:	690e      	ldr	r6, [r1, #16]
 8008386:	2e00      	cmp	r6, #0
 8008388:	d0fa      	beq.n	8008380 <__sflush_r+0xb8>
 800838a:	680f      	ldr	r7, [r1, #0]
 800838c:	600e      	str	r6, [r1, #0]
 800838e:	1bba      	subs	r2, r7, r6
 8008390:	9201      	str	r2, [sp, #4]
 8008392:	2200      	movs	r2, #0
 8008394:	079b      	lsls	r3, r3, #30
 8008396:	d100      	bne.n	800839a <__sflush_r+0xd2>
 8008398:	694a      	ldr	r2, [r1, #20]
 800839a:	60a2      	str	r2, [r4, #8]
 800839c:	9b01      	ldr	r3, [sp, #4]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	ddee      	ble.n	8008380 <__sflush_r+0xb8>
 80083a2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80083a4:	0032      	movs	r2, r6
 80083a6:	001f      	movs	r7, r3
 80083a8:	0028      	movs	r0, r5
 80083aa:	9b01      	ldr	r3, [sp, #4]
 80083ac:	6a21      	ldr	r1, [r4, #32]
 80083ae:	47b8      	blx	r7
 80083b0:	2800      	cmp	r0, #0
 80083b2:	dc07      	bgt.n	80083c4 <__sflush_r+0xfc>
 80083b4:	89a2      	ldrh	r2, [r4, #12]
 80083b6:	2340      	movs	r3, #64	@ 0x40
 80083b8:	2001      	movs	r0, #1
 80083ba:	4313      	orrs	r3, r2
 80083bc:	b21b      	sxth	r3, r3
 80083be:	81a3      	strh	r3, [r4, #12]
 80083c0:	4240      	negs	r0, r0
 80083c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80083c4:	9b01      	ldr	r3, [sp, #4]
 80083c6:	1836      	adds	r6, r6, r0
 80083c8:	1a1b      	subs	r3, r3, r0
 80083ca:	9301      	str	r3, [sp, #4]
 80083cc:	e7e6      	b.n	800839c <__sflush_r+0xd4>
 80083ce:	46c0      	nop			@ (mov r8, r8)
 80083d0:	20400001 	.word	0x20400001

080083d4 <_fflush_r>:
 80083d4:	690b      	ldr	r3, [r1, #16]
 80083d6:	b570      	push	{r4, r5, r6, lr}
 80083d8:	0005      	movs	r5, r0
 80083da:	000c      	movs	r4, r1
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d102      	bne.n	80083e6 <_fflush_r+0x12>
 80083e0:	2500      	movs	r5, #0
 80083e2:	0028      	movs	r0, r5
 80083e4:	bd70      	pop	{r4, r5, r6, pc}
 80083e6:	2800      	cmp	r0, #0
 80083e8:	d004      	beq.n	80083f4 <_fflush_r+0x20>
 80083ea:	6a03      	ldr	r3, [r0, #32]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d101      	bne.n	80083f4 <_fflush_r+0x20>
 80083f0:	f7fe f934 	bl	800665c <__sinit>
 80083f4:	220c      	movs	r2, #12
 80083f6:	5ea3      	ldrsh	r3, [r4, r2]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d0f1      	beq.n	80083e0 <_fflush_r+0xc>
 80083fc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80083fe:	07d2      	lsls	r2, r2, #31
 8008400:	d404      	bmi.n	800840c <_fflush_r+0x38>
 8008402:	059b      	lsls	r3, r3, #22
 8008404:	d402      	bmi.n	800840c <_fflush_r+0x38>
 8008406:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008408:	f7fe fba9 	bl	8006b5e <__retarget_lock_acquire_recursive>
 800840c:	0028      	movs	r0, r5
 800840e:	0021      	movs	r1, r4
 8008410:	f7ff ff5a 	bl	80082c8 <__sflush_r>
 8008414:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008416:	0005      	movs	r5, r0
 8008418:	07db      	lsls	r3, r3, #31
 800841a:	d4e2      	bmi.n	80083e2 <_fflush_r+0xe>
 800841c:	89a3      	ldrh	r3, [r4, #12]
 800841e:	059b      	lsls	r3, r3, #22
 8008420:	d4df      	bmi.n	80083e2 <_fflush_r+0xe>
 8008422:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008424:	f7fe fb9c 	bl	8006b60 <__retarget_lock_release_recursive>
 8008428:	e7db      	b.n	80083e2 <_fflush_r+0xe>
	...

0800842c <__swhatbuf_r>:
 800842c:	b570      	push	{r4, r5, r6, lr}
 800842e:	000e      	movs	r6, r1
 8008430:	001d      	movs	r5, r3
 8008432:	230e      	movs	r3, #14
 8008434:	5ec9      	ldrsh	r1, [r1, r3]
 8008436:	0014      	movs	r4, r2
 8008438:	b096      	sub	sp, #88	@ 0x58
 800843a:	2900      	cmp	r1, #0
 800843c:	da0c      	bge.n	8008458 <__swhatbuf_r+0x2c>
 800843e:	89b2      	ldrh	r2, [r6, #12]
 8008440:	2380      	movs	r3, #128	@ 0x80
 8008442:	0011      	movs	r1, r2
 8008444:	4019      	ands	r1, r3
 8008446:	421a      	tst	r2, r3
 8008448:	d114      	bne.n	8008474 <__swhatbuf_r+0x48>
 800844a:	2380      	movs	r3, #128	@ 0x80
 800844c:	00db      	lsls	r3, r3, #3
 800844e:	2000      	movs	r0, #0
 8008450:	6029      	str	r1, [r5, #0]
 8008452:	6023      	str	r3, [r4, #0]
 8008454:	b016      	add	sp, #88	@ 0x58
 8008456:	bd70      	pop	{r4, r5, r6, pc}
 8008458:	466a      	mov	r2, sp
 800845a:	f000 f853 	bl	8008504 <_fstat_r>
 800845e:	2800      	cmp	r0, #0
 8008460:	dbed      	blt.n	800843e <__swhatbuf_r+0x12>
 8008462:	23f0      	movs	r3, #240	@ 0xf0
 8008464:	9901      	ldr	r1, [sp, #4]
 8008466:	021b      	lsls	r3, r3, #8
 8008468:	4019      	ands	r1, r3
 800846a:	4b04      	ldr	r3, [pc, #16]	@ (800847c <__swhatbuf_r+0x50>)
 800846c:	18c9      	adds	r1, r1, r3
 800846e:	424b      	negs	r3, r1
 8008470:	4159      	adcs	r1, r3
 8008472:	e7ea      	b.n	800844a <__swhatbuf_r+0x1e>
 8008474:	2100      	movs	r1, #0
 8008476:	2340      	movs	r3, #64	@ 0x40
 8008478:	e7e9      	b.n	800844e <__swhatbuf_r+0x22>
 800847a:	46c0      	nop			@ (mov r8, r8)
 800847c:	ffffe000 	.word	0xffffe000

08008480 <__smakebuf_r>:
 8008480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008482:	2602      	movs	r6, #2
 8008484:	898b      	ldrh	r3, [r1, #12]
 8008486:	0005      	movs	r5, r0
 8008488:	000c      	movs	r4, r1
 800848a:	b085      	sub	sp, #20
 800848c:	4233      	tst	r3, r6
 800848e:	d007      	beq.n	80084a0 <__smakebuf_r+0x20>
 8008490:	0023      	movs	r3, r4
 8008492:	3347      	adds	r3, #71	@ 0x47
 8008494:	6023      	str	r3, [r4, #0]
 8008496:	6123      	str	r3, [r4, #16]
 8008498:	2301      	movs	r3, #1
 800849a:	6163      	str	r3, [r4, #20]
 800849c:	b005      	add	sp, #20
 800849e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084a0:	ab03      	add	r3, sp, #12
 80084a2:	aa02      	add	r2, sp, #8
 80084a4:	f7ff ffc2 	bl	800842c <__swhatbuf_r>
 80084a8:	9f02      	ldr	r7, [sp, #8]
 80084aa:	9001      	str	r0, [sp, #4]
 80084ac:	0039      	movs	r1, r7
 80084ae:	0028      	movs	r0, r5
 80084b0:	f7fd fb54 	bl	8005b5c <_malloc_r>
 80084b4:	2800      	cmp	r0, #0
 80084b6:	d108      	bne.n	80084ca <__smakebuf_r+0x4a>
 80084b8:	220c      	movs	r2, #12
 80084ba:	5ea3      	ldrsh	r3, [r4, r2]
 80084bc:	059a      	lsls	r2, r3, #22
 80084be:	d4ed      	bmi.n	800849c <__smakebuf_r+0x1c>
 80084c0:	2203      	movs	r2, #3
 80084c2:	4393      	bics	r3, r2
 80084c4:	431e      	orrs	r6, r3
 80084c6:	81a6      	strh	r6, [r4, #12]
 80084c8:	e7e2      	b.n	8008490 <__smakebuf_r+0x10>
 80084ca:	2380      	movs	r3, #128	@ 0x80
 80084cc:	89a2      	ldrh	r2, [r4, #12]
 80084ce:	6020      	str	r0, [r4, #0]
 80084d0:	4313      	orrs	r3, r2
 80084d2:	81a3      	strh	r3, [r4, #12]
 80084d4:	9b03      	ldr	r3, [sp, #12]
 80084d6:	6120      	str	r0, [r4, #16]
 80084d8:	6167      	str	r7, [r4, #20]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d00c      	beq.n	80084f8 <__smakebuf_r+0x78>
 80084de:	0028      	movs	r0, r5
 80084e0:	230e      	movs	r3, #14
 80084e2:	5ee1      	ldrsh	r1, [r4, r3]
 80084e4:	f000 f820 	bl	8008528 <_isatty_r>
 80084e8:	2800      	cmp	r0, #0
 80084ea:	d005      	beq.n	80084f8 <__smakebuf_r+0x78>
 80084ec:	2303      	movs	r3, #3
 80084ee:	89a2      	ldrh	r2, [r4, #12]
 80084f0:	439a      	bics	r2, r3
 80084f2:	3b02      	subs	r3, #2
 80084f4:	4313      	orrs	r3, r2
 80084f6:	81a3      	strh	r3, [r4, #12]
 80084f8:	89a3      	ldrh	r3, [r4, #12]
 80084fa:	9a01      	ldr	r2, [sp, #4]
 80084fc:	4313      	orrs	r3, r2
 80084fe:	81a3      	strh	r3, [r4, #12]
 8008500:	e7cc      	b.n	800849c <__smakebuf_r+0x1c>
	...

08008504 <_fstat_r>:
 8008504:	2300      	movs	r3, #0
 8008506:	b570      	push	{r4, r5, r6, lr}
 8008508:	4d06      	ldr	r5, [pc, #24]	@ (8008524 <_fstat_r+0x20>)
 800850a:	0004      	movs	r4, r0
 800850c:	0008      	movs	r0, r1
 800850e:	0011      	movs	r1, r2
 8008510:	602b      	str	r3, [r5, #0]
 8008512:	f7fa fe18 	bl	8003146 <_fstat>
 8008516:	1c43      	adds	r3, r0, #1
 8008518:	d103      	bne.n	8008522 <_fstat_r+0x1e>
 800851a:	682b      	ldr	r3, [r5, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d000      	beq.n	8008522 <_fstat_r+0x1e>
 8008520:	6023      	str	r3, [r4, #0]
 8008522:	bd70      	pop	{r4, r5, r6, pc}
 8008524:	200005c8 	.word	0x200005c8

08008528 <_isatty_r>:
 8008528:	2300      	movs	r3, #0
 800852a:	b570      	push	{r4, r5, r6, lr}
 800852c:	4d06      	ldr	r5, [pc, #24]	@ (8008548 <_isatty_r+0x20>)
 800852e:	0004      	movs	r4, r0
 8008530:	0008      	movs	r0, r1
 8008532:	602b      	str	r3, [r5, #0]
 8008534:	f7fa fe15 	bl	8003162 <_isatty>
 8008538:	1c43      	adds	r3, r0, #1
 800853a:	d103      	bne.n	8008544 <_isatty_r+0x1c>
 800853c:	682b      	ldr	r3, [r5, #0]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d000      	beq.n	8008544 <_isatty_r+0x1c>
 8008542:	6023      	str	r3, [r4, #0]
 8008544:	bd70      	pop	{r4, r5, r6, pc}
 8008546:	46c0      	nop			@ (mov r8, r8)
 8008548:	200005c8 	.word	0x200005c8

0800854c <__ascii_mbtowc>:
 800854c:	b082      	sub	sp, #8
 800854e:	2900      	cmp	r1, #0
 8008550:	d100      	bne.n	8008554 <__ascii_mbtowc+0x8>
 8008552:	a901      	add	r1, sp, #4
 8008554:	1e10      	subs	r0, r2, #0
 8008556:	d006      	beq.n	8008566 <__ascii_mbtowc+0x1a>
 8008558:	2b00      	cmp	r3, #0
 800855a:	d006      	beq.n	800856a <__ascii_mbtowc+0x1e>
 800855c:	7813      	ldrb	r3, [r2, #0]
 800855e:	600b      	str	r3, [r1, #0]
 8008560:	7810      	ldrb	r0, [r2, #0]
 8008562:	1e43      	subs	r3, r0, #1
 8008564:	4198      	sbcs	r0, r3
 8008566:	b002      	add	sp, #8
 8008568:	4770      	bx	lr
 800856a:	2002      	movs	r0, #2
 800856c:	4240      	negs	r0, r0
 800856e:	e7fa      	b.n	8008566 <__ascii_mbtowc+0x1a>

08008570 <__ascii_wctomb>:
 8008570:	0003      	movs	r3, r0
 8008572:	1e08      	subs	r0, r1, #0
 8008574:	d005      	beq.n	8008582 <__ascii_wctomb+0x12>
 8008576:	2aff      	cmp	r2, #255	@ 0xff
 8008578:	d904      	bls.n	8008584 <__ascii_wctomb+0x14>
 800857a:	228a      	movs	r2, #138	@ 0x8a
 800857c:	2001      	movs	r0, #1
 800857e:	601a      	str	r2, [r3, #0]
 8008580:	4240      	negs	r0, r0
 8008582:	4770      	bx	lr
 8008584:	2001      	movs	r0, #1
 8008586:	700a      	strb	r2, [r1, #0]
 8008588:	e7fb      	b.n	8008582 <__ascii_wctomb+0x12>
	...

0800858c <_init>:
 800858c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800858e:	46c0      	nop			@ (mov r8, r8)
 8008590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008592:	bc08      	pop	{r3}
 8008594:	469e      	mov	lr, r3
 8008596:	4770      	bx	lr

08008598 <_fini>:
 8008598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800859a:	46c0      	nop			@ (mov r8, r8)
 800859c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800859e:	bc08      	pop	{r3}
 80085a0:	469e      	mov	lr, r3
 80085a2:	4770      	bx	lr
