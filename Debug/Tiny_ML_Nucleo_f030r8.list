
Tiny_ML_Nucleo_f030r8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008488  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  08008548  08008548  00009548  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089d4  080089d4  0000a1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080089d4  080089d4  0000a1d4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080089d4  080089d4  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089d4  080089d4  000099d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080089d8  080089d8  000099d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080089dc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  200001d4  08008bb0  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004c4  08008bb0  0000a4c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba84  00000000  00000000  0000a1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002173  00000000  00000000  00015c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  00017df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007f3  00000000  00000000  00018858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001161c  00000000  00000000  0001904b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fcb4  00000000  00000000  0002a667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00060d81  00000000  00000000  0003a31b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009b09c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003468  00000000  00000000  0009b0e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0009e548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d4 	.word	0x200001d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008530 	.word	0x08008530

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d8 	.word	0x200001d8
 8000104:	08008530 	.word	0x08008530

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fa85 	bl	800194c <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f9c9 	bl	80017e4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fa77 	bl	800194c <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fa6d 	bl	800194c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f9f3 	bl	800186c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f9e9 	bl	800186c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_fdiv>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	4646      	mov	r6, r8
 80004ac:	464f      	mov	r7, r9
 80004ae:	46d6      	mov	lr, sl
 80004b0:	0245      	lsls	r5, r0, #9
 80004b2:	b5c0      	push	{r6, r7, lr}
 80004b4:	0fc3      	lsrs	r3, r0, #31
 80004b6:	0047      	lsls	r7, r0, #1
 80004b8:	4698      	mov	r8, r3
 80004ba:	1c0e      	adds	r6, r1, #0
 80004bc:	0a6d      	lsrs	r5, r5, #9
 80004be:	0e3f      	lsrs	r7, r7, #24
 80004c0:	d05b      	beq.n	800057a <__aeabi_fdiv+0xd2>
 80004c2:	2fff      	cmp	r7, #255	@ 0xff
 80004c4:	d021      	beq.n	800050a <__aeabi_fdiv+0x62>
 80004c6:	2380      	movs	r3, #128	@ 0x80
 80004c8:	00ed      	lsls	r5, r5, #3
 80004ca:	04db      	lsls	r3, r3, #19
 80004cc:	431d      	orrs	r5, r3
 80004ce:	2300      	movs	r3, #0
 80004d0:	4699      	mov	r9, r3
 80004d2:	469a      	mov	sl, r3
 80004d4:	3f7f      	subs	r7, #127	@ 0x7f
 80004d6:	0274      	lsls	r4, r6, #9
 80004d8:	0073      	lsls	r3, r6, #1
 80004da:	0a64      	lsrs	r4, r4, #9
 80004dc:	0e1b      	lsrs	r3, r3, #24
 80004de:	0ff6      	lsrs	r6, r6, #31
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d020      	beq.n	8000526 <__aeabi_fdiv+0x7e>
 80004e4:	2bff      	cmp	r3, #255	@ 0xff
 80004e6:	d043      	beq.n	8000570 <__aeabi_fdiv+0xc8>
 80004e8:	2280      	movs	r2, #128	@ 0x80
 80004ea:	2000      	movs	r0, #0
 80004ec:	00e4      	lsls	r4, r4, #3
 80004ee:	04d2      	lsls	r2, r2, #19
 80004f0:	4314      	orrs	r4, r2
 80004f2:	3b7f      	subs	r3, #127	@ 0x7f
 80004f4:	4642      	mov	r2, r8
 80004f6:	1aff      	subs	r7, r7, r3
 80004f8:	464b      	mov	r3, r9
 80004fa:	4072      	eors	r2, r6
 80004fc:	2b0f      	cmp	r3, #15
 80004fe:	d900      	bls.n	8000502 <__aeabi_fdiv+0x5a>
 8000500:	e09d      	b.n	800063e <__aeabi_fdiv+0x196>
 8000502:	4971      	ldr	r1, [pc, #452]	@ (80006c8 <__aeabi_fdiv+0x220>)
 8000504:	009b      	lsls	r3, r3, #2
 8000506:	58cb      	ldr	r3, [r1, r3]
 8000508:	469f      	mov	pc, r3
 800050a:	2d00      	cmp	r5, #0
 800050c:	d15a      	bne.n	80005c4 <__aeabi_fdiv+0x11c>
 800050e:	2308      	movs	r3, #8
 8000510:	4699      	mov	r9, r3
 8000512:	3b06      	subs	r3, #6
 8000514:	0274      	lsls	r4, r6, #9
 8000516:	469a      	mov	sl, r3
 8000518:	0073      	lsls	r3, r6, #1
 800051a:	27ff      	movs	r7, #255	@ 0xff
 800051c:	0a64      	lsrs	r4, r4, #9
 800051e:	0e1b      	lsrs	r3, r3, #24
 8000520:	0ff6      	lsrs	r6, r6, #31
 8000522:	2b00      	cmp	r3, #0
 8000524:	d1de      	bne.n	80004e4 <__aeabi_fdiv+0x3c>
 8000526:	2c00      	cmp	r4, #0
 8000528:	d13b      	bne.n	80005a2 <__aeabi_fdiv+0xfa>
 800052a:	2301      	movs	r3, #1
 800052c:	4642      	mov	r2, r8
 800052e:	4649      	mov	r1, r9
 8000530:	4072      	eors	r2, r6
 8000532:	4319      	orrs	r1, r3
 8000534:	290e      	cmp	r1, #14
 8000536:	d818      	bhi.n	800056a <__aeabi_fdiv+0xc2>
 8000538:	4864      	ldr	r0, [pc, #400]	@ (80006cc <__aeabi_fdiv+0x224>)
 800053a:	0089      	lsls	r1, r1, #2
 800053c:	5841      	ldr	r1, [r0, r1]
 800053e:	468f      	mov	pc, r1
 8000540:	4653      	mov	r3, sl
 8000542:	2b02      	cmp	r3, #2
 8000544:	d100      	bne.n	8000548 <__aeabi_fdiv+0xa0>
 8000546:	e0b8      	b.n	80006ba <__aeabi_fdiv+0x212>
 8000548:	2b03      	cmp	r3, #3
 800054a:	d06e      	beq.n	800062a <__aeabi_fdiv+0x182>
 800054c:	4642      	mov	r2, r8
 800054e:	002c      	movs	r4, r5
 8000550:	2b01      	cmp	r3, #1
 8000552:	d140      	bne.n	80005d6 <__aeabi_fdiv+0x12e>
 8000554:	2000      	movs	r0, #0
 8000556:	2400      	movs	r4, #0
 8000558:	05c0      	lsls	r0, r0, #23
 800055a:	4320      	orrs	r0, r4
 800055c:	07d2      	lsls	r2, r2, #31
 800055e:	4310      	orrs	r0, r2
 8000560:	bce0      	pop	{r5, r6, r7}
 8000562:	46ba      	mov	sl, r7
 8000564:	46b1      	mov	r9, r6
 8000566:	46a8      	mov	r8, r5
 8000568:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800056a:	20ff      	movs	r0, #255	@ 0xff
 800056c:	2400      	movs	r4, #0
 800056e:	e7f3      	b.n	8000558 <__aeabi_fdiv+0xb0>
 8000570:	2c00      	cmp	r4, #0
 8000572:	d120      	bne.n	80005b6 <__aeabi_fdiv+0x10e>
 8000574:	2302      	movs	r3, #2
 8000576:	3fff      	subs	r7, #255	@ 0xff
 8000578:	e7d8      	b.n	800052c <__aeabi_fdiv+0x84>
 800057a:	2d00      	cmp	r5, #0
 800057c:	d105      	bne.n	800058a <__aeabi_fdiv+0xe2>
 800057e:	2304      	movs	r3, #4
 8000580:	4699      	mov	r9, r3
 8000582:	3b03      	subs	r3, #3
 8000584:	2700      	movs	r7, #0
 8000586:	469a      	mov	sl, r3
 8000588:	e7a5      	b.n	80004d6 <__aeabi_fdiv+0x2e>
 800058a:	0028      	movs	r0, r5
 800058c:	f002 fa34 	bl	80029f8 <__clzsi2>
 8000590:	2776      	movs	r7, #118	@ 0x76
 8000592:	1f43      	subs	r3, r0, #5
 8000594:	409d      	lsls	r5, r3
 8000596:	2300      	movs	r3, #0
 8000598:	427f      	negs	r7, r7
 800059a:	4699      	mov	r9, r3
 800059c:	469a      	mov	sl, r3
 800059e:	1a3f      	subs	r7, r7, r0
 80005a0:	e799      	b.n	80004d6 <__aeabi_fdiv+0x2e>
 80005a2:	0020      	movs	r0, r4
 80005a4:	f002 fa28 	bl	80029f8 <__clzsi2>
 80005a8:	1f43      	subs	r3, r0, #5
 80005aa:	409c      	lsls	r4, r3
 80005ac:	2376      	movs	r3, #118	@ 0x76
 80005ae:	425b      	negs	r3, r3
 80005b0:	1a1b      	subs	r3, r3, r0
 80005b2:	2000      	movs	r0, #0
 80005b4:	e79e      	b.n	80004f4 <__aeabi_fdiv+0x4c>
 80005b6:	2303      	movs	r3, #3
 80005b8:	464a      	mov	r2, r9
 80005ba:	431a      	orrs	r2, r3
 80005bc:	4691      	mov	r9, r2
 80005be:	2003      	movs	r0, #3
 80005c0:	33fc      	adds	r3, #252	@ 0xfc
 80005c2:	e797      	b.n	80004f4 <__aeabi_fdiv+0x4c>
 80005c4:	230c      	movs	r3, #12
 80005c6:	4699      	mov	r9, r3
 80005c8:	3b09      	subs	r3, #9
 80005ca:	27ff      	movs	r7, #255	@ 0xff
 80005cc:	469a      	mov	sl, r3
 80005ce:	e782      	b.n	80004d6 <__aeabi_fdiv+0x2e>
 80005d0:	2803      	cmp	r0, #3
 80005d2:	d02c      	beq.n	800062e <__aeabi_fdiv+0x186>
 80005d4:	0032      	movs	r2, r6
 80005d6:	0038      	movs	r0, r7
 80005d8:	307f      	adds	r0, #127	@ 0x7f
 80005da:	2800      	cmp	r0, #0
 80005dc:	dd47      	ble.n	800066e <__aeabi_fdiv+0x1c6>
 80005de:	0763      	lsls	r3, r4, #29
 80005e0:	d004      	beq.n	80005ec <__aeabi_fdiv+0x144>
 80005e2:	230f      	movs	r3, #15
 80005e4:	4023      	ands	r3, r4
 80005e6:	2b04      	cmp	r3, #4
 80005e8:	d000      	beq.n	80005ec <__aeabi_fdiv+0x144>
 80005ea:	3404      	adds	r4, #4
 80005ec:	0123      	lsls	r3, r4, #4
 80005ee:	d503      	bpl.n	80005f8 <__aeabi_fdiv+0x150>
 80005f0:	0038      	movs	r0, r7
 80005f2:	4b37      	ldr	r3, [pc, #220]	@ (80006d0 <__aeabi_fdiv+0x228>)
 80005f4:	3080      	adds	r0, #128	@ 0x80
 80005f6:	401c      	ands	r4, r3
 80005f8:	28fe      	cmp	r0, #254	@ 0xfe
 80005fa:	dcb6      	bgt.n	800056a <__aeabi_fdiv+0xc2>
 80005fc:	01a4      	lsls	r4, r4, #6
 80005fe:	0a64      	lsrs	r4, r4, #9
 8000600:	b2c0      	uxtb	r0, r0
 8000602:	e7a9      	b.n	8000558 <__aeabi_fdiv+0xb0>
 8000604:	2480      	movs	r4, #128	@ 0x80
 8000606:	2200      	movs	r2, #0
 8000608:	20ff      	movs	r0, #255	@ 0xff
 800060a:	03e4      	lsls	r4, r4, #15
 800060c:	e7a4      	b.n	8000558 <__aeabi_fdiv+0xb0>
 800060e:	2380      	movs	r3, #128	@ 0x80
 8000610:	03db      	lsls	r3, r3, #15
 8000612:	421d      	tst	r5, r3
 8000614:	d001      	beq.n	800061a <__aeabi_fdiv+0x172>
 8000616:	421c      	tst	r4, r3
 8000618:	d00b      	beq.n	8000632 <__aeabi_fdiv+0x18a>
 800061a:	2480      	movs	r4, #128	@ 0x80
 800061c:	03e4      	lsls	r4, r4, #15
 800061e:	432c      	orrs	r4, r5
 8000620:	0264      	lsls	r4, r4, #9
 8000622:	4642      	mov	r2, r8
 8000624:	20ff      	movs	r0, #255	@ 0xff
 8000626:	0a64      	lsrs	r4, r4, #9
 8000628:	e796      	b.n	8000558 <__aeabi_fdiv+0xb0>
 800062a:	4646      	mov	r6, r8
 800062c:	002c      	movs	r4, r5
 800062e:	2380      	movs	r3, #128	@ 0x80
 8000630:	03db      	lsls	r3, r3, #15
 8000632:	431c      	orrs	r4, r3
 8000634:	0264      	lsls	r4, r4, #9
 8000636:	0032      	movs	r2, r6
 8000638:	20ff      	movs	r0, #255	@ 0xff
 800063a:	0a64      	lsrs	r4, r4, #9
 800063c:	e78c      	b.n	8000558 <__aeabi_fdiv+0xb0>
 800063e:	016d      	lsls	r5, r5, #5
 8000640:	0160      	lsls	r0, r4, #5
 8000642:	4285      	cmp	r5, r0
 8000644:	d22d      	bcs.n	80006a2 <__aeabi_fdiv+0x1fa>
 8000646:	231b      	movs	r3, #27
 8000648:	2400      	movs	r4, #0
 800064a:	3f01      	subs	r7, #1
 800064c:	2601      	movs	r6, #1
 800064e:	0029      	movs	r1, r5
 8000650:	0064      	lsls	r4, r4, #1
 8000652:	006d      	lsls	r5, r5, #1
 8000654:	2900      	cmp	r1, #0
 8000656:	db01      	blt.n	800065c <__aeabi_fdiv+0x1b4>
 8000658:	4285      	cmp	r5, r0
 800065a:	d301      	bcc.n	8000660 <__aeabi_fdiv+0x1b8>
 800065c:	1a2d      	subs	r5, r5, r0
 800065e:	4334      	orrs	r4, r6
 8000660:	3b01      	subs	r3, #1
 8000662:	2b00      	cmp	r3, #0
 8000664:	d1f3      	bne.n	800064e <__aeabi_fdiv+0x1a6>
 8000666:	1e6b      	subs	r3, r5, #1
 8000668:	419d      	sbcs	r5, r3
 800066a:	432c      	orrs	r4, r5
 800066c:	e7b3      	b.n	80005d6 <__aeabi_fdiv+0x12e>
 800066e:	2301      	movs	r3, #1
 8000670:	1a1b      	subs	r3, r3, r0
 8000672:	2b1b      	cmp	r3, #27
 8000674:	dd00      	ble.n	8000678 <__aeabi_fdiv+0x1d0>
 8000676:	e76d      	b.n	8000554 <__aeabi_fdiv+0xac>
 8000678:	0021      	movs	r1, r4
 800067a:	379e      	adds	r7, #158	@ 0x9e
 800067c:	40d9      	lsrs	r1, r3
 800067e:	40bc      	lsls	r4, r7
 8000680:	000b      	movs	r3, r1
 8000682:	1e61      	subs	r1, r4, #1
 8000684:	418c      	sbcs	r4, r1
 8000686:	4323      	orrs	r3, r4
 8000688:	0759      	lsls	r1, r3, #29
 800068a:	d004      	beq.n	8000696 <__aeabi_fdiv+0x1ee>
 800068c:	210f      	movs	r1, #15
 800068e:	4019      	ands	r1, r3
 8000690:	2904      	cmp	r1, #4
 8000692:	d000      	beq.n	8000696 <__aeabi_fdiv+0x1ee>
 8000694:	3304      	adds	r3, #4
 8000696:	0159      	lsls	r1, r3, #5
 8000698:	d413      	bmi.n	80006c2 <__aeabi_fdiv+0x21a>
 800069a:	019b      	lsls	r3, r3, #6
 800069c:	2000      	movs	r0, #0
 800069e:	0a5c      	lsrs	r4, r3, #9
 80006a0:	e75a      	b.n	8000558 <__aeabi_fdiv+0xb0>
 80006a2:	231a      	movs	r3, #26
 80006a4:	2401      	movs	r4, #1
 80006a6:	1a2d      	subs	r5, r5, r0
 80006a8:	e7d0      	b.n	800064c <__aeabi_fdiv+0x1a4>
 80006aa:	1e98      	subs	r0, r3, #2
 80006ac:	4243      	negs	r3, r0
 80006ae:	4158      	adcs	r0, r3
 80006b0:	4240      	negs	r0, r0
 80006b2:	0032      	movs	r2, r6
 80006b4:	2400      	movs	r4, #0
 80006b6:	b2c0      	uxtb	r0, r0
 80006b8:	e74e      	b.n	8000558 <__aeabi_fdiv+0xb0>
 80006ba:	4642      	mov	r2, r8
 80006bc:	20ff      	movs	r0, #255	@ 0xff
 80006be:	2400      	movs	r4, #0
 80006c0:	e74a      	b.n	8000558 <__aeabi_fdiv+0xb0>
 80006c2:	2001      	movs	r0, #1
 80006c4:	2400      	movs	r4, #0
 80006c6:	e747      	b.n	8000558 <__aeabi_fdiv+0xb0>
 80006c8:	08008568 	.word	0x08008568
 80006cc:	080085a8 	.word	0x080085a8
 80006d0:	f7ffffff 	.word	0xf7ffffff

080006d4 <__aeabi_fmul>:
 80006d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006d6:	464f      	mov	r7, r9
 80006d8:	4646      	mov	r6, r8
 80006da:	46d6      	mov	lr, sl
 80006dc:	0044      	lsls	r4, r0, #1
 80006de:	b5c0      	push	{r6, r7, lr}
 80006e0:	0246      	lsls	r6, r0, #9
 80006e2:	1c0f      	adds	r7, r1, #0
 80006e4:	0a76      	lsrs	r6, r6, #9
 80006e6:	0e24      	lsrs	r4, r4, #24
 80006e8:	0fc5      	lsrs	r5, r0, #31
 80006ea:	2c00      	cmp	r4, #0
 80006ec:	d100      	bne.n	80006f0 <__aeabi_fmul+0x1c>
 80006ee:	e0da      	b.n	80008a6 <__aeabi_fmul+0x1d2>
 80006f0:	2cff      	cmp	r4, #255	@ 0xff
 80006f2:	d074      	beq.n	80007de <__aeabi_fmul+0x10a>
 80006f4:	2380      	movs	r3, #128	@ 0x80
 80006f6:	00f6      	lsls	r6, r6, #3
 80006f8:	04db      	lsls	r3, r3, #19
 80006fa:	431e      	orrs	r6, r3
 80006fc:	2300      	movs	r3, #0
 80006fe:	4699      	mov	r9, r3
 8000700:	469a      	mov	sl, r3
 8000702:	3c7f      	subs	r4, #127	@ 0x7f
 8000704:	027b      	lsls	r3, r7, #9
 8000706:	0a5b      	lsrs	r3, r3, #9
 8000708:	4698      	mov	r8, r3
 800070a:	007b      	lsls	r3, r7, #1
 800070c:	0e1b      	lsrs	r3, r3, #24
 800070e:	0fff      	lsrs	r7, r7, #31
 8000710:	2b00      	cmp	r3, #0
 8000712:	d074      	beq.n	80007fe <__aeabi_fmul+0x12a>
 8000714:	2bff      	cmp	r3, #255	@ 0xff
 8000716:	d100      	bne.n	800071a <__aeabi_fmul+0x46>
 8000718:	e08e      	b.n	8000838 <__aeabi_fmul+0x164>
 800071a:	4642      	mov	r2, r8
 800071c:	2180      	movs	r1, #128	@ 0x80
 800071e:	00d2      	lsls	r2, r2, #3
 8000720:	04c9      	lsls	r1, r1, #19
 8000722:	4311      	orrs	r1, r2
 8000724:	3b7f      	subs	r3, #127	@ 0x7f
 8000726:	002a      	movs	r2, r5
 8000728:	18e4      	adds	r4, r4, r3
 800072a:	464b      	mov	r3, r9
 800072c:	407a      	eors	r2, r7
 800072e:	4688      	mov	r8, r1
 8000730:	b2d2      	uxtb	r2, r2
 8000732:	2b0a      	cmp	r3, #10
 8000734:	dc75      	bgt.n	8000822 <__aeabi_fmul+0x14e>
 8000736:	464b      	mov	r3, r9
 8000738:	2000      	movs	r0, #0
 800073a:	2b02      	cmp	r3, #2
 800073c:	dd0f      	ble.n	800075e <__aeabi_fmul+0x8a>
 800073e:	4649      	mov	r1, r9
 8000740:	2301      	movs	r3, #1
 8000742:	408b      	lsls	r3, r1
 8000744:	21a6      	movs	r1, #166	@ 0xa6
 8000746:	00c9      	lsls	r1, r1, #3
 8000748:	420b      	tst	r3, r1
 800074a:	d169      	bne.n	8000820 <__aeabi_fmul+0x14c>
 800074c:	2190      	movs	r1, #144	@ 0x90
 800074e:	0089      	lsls	r1, r1, #2
 8000750:	420b      	tst	r3, r1
 8000752:	d000      	beq.n	8000756 <__aeabi_fmul+0x82>
 8000754:	e100      	b.n	8000958 <__aeabi_fmul+0x284>
 8000756:	2188      	movs	r1, #136	@ 0x88
 8000758:	4219      	tst	r1, r3
 800075a:	d000      	beq.n	800075e <__aeabi_fmul+0x8a>
 800075c:	e0f5      	b.n	800094a <__aeabi_fmul+0x276>
 800075e:	4641      	mov	r1, r8
 8000760:	0409      	lsls	r1, r1, #16
 8000762:	0c09      	lsrs	r1, r1, #16
 8000764:	4643      	mov	r3, r8
 8000766:	0008      	movs	r0, r1
 8000768:	0c35      	lsrs	r5, r6, #16
 800076a:	0436      	lsls	r6, r6, #16
 800076c:	0c1b      	lsrs	r3, r3, #16
 800076e:	0c36      	lsrs	r6, r6, #16
 8000770:	4370      	muls	r0, r6
 8000772:	4369      	muls	r1, r5
 8000774:	435e      	muls	r6, r3
 8000776:	435d      	muls	r5, r3
 8000778:	1876      	adds	r6, r6, r1
 800077a:	0c03      	lsrs	r3, r0, #16
 800077c:	199b      	adds	r3, r3, r6
 800077e:	4299      	cmp	r1, r3
 8000780:	d903      	bls.n	800078a <__aeabi_fmul+0xb6>
 8000782:	2180      	movs	r1, #128	@ 0x80
 8000784:	0249      	lsls	r1, r1, #9
 8000786:	468c      	mov	ip, r1
 8000788:	4465      	add	r5, ip
 800078a:	0400      	lsls	r0, r0, #16
 800078c:	0419      	lsls	r1, r3, #16
 800078e:	0c00      	lsrs	r0, r0, #16
 8000790:	1809      	adds	r1, r1, r0
 8000792:	018e      	lsls	r6, r1, #6
 8000794:	1e70      	subs	r0, r6, #1
 8000796:	4186      	sbcs	r6, r0
 8000798:	0c1b      	lsrs	r3, r3, #16
 800079a:	0e89      	lsrs	r1, r1, #26
 800079c:	195b      	adds	r3, r3, r5
 800079e:	430e      	orrs	r6, r1
 80007a0:	019b      	lsls	r3, r3, #6
 80007a2:	431e      	orrs	r6, r3
 80007a4:	011b      	lsls	r3, r3, #4
 80007a6:	d46c      	bmi.n	8000882 <__aeabi_fmul+0x1ae>
 80007a8:	0023      	movs	r3, r4
 80007aa:	337f      	adds	r3, #127	@ 0x7f
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	dc00      	bgt.n	80007b2 <__aeabi_fmul+0xde>
 80007b0:	e0b1      	b.n	8000916 <__aeabi_fmul+0x242>
 80007b2:	0015      	movs	r5, r2
 80007b4:	0771      	lsls	r1, r6, #29
 80007b6:	d00b      	beq.n	80007d0 <__aeabi_fmul+0xfc>
 80007b8:	200f      	movs	r0, #15
 80007ba:	0021      	movs	r1, r4
 80007bc:	4030      	ands	r0, r6
 80007be:	2804      	cmp	r0, #4
 80007c0:	d006      	beq.n	80007d0 <__aeabi_fmul+0xfc>
 80007c2:	3604      	adds	r6, #4
 80007c4:	0132      	lsls	r2, r6, #4
 80007c6:	d503      	bpl.n	80007d0 <__aeabi_fmul+0xfc>
 80007c8:	4b6e      	ldr	r3, [pc, #440]	@ (8000984 <__aeabi_fmul+0x2b0>)
 80007ca:	401e      	ands	r6, r3
 80007cc:	000b      	movs	r3, r1
 80007ce:	3380      	adds	r3, #128	@ 0x80
 80007d0:	2bfe      	cmp	r3, #254	@ 0xfe
 80007d2:	dd00      	ble.n	80007d6 <__aeabi_fmul+0x102>
 80007d4:	e0bd      	b.n	8000952 <__aeabi_fmul+0x27e>
 80007d6:	01b2      	lsls	r2, r6, #6
 80007d8:	0a52      	lsrs	r2, r2, #9
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	e048      	b.n	8000870 <__aeabi_fmul+0x19c>
 80007de:	2e00      	cmp	r6, #0
 80007e0:	d000      	beq.n	80007e4 <__aeabi_fmul+0x110>
 80007e2:	e092      	b.n	800090a <__aeabi_fmul+0x236>
 80007e4:	2308      	movs	r3, #8
 80007e6:	4699      	mov	r9, r3
 80007e8:	3b06      	subs	r3, #6
 80007ea:	469a      	mov	sl, r3
 80007ec:	027b      	lsls	r3, r7, #9
 80007ee:	0a5b      	lsrs	r3, r3, #9
 80007f0:	4698      	mov	r8, r3
 80007f2:	007b      	lsls	r3, r7, #1
 80007f4:	24ff      	movs	r4, #255	@ 0xff
 80007f6:	0e1b      	lsrs	r3, r3, #24
 80007f8:	0fff      	lsrs	r7, r7, #31
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d18a      	bne.n	8000714 <__aeabi_fmul+0x40>
 80007fe:	4642      	mov	r2, r8
 8000800:	2a00      	cmp	r2, #0
 8000802:	d164      	bne.n	80008ce <__aeabi_fmul+0x1fa>
 8000804:	4649      	mov	r1, r9
 8000806:	3201      	adds	r2, #1
 8000808:	4311      	orrs	r1, r2
 800080a:	4689      	mov	r9, r1
 800080c:	290a      	cmp	r1, #10
 800080e:	dc08      	bgt.n	8000822 <__aeabi_fmul+0x14e>
 8000810:	407d      	eors	r5, r7
 8000812:	2001      	movs	r0, #1
 8000814:	b2ea      	uxtb	r2, r5
 8000816:	2902      	cmp	r1, #2
 8000818:	dc91      	bgt.n	800073e <__aeabi_fmul+0x6a>
 800081a:	0015      	movs	r5, r2
 800081c:	2200      	movs	r2, #0
 800081e:	e027      	b.n	8000870 <__aeabi_fmul+0x19c>
 8000820:	0015      	movs	r5, r2
 8000822:	4653      	mov	r3, sl
 8000824:	2b02      	cmp	r3, #2
 8000826:	d100      	bne.n	800082a <__aeabi_fmul+0x156>
 8000828:	e093      	b.n	8000952 <__aeabi_fmul+0x27e>
 800082a:	2b03      	cmp	r3, #3
 800082c:	d01a      	beq.n	8000864 <__aeabi_fmul+0x190>
 800082e:	2b01      	cmp	r3, #1
 8000830:	d12c      	bne.n	800088c <__aeabi_fmul+0x1b8>
 8000832:	2300      	movs	r3, #0
 8000834:	2200      	movs	r2, #0
 8000836:	e01b      	b.n	8000870 <__aeabi_fmul+0x19c>
 8000838:	4643      	mov	r3, r8
 800083a:	34ff      	adds	r4, #255	@ 0xff
 800083c:	2b00      	cmp	r3, #0
 800083e:	d055      	beq.n	80008ec <__aeabi_fmul+0x218>
 8000840:	2103      	movs	r1, #3
 8000842:	464b      	mov	r3, r9
 8000844:	430b      	orrs	r3, r1
 8000846:	0019      	movs	r1, r3
 8000848:	2b0a      	cmp	r3, #10
 800084a:	dc00      	bgt.n	800084e <__aeabi_fmul+0x17a>
 800084c:	e092      	b.n	8000974 <__aeabi_fmul+0x2a0>
 800084e:	2b0f      	cmp	r3, #15
 8000850:	d000      	beq.n	8000854 <__aeabi_fmul+0x180>
 8000852:	e08c      	b.n	800096e <__aeabi_fmul+0x29a>
 8000854:	2280      	movs	r2, #128	@ 0x80
 8000856:	03d2      	lsls	r2, r2, #15
 8000858:	4216      	tst	r6, r2
 800085a:	d003      	beq.n	8000864 <__aeabi_fmul+0x190>
 800085c:	4643      	mov	r3, r8
 800085e:	4213      	tst	r3, r2
 8000860:	d100      	bne.n	8000864 <__aeabi_fmul+0x190>
 8000862:	e07d      	b.n	8000960 <__aeabi_fmul+0x28c>
 8000864:	2280      	movs	r2, #128	@ 0x80
 8000866:	03d2      	lsls	r2, r2, #15
 8000868:	4332      	orrs	r2, r6
 800086a:	0252      	lsls	r2, r2, #9
 800086c:	0a52      	lsrs	r2, r2, #9
 800086e:	23ff      	movs	r3, #255	@ 0xff
 8000870:	05d8      	lsls	r0, r3, #23
 8000872:	07ed      	lsls	r5, r5, #31
 8000874:	4310      	orrs	r0, r2
 8000876:	4328      	orrs	r0, r5
 8000878:	bce0      	pop	{r5, r6, r7}
 800087a:	46ba      	mov	sl, r7
 800087c:	46b1      	mov	r9, r6
 800087e:	46a8      	mov	r8, r5
 8000880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000882:	2301      	movs	r3, #1
 8000884:	0015      	movs	r5, r2
 8000886:	0871      	lsrs	r1, r6, #1
 8000888:	401e      	ands	r6, r3
 800088a:	430e      	orrs	r6, r1
 800088c:	0023      	movs	r3, r4
 800088e:	3380      	adds	r3, #128	@ 0x80
 8000890:	1c61      	adds	r1, r4, #1
 8000892:	2b00      	cmp	r3, #0
 8000894:	dd41      	ble.n	800091a <__aeabi_fmul+0x246>
 8000896:	0772      	lsls	r2, r6, #29
 8000898:	d094      	beq.n	80007c4 <__aeabi_fmul+0xf0>
 800089a:	220f      	movs	r2, #15
 800089c:	4032      	ands	r2, r6
 800089e:	2a04      	cmp	r2, #4
 80008a0:	d000      	beq.n	80008a4 <__aeabi_fmul+0x1d0>
 80008a2:	e78e      	b.n	80007c2 <__aeabi_fmul+0xee>
 80008a4:	e78e      	b.n	80007c4 <__aeabi_fmul+0xf0>
 80008a6:	2e00      	cmp	r6, #0
 80008a8:	d105      	bne.n	80008b6 <__aeabi_fmul+0x1e2>
 80008aa:	2304      	movs	r3, #4
 80008ac:	4699      	mov	r9, r3
 80008ae:	3b03      	subs	r3, #3
 80008b0:	2400      	movs	r4, #0
 80008b2:	469a      	mov	sl, r3
 80008b4:	e726      	b.n	8000704 <__aeabi_fmul+0x30>
 80008b6:	0030      	movs	r0, r6
 80008b8:	f002 f89e 	bl	80029f8 <__clzsi2>
 80008bc:	2476      	movs	r4, #118	@ 0x76
 80008be:	1f43      	subs	r3, r0, #5
 80008c0:	409e      	lsls	r6, r3
 80008c2:	2300      	movs	r3, #0
 80008c4:	4264      	negs	r4, r4
 80008c6:	4699      	mov	r9, r3
 80008c8:	469a      	mov	sl, r3
 80008ca:	1a24      	subs	r4, r4, r0
 80008cc:	e71a      	b.n	8000704 <__aeabi_fmul+0x30>
 80008ce:	4640      	mov	r0, r8
 80008d0:	f002 f892 	bl	80029f8 <__clzsi2>
 80008d4:	464b      	mov	r3, r9
 80008d6:	1a24      	subs	r4, r4, r0
 80008d8:	3c76      	subs	r4, #118	@ 0x76
 80008da:	2b0a      	cmp	r3, #10
 80008dc:	dca1      	bgt.n	8000822 <__aeabi_fmul+0x14e>
 80008de:	4643      	mov	r3, r8
 80008e0:	3805      	subs	r0, #5
 80008e2:	4083      	lsls	r3, r0
 80008e4:	407d      	eors	r5, r7
 80008e6:	4698      	mov	r8, r3
 80008e8:	b2ea      	uxtb	r2, r5
 80008ea:	e724      	b.n	8000736 <__aeabi_fmul+0x62>
 80008ec:	464a      	mov	r2, r9
 80008ee:	3302      	adds	r3, #2
 80008f0:	4313      	orrs	r3, r2
 80008f2:	002a      	movs	r2, r5
 80008f4:	407a      	eors	r2, r7
 80008f6:	b2d2      	uxtb	r2, r2
 80008f8:	2b0a      	cmp	r3, #10
 80008fa:	dc92      	bgt.n	8000822 <__aeabi_fmul+0x14e>
 80008fc:	4649      	mov	r1, r9
 80008fe:	0015      	movs	r5, r2
 8000900:	2900      	cmp	r1, #0
 8000902:	d026      	beq.n	8000952 <__aeabi_fmul+0x27e>
 8000904:	4699      	mov	r9, r3
 8000906:	2002      	movs	r0, #2
 8000908:	e719      	b.n	800073e <__aeabi_fmul+0x6a>
 800090a:	230c      	movs	r3, #12
 800090c:	4699      	mov	r9, r3
 800090e:	3b09      	subs	r3, #9
 8000910:	24ff      	movs	r4, #255	@ 0xff
 8000912:	469a      	mov	sl, r3
 8000914:	e6f6      	b.n	8000704 <__aeabi_fmul+0x30>
 8000916:	0015      	movs	r5, r2
 8000918:	0021      	movs	r1, r4
 800091a:	2201      	movs	r2, #1
 800091c:	1ad3      	subs	r3, r2, r3
 800091e:	2b1b      	cmp	r3, #27
 8000920:	dd00      	ble.n	8000924 <__aeabi_fmul+0x250>
 8000922:	e786      	b.n	8000832 <__aeabi_fmul+0x15e>
 8000924:	319e      	adds	r1, #158	@ 0x9e
 8000926:	0032      	movs	r2, r6
 8000928:	408e      	lsls	r6, r1
 800092a:	40da      	lsrs	r2, r3
 800092c:	1e73      	subs	r3, r6, #1
 800092e:	419e      	sbcs	r6, r3
 8000930:	4332      	orrs	r2, r6
 8000932:	0753      	lsls	r3, r2, #29
 8000934:	d004      	beq.n	8000940 <__aeabi_fmul+0x26c>
 8000936:	230f      	movs	r3, #15
 8000938:	4013      	ands	r3, r2
 800093a:	2b04      	cmp	r3, #4
 800093c:	d000      	beq.n	8000940 <__aeabi_fmul+0x26c>
 800093e:	3204      	adds	r2, #4
 8000940:	0153      	lsls	r3, r2, #5
 8000942:	d510      	bpl.n	8000966 <__aeabi_fmul+0x292>
 8000944:	2301      	movs	r3, #1
 8000946:	2200      	movs	r2, #0
 8000948:	e792      	b.n	8000870 <__aeabi_fmul+0x19c>
 800094a:	003d      	movs	r5, r7
 800094c:	4646      	mov	r6, r8
 800094e:	4682      	mov	sl, r0
 8000950:	e767      	b.n	8000822 <__aeabi_fmul+0x14e>
 8000952:	23ff      	movs	r3, #255	@ 0xff
 8000954:	2200      	movs	r2, #0
 8000956:	e78b      	b.n	8000870 <__aeabi_fmul+0x19c>
 8000958:	2280      	movs	r2, #128	@ 0x80
 800095a:	2500      	movs	r5, #0
 800095c:	03d2      	lsls	r2, r2, #15
 800095e:	e786      	b.n	800086e <__aeabi_fmul+0x19a>
 8000960:	003d      	movs	r5, r7
 8000962:	431a      	orrs	r2, r3
 8000964:	e783      	b.n	800086e <__aeabi_fmul+0x19a>
 8000966:	0192      	lsls	r2, r2, #6
 8000968:	2300      	movs	r3, #0
 800096a:	0a52      	lsrs	r2, r2, #9
 800096c:	e780      	b.n	8000870 <__aeabi_fmul+0x19c>
 800096e:	003d      	movs	r5, r7
 8000970:	4646      	mov	r6, r8
 8000972:	e777      	b.n	8000864 <__aeabi_fmul+0x190>
 8000974:	002a      	movs	r2, r5
 8000976:	2301      	movs	r3, #1
 8000978:	407a      	eors	r2, r7
 800097a:	408b      	lsls	r3, r1
 800097c:	2003      	movs	r0, #3
 800097e:	b2d2      	uxtb	r2, r2
 8000980:	e6e9      	b.n	8000756 <__aeabi_fmul+0x82>
 8000982:	46c0      	nop			@ (mov r8, r8)
 8000984:	f7ffffff 	.word	0xf7ffffff

08000988 <__aeabi_i2f>:
 8000988:	b570      	push	{r4, r5, r6, lr}
 800098a:	2800      	cmp	r0, #0
 800098c:	d012      	beq.n	80009b4 <__aeabi_i2f+0x2c>
 800098e:	17c3      	asrs	r3, r0, #31
 8000990:	18c5      	adds	r5, r0, r3
 8000992:	405d      	eors	r5, r3
 8000994:	0fc4      	lsrs	r4, r0, #31
 8000996:	0028      	movs	r0, r5
 8000998:	f002 f82e 	bl	80029f8 <__clzsi2>
 800099c:	239e      	movs	r3, #158	@ 0x9e
 800099e:	1a1b      	subs	r3, r3, r0
 80009a0:	2b96      	cmp	r3, #150	@ 0x96
 80009a2:	dc0f      	bgt.n	80009c4 <__aeabi_i2f+0x3c>
 80009a4:	2808      	cmp	r0, #8
 80009a6:	d038      	beq.n	8000a1a <__aeabi_i2f+0x92>
 80009a8:	3808      	subs	r0, #8
 80009aa:	4085      	lsls	r5, r0
 80009ac:	026d      	lsls	r5, r5, #9
 80009ae:	0a6d      	lsrs	r5, r5, #9
 80009b0:	b2d8      	uxtb	r0, r3
 80009b2:	e002      	b.n	80009ba <__aeabi_i2f+0x32>
 80009b4:	2400      	movs	r4, #0
 80009b6:	2000      	movs	r0, #0
 80009b8:	2500      	movs	r5, #0
 80009ba:	05c0      	lsls	r0, r0, #23
 80009bc:	4328      	orrs	r0, r5
 80009be:	07e4      	lsls	r4, r4, #31
 80009c0:	4320      	orrs	r0, r4
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	2b99      	cmp	r3, #153	@ 0x99
 80009c6:	dc14      	bgt.n	80009f2 <__aeabi_i2f+0x6a>
 80009c8:	1f42      	subs	r2, r0, #5
 80009ca:	4095      	lsls	r5, r2
 80009cc:	002a      	movs	r2, r5
 80009ce:	4915      	ldr	r1, [pc, #84]	@ (8000a24 <__aeabi_i2f+0x9c>)
 80009d0:	4011      	ands	r1, r2
 80009d2:	0755      	lsls	r5, r2, #29
 80009d4:	d01c      	beq.n	8000a10 <__aeabi_i2f+0x88>
 80009d6:	250f      	movs	r5, #15
 80009d8:	402a      	ands	r2, r5
 80009da:	2a04      	cmp	r2, #4
 80009dc:	d018      	beq.n	8000a10 <__aeabi_i2f+0x88>
 80009de:	3104      	adds	r1, #4
 80009e0:	08ca      	lsrs	r2, r1, #3
 80009e2:	0149      	lsls	r1, r1, #5
 80009e4:	d515      	bpl.n	8000a12 <__aeabi_i2f+0x8a>
 80009e6:	239f      	movs	r3, #159	@ 0x9f
 80009e8:	0252      	lsls	r2, r2, #9
 80009ea:	1a18      	subs	r0, r3, r0
 80009ec:	0a55      	lsrs	r5, r2, #9
 80009ee:	b2c0      	uxtb	r0, r0
 80009f0:	e7e3      	b.n	80009ba <__aeabi_i2f+0x32>
 80009f2:	2205      	movs	r2, #5
 80009f4:	0029      	movs	r1, r5
 80009f6:	1a12      	subs	r2, r2, r0
 80009f8:	40d1      	lsrs	r1, r2
 80009fa:	0002      	movs	r2, r0
 80009fc:	321b      	adds	r2, #27
 80009fe:	4095      	lsls	r5, r2
 8000a00:	002a      	movs	r2, r5
 8000a02:	1e55      	subs	r5, r2, #1
 8000a04:	41aa      	sbcs	r2, r5
 8000a06:	430a      	orrs	r2, r1
 8000a08:	4906      	ldr	r1, [pc, #24]	@ (8000a24 <__aeabi_i2f+0x9c>)
 8000a0a:	4011      	ands	r1, r2
 8000a0c:	0755      	lsls	r5, r2, #29
 8000a0e:	d1e2      	bne.n	80009d6 <__aeabi_i2f+0x4e>
 8000a10:	08ca      	lsrs	r2, r1, #3
 8000a12:	0252      	lsls	r2, r2, #9
 8000a14:	0a55      	lsrs	r5, r2, #9
 8000a16:	b2d8      	uxtb	r0, r3
 8000a18:	e7cf      	b.n	80009ba <__aeabi_i2f+0x32>
 8000a1a:	026d      	lsls	r5, r5, #9
 8000a1c:	0a6d      	lsrs	r5, r5, #9
 8000a1e:	308e      	adds	r0, #142	@ 0x8e
 8000a20:	e7cb      	b.n	80009ba <__aeabi_i2f+0x32>
 8000a22:	46c0      	nop			@ (mov r8, r8)
 8000a24:	fbffffff 	.word	0xfbffffff

08000a28 <__aeabi_dadd>:
 8000a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a2a:	464f      	mov	r7, r9
 8000a2c:	4646      	mov	r6, r8
 8000a2e:	46d6      	mov	lr, sl
 8000a30:	b5c0      	push	{r6, r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	9000      	str	r0, [sp, #0]
 8000a36:	9101      	str	r1, [sp, #4]
 8000a38:	030e      	lsls	r6, r1, #12
 8000a3a:	004c      	lsls	r4, r1, #1
 8000a3c:	0fcd      	lsrs	r5, r1, #31
 8000a3e:	0a71      	lsrs	r1, r6, #9
 8000a40:	9e00      	ldr	r6, [sp, #0]
 8000a42:	005f      	lsls	r7, r3, #1
 8000a44:	0f76      	lsrs	r6, r6, #29
 8000a46:	430e      	orrs	r6, r1
 8000a48:	9900      	ldr	r1, [sp, #0]
 8000a4a:	9200      	str	r2, [sp, #0]
 8000a4c:	9301      	str	r3, [sp, #4]
 8000a4e:	00c9      	lsls	r1, r1, #3
 8000a50:	4689      	mov	r9, r1
 8000a52:	0319      	lsls	r1, r3, #12
 8000a54:	0d7b      	lsrs	r3, r7, #21
 8000a56:	4698      	mov	r8, r3
 8000a58:	9b01      	ldr	r3, [sp, #4]
 8000a5a:	0a49      	lsrs	r1, r1, #9
 8000a5c:	0fdb      	lsrs	r3, r3, #31
 8000a5e:	469c      	mov	ip, r3
 8000a60:	9b00      	ldr	r3, [sp, #0]
 8000a62:	9a00      	ldr	r2, [sp, #0]
 8000a64:	0f5b      	lsrs	r3, r3, #29
 8000a66:	430b      	orrs	r3, r1
 8000a68:	4641      	mov	r1, r8
 8000a6a:	0d64      	lsrs	r4, r4, #21
 8000a6c:	00d2      	lsls	r2, r2, #3
 8000a6e:	1a61      	subs	r1, r4, r1
 8000a70:	4565      	cmp	r5, ip
 8000a72:	d100      	bne.n	8000a76 <__aeabi_dadd+0x4e>
 8000a74:	e0a6      	b.n	8000bc4 <__aeabi_dadd+0x19c>
 8000a76:	2900      	cmp	r1, #0
 8000a78:	dd72      	ble.n	8000b60 <__aeabi_dadd+0x138>
 8000a7a:	4647      	mov	r7, r8
 8000a7c:	2f00      	cmp	r7, #0
 8000a7e:	d100      	bne.n	8000a82 <__aeabi_dadd+0x5a>
 8000a80:	e0dd      	b.n	8000c3e <__aeabi_dadd+0x216>
 8000a82:	4fcc      	ldr	r7, [pc, #816]	@ (8000db4 <__aeabi_dadd+0x38c>)
 8000a84:	42bc      	cmp	r4, r7
 8000a86:	d100      	bne.n	8000a8a <__aeabi_dadd+0x62>
 8000a88:	e19a      	b.n	8000dc0 <__aeabi_dadd+0x398>
 8000a8a:	2701      	movs	r7, #1
 8000a8c:	2938      	cmp	r1, #56	@ 0x38
 8000a8e:	dc17      	bgt.n	8000ac0 <__aeabi_dadd+0x98>
 8000a90:	2780      	movs	r7, #128	@ 0x80
 8000a92:	043f      	lsls	r7, r7, #16
 8000a94:	433b      	orrs	r3, r7
 8000a96:	291f      	cmp	r1, #31
 8000a98:	dd00      	ble.n	8000a9c <__aeabi_dadd+0x74>
 8000a9a:	e1dd      	b.n	8000e58 <__aeabi_dadd+0x430>
 8000a9c:	2720      	movs	r7, #32
 8000a9e:	1a78      	subs	r0, r7, r1
 8000aa0:	001f      	movs	r7, r3
 8000aa2:	4087      	lsls	r7, r0
 8000aa4:	46ba      	mov	sl, r7
 8000aa6:	0017      	movs	r7, r2
 8000aa8:	40cf      	lsrs	r7, r1
 8000aaa:	4684      	mov	ip, r0
 8000aac:	0038      	movs	r0, r7
 8000aae:	4657      	mov	r7, sl
 8000ab0:	4307      	orrs	r7, r0
 8000ab2:	4660      	mov	r0, ip
 8000ab4:	4082      	lsls	r2, r0
 8000ab6:	40cb      	lsrs	r3, r1
 8000ab8:	1e50      	subs	r0, r2, #1
 8000aba:	4182      	sbcs	r2, r0
 8000abc:	1af6      	subs	r6, r6, r3
 8000abe:	4317      	orrs	r7, r2
 8000ac0:	464b      	mov	r3, r9
 8000ac2:	1bdf      	subs	r7, r3, r7
 8000ac4:	45b9      	cmp	r9, r7
 8000ac6:	4180      	sbcs	r0, r0
 8000ac8:	4240      	negs	r0, r0
 8000aca:	1a36      	subs	r6, r6, r0
 8000acc:	0233      	lsls	r3, r6, #8
 8000ace:	d400      	bmi.n	8000ad2 <__aeabi_dadd+0xaa>
 8000ad0:	e0ff      	b.n	8000cd2 <__aeabi_dadd+0x2aa>
 8000ad2:	0276      	lsls	r6, r6, #9
 8000ad4:	0a76      	lsrs	r6, r6, #9
 8000ad6:	2e00      	cmp	r6, #0
 8000ad8:	d100      	bne.n	8000adc <__aeabi_dadd+0xb4>
 8000ada:	e13c      	b.n	8000d56 <__aeabi_dadd+0x32e>
 8000adc:	0030      	movs	r0, r6
 8000ade:	f001 ff8b 	bl	80029f8 <__clzsi2>
 8000ae2:	0003      	movs	r3, r0
 8000ae4:	3b08      	subs	r3, #8
 8000ae6:	2120      	movs	r1, #32
 8000ae8:	0038      	movs	r0, r7
 8000aea:	1aca      	subs	r2, r1, r3
 8000aec:	40d0      	lsrs	r0, r2
 8000aee:	409e      	lsls	r6, r3
 8000af0:	0002      	movs	r2, r0
 8000af2:	409f      	lsls	r7, r3
 8000af4:	4332      	orrs	r2, r6
 8000af6:	429c      	cmp	r4, r3
 8000af8:	dd00      	ble.n	8000afc <__aeabi_dadd+0xd4>
 8000afa:	e1a6      	b.n	8000e4a <__aeabi_dadd+0x422>
 8000afc:	1b18      	subs	r0, r3, r4
 8000afe:	3001      	adds	r0, #1
 8000b00:	1a09      	subs	r1, r1, r0
 8000b02:	003e      	movs	r6, r7
 8000b04:	408f      	lsls	r7, r1
 8000b06:	40c6      	lsrs	r6, r0
 8000b08:	1e7b      	subs	r3, r7, #1
 8000b0a:	419f      	sbcs	r7, r3
 8000b0c:	0013      	movs	r3, r2
 8000b0e:	408b      	lsls	r3, r1
 8000b10:	4337      	orrs	r7, r6
 8000b12:	431f      	orrs	r7, r3
 8000b14:	40c2      	lsrs	r2, r0
 8000b16:	003b      	movs	r3, r7
 8000b18:	0016      	movs	r6, r2
 8000b1a:	2400      	movs	r4, #0
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	d100      	bne.n	8000b22 <__aeabi_dadd+0xfa>
 8000b20:	e1df      	b.n	8000ee2 <__aeabi_dadd+0x4ba>
 8000b22:	077b      	lsls	r3, r7, #29
 8000b24:	d100      	bne.n	8000b28 <__aeabi_dadd+0x100>
 8000b26:	e332      	b.n	800118e <__aeabi_dadd+0x766>
 8000b28:	230f      	movs	r3, #15
 8000b2a:	003a      	movs	r2, r7
 8000b2c:	403b      	ands	r3, r7
 8000b2e:	2b04      	cmp	r3, #4
 8000b30:	d004      	beq.n	8000b3c <__aeabi_dadd+0x114>
 8000b32:	1d3a      	adds	r2, r7, #4
 8000b34:	42ba      	cmp	r2, r7
 8000b36:	41bf      	sbcs	r7, r7
 8000b38:	427f      	negs	r7, r7
 8000b3a:	19f6      	adds	r6, r6, r7
 8000b3c:	0233      	lsls	r3, r6, #8
 8000b3e:	d400      	bmi.n	8000b42 <__aeabi_dadd+0x11a>
 8000b40:	e323      	b.n	800118a <__aeabi_dadd+0x762>
 8000b42:	4b9c      	ldr	r3, [pc, #624]	@ (8000db4 <__aeabi_dadd+0x38c>)
 8000b44:	3401      	adds	r4, #1
 8000b46:	429c      	cmp	r4, r3
 8000b48:	d100      	bne.n	8000b4c <__aeabi_dadd+0x124>
 8000b4a:	e0b4      	b.n	8000cb6 <__aeabi_dadd+0x28e>
 8000b4c:	4b9a      	ldr	r3, [pc, #616]	@ (8000db8 <__aeabi_dadd+0x390>)
 8000b4e:	0564      	lsls	r4, r4, #21
 8000b50:	401e      	ands	r6, r3
 8000b52:	0d64      	lsrs	r4, r4, #21
 8000b54:	0777      	lsls	r7, r6, #29
 8000b56:	08d2      	lsrs	r2, r2, #3
 8000b58:	0276      	lsls	r6, r6, #9
 8000b5a:	4317      	orrs	r7, r2
 8000b5c:	0b36      	lsrs	r6, r6, #12
 8000b5e:	e0ac      	b.n	8000cba <__aeabi_dadd+0x292>
 8000b60:	2900      	cmp	r1, #0
 8000b62:	d100      	bne.n	8000b66 <__aeabi_dadd+0x13e>
 8000b64:	e07e      	b.n	8000c64 <__aeabi_dadd+0x23c>
 8000b66:	4641      	mov	r1, r8
 8000b68:	1b09      	subs	r1, r1, r4
 8000b6a:	2c00      	cmp	r4, #0
 8000b6c:	d000      	beq.n	8000b70 <__aeabi_dadd+0x148>
 8000b6e:	e160      	b.n	8000e32 <__aeabi_dadd+0x40a>
 8000b70:	0034      	movs	r4, r6
 8000b72:	4648      	mov	r0, r9
 8000b74:	4304      	orrs	r4, r0
 8000b76:	d100      	bne.n	8000b7a <__aeabi_dadd+0x152>
 8000b78:	e1c9      	b.n	8000f0e <__aeabi_dadd+0x4e6>
 8000b7a:	1e4c      	subs	r4, r1, #1
 8000b7c:	2901      	cmp	r1, #1
 8000b7e:	d100      	bne.n	8000b82 <__aeabi_dadd+0x15a>
 8000b80:	e22e      	b.n	8000fe0 <__aeabi_dadd+0x5b8>
 8000b82:	4d8c      	ldr	r5, [pc, #560]	@ (8000db4 <__aeabi_dadd+0x38c>)
 8000b84:	42a9      	cmp	r1, r5
 8000b86:	d100      	bne.n	8000b8a <__aeabi_dadd+0x162>
 8000b88:	e224      	b.n	8000fd4 <__aeabi_dadd+0x5ac>
 8000b8a:	2701      	movs	r7, #1
 8000b8c:	2c38      	cmp	r4, #56	@ 0x38
 8000b8e:	dc11      	bgt.n	8000bb4 <__aeabi_dadd+0x18c>
 8000b90:	0021      	movs	r1, r4
 8000b92:	291f      	cmp	r1, #31
 8000b94:	dd00      	ble.n	8000b98 <__aeabi_dadd+0x170>
 8000b96:	e20b      	b.n	8000fb0 <__aeabi_dadd+0x588>
 8000b98:	2420      	movs	r4, #32
 8000b9a:	0037      	movs	r7, r6
 8000b9c:	4648      	mov	r0, r9
 8000b9e:	1a64      	subs	r4, r4, r1
 8000ba0:	40a7      	lsls	r7, r4
 8000ba2:	40c8      	lsrs	r0, r1
 8000ba4:	4307      	orrs	r7, r0
 8000ba6:	4648      	mov	r0, r9
 8000ba8:	40a0      	lsls	r0, r4
 8000baa:	40ce      	lsrs	r6, r1
 8000bac:	1e44      	subs	r4, r0, #1
 8000bae:	41a0      	sbcs	r0, r4
 8000bb0:	1b9b      	subs	r3, r3, r6
 8000bb2:	4307      	orrs	r7, r0
 8000bb4:	1bd7      	subs	r7, r2, r7
 8000bb6:	42ba      	cmp	r2, r7
 8000bb8:	4192      	sbcs	r2, r2
 8000bba:	4252      	negs	r2, r2
 8000bbc:	4665      	mov	r5, ip
 8000bbe:	4644      	mov	r4, r8
 8000bc0:	1a9e      	subs	r6, r3, r2
 8000bc2:	e783      	b.n	8000acc <__aeabi_dadd+0xa4>
 8000bc4:	2900      	cmp	r1, #0
 8000bc6:	dc00      	bgt.n	8000bca <__aeabi_dadd+0x1a2>
 8000bc8:	e09c      	b.n	8000d04 <__aeabi_dadd+0x2dc>
 8000bca:	4647      	mov	r7, r8
 8000bcc:	2f00      	cmp	r7, #0
 8000bce:	d167      	bne.n	8000ca0 <__aeabi_dadd+0x278>
 8000bd0:	001f      	movs	r7, r3
 8000bd2:	4317      	orrs	r7, r2
 8000bd4:	d100      	bne.n	8000bd8 <__aeabi_dadd+0x1b0>
 8000bd6:	e0e4      	b.n	8000da2 <__aeabi_dadd+0x37a>
 8000bd8:	1e48      	subs	r0, r1, #1
 8000bda:	2901      	cmp	r1, #1
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_dadd+0x1b8>
 8000bde:	e19b      	b.n	8000f18 <__aeabi_dadd+0x4f0>
 8000be0:	4f74      	ldr	r7, [pc, #464]	@ (8000db4 <__aeabi_dadd+0x38c>)
 8000be2:	42b9      	cmp	r1, r7
 8000be4:	d100      	bne.n	8000be8 <__aeabi_dadd+0x1c0>
 8000be6:	e0eb      	b.n	8000dc0 <__aeabi_dadd+0x398>
 8000be8:	2701      	movs	r7, #1
 8000bea:	0001      	movs	r1, r0
 8000bec:	2838      	cmp	r0, #56	@ 0x38
 8000bee:	dc11      	bgt.n	8000c14 <__aeabi_dadd+0x1ec>
 8000bf0:	291f      	cmp	r1, #31
 8000bf2:	dd00      	ble.n	8000bf6 <__aeabi_dadd+0x1ce>
 8000bf4:	e1c7      	b.n	8000f86 <__aeabi_dadd+0x55e>
 8000bf6:	2720      	movs	r7, #32
 8000bf8:	1a78      	subs	r0, r7, r1
 8000bfa:	001f      	movs	r7, r3
 8000bfc:	4684      	mov	ip, r0
 8000bfe:	4087      	lsls	r7, r0
 8000c00:	0010      	movs	r0, r2
 8000c02:	40c8      	lsrs	r0, r1
 8000c04:	4307      	orrs	r7, r0
 8000c06:	4660      	mov	r0, ip
 8000c08:	4082      	lsls	r2, r0
 8000c0a:	40cb      	lsrs	r3, r1
 8000c0c:	1e50      	subs	r0, r2, #1
 8000c0e:	4182      	sbcs	r2, r0
 8000c10:	18f6      	adds	r6, r6, r3
 8000c12:	4317      	orrs	r7, r2
 8000c14:	444f      	add	r7, r9
 8000c16:	454f      	cmp	r7, r9
 8000c18:	4180      	sbcs	r0, r0
 8000c1a:	4240      	negs	r0, r0
 8000c1c:	1836      	adds	r6, r6, r0
 8000c1e:	0233      	lsls	r3, r6, #8
 8000c20:	d557      	bpl.n	8000cd2 <__aeabi_dadd+0x2aa>
 8000c22:	4b64      	ldr	r3, [pc, #400]	@ (8000db4 <__aeabi_dadd+0x38c>)
 8000c24:	3401      	adds	r4, #1
 8000c26:	429c      	cmp	r4, r3
 8000c28:	d045      	beq.n	8000cb6 <__aeabi_dadd+0x28e>
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	4b62      	ldr	r3, [pc, #392]	@ (8000db8 <__aeabi_dadd+0x390>)
 8000c2e:	087a      	lsrs	r2, r7, #1
 8000c30:	401e      	ands	r6, r3
 8000c32:	4039      	ands	r1, r7
 8000c34:	430a      	orrs	r2, r1
 8000c36:	07f7      	lsls	r7, r6, #31
 8000c38:	4317      	orrs	r7, r2
 8000c3a:	0876      	lsrs	r6, r6, #1
 8000c3c:	e771      	b.n	8000b22 <__aeabi_dadd+0xfa>
 8000c3e:	001f      	movs	r7, r3
 8000c40:	4317      	orrs	r7, r2
 8000c42:	d100      	bne.n	8000c46 <__aeabi_dadd+0x21e>
 8000c44:	e0ad      	b.n	8000da2 <__aeabi_dadd+0x37a>
 8000c46:	1e4f      	subs	r7, r1, #1
 8000c48:	46bc      	mov	ip, r7
 8000c4a:	2901      	cmp	r1, #1
 8000c4c:	d100      	bne.n	8000c50 <__aeabi_dadd+0x228>
 8000c4e:	e182      	b.n	8000f56 <__aeabi_dadd+0x52e>
 8000c50:	4f58      	ldr	r7, [pc, #352]	@ (8000db4 <__aeabi_dadd+0x38c>)
 8000c52:	42b9      	cmp	r1, r7
 8000c54:	d100      	bne.n	8000c58 <__aeabi_dadd+0x230>
 8000c56:	e190      	b.n	8000f7a <__aeabi_dadd+0x552>
 8000c58:	4661      	mov	r1, ip
 8000c5a:	2701      	movs	r7, #1
 8000c5c:	2938      	cmp	r1, #56	@ 0x38
 8000c5e:	dd00      	ble.n	8000c62 <__aeabi_dadd+0x23a>
 8000c60:	e72e      	b.n	8000ac0 <__aeabi_dadd+0x98>
 8000c62:	e718      	b.n	8000a96 <__aeabi_dadd+0x6e>
 8000c64:	4f55      	ldr	r7, [pc, #340]	@ (8000dbc <__aeabi_dadd+0x394>)
 8000c66:	1c61      	adds	r1, r4, #1
 8000c68:	4239      	tst	r1, r7
 8000c6a:	d000      	beq.n	8000c6e <__aeabi_dadd+0x246>
 8000c6c:	e0d0      	b.n	8000e10 <__aeabi_dadd+0x3e8>
 8000c6e:	0031      	movs	r1, r6
 8000c70:	4648      	mov	r0, r9
 8000c72:	001f      	movs	r7, r3
 8000c74:	4301      	orrs	r1, r0
 8000c76:	4317      	orrs	r7, r2
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d000      	beq.n	8000c7e <__aeabi_dadd+0x256>
 8000c7c:	e13d      	b.n	8000efa <__aeabi_dadd+0x4d2>
 8000c7e:	2900      	cmp	r1, #0
 8000c80:	d100      	bne.n	8000c84 <__aeabi_dadd+0x25c>
 8000c82:	e1bc      	b.n	8000ffe <__aeabi_dadd+0x5d6>
 8000c84:	2f00      	cmp	r7, #0
 8000c86:	d000      	beq.n	8000c8a <__aeabi_dadd+0x262>
 8000c88:	e1bf      	b.n	800100a <__aeabi_dadd+0x5e2>
 8000c8a:	464b      	mov	r3, r9
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	08d8      	lsrs	r0, r3, #3
 8000c90:	0777      	lsls	r7, r6, #29
 8000c92:	4307      	orrs	r7, r0
 8000c94:	08f0      	lsrs	r0, r6, #3
 8000c96:	0306      	lsls	r6, r0, #12
 8000c98:	054c      	lsls	r4, r1, #21
 8000c9a:	0b36      	lsrs	r6, r6, #12
 8000c9c:	0d64      	lsrs	r4, r4, #21
 8000c9e:	e00c      	b.n	8000cba <__aeabi_dadd+0x292>
 8000ca0:	4f44      	ldr	r7, [pc, #272]	@ (8000db4 <__aeabi_dadd+0x38c>)
 8000ca2:	42bc      	cmp	r4, r7
 8000ca4:	d100      	bne.n	8000ca8 <__aeabi_dadd+0x280>
 8000ca6:	e08b      	b.n	8000dc0 <__aeabi_dadd+0x398>
 8000ca8:	2701      	movs	r7, #1
 8000caa:	2938      	cmp	r1, #56	@ 0x38
 8000cac:	dcb2      	bgt.n	8000c14 <__aeabi_dadd+0x1ec>
 8000cae:	2780      	movs	r7, #128	@ 0x80
 8000cb0:	043f      	lsls	r7, r7, #16
 8000cb2:	433b      	orrs	r3, r7
 8000cb4:	e79c      	b.n	8000bf0 <__aeabi_dadd+0x1c8>
 8000cb6:	2600      	movs	r6, #0
 8000cb8:	2700      	movs	r7, #0
 8000cba:	0524      	lsls	r4, r4, #20
 8000cbc:	4334      	orrs	r4, r6
 8000cbe:	07ed      	lsls	r5, r5, #31
 8000cc0:	432c      	orrs	r4, r5
 8000cc2:	0038      	movs	r0, r7
 8000cc4:	0021      	movs	r1, r4
 8000cc6:	b002      	add	sp, #8
 8000cc8:	bce0      	pop	{r5, r6, r7}
 8000cca:	46ba      	mov	sl, r7
 8000ccc:	46b1      	mov	r9, r6
 8000cce:	46a8      	mov	r8, r5
 8000cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cd2:	077b      	lsls	r3, r7, #29
 8000cd4:	d004      	beq.n	8000ce0 <__aeabi_dadd+0x2b8>
 8000cd6:	230f      	movs	r3, #15
 8000cd8:	403b      	ands	r3, r7
 8000cda:	2b04      	cmp	r3, #4
 8000cdc:	d000      	beq.n	8000ce0 <__aeabi_dadd+0x2b8>
 8000cde:	e728      	b.n	8000b32 <__aeabi_dadd+0x10a>
 8000ce0:	08f8      	lsrs	r0, r7, #3
 8000ce2:	4b34      	ldr	r3, [pc, #208]	@ (8000db4 <__aeabi_dadd+0x38c>)
 8000ce4:	0777      	lsls	r7, r6, #29
 8000ce6:	4307      	orrs	r7, r0
 8000ce8:	08f0      	lsrs	r0, r6, #3
 8000cea:	429c      	cmp	r4, r3
 8000cec:	d000      	beq.n	8000cf0 <__aeabi_dadd+0x2c8>
 8000cee:	e24a      	b.n	8001186 <__aeabi_dadd+0x75e>
 8000cf0:	003b      	movs	r3, r7
 8000cf2:	4303      	orrs	r3, r0
 8000cf4:	d059      	beq.n	8000daa <__aeabi_dadd+0x382>
 8000cf6:	2680      	movs	r6, #128	@ 0x80
 8000cf8:	0336      	lsls	r6, r6, #12
 8000cfa:	4306      	orrs	r6, r0
 8000cfc:	0336      	lsls	r6, r6, #12
 8000cfe:	4c2d      	ldr	r4, [pc, #180]	@ (8000db4 <__aeabi_dadd+0x38c>)
 8000d00:	0b36      	lsrs	r6, r6, #12
 8000d02:	e7da      	b.n	8000cba <__aeabi_dadd+0x292>
 8000d04:	2900      	cmp	r1, #0
 8000d06:	d061      	beq.n	8000dcc <__aeabi_dadd+0x3a4>
 8000d08:	4641      	mov	r1, r8
 8000d0a:	1b09      	subs	r1, r1, r4
 8000d0c:	2c00      	cmp	r4, #0
 8000d0e:	d100      	bne.n	8000d12 <__aeabi_dadd+0x2ea>
 8000d10:	e0b9      	b.n	8000e86 <__aeabi_dadd+0x45e>
 8000d12:	4c28      	ldr	r4, [pc, #160]	@ (8000db4 <__aeabi_dadd+0x38c>)
 8000d14:	45a0      	cmp	r8, r4
 8000d16:	d100      	bne.n	8000d1a <__aeabi_dadd+0x2f2>
 8000d18:	e1a5      	b.n	8001066 <__aeabi_dadd+0x63e>
 8000d1a:	2701      	movs	r7, #1
 8000d1c:	2938      	cmp	r1, #56	@ 0x38
 8000d1e:	dc13      	bgt.n	8000d48 <__aeabi_dadd+0x320>
 8000d20:	2480      	movs	r4, #128	@ 0x80
 8000d22:	0424      	lsls	r4, r4, #16
 8000d24:	4326      	orrs	r6, r4
 8000d26:	291f      	cmp	r1, #31
 8000d28:	dd00      	ble.n	8000d2c <__aeabi_dadd+0x304>
 8000d2a:	e1c8      	b.n	80010be <__aeabi_dadd+0x696>
 8000d2c:	2420      	movs	r4, #32
 8000d2e:	0037      	movs	r7, r6
 8000d30:	4648      	mov	r0, r9
 8000d32:	1a64      	subs	r4, r4, r1
 8000d34:	40a7      	lsls	r7, r4
 8000d36:	40c8      	lsrs	r0, r1
 8000d38:	4307      	orrs	r7, r0
 8000d3a:	4648      	mov	r0, r9
 8000d3c:	40a0      	lsls	r0, r4
 8000d3e:	40ce      	lsrs	r6, r1
 8000d40:	1e44      	subs	r4, r0, #1
 8000d42:	41a0      	sbcs	r0, r4
 8000d44:	199b      	adds	r3, r3, r6
 8000d46:	4307      	orrs	r7, r0
 8000d48:	18bf      	adds	r7, r7, r2
 8000d4a:	4297      	cmp	r7, r2
 8000d4c:	4192      	sbcs	r2, r2
 8000d4e:	4252      	negs	r2, r2
 8000d50:	4644      	mov	r4, r8
 8000d52:	18d6      	adds	r6, r2, r3
 8000d54:	e763      	b.n	8000c1e <__aeabi_dadd+0x1f6>
 8000d56:	0038      	movs	r0, r7
 8000d58:	f001 fe4e 	bl	80029f8 <__clzsi2>
 8000d5c:	0003      	movs	r3, r0
 8000d5e:	3318      	adds	r3, #24
 8000d60:	2b1f      	cmp	r3, #31
 8000d62:	dc00      	bgt.n	8000d66 <__aeabi_dadd+0x33e>
 8000d64:	e6bf      	b.n	8000ae6 <__aeabi_dadd+0xbe>
 8000d66:	003a      	movs	r2, r7
 8000d68:	3808      	subs	r0, #8
 8000d6a:	4082      	lsls	r2, r0
 8000d6c:	429c      	cmp	r4, r3
 8000d6e:	dd00      	ble.n	8000d72 <__aeabi_dadd+0x34a>
 8000d70:	e083      	b.n	8000e7a <__aeabi_dadd+0x452>
 8000d72:	1b1b      	subs	r3, r3, r4
 8000d74:	1c58      	adds	r0, r3, #1
 8000d76:	281f      	cmp	r0, #31
 8000d78:	dc00      	bgt.n	8000d7c <__aeabi_dadd+0x354>
 8000d7a:	e1b4      	b.n	80010e6 <__aeabi_dadd+0x6be>
 8000d7c:	0017      	movs	r7, r2
 8000d7e:	3b1f      	subs	r3, #31
 8000d80:	40df      	lsrs	r7, r3
 8000d82:	2820      	cmp	r0, #32
 8000d84:	d005      	beq.n	8000d92 <__aeabi_dadd+0x36a>
 8000d86:	2340      	movs	r3, #64	@ 0x40
 8000d88:	1a1b      	subs	r3, r3, r0
 8000d8a:	409a      	lsls	r2, r3
 8000d8c:	1e53      	subs	r3, r2, #1
 8000d8e:	419a      	sbcs	r2, r3
 8000d90:	4317      	orrs	r7, r2
 8000d92:	2400      	movs	r4, #0
 8000d94:	2f00      	cmp	r7, #0
 8000d96:	d00a      	beq.n	8000dae <__aeabi_dadd+0x386>
 8000d98:	077b      	lsls	r3, r7, #29
 8000d9a:	d000      	beq.n	8000d9e <__aeabi_dadd+0x376>
 8000d9c:	e6c4      	b.n	8000b28 <__aeabi_dadd+0x100>
 8000d9e:	0026      	movs	r6, r4
 8000da0:	e79e      	b.n	8000ce0 <__aeabi_dadd+0x2b8>
 8000da2:	464b      	mov	r3, r9
 8000da4:	000c      	movs	r4, r1
 8000da6:	08d8      	lsrs	r0, r3, #3
 8000da8:	e79b      	b.n	8000ce2 <__aeabi_dadd+0x2ba>
 8000daa:	2700      	movs	r7, #0
 8000dac:	4c01      	ldr	r4, [pc, #4]	@ (8000db4 <__aeabi_dadd+0x38c>)
 8000dae:	2600      	movs	r6, #0
 8000db0:	e783      	b.n	8000cba <__aeabi_dadd+0x292>
 8000db2:	46c0      	nop			@ (mov r8, r8)
 8000db4:	000007ff 	.word	0x000007ff
 8000db8:	ff7fffff 	.word	0xff7fffff
 8000dbc:	000007fe 	.word	0x000007fe
 8000dc0:	464b      	mov	r3, r9
 8000dc2:	0777      	lsls	r7, r6, #29
 8000dc4:	08d8      	lsrs	r0, r3, #3
 8000dc6:	4307      	orrs	r7, r0
 8000dc8:	08f0      	lsrs	r0, r6, #3
 8000dca:	e791      	b.n	8000cf0 <__aeabi_dadd+0x2c8>
 8000dcc:	4fcd      	ldr	r7, [pc, #820]	@ (8001104 <__aeabi_dadd+0x6dc>)
 8000dce:	1c61      	adds	r1, r4, #1
 8000dd0:	4239      	tst	r1, r7
 8000dd2:	d16b      	bne.n	8000eac <__aeabi_dadd+0x484>
 8000dd4:	0031      	movs	r1, r6
 8000dd6:	4648      	mov	r0, r9
 8000dd8:	4301      	orrs	r1, r0
 8000dda:	2c00      	cmp	r4, #0
 8000ddc:	d000      	beq.n	8000de0 <__aeabi_dadd+0x3b8>
 8000dde:	e14b      	b.n	8001078 <__aeabi_dadd+0x650>
 8000de0:	001f      	movs	r7, r3
 8000de2:	4317      	orrs	r7, r2
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d100      	bne.n	8000dea <__aeabi_dadd+0x3c2>
 8000de8:	e181      	b.n	80010ee <__aeabi_dadd+0x6c6>
 8000dea:	2f00      	cmp	r7, #0
 8000dec:	d100      	bne.n	8000df0 <__aeabi_dadd+0x3c8>
 8000dee:	e74c      	b.n	8000c8a <__aeabi_dadd+0x262>
 8000df0:	444a      	add	r2, r9
 8000df2:	454a      	cmp	r2, r9
 8000df4:	4180      	sbcs	r0, r0
 8000df6:	18f6      	adds	r6, r6, r3
 8000df8:	4240      	negs	r0, r0
 8000dfa:	1836      	adds	r6, r6, r0
 8000dfc:	0233      	lsls	r3, r6, #8
 8000dfe:	d500      	bpl.n	8000e02 <__aeabi_dadd+0x3da>
 8000e00:	e1b0      	b.n	8001164 <__aeabi_dadd+0x73c>
 8000e02:	0017      	movs	r7, r2
 8000e04:	4691      	mov	r9, r2
 8000e06:	4337      	orrs	r7, r6
 8000e08:	d000      	beq.n	8000e0c <__aeabi_dadd+0x3e4>
 8000e0a:	e73e      	b.n	8000c8a <__aeabi_dadd+0x262>
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	e754      	b.n	8000cba <__aeabi_dadd+0x292>
 8000e10:	4649      	mov	r1, r9
 8000e12:	1a89      	subs	r1, r1, r2
 8000e14:	4688      	mov	r8, r1
 8000e16:	45c1      	cmp	r9, r8
 8000e18:	41bf      	sbcs	r7, r7
 8000e1a:	1af1      	subs	r1, r6, r3
 8000e1c:	427f      	negs	r7, r7
 8000e1e:	1bc9      	subs	r1, r1, r7
 8000e20:	020f      	lsls	r7, r1, #8
 8000e22:	d461      	bmi.n	8000ee8 <__aeabi_dadd+0x4c0>
 8000e24:	4647      	mov	r7, r8
 8000e26:	430f      	orrs	r7, r1
 8000e28:	d100      	bne.n	8000e2c <__aeabi_dadd+0x404>
 8000e2a:	e0bd      	b.n	8000fa8 <__aeabi_dadd+0x580>
 8000e2c:	000e      	movs	r6, r1
 8000e2e:	4647      	mov	r7, r8
 8000e30:	e651      	b.n	8000ad6 <__aeabi_dadd+0xae>
 8000e32:	4cb5      	ldr	r4, [pc, #724]	@ (8001108 <__aeabi_dadd+0x6e0>)
 8000e34:	45a0      	cmp	r8, r4
 8000e36:	d100      	bne.n	8000e3a <__aeabi_dadd+0x412>
 8000e38:	e100      	b.n	800103c <__aeabi_dadd+0x614>
 8000e3a:	2701      	movs	r7, #1
 8000e3c:	2938      	cmp	r1, #56	@ 0x38
 8000e3e:	dd00      	ble.n	8000e42 <__aeabi_dadd+0x41a>
 8000e40:	e6b8      	b.n	8000bb4 <__aeabi_dadd+0x18c>
 8000e42:	2480      	movs	r4, #128	@ 0x80
 8000e44:	0424      	lsls	r4, r4, #16
 8000e46:	4326      	orrs	r6, r4
 8000e48:	e6a3      	b.n	8000b92 <__aeabi_dadd+0x16a>
 8000e4a:	4eb0      	ldr	r6, [pc, #704]	@ (800110c <__aeabi_dadd+0x6e4>)
 8000e4c:	1ae4      	subs	r4, r4, r3
 8000e4e:	4016      	ands	r6, r2
 8000e50:	077b      	lsls	r3, r7, #29
 8000e52:	d000      	beq.n	8000e56 <__aeabi_dadd+0x42e>
 8000e54:	e73f      	b.n	8000cd6 <__aeabi_dadd+0x2ae>
 8000e56:	e743      	b.n	8000ce0 <__aeabi_dadd+0x2b8>
 8000e58:	000f      	movs	r7, r1
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	3f20      	subs	r7, #32
 8000e5e:	40f8      	lsrs	r0, r7
 8000e60:	4684      	mov	ip, r0
 8000e62:	2920      	cmp	r1, #32
 8000e64:	d003      	beq.n	8000e6e <__aeabi_dadd+0x446>
 8000e66:	2740      	movs	r7, #64	@ 0x40
 8000e68:	1a79      	subs	r1, r7, r1
 8000e6a:	408b      	lsls	r3, r1
 8000e6c:	431a      	orrs	r2, r3
 8000e6e:	1e53      	subs	r3, r2, #1
 8000e70:	419a      	sbcs	r2, r3
 8000e72:	4663      	mov	r3, ip
 8000e74:	0017      	movs	r7, r2
 8000e76:	431f      	orrs	r7, r3
 8000e78:	e622      	b.n	8000ac0 <__aeabi_dadd+0x98>
 8000e7a:	48a4      	ldr	r0, [pc, #656]	@ (800110c <__aeabi_dadd+0x6e4>)
 8000e7c:	1ae1      	subs	r1, r4, r3
 8000e7e:	4010      	ands	r0, r2
 8000e80:	0747      	lsls	r7, r0, #29
 8000e82:	08c0      	lsrs	r0, r0, #3
 8000e84:	e707      	b.n	8000c96 <__aeabi_dadd+0x26e>
 8000e86:	0034      	movs	r4, r6
 8000e88:	4648      	mov	r0, r9
 8000e8a:	4304      	orrs	r4, r0
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_dadd+0x468>
 8000e8e:	e0fa      	b.n	8001086 <__aeabi_dadd+0x65e>
 8000e90:	1e4c      	subs	r4, r1, #1
 8000e92:	2901      	cmp	r1, #1
 8000e94:	d100      	bne.n	8000e98 <__aeabi_dadd+0x470>
 8000e96:	e0d7      	b.n	8001048 <__aeabi_dadd+0x620>
 8000e98:	4f9b      	ldr	r7, [pc, #620]	@ (8001108 <__aeabi_dadd+0x6e0>)
 8000e9a:	42b9      	cmp	r1, r7
 8000e9c:	d100      	bne.n	8000ea0 <__aeabi_dadd+0x478>
 8000e9e:	e0e2      	b.n	8001066 <__aeabi_dadd+0x63e>
 8000ea0:	2701      	movs	r7, #1
 8000ea2:	2c38      	cmp	r4, #56	@ 0x38
 8000ea4:	dd00      	ble.n	8000ea8 <__aeabi_dadd+0x480>
 8000ea6:	e74f      	b.n	8000d48 <__aeabi_dadd+0x320>
 8000ea8:	0021      	movs	r1, r4
 8000eaa:	e73c      	b.n	8000d26 <__aeabi_dadd+0x2fe>
 8000eac:	4c96      	ldr	r4, [pc, #600]	@ (8001108 <__aeabi_dadd+0x6e0>)
 8000eae:	42a1      	cmp	r1, r4
 8000eb0:	d100      	bne.n	8000eb4 <__aeabi_dadd+0x48c>
 8000eb2:	e0dd      	b.n	8001070 <__aeabi_dadd+0x648>
 8000eb4:	444a      	add	r2, r9
 8000eb6:	454a      	cmp	r2, r9
 8000eb8:	4180      	sbcs	r0, r0
 8000eba:	18f3      	adds	r3, r6, r3
 8000ebc:	4240      	negs	r0, r0
 8000ebe:	1818      	adds	r0, r3, r0
 8000ec0:	07c7      	lsls	r7, r0, #31
 8000ec2:	0852      	lsrs	r2, r2, #1
 8000ec4:	4317      	orrs	r7, r2
 8000ec6:	0846      	lsrs	r6, r0, #1
 8000ec8:	0752      	lsls	r2, r2, #29
 8000eca:	d005      	beq.n	8000ed8 <__aeabi_dadd+0x4b0>
 8000ecc:	220f      	movs	r2, #15
 8000ece:	000c      	movs	r4, r1
 8000ed0:	403a      	ands	r2, r7
 8000ed2:	2a04      	cmp	r2, #4
 8000ed4:	d000      	beq.n	8000ed8 <__aeabi_dadd+0x4b0>
 8000ed6:	e62c      	b.n	8000b32 <__aeabi_dadd+0x10a>
 8000ed8:	0776      	lsls	r6, r6, #29
 8000eda:	08ff      	lsrs	r7, r7, #3
 8000edc:	4337      	orrs	r7, r6
 8000ede:	0900      	lsrs	r0, r0, #4
 8000ee0:	e6d9      	b.n	8000c96 <__aeabi_dadd+0x26e>
 8000ee2:	2700      	movs	r7, #0
 8000ee4:	2600      	movs	r6, #0
 8000ee6:	e6e8      	b.n	8000cba <__aeabi_dadd+0x292>
 8000ee8:	4649      	mov	r1, r9
 8000eea:	1a57      	subs	r7, r2, r1
 8000eec:	42ba      	cmp	r2, r7
 8000eee:	4192      	sbcs	r2, r2
 8000ef0:	1b9e      	subs	r6, r3, r6
 8000ef2:	4252      	negs	r2, r2
 8000ef4:	4665      	mov	r5, ip
 8000ef6:	1ab6      	subs	r6, r6, r2
 8000ef8:	e5ed      	b.n	8000ad6 <__aeabi_dadd+0xae>
 8000efa:	2900      	cmp	r1, #0
 8000efc:	d000      	beq.n	8000f00 <__aeabi_dadd+0x4d8>
 8000efe:	e0c6      	b.n	800108e <__aeabi_dadd+0x666>
 8000f00:	2f00      	cmp	r7, #0
 8000f02:	d167      	bne.n	8000fd4 <__aeabi_dadd+0x5ac>
 8000f04:	2680      	movs	r6, #128	@ 0x80
 8000f06:	2500      	movs	r5, #0
 8000f08:	4c7f      	ldr	r4, [pc, #508]	@ (8001108 <__aeabi_dadd+0x6e0>)
 8000f0a:	0336      	lsls	r6, r6, #12
 8000f0c:	e6d5      	b.n	8000cba <__aeabi_dadd+0x292>
 8000f0e:	4665      	mov	r5, ip
 8000f10:	000c      	movs	r4, r1
 8000f12:	001e      	movs	r6, r3
 8000f14:	08d0      	lsrs	r0, r2, #3
 8000f16:	e6e4      	b.n	8000ce2 <__aeabi_dadd+0x2ba>
 8000f18:	444a      	add	r2, r9
 8000f1a:	454a      	cmp	r2, r9
 8000f1c:	4180      	sbcs	r0, r0
 8000f1e:	18f3      	adds	r3, r6, r3
 8000f20:	4240      	negs	r0, r0
 8000f22:	1818      	adds	r0, r3, r0
 8000f24:	0011      	movs	r1, r2
 8000f26:	0203      	lsls	r3, r0, #8
 8000f28:	d400      	bmi.n	8000f2c <__aeabi_dadd+0x504>
 8000f2a:	e096      	b.n	800105a <__aeabi_dadd+0x632>
 8000f2c:	4b77      	ldr	r3, [pc, #476]	@ (800110c <__aeabi_dadd+0x6e4>)
 8000f2e:	0849      	lsrs	r1, r1, #1
 8000f30:	4018      	ands	r0, r3
 8000f32:	07c3      	lsls	r3, r0, #31
 8000f34:	430b      	orrs	r3, r1
 8000f36:	0844      	lsrs	r4, r0, #1
 8000f38:	0749      	lsls	r1, r1, #29
 8000f3a:	d100      	bne.n	8000f3e <__aeabi_dadd+0x516>
 8000f3c:	e129      	b.n	8001192 <__aeabi_dadd+0x76a>
 8000f3e:	220f      	movs	r2, #15
 8000f40:	401a      	ands	r2, r3
 8000f42:	2a04      	cmp	r2, #4
 8000f44:	d100      	bne.n	8000f48 <__aeabi_dadd+0x520>
 8000f46:	e0ea      	b.n	800111e <__aeabi_dadd+0x6f6>
 8000f48:	1d1f      	adds	r7, r3, #4
 8000f4a:	429f      	cmp	r7, r3
 8000f4c:	41b6      	sbcs	r6, r6
 8000f4e:	4276      	negs	r6, r6
 8000f50:	1936      	adds	r6, r6, r4
 8000f52:	2402      	movs	r4, #2
 8000f54:	e6c4      	b.n	8000ce0 <__aeabi_dadd+0x2b8>
 8000f56:	4649      	mov	r1, r9
 8000f58:	1a8f      	subs	r7, r1, r2
 8000f5a:	45b9      	cmp	r9, r7
 8000f5c:	4180      	sbcs	r0, r0
 8000f5e:	1af6      	subs	r6, r6, r3
 8000f60:	4240      	negs	r0, r0
 8000f62:	1a36      	subs	r6, r6, r0
 8000f64:	0233      	lsls	r3, r6, #8
 8000f66:	d406      	bmi.n	8000f76 <__aeabi_dadd+0x54e>
 8000f68:	0773      	lsls	r3, r6, #29
 8000f6a:	08ff      	lsrs	r7, r7, #3
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	431f      	orrs	r7, r3
 8000f70:	08f0      	lsrs	r0, r6, #3
 8000f72:	e690      	b.n	8000c96 <__aeabi_dadd+0x26e>
 8000f74:	4665      	mov	r5, ip
 8000f76:	2401      	movs	r4, #1
 8000f78:	e5ab      	b.n	8000ad2 <__aeabi_dadd+0xaa>
 8000f7a:	464b      	mov	r3, r9
 8000f7c:	0777      	lsls	r7, r6, #29
 8000f7e:	08d8      	lsrs	r0, r3, #3
 8000f80:	4307      	orrs	r7, r0
 8000f82:	08f0      	lsrs	r0, r6, #3
 8000f84:	e6b4      	b.n	8000cf0 <__aeabi_dadd+0x2c8>
 8000f86:	000f      	movs	r7, r1
 8000f88:	0018      	movs	r0, r3
 8000f8a:	3f20      	subs	r7, #32
 8000f8c:	40f8      	lsrs	r0, r7
 8000f8e:	4684      	mov	ip, r0
 8000f90:	2920      	cmp	r1, #32
 8000f92:	d003      	beq.n	8000f9c <__aeabi_dadd+0x574>
 8000f94:	2740      	movs	r7, #64	@ 0x40
 8000f96:	1a79      	subs	r1, r7, r1
 8000f98:	408b      	lsls	r3, r1
 8000f9a:	431a      	orrs	r2, r3
 8000f9c:	1e53      	subs	r3, r2, #1
 8000f9e:	419a      	sbcs	r2, r3
 8000fa0:	4663      	mov	r3, ip
 8000fa2:	0017      	movs	r7, r2
 8000fa4:	431f      	orrs	r7, r3
 8000fa6:	e635      	b.n	8000c14 <__aeabi_dadd+0x1ec>
 8000fa8:	2500      	movs	r5, #0
 8000faa:	2400      	movs	r4, #0
 8000fac:	2600      	movs	r6, #0
 8000fae:	e684      	b.n	8000cba <__aeabi_dadd+0x292>
 8000fb0:	000c      	movs	r4, r1
 8000fb2:	0035      	movs	r5, r6
 8000fb4:	3c20      	subs	r4, #32
 8000fb6:	40e5      	lsrs	r5, r4
 8000fb8:	2920      	cmp	r1, #32
 8000fba:	d005      	beq.n	8000fc8 <__aeabi_dadd+0x5a0>
 8000fbc:	2440      	movs	r4, #64	@ 0x40
 8000fbe:	1a61      	subs	r1, r4, r1
 8000fc0:	408e      	lsls	r6, r1
 8000fc2:	4649      	mov	r1, r9
 8000fc4:	4331      	orrs	r1, r6
 8000fc6:	4689      	mov	r9, r1
 8000fc8:	4648      	mov	r0, r9
 8000fca:	1e41      	subs	r1, r0, #1
 8000fcc:	4188      	sbcs	r0, r1
 8000fce:	0007      	movs	r7, r0
 8000fd0:	432f      	orrs	r7, r5
 8000fd2:	e5ef      	b.n	8000bb4 <__aeabi_dadd+0x18c>
 8000fd4:	08d2      	lsrs	r2, r2, #3
 8000fd6:	075f      	lsls	r7, r3, #29
 8000fd8:	4665      	mov	r5, ip
 8000fda:	4317      	orrs	r7, r2
 8000fdc:	08d8      	lsrs	r0, r3, #3
 8000fde:	e687      	b.n	8000cf0 <__aeabi_dadd+0x2c8>
 8000fe0:	1a17      	subs	r7, r2, r0
 8000fe2:	42ba      	cmp	r2, r7
 8000fe4:	4192      	sbcs	r2, r2
 8000fe6:	1b9e      	subs	r6, r3, r6
 8000fe8:	4252      	negs	r2, r2
 8000fea:	1ab6      	subs	r6, r6, r2
 8000fec:	0233      	lsls	r3, r6, #8
 8000fee:	d4c1      	bmi.n	8000f74 <__aeabi_dadd+0x54c>
 8000ff0:	0773      	lsls	r3, r6, #29
 8000ff2:	08ff      	lsrs	r7, r7, #3
 8000ff4:	4665      	mov	r5, ip
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	431f      	orrs	r7, r3
 8000ffa:	08f0      	lsrs	r0, r6, #3
 8000ffc:	e64b      	b.n	8000c96 <__aeabi_dadd+0x26e>
 8000ffe:	2f00      	cmp	r7, #0
 8001000:	d07b      	beq.n	80010fa <__aeabi_dadd+0x6d2>
 8001002:	4665      	mov	r5, ip
 8001004:	001e      	movs	r6, r3
 8001006:	4691      	mov	r9, r2
 8001008:	e63f      	b.n	8000c8a <__aeabi_dadd+0x262>
 800100a:	1a81      	subs	r1, r0, r2
 800100c:	4688      	mov	r8, r1
 800100e:	45c1      	cmp	r9, r8
 8001010:	41a4      	sbcs	r4, r4
 8001012:	1af1      	subs	r1, r6, r3
 8001014:	4264      	negs	r4, r4
 8001016:	1b09      	subs	r1, r1, r4
 8001018:	2480      	movs	r4, #128	@ 0x80
 800101a:	0424      	lsls	r4, r4, #16
 800101c:	4221      	tst	r1, r4
 800101e:	d077      	beq.n	8001110 <__aeabi_dadd+0x6e8>
 8001020:	1a10      	subs	r0, r2, r0
 8001022:	4282      	cmp	r2, r0
 8001024:	4192      	sbcs	r2, r2
 8001026:	0007      	movs	r7, r0
 8001028:	1b9e      	subs	r6, r3, r6
 800102a:	4252      	negs	r2, r2
 800102c:	1ab6      	subs	r6, r6, r2
 800102e:	4337      	orrs	r7, r6
 8001030:	d000      	beq.n	8001034 <__aeabi_dadd+0x60c>
 8001032:	e0a0      	b.n	8001176 <__aeabi_dadd+0x74e>
 8001034:	4665      	mov	r5, ip
 8001036:	2400      	movs	r4, #0
 8001038:	2600      	movs	r6, #0
 800103a:	e63e      	b.n	8000cba <__aeabi_dadd+0x292>
 800103c:	075f      	lsls	r7, r3, #29
 800103e:	08d2      	lsrs	r2, r2, #3
 8001040:	4665      	mov	r5, ip
 8001042:	4317      	orrs	r7, r2
 8001044:	08d8      	lsrs	r0, r3, #3
 8001046:	e653      	b.n	8000cf0 <__aeabi_dadd+0x2c8>
 8001048:	1881      	adds	r1, r0, r2
 800104a:	4291      	cmp	r1, r2
 800104c:	4192      	sbcs	r2, r2
 800104e:	18f0      	adds	r0, r6, r3
 8001050:	4252      	negs	r2, r2
 8001052:	1880      	adds	r0, r0, r2
 8001054:	0203      	lsls	r3, r0, #8
 8001056:	d500      	bpl.n	800105a <__aeabi_dadd+0x632>
 8001058:	e768      	b.n	8000f2c <__aeabi_dadd+0x504>
 800105a:	0747      	lsls	r7, r0, #29
 800105c:	08c9      	lsrs	r1, r1, #3
 800105e:	430f      	orrs	r7, r1
 8001060:	08c0      	lsrs	r0, r0, #3
 8001062:	2101      	movs	r1, #1
 8001064:	e617      	b.n	8000c96 <__aeabi_dadd+0x26e>
 8001066:	08d2      	lsrs	r2, r2, #3
 8001068:	075f      	lsls	r7, r3, #29
 800106a:	4317      	orrs	r7, r2
 800106c:	08d8      	lsrs	r0, r3, #3
 800106e:	e63f      	b.n	8000cf0 <__aeabi_dadd+0x2c8>
 8001070:	000c      	movs	r4, r1
 8001072:	2600      	movs	r6, #0
 8001074:	2700      	movs	r7, #0
 8001076:	e620      	b.n	8000cba <__aeabi_dadd+0x292>
 8001078:	2900      	cmp	r1, #0
 800107a:	d156      	bne.n	800112a <__aeabi_dadd+0x702>
 800107c:	075f      	lsls	r7, r3, #29
 800107e:	08d2      	lsrs	r2, r2, #3
 8001080:	4317      	orrs	r7, r2
 8001082:	08d8      	lsrs	r0, r3, #3
 8001084:	e634      	b.n	8000cf0 <__aeabi_dadd+0x2c8>
 8001086:	000c      	movs	r4, r1
 8001088:	001e      	movs	r6, r3
 800108a:	08d0      	lsrs	r0, r2, #3
 800108c:	e629      	b.n	8000ce2 <__aeabi_dadd+0x2ba>
 800108e:	08c1      	lsrs	r1, r0, #3
 8001090:	0770      	lsls	r0, r6, #29
 8001092:	4301      	orrs	r1, r0
 8001094:	08f0      	lsrs	r0, r6, #3
 8001096:	2f00      	cmp	r7, #0
 8001098:	d062      	beq.n	8001160 <__aeabi_dadd+0x738>
 800109a:	2480      	movs	r4, #128	@ 0x80
 800109c:	0324      	lsls	r4, r4, #12
 800109e:	4220      	tst	r0, r4
 80010a0:	d007      	beq.n	80010b2 <__aeabi_dadd+0x68a>
 80010a2:	08de      	lsrs	r6, r3, #3
 80010a4:	4226      	tst	r6, r4
 80010a6:	d104      	bne.n	80010b2 <__aeabi_dadd+0x68a>
 80010a8:	4665      	mov	r5, ip
 80010aa:	0030      	movs	r0, r6
 80010ac:	08d1      	lsrs	r1, r2, #3
 80010ae:	075b      	lsls	r3, r3, #29
 80010b0:	4319      	orrs	r1, r3
 80010b2:	0f4f      	lsrs	r7, r1, #29
 80010b4:	00c9      	lsls	r1, r1, #3
 80010b6:	08c9      	lsrs	r1, r1, #3
 80010b8:	077f      	lsls	r7, r7, #29
 80010ba:	430f      	orrs	r7, r1
 80010bc:	e618      	b.n	8000cf0 <__aeabi_dadd+0x2c8>
 80010be:	000c      	movs	r4, r1
 80010c0:	0030      	movs	r0, r6
 80010c2:	3c20      	subs	r4, #32
 80010c4:	40e0      	lsrs	r0, r4
 80010c6:	4684      	mov	ip, r0
 80010c8:	2920      	cmp	r1, #32
 80010ca:	d005      	beq.n	80010d8 <__aeabi_dadd+0x6b0>
 80010cc:	2440      	movs	r4, #64	@ 0x40
 80010ce:	1a61      	subs	r1, r4, r1
 80010d0:	408e      	lsls	r6, r1
 80010d2:	4649      	mov	r1, r9
 80010d4:	4331      	orrs	r1, r6
 80010d6:	4689      	mov	r9, r1
 80010d8:	4648      	mov	r0, r9
 80010da:	1e41      	subs	r1, r0, #1
 80010dc:	4188      	sbcs	r0, r1
 80010de:	4661      	mov	r1, ip
 80010e0:	0007      	movs	r7, r0
 80010e2:	430f      	orrs	r7, r1
 80010e4:	e630      	b.n	8000d48 <__aeabi_dadd+0x320>
 80010e6:	2120      	movs	r1, #32
 80010e8:	2700      	movs	r7, #0
 80010ea:	1a09      	subs	r1, r1, r0
 80010ec:	e50e      	b.n	8000b0c <__aeabi_dadd+0xe4>
 80010ee:	001e      	movs	r6, r3
 80010f0:	2f00      	cmp	r7, #0
 80010f2:	d000      	beq.n	80010f6 <__aeabi_dadd+0x6ce>
 80010f4:	e522      	b.n	8000b3c <__aeabi_dadd+0x114>
 80010f6:	2400      	movs	r4, #0
 80010f8:	e758      	b.n	8000fac <__aeabi_dadd+0x584>
 80010fa:	2500      	movs	r5, #0
 80010fc:	2400      	movs	r4, #0
 80010fe:	2600      	movs	r6, #0
 8001100:	e5db      	b.n	8000cba <__aeabi_dadd+0x292>
 8001102:	46c0      	nop			@ (mov r8, r8)
 8001104:	000007fe 	.word	0x000007fe
 8001108:	000007ff 	.word	0x000007ff
 800110c:	ff7fffff 	.word	0xff7fffff
 8001110:	4647      	mov	r7, r8
 8001112:	430f      	orrs	r7, r1
 8001114:	d100      	bne.n	8001118 <__aeabi_dadd+0x6f0>
 8001116:	e747      	b.n	8000fa8 <__aeabi_dadd+0x580>
 8001118:	000e      	movs	r6, r1
 800111a:	46c1      	mov	r9, r8
 800111c:	e5b5      	b.n	8000c8a <__aeabi_dadd+0x262>
 800111e:	08df      	lsrs	r7, r3, #3
 8001120:	0764      	lsls	r4, r4, #29
 8001122:	2102      	movs	r1, #2
 8001124:	4327      	orrs	r7, r4
 8001126:	0900      	lsrs	r0, r0, #4
 8001128:	e5b5      	b.n	8000c96 <__aeabi_dadd+0x26e>
 800112a:	0019      	movs	r1, r3
 800112c:	08c0      	lsrs	r0, r0, #3
 800112e:	0777      	lsls	r7, r6, #29
 8001130:	4307      	orrs	r7, r0
 8001132:	4311      	orrs	r1, r2
 8001134:	08f0      	lsrs	r0, r6, #3
 8001136:	2900      	cmp	r1, #0
 8001138:	d100      	bne.n	800113c <__aeabi_dadd+0x714>
 800113a:	e5d9      	b.n	8000cf0 <__aeabi_dadd+0x2c8>
 800113c:	2180      	movs	r1, #128	@ 0x80
 800113e:	0309      	lsls	r1, r1, #12
 8001140:	4208      	tst	r0, r1
 8001142:	d007      	beq.n	8001154 <__aeabi_dadd+0x72c>
 8001144:	08dc      	lsrs	r4, r3, #3
 8001146:	420c      	tst	r4, r1
 8001148:	d104      	bne.n	8001154 <__aeabi_dadd+0x72c>
 800114a:	08d2      	lsrs	r2, r2, #3
 800114c:	075b      	lsls	r3, r3, #29
 800114e:	431a      	orrs	r2, r3
 8001150:	0017      	movs	r7, r2
 8001152:	0020      	movs	r0, r4
 8001154:	0f7b      	lsrs	r3, r7, #29
 8001156:	00ff      	lsls	r7, r7, #3
 8001158:	08ff      	lsrs	r7, r7, #3
 800115a:	075b      	lsls	r3, r3, #29
 800115c:	431f      	orrs	r7, r3
 800115e:	e5c7      	b.n	8000cf0 <__aeabi_dadd+0x2c8>
 8001160:	000f      	movs	r7, r1
 8001162:	e5c5      	b.n	8000cf0 <__aeabi_dadd+0x2c8>
 8001164:	4b12      	ldr	r3, [pc, #72]	@ (80011b0 <__aeabi_dadd+0x788>)
 8001166:	08d2      	lsrs	r2, r2, #3
 8001168:	4033      	ands	r3, r6
 800116a:	075f      	lsls	r7, r3, #29
 800116c:	025b      	lsls	r3, r3, #9
 800116e:	2401      	movs	r4, #1
 8001170:	4317      	orrs	r7, r2
 8001172:	0b1e      	lsrs	r6, r3, #12
 8001174:	e5a1      	b.n	8000cba <__aeabi_dadd+0x292>
 8001176:	4226      	tst	r6, r4
 8001178:	d012      	beq.n	80011a0 <__aeabi_dadd+0x778>
 800117a:	4b0d      	ldr	r3, [pc, #52]	@ (80011b0 <__aeabi_dadd+0x788>)
 800117c:	4665      	mov	r5, ip
 800117e:	0002      	movs	r2, r0
 8001180:	2401      	movs	r4, #1
 8001182:	401e      	ands	r6, r3
 8001184:	e4e6      	b.n	8000b54 <__aeabi_dadd+0x12c>
 8001186:	0021      	movs	r1, r4
 8001188:	e585      	b.n	8000c96 <__aeabi_dadd+0x26e>
 800118a:	0017      	movs	r7, r2
 800118c:	e5a8      	b.n	8000ce0 <__aeabi_dadd+0x2b8>
 800118e:	003a      	movs	r2, r7
 8001190:	e4d4      	b.n	8000b3c <__aeabi_dadd+0x114>
 8001192:	08db      	lsrs	r3, r3, #3
 8001194:	0764      	lsls	r4, r4, #29
 8001196:	431c      	orrs	r4, r3
 8001198:	0027      	movs	r7, r4
 800119a:	2102      	movs	r1, #2
 800119c:	0900      	lsrs	r0, r0, #4
 800119e:	e57a      	b.n	8000c96 <__aeabi_dadd+0x26e>
 80011a0:	08c0      	lsrs	r0, r0, #3
 80011a2:	0777      	lsls	r7, r6, #29
 80011a4:	4307      	orrs	r7, r0
 80011a6:	4665      	mov	r5, ip
 80011a8:	2100      	movs	r1, #0
 80011aa:	08f0      	lsrs	r0, r6, #3
 80011ac:	e573      	b.n	8000c96 <__aeabi_dadd+0x26e>
 80011ae:	46c0      	nop			@ (mov r8, r8)
 80011b0:	ff7fffff 	.word	0xff7fffff

080011b4 <__aeabi_ddiv>:
 80011b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011b6:	46de      	mov	lr, fp
 80011b8:	4645      	mov	r5, r8
 80011ba:	4657      	mov	r7, sl
 80011bc:	464e      	mov	r6, r9
 80011be:	b5e0      	push	{r5, r6, r7, lr}
 80011c0:	b087      	sub	sp, #28
 80011c2:	9200      	str	r2, [sp, #0]
 80011c4:	9301      	str	r3, [sp, #4]
 80011c6:	030b      	lsls	r3, r1, #12
 80011c8:	0b1b      	lsrs	r3, r3, #12
 80011ca:	469b      	mov	fp, r3
 80011cc:	0fca      	lsrs	r2, r1, #31
 80011ce:	004b      	lsls	r3, r1, #1
 80011d0:	0004      	movs	r4, r0
 80011d2:	4680      	mov	r8, r0
 80011d4:	0d5b      	lsrs	r3, r3, #21
 80011d6:	9202      	str	r2, [sp, #8]
 80011d8:	d100      	bne.n	80011dc <__aeabi_ddiv+0x28>
 80011da:	e098      	b.n	800130e <__aeabi_ddiv+0x15a>
 80011dc:	4a7c      	ldr	r2, [pc, #496]	@ (80013d0 <__aeabi_ddiv+0x21c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d037      	beq.n	8001252 <__aeabi_ddiv+0x9e>
 80011e2:	4659      	mov	r1, fp
 80011e4:	0f42      	lsrs	r2, r0, #29
 80011e6:	00c9      	lsls	r1, r1, #3
 80011e8:	430a      	orrs	r2, r1
 80011ea:	2180      	movs	r1, #128	@ 0x80
 80011ec:	0409      	lsls	r1, r1, #16
 80011ee:	4311      	orrs	r1, r2
 80011f0:	00c2      	lsls	r2, r0, #3
 80011f2:	4690      	mov	r8, r2
 80011f4:	4a77      	ldr	r2, [pc, #476]	@ (80013d4 <__aeabi_ddiv+0x220>)
 80011f6:	4689      	mov	r9, r1
 80011f8:	4692      	mov	sl, r2
 80011fa:	449a      	add	sl, r3
 80011fc:	2300      	movs	r3, #0
 80011fe:	2400      	movs	r4, #0
 8001200:	9303      	str	r3, [sp, #12]
 8001202:	9e00      	ldr	r6, [sp, #0]
 8001204:	9f01      	ldr	r7, [sp, #4]
 8001206:	033b      	lsls	r3, r7, #12
 8001208:	0b1b      	lsrs	r3, r3, #12
 800120a:	469b      	mov	fp, r3
 800120c:	007b      	lsls	r3, r7, #1
 800120e:	0030      	movs	r0, r6
 8001210:	0d5b      	lsrs	r3, r3, #21
 8001212:	0ffd      	lsrs	r5, r7, #31
 8001214:	2b00      	cmp	r3, #0
 8001216:	d059      	beq.n	80012cc <__aeabi_ddiv+0x118>
 8001218:	4a6d      	ldr	r2, [pc, #436]	@ (80013d0 <__aeabi_ddiv+0x21c>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d048      	beq.n	80012b0 <__aeabi_ddiv+0xfc>
 800121e:	4659      	mov	r1, fp
 8001220:	0f72      	lsrs	r2, r6, #29
 8001222:	00c9      	lsls	r1, r1, #3
 8001224:	430a      	orrs	r2, r1
 8001226:	2180      	movs	r1, #128	@ 0x80
 8001228:	0409      	lsls	r1, r1, #16
 800122a:	4311      	orrs	r1, r2
 800122c:	468b      	mov	fp, r1
 800122e:	4969      	ldr	r1, [pc, #420]	@ (80013d4 <__aeabi_ddiv+0x220>)
 8001230:	00f2      	lsls	r2, r6, #3
 8001232:	468c      	mov	ip, r1
 8001234:	4651      	mov	r1, sl
 8001236:	4463      	add	r3, ip
 8001238:	1acb      	subs	r3, r1, r3
 800123a:	469a      	mov	sl, r3
 800123c:	2100      	movs	r1, #0
 800123e:	9e02      	ldr	r6, [sp, #8]
 8001240:	406e      	eors	r6, r5
 8001242:	b2f6      	uxtb	r6, r6
 8001244:	2c0f      	cmp	r4, #15
 8001246:	d900      	bls.n	800124a <__aeabi_ddiv+0x96>
 8001248:	e0ce      	b.n	80013e8 <__aeabi_ddiv+0x234>
 800124a:	4b63      	ldr	r3, [pc, #396]	@ (80013d8 <__aeabi_ddiv+0x224>)
 800124c:	00a4      	lsls	r4, r4, #2
 800124e:	591b      	ldr	r3, [r3, r4]
 8001250:	469f      	mov	pc, r3
 8001252:	465a      	mov	r2, fp
 8001254:	4302      	orrs	r2, r0
 8001256:	4691      	mov	r9, r2
 8001258:	d000      	beq.n	800125c <__aeabi_ddiv+0xa8>
 800125a:	e090      	b.n	800137e <__aeabi_ddiv+0x1ca>
 800125c:	469a      	mov	sl, r3
 800125e:	2302      	movs	r3, #2
 8001260:	4690      	mov	r8, r2
 8001262:	2408      	movs	r4, #8
 8001264:	9303      	str	r3, [sp, #12]
 8001266:	e7cc      	b.n	8001202 <__aeabi_ddiv+0x4e>
 8001268:	46cb      	mov	fp, r9
 800126a:	4642      	mov	r2, r8
 800126c:	9d02      	ldr	r5, [sp, #8]
 800126e:	9903      	ldr	r1, [sp, #12]
 8001270:	2902      	cmp	r1, #2
 8001272:	d100      	bne.n	8001276 <__aeabi_ddiv+0xc2>
 8001274:	e1de      	b.n	8001634 <__aeabi_ddiv+0x480>
 8001276:	2903      	cmp	r1, #3
 8001278:	d100      	bne.n	800127c <__aeabi_ddiv+0xc8>
 800127a:	e08d      	b.n	8001398 <__aeabi_ddiv+0x1e4>
 800127c:	2901      	cmp	r1, #1
 800127e:	d000      	beq.n	8001282 <__aeabi_ddiv+0xce>
 8001280:	e179      	b.n	8001576 <__aeabi_ddiv+0x3c2>
 8001282:	002e      	movs	r6, r5
 8001284:	2200      	movs	r2, #0
 8001286:	2300      	movs	r3, #0
 8001288:	2400      	movs	r4, #0
 800128a:	4690      	mov	r8, r2
 800128c:	051b      	lsls	r3, r3, #20
 800128e:	4323      	orrs	r3, r4
 8001290:	07f6      	lsls	r6, r6, #31
 8001292:	4333      	orrs	r3, r6
 8001294:	4640      	mov	r0, r8
 8001296:	0019      	movs	r1, r3
 8001298:	b007      	add	sp, #28
 800129a:	bcf0      	pop	{r4, r5, r6, r7}
 800129c:	46bb      	mov	fp, r7
 800129e:	46b2      	mov	sl, r6
 80012a0:	46a9      	mov	r9, r5
 80012a2:	46a0      	mov	r8, r4
 80012a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012a6:	2200      	movs	r2, #0
 80012a8:	2400      	movs	r4, #0
 80012aa:	4690      	mov	r8, r2
 80012ac:	4b48      	ldr	r3, [pc, #288]	@ (80013d0 <__aeabi_ddiv+0x21c>)
 80012ae:	e7ed      	b.n	800128c <__aeabi_ddiv+0xd8>
 80012b0:	465a      	mov	r2, fp
 80012b2:	9b00      	ldr	r3, [sp, #0]
 80012b4:	431a      	orrs	r2, r3
 80012b6:	4b49      	ldr	r3, [pc, #292]	@ (80013dc <__aeabi_ddiv+0x228>)
 80012b8:	469c      	mov	ip, r3
 80012ba:	44e2      	add	sl, ip
 80012bc:	2a00      	cmp	r2, #0
 80012be:	d159      	bne.n	8001374 <__aeabi_ddiv+0x1c0>
 80012c0:	2302      	movs	r3, #2
 80012c2:	431c      	orrs	r4, r3
 80012c4:	2300      	movs	r3, #0
 80012c6:	2102      	movs	r1, #2
 80012c8:	469b      	mov	fp, r3
 80012ca:	e7b8      	b.n	800123e <__aeabi_ddiv+0x8a>
 80012cc:	465a      	mov	r2, fp
 80012ce:	9b00      	ldr	r3, [sp, #0]
 80012d0:	431a      	orrs	r2, r3
 80012d2:	d049      	beq.n	8001368 <__aeabi_ddiv+0x1b4>
 80012d4:	465b      	mov	r3, fp
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d100      	bne.n	80012dc <__aeabi_ddiv+0x128>
 80012da:	e19c      	b.n	8001616 <__aeabi_ddiv+0x462>
 80012dc:	4658      	mov	r0, fp
 80012de:	f001 fb8b 	bl	80029f8 <__clzsi2>
 80012e2:	0002      	movs	r2, r0
 80012e4:	0003      	movs	r3, r0
 80012e6:	3a0b      	subs	r2, #11
 80012e8:	271d      	movs	r7, #29
 80012ea:	9e00      	ldr	r6, [sp, #0]
 80012ec:	1aba      	subs	r2, r7, r2
 80012ee:	0019      	movs	r1, r3
 80012f0:	4658      	mov	r0, fp
 80012f2:	40d6      	lsrs	r6, r2
 80012f4:	3908      	subs	r1, #8
 80012f6:	4088      	lsls	r0, r1
 80012f8:	0032      	movs	r2, r6
 80012fa:	4302      	orrs	r2, r0
 80012fc:	4693      	mov	fp, r2
 80012fe:	9a00      	ldr	r2, [sp, #0]
 8001300:	408a      	lsls	r2, r1
 8001302:	4937      	ldr	r1, [pc, #220]	@ (80013e0 <__aeabi_ddiv+0x22c>)
 8001304:	4453      	add	r3, sl
 8001306:	468a      	mov	sl, r1
 8001308:	2100      	movs	r1, #0
 800130a:	449a      	add	sl, r3
 800130c:	e797      	b.n	800123e <__aeabi_ddiv+0x8a>
 800130e:	465b      	mov	r3, fp
 8001310:	4303      	orrs	r3, r0
 8001312:	4699      	mov	r9, r3
 8001314:	d021      	beq.n	800135a <__aeabi_ddiv+0x1a6>
 8001316:	465b      	mov	r3, fp
 8001318:	2b00      	cmp	r3, #0
 800131a:	d100      	bne.n	800131e <__aeabi_ddiv+0x16a>
 800131c:	e169      	b.n	80015f2 <__aeabi_ddiv+0x43e>
 800131e:	4658      	mov	r0, fp
 8001320:	f001 fb6a 	bl	80029f8 <__clzsi2>
 8001324:	230b      	movs	r3, #11
 8001326:	425b      	negs	r3, r3
 8001328:	469c      	mov	ip, r3
 800132a:	0002      	movs	r2, r0
 800132c:	4484      	add	ip, r0
 800132e:	4666      	mov	r6, ip
 8001330:	231d      	movs	r3, #29
 8001332:	1b9b      	subs	r3, r3, r6
 8001334:	0026      	movs	r6, r4
 8001336:	0011      	movs	r1, r2
 8001338:	4658      	mov	r0, fp
 800133a:	40de      	lsrs	r6, r3
 800133c:	3908      	subs	r1, #8
 800133e:	4088      	lsls	r0, r1
 8001340:	0033      	movs	r3, r6
 8001342:	4303      	orrs	r3, r0
 8001344:	4699      	mov	r9, r3
 8001346:	0023      	movs	r3, r4
 8001348:	408b      	lsls	r3, r1
 800134a:	4698      	mov	r8, r3
 800134c:	4b25      	ldr	r3, [pc, #148]	@ (80013e4 <__aeabi_ddiv+0x230>)
 800134e:	2400      	movs	r4, #0
 8001350:	1a9b      	subs	r3, r3, r2
 8001352:	469a      	mov	sl, r3
 8001354:	2300      	movs	r3, #0
 8001356:	9303      	str	r3, [sp, #12]
 8001358:	e753      	b.n	8001202 <__aeabi_ddiv+0x4e>
 800135a:	2300      	movs	r3, #0
 800135c:	4698      	mov	r8, r3
 800135e:	469a      	mov	sl, r3
 8001360:	3301      	adds	r3, #1
 8001362:	2404      	movs	r4, #4
 8001364:	9303      	str	r3, [sp, #12]
 8001366:	e74c      	b.n	8001202 <__aeabi_ddiv+0x4e>
 8001368:	2301      	movs	r3, #1
 800136a:	431c      	orrs	r4, r3
 800136c:	2300      	movs	r3, #0
 800136e:	2101      	movs	r1, #1
 8001370:	469b      	mov	fp, r3
 8001372:	e764      	b.n	800123e <__aeabi_ddiv+0x8a>
 8001374:	2303      	movs	r3, #3
 8001376:	0032      	movs	r2, r6
 8001378:	2103      	movs	r1, #3
 800137a:	431c      	orrs	r4, r3
 800137c:	e75f      	b.n	800123e <__aeabi_ddiv+0x8a>
 800137e:	469a      	mov	sl, r3
 8001380:	2303      	movs	r3, #3
 8001382:	46d9      	mov	r9, fp
 8001384:	240c      	movs	r4, #12
 8001386:	9303      	str	r3, [sp, #12]
 8001388:	e73b      	b.n	8001202 <__aeabi_ddiv+0x4e>
 800138a:	2300      	movs	r3, #0
 800138c:	2480      	movs	r4, #128	@ 0x80
 800138e:	4698      	mov	r8, r3
 8001390:	2600      	movs	r6, #0
 8001392:	4b0f      	ldr	r3, [pc, #60]	@ (80013d0 <__aeabi_ddiv+0x21c>)
 8001394:	0324      	lsls	r4, r4, #12
 8001396:	e779      	b.n	800128c <__aeabi_ddiv+0xd8>
 8001398:	2480      	movs	r4, #128	@ 0x80
 800139a:	465b      	mov	r3, fp
 800139c:	0324      	lsls	r4, r4, #12
 800139e:	431c      	orrs	r4, r3
 80013a0:	0324      	lsls	r4, r4, #12
 80013a2:	002e      	movs	r6, r5
 80013a4:	4690      	mov	r8, r2
 80013a6:	4b0a      	ldr	r3, [pc, #40]	@ (80013d0 <__aeabi_ddiv+0x21c>)
 80013a8:	0b24      	lsrs	r4, r4, #12
 80013aa:	e76f      	b.n	800128c <__aeabi_ddiv+0xd8>
 80013ac:	2480      	movs	r4, #128	@ 0x80
 80013ae:	464b      	mov	r3, r9
 80013b0:	0324      	lsls	r4, r4, #12
 80013b2:	4223      	tst	r3, r4
 80013b4:	d002      	beq.n	80013bc <__aeabi_ddiv+0x208>
 80013b6:	465b      	mov	r3, fp
 80013b8:	4223      	tst	r3, r4
 80013ba:	d0f0      	beq.n	800139e <__aeabi_ddiv+0x1ea>
 80013bc:	2480      	movs	r4, #128	@ 0x80
 80013be:	464b      	mov	r3, r9
 80013c0:	0324      	lsls	r4, r4, #12
 80013c2:	431c      	orrs	r4, r3
 80013c4:	0324      	lsls	r4, r4, #12
 80013c6:	9e02      	ldr	r6, [sp, #8]
 80013c8:	4b01      	ldr	r3, [pc, #4]	@ (80013d0 <__aeabi_ddiv+0x21c>)
 80013ca:	0b24      	lsrs	r4, r4, #12
 80013cc:	e75e      	b.n	800128c <__aeabi_ddiv+0xd8>
 80013ce:	46c0      	nop			@ (mov r8, r8)
 80013d0:	000007ff 	.word	0x000007ff
 80013d4:	fffffc01 	.word	0xfffffc01
 80013d8:	080085e4 	.word	0x080085e4
 80013dc:	fffff801 	.word	0xfffff801
 80013e0:	000003f3 	.word	0x000003f3
 80013e4:	fffffc0d 	.word	0xfffffc0d
 80013e8:	45cb      	cmp	fp, r9
 80013ea:	d200      	bcs.n	80013ee <__aeabi_ddiv+0x23a>
 80013ec:	e0f8      	b.n	80015e0 <__aeabi_ddiv+0x42c>
 80013ee:	d100      	bne.n	80013f2 <__aeabi_ddiv+0x23e>
 80013f0:	e0f3      	b.n	80015da <__aeabi_ddiv+0x426>
 80013f2:	2301      	movs	r3, #1
 80013f4:	425b      	negs	r3, r3
 80013f6:	469c      	mov	ip, r3
 80013f8:	4644      	mov	r4, r8
 80013fa:	4648      	mov	r0, r9
 80013fc:	2500      	movs	r5, #0
 80013fe:	44e2      	add	sl, ip
 8001400:	465b      	mov	r3, fp
 8001402:	0e17      	lsrs	r7, r2, #24
 8001404:	021b      	lsls	r3, r3, #8
 8001406:	431f      	orrs	r7, r3
 8001408:	0c19      	lsrs	r1, r3, #16
 800140a:	043b      	lsls	r3, r7, #16
 800140c:	0212      	lsls	r2, r2, #8
 800140e:	9700      	str	r7, [sp, #0]
 8001410:	0c1f      	lsrs	r7, r3, #16
 8001412:	4691      	mov	r9, r2
 8001414:	9102      	str	r1, [sp, #8]
 8001416:	9703      	str	r7, [sp, #12]
 8001418:	f7fe ff18 	bl	800024c <__aeabi_uidivmod>
 800141c:	0002      	movs	r2, r0
 800141e:	437a      	muls	r2, r7
 8001420:	040b      	lsls	r3, r1, #16
 8001422:	0c21      	lsrs	r1, r4, #16
 8001424:	4680      	mov	r8, r0
 8001426:	4319      	orrs	r1, r3
 8001428:	428a      	cmp	r2, r1
 800142a:	d909      	bls.n	8001440 <__aeabi_ddiv+0x28c>
 800142c:	9f00      	ldr	r7, [sp, #0]
 800142e:	2301      	movs	r3, #1
 8001430:	46bc      	mov	ip, r7
 8001432:	425b      	negs	r3, r3
 8001434:	4461      	add	r1, ip
 8001436:	469c      	mov	ip, r3
 8001438:	44e0      	add	r8, ip
 800143a:	428f      	cmp	r7, r1
 800143c:	d800      	bhi.n	8001440 <__aeabi_ddiv+0x28c>
 800143e:	e15c      	b.n	80016fa <__aeabi_ddiv+0x546>
 8001440:	1a88      	subs	r0, r1, r2
 8001442:	9902      	ldr	r1, [sp, #8]
 8001444:	f7fe ff02 	bl	800024c <__aeabi_uidivmod>
 8001448:	9a03      	ldr	r2, [sp, #12]
 800144a:	0424      	lsls	r4, r4, #16
 800144c:	4342      	muls	r2, r0
 800144e:	0409      	lsls	r1, r1, #16
 8001450:	0c24      	lsrs	r4, r4, #16
 8001452:	0003      	movs	r3, r0
 8001454:	430c      	orrs	r4, r1
 8001456:	42a2      	cmp	r2, r4
 8001458:	d906      	bls.n	8001468 <__aeabi_ddiv+0x2b4>
 800145a:	9900      	ldr	r1, [sp, #0]
 800145c:	3b01      	subs	r3, #1
 800145e:	468c      	mov	ip, r1
 8001460:	4464      	add	r4, ip
 8001462:	42a1      	cmp	r1, r4
 8001464:	d800      	bhi.n	8001468 <__aeabi_ddiv+0x2b4>
 8001466:	e142      	b.n	80016ee <__aeabi_ddiv+0x53a>
 8001468:	1aa0      	subs	r0, r4, r2
 800146a:	4642      	mov	r2, r8
 800146c:	0412      	lsls	r2, r2, #16
 800146e:	431a      	orrs	r2, r3
 8001470:	4693      	mov	fp, r2
 8001472:	464b      	mov	r3, r9
 8001474:	4659      	mov	r1, fp
 8001476:	0c1b      	lsrs	r3, r3, #16
 8001478:	001f      	movs	r7, r3
 800147a:	9304      	str	r3, [sp, #16]
 800147c:	040b      	lsls	r3, r1, #16
 800147e:	4649      	mov	r1, r9
 8001480:	0409      	lsls	r1, r1, #16
 8001482:	0c09      	lsrs	r1, r1, #16
 8001484:	000c      	movs	r4, r1
 8001486:	0c1b      	lsrs	r3, r3, #16
 8001488:	435c      	muls	r4, r3
 800148a:	0c12      	lsrs	r2, r2, #16
 800148c:	437b      	muls	r3, r7
 800148e:	4688      	mov	r8, r1
 8001490:	4351      	muls	r1, r2
 8001492:	437a      	muls	r2, r7
 8001494:	0c27      	lsrs	r7, r4, #16
 8001496:	46bc      	mov	ip, r7
 8001498:	185b      	adds	r3, r3, r1
 800149a:	4463      	add	r3, ip
 800149c:	4299      	cmp	r1, r3
 800149e:	d903      	bls.n	80014a8 <__aeabi_ddiv+0x2f4>
 80014a0:	2180      	movs	r1, #128	@ 0x80
 80014a2:	0249      	lsls	r1, r1, #9
 80014a4:	468c      	mov	ip, r1
 80014a6:	4462      	add	r2, ip
 80014a8:	0c19      	lsrs	r1, r3, #16
 80014aa:	0424      	lsls	r4, r4, #16
 80014ac:	041b      	lsls	r3, r3, #16
 80014ae:	0c24      	lsrs	r4, r4, #16
 80014b0:	188a      	adds	r2, r1, r2
 80014b2:	191c      	adds	r4, r3, r4
 80014b4:	4290      	cmp	r0, r2
 80014b6:	d302      	bcc.n	80014be <__aeabi_ddiv+0x30a>
 80014b8:	d116      	bne.n	80014e8 <__aeabi_ddiv+0x334>
 80014ba:	42a5      	cmp	r5, r4
 80014bc:	d214      	bcs.n	80014e8 <__aeabi_ddiv+0x334>
 80014be:	465b      	mov	r3, fp
 80014c0:	9f00      	ldr	r7, [sp, #0]
 80014c2:	3b01      	subs	r3, #1
 80014c4:	444d      	add	r5, r9
 80014c6:	9305      	str	r3, [sp, #20]
 80014c8:	454d      	cmp	r5, r9
 80014ca:	419b      	sbcs	r3, r3
 80014cc:	46bc      	mov	ip, r7
 80014ce:	425b      	negs	r3, r3
 80014d0:	4463      	add	r3, ip
 80014d2:	18c0      	adds	r0, r0, r3
 80014d4:	4287      	cmp	r7, r0
 80014d6:	d300      	bcc.n	80014da <__aeabi_ddiv+0x326>
 80014d8:	e102      	b.n	80016e0 <__aeabi_ddiv+0x52c>
 80014da:	4282      	cmp	r2, r0
 80014dc:	d900      	bls.n	80014e0 <__aeabi_ddiv+0x32c>
 80014de:	e129      	b.n	8001734 <__aeabi_ddiv+0x580>
 80014e0:	d100      	bne.n	80014e4 <__aeabi_ddiv+0x330>
 80014e2:	e124      	b.n	800172e <__aeabi_ddiv+0x57a>
 80014e4:	9b05      	ldr	r3, [sp, #20]
 80014e6:	469b      	mov	fp, r3
 80014e8:	1b2c      	subs	r4, r5, r4
 80014ea:	42a5      	cmp	r5, r4
 80014ec:	41ad      	sbcs	r5, r5
 80014ee:	9b00      	ldr	r3, [sp, #0]
 80014f0:	1a80      	subs	r0, r0, r2
 80014f2:	426d      	negs	r5, r5
 80014f4:	1b40      	subs	r0, r0, r5
 80014f6:	4283      	cmp	r3, r0
 80014f8:	d100      	bne.n	80014fc <__aeabi_ddiv+0x348>
 80014fa:	e10f      	b.n	800171c <__aeabi_ddiv+0x568>
 80014fc:	9902      	ldr	r1, [sp, #8]
 80014fe:	f7fe fea5 	bl	800024c <__aeabi_uidivmod>
 8001502:	9a03      	ldr	r2, [sp, #12]
 8001504:	040b      	lsls	r3, r1, #16
 8001506:	4342      	muls	r2, r0
 8001508:	0c21      	lsrs	r1, r4, #16
 800150a:	0005      	movs	r5, r0
 800150c:	4319      	orrs	r1, r3
 800150e:	428a      	cmp	r2, r1
 8001510:	d900      	bls.n	8001514 <__aeabi_ddiv+0x360>
 8001512:	e0cb      	b.n	80016ac <__aeabi_ddiv+0x4f8>
 8001514:	1a88      	subs	r0, r1, r2
 8001516:	9902      	ldr	r1, [sp, #8]
 8001518:	f7fe fe98 	bl	800024c <__aeabi_uidivmod>
 800151c:	9a03      	ldr	r2, [sp, #12]
 800151e:	0424      	lsls	r4, r4, #16
 8001520:	4342      	muls	r2, r0
 8001522:	0409      	lsls	r1, r1, #16
 8001524:	0c24      	lsrs	r4, r4, #16
 8001526:	0003      	movs	r3, r0
 8001528:	430c      	orrs	r4, r1
 800152a:	42a2      	cmp	r2, r4
 800152c:	d900      	bls.n	8001530 <__aeabi_ddiv+0x37c>
 800152e:	e0ca      	b.n	80016c6 <__aeabi_ddiv+0x512>
 8001530:	4641      	mov	r1, r8
 8001532:	1aa4      	subs	r4, r4, r2
 8001534:	042a      	lsls	r2, r5, #16
 8001536:	431a      	orrs	r2, r3
 8001538:	9f04      	ldr	r7, [sp, #16]
 800153a:	0413      	lsls	r3, r2, #16
 800153c:	0c1b      	lsrs	r3, r3, #16
 800153e:	4359      	muls	r1, r3
 8001540:	4640      	mov	r0, r8
 8001542:	437b      	muls	r3, r7
 8001544:	469c      	mov	ip, r3
 8001546:	0c15      	lsrs	r5, r2, #16
 8001548:	4368      	muls	r0, r5
 800154a:	0c0b      	lsrs	r3, r1, #16
 800154c:	4484      	add	ip, r0
 800154e:	4463      	add	r3, ip
 8001550:	437d      	muls	r5, r7
 8001552:	4298      	cmp	r0, r3
 8001554:	d903      	bls.n	800155e <__aeabi_ddiv+0x3aa>
 8001556:	2080      	movs	r0, #128	@ 0x80
 8001558:	0240      	lsls	r0, r0, #9
 800155a:	4684      	mov	ip, r0
 800155c:	4465      	add	r5, ip
 800155e:	0c18      	lsrs	r0, r3, #16
 8001560:	0409      	lsls	r1, r1, #16
 8001562:	041b      	lsls	r3, r3, #16
 8001564:	0c09      	lsrs	r1, r1, #16
 8001566:	1940      	adds	r0, r0, r5
 8001568:	185b      	adds	r3, r3, r1
 800156a:	4284      	cmp	r4, r0
 800156c:	d327      	bcc.n	80015be <__aeabi_ddiv+0x40a>
 800156e:	d023      	beq.n	80015b8 <__aeabi_ddiv+0x404>
 8001570:	2301      	movs	r3, #1
 8001572:	0035      	movs	r5, r6
 8001574:	431a      	orrs	r2, r3
 8001576:	4b94      	ldr	r3, [pc, #592]	@ (80017c8 <__aeabi_ddiv+0x614>)
 8001578:	4453      	add	r3, sl
 800157a:	2b00      	cmp	r3, #0
 800157c:	dd60      	ble.n	8001640 <__aeabi_ddiv+0x48c>
 800157e:	0751      	lsls	r1, r2, #29
 8001580:	d000      	beq.n	8001584 <__aeabi_ddiv+0x3d0>
 8001582:	e086      	b.n	8001692 <__aeabi_ddiv+0x4de>
 8001584:	002e      	movs	r6, r5
 8001586:	08d1      	lsrs	r1, r2, #3
 8001588:	465a      	mov	r2, fp
 800158a:	01d2      	lsls	r2, r2, #7
 800158c:	d506      	bpl.n	800159c <__aeabi_ddiv+0x3e8>
 800158e:	465a      	mov	r2, fp
 8001590:	4b8e      	ldr	r3, [pc, #568]	@ (80017cc <__aeabi_ddiv+0x618>)
 8001592:	401a      	ands	r2, r3
 8001594:	2380      	movs	r3, #128	@ 0x80
 8001596:	4693      	mov	fp, r2
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	4453      	add	r3, sl
 800159c:	4a8c      	ldr	r2, [pc, #560]	@ (80017d0 <__aeabi_ddiv+0x61c>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	dd00      	ble.n	80015a4 <__aeabi_ddiv+0x3f0>
 80015a2:	e680      	b.n	80012a6 <__aeabi_ddiv+0xf2>
 80015a4:	465a      	mov	r2, fp
 80015a6:	0752      	lsls	r2, r2, #29
 80015a8:	430a      	orrs	r2, r1
 80015aa:	4690      	mov	r8, r2
 80015ac:	465a      	mov	r2, fp
 80015ae:	055b      	lsls	r3, r3, #21
 80015b0:	0254      	lsls	r4, r2, #9
 80015b2:	0b24      	lsrs	r4, r4, #12
 80015b4:	0d5b      	lsrs	r3, r3, #21
 80015b6:	e669      	b.n	800128c <__aeabi_ddiv+0xd8>
 80015b8:	0035      	movs	r5, r6
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d0db      	beq.n	8001576 <__aeabi_ddiv+0x3c2>
 80015be:	9d00      	ldr	r5, [sp, #0]
 80015c0:	1e51      	subs	r1, r2, #1
 80015c2:	46ac      	mov	ip, r5
 80015c4:	4464      	add	r4, ip
 80015c6:	42ac      	cmp	r4, r5
 80015c8:	d200      	bcs.n	80015cc <__aeabi_ddiv+0x418>
 80015ca:	e09e      	b.n	800170a <__aeabi_ddiv+0x556>
 80015cc:	4284      	cmp	r4, r0
 80015ce:	d200      	bcs.n	80015d2 <__aeabi_ddiv+0x41e>
 80015d0:	e0e1      	b.n	8001796 <__aeabi_ddiv+0x5e2>
 80015d2:	d100      	bne.n	80015d6 <__aeabi_ddiv+0x422>
 80015d4:	e0ee      	b.n	80017b4 <__aeabi_ddiv+0x600>
 80015d6:	000a      	movs	r2, r1
 80015d8:	e7ca      	b.n	8001570 <__aeabi_ddiv+0x3bc>
 80015da:	4542      	cmp	r2, r8
 80015dc:	d900      	bls.n	80015e0 <__aeabi_ddiv+0x42c>
 80015de:	e708      	b.n	80013f2 <__aeabi_ddiv+0x23e>
 80015e0:	464b      	mov	r3, r9
 80015e2:	07dc      	lsls	r4, r3, #31
 80015e4:	0858      	lsrs	r0, r3, #1
 80015e6:	4643      	mov	r3, r8
 80015e8:	085b      	lsrs	r3, r3, #1
 80015ea:	431c      	orrs	r4, r3
 80015ec:	4643      	mov	r3, r8
 80015ee:	07dd      	lsls	r5, r3, #31
 80015f0:	e706      	b.n	8001400 <__aeabi_ddiv+0x24c>
 80015f2:	f001 fa01 	bl	80029f8 <__clzsi2>
 80015f6:	2315      	movs	r3, #21
 80015f8:	469c      	mov	ip, r3
 80015fa:	4484      	add	ip, r0
 80015fc:	0002      	movs	r2, r0
 80015fe:	4663      	mov	r3, ip
 8001600:	3220      	adds	r2, #32
 8001602:	2b1c      	cmp	r3, #28
 8001604:	dc00      	bgt.n	8001608 <__aeabi_ddiv+0x454>
 8001606:	e692      	b.n	800132e <__aeabi_ddiv+0x17a>
 8001608:	0023      	movs	r3, r4
 800160a:	3808      	subs	r0, #8
 800160c:	4083      	lsls	r3, r0
 800160e:	4699      	mov	r9, r3
 8001610:	2300      	movs	r3, #0
 8001612:	4698      	mov	r8, r3
 8001614:	e69a      	b.n	800134c <__aeabi_ddiv+0x198>
 8001616:	f001 f9ef 	bl	80029f8 <__clzsi2>
 800161a:	0002      	movs	r2, r0
 800161c:	0003      	movs	r3, r0
 800161e:	3215      	adds	r2, #21
 8001620:	3320      	adds	r3, #32
 8001622:	2a1c      	cmp	r2, #28
 8001624:	dc00      	bgt.n	8001628 <__aeabi_ddiv+0x474>
 8001626:	e65f      	b.n	80012e8 <__aeabi_ddiv+0x134>
 8001628:	9900      	ldr	r1, [sp, #0]
 800162a:	3808      	subs	r0, #8
 800162c:	4081      	lsls	r1, r0
 800162e:	2200      	movs	r2, #0
 8001630:	468b      	mov	fp, r1
 8001632:	e666      	b.n	8001302 <__aeabi_ddiv+0x14e>
 8001634:	2200      	movs	r2, #0
 8001636:	002e      	movs	r6, r5
 8001638:	2400      	movs	r4, #0
 800163a:	4690      	mov	r8, r2
 800163c:	4b65      	ldr	r3, [pc, #404]	@ (80017d4 <__aeabi_ddiv+0x620>)
 800163e:	e625      	b.n	800128c <__aeabi_ddiv+0xd8>
 8001640:	002e      	movs	r6, r5
 8001642:	2101      	movs	r1, #1
 8001644:	1ac9      	subs	r1, r1, r3
 8001646:	2938      	cmp	r1, #56	@ 0x38
 8001648:	dd00      	ble.n	800164c <__aeabi_ddiv+0x498>
 800164a:	e61b      	b.n	8001284 <__aeabi_ddiv+0xd0>
 800164c:	291f      	cmp	r1, #31
 800164e:	dc7e      	bgt.n	800174e <__aeabi_ddiv+0x59a>
 8001650:	4861      	ldr	r0, [pc, #388]	@ (80017d8 <__aeabi_ddiv+0x624>)
 8001652:	0014      	movs	r4, r2
 8001654:	4450      	add	r0, sl
 8001656:	465b      	mov	r3, fp
 8001658:	4082      	lsls	r2, r0
 800165a:	4083      	lsls	r3, r0
 800165c:	40cc      	lsrs	r4, r1
 800165e:	1e50      	subs	r0, r2, #1
 8001660:	4182      	sbcs	r2, r0
 8001662:	4323      	orrs	r3, r4
 8001664:	431a      	orrs	r2, r3
 8001666:	465b      	mov	r3, fp
 8001668:	40cb      	lsrs	r3, r1
 800166a:	0751      	lsls	r1, r2, #29
 800166c:	d009      	beq.n	8001682 <__aeabi_ddiv+0x4ce>
 800166e:	210f      	movs	r1, #15
 8001670:	4011      	ands	r1, r2
 8001672:	2904      	cmp	r1, #4
 8001674:	d005      	beq.n	8001682 <__aeabi_ddiv+0x4ce>
 8001676:	1d11      	adds	r1, r2, #4
 8001678:	4291      	cmp	r1, r2
 800167a:	4192      	sbcs	r2, r2
 800167c:	4252      	negs	r2, r2
 800167e:	189b      	adds	r3, r3, r2
 8001680:	000a      	movs	r2, r1
 8001682:	0219      	lsls	r1, r3, #8
 8001684:	d400      	bmi.n	8001688 <__aeabi_ddiv+0x4d4>
 8001686:	e09b      	b.n	80017c0 <__aeabi_ddiv+0x60c>
 8001688:	2200      	movs	r2, #0
 800168a:	2301      	movs	r3, #1
 800168c:	2400      	movs	r4, #0
 800168e:	4690      	mov	r8, r2
 8001690:	e5fc      	b.n	800128c <__aeabi_ddiv+0xd8>
 8001692:	210f      	movs	r1, #15
 8001694:	4011      	ands	r1, r2
 8001696:	2904      	cmp	r1, #4
 8001698:	d100      	bne.n	800169c <__aeabi_ddiv+0x4e8>
 800169a:	e773      	b.n	8001584 <__aeabi_ddiv+0x3d0>
 800169c:	1d11      	adds	r1, r2, #4
 800169e:	4291      	cmp	r1, r2
 80016a0:	4192      	sbcs	r2, r2
 80016a2:	4252      	negs	r2, r2
 80016a4:	002e      	movs	r6, r5
 80016a6:	08c9      	lsrs	r1, r1, #3
 80016a8:	4493      	add	fp, r2
 80016aa:	e76d      	b.n	8001588 <__aeabi_ddiv+0x3d4>
 80016ac:	9b00      	ldr	r3, [sp, #0]
 80016ae:	3d01      	subs	r5, #1
 80016b0:	469c      	mov	ip, r3
 80016b2:	4461      	add	r1, ip
 80016b4:	428b      	cmp	r3, r1
 80016b6:	d900      	bls.n	80016ba <__aeabi_ddiv+0x506>
 80016b8:	e72c      	b.n	8001514 <__aeabi_ddiv+0x360>
 80016ba:	428a      	cmp	r2, r1
 80016bc:	d800      	bhi.n	80016c0 <__aeabi_ddiv+0x50c>
 80016be:	e729      	b.n	8001514 <__aeabi_ddiv+0x360>
 80016c0:	1e85      	subs	r5, r0, #2
 80016c2:	4461      	add	r1, ip
 80016c4:	e726      	b.n	8001514 <__aeabi_ddiv+0x360>
 80016c6:	9900      	ldr	r1, [sp, #0]
 80016c8:	3b01      	subs	r3, #1
 80016ca:	468c      	mov	ip, r1
 80016cc:	4464      	add	r4, ip
 80016ce:	42a1      	cmp	r1, r4
 80016d0:	d900      	bls.n	80016d4 <__aeabi_ddiv+0x520>
 80016d2:	e72d      	b.n	8001530 <__aeabi_ddiv+0x37c>
 80016d4:	42a2      	cmp	r2, r4
 80016d6:	d800      	bhi.n	80016da <__aeabi_ddiv+0x526>
 80016d8:	e72a      	b.n	8001530 <__aeabi_ddiv+0x37c>
 80016da:	1e83      	subs	r3, r0, #2
 80016dc:	4464      	add	r4, ip
 80016de:	e727      	b.n	8001530 <__aeabi_ddiv+0x37c>
 80016e0:	4287      	cmp	r7, r0
 80016e2:	d000      	beq.n	80016e6 <__aeabi_ddiv+0x532>
 80016e4:	e6fe      	b.n	80014e4 <__aeabi_ddiv+0x330>
 80016e6:	45a9      	cmp	r9, r5
 80016e8:	d900      	bls.n	80016ec <__aeabi_ddiv+0x538>
 80016ea:	e6fb      	b.n	80014e4 <__aeabi_ddiv+0x330>
 80016ec:	e6f5      	b.n	80014da <__aeabi_ddiv+0x326>
 80016ee:	42a2      	cmp	r2, r4
 80016f0:	d800      	bhi.n	80016f4 <__aeabi_ddiv+0x540>
 80016f2:	e6b9      	b.n	8001468 <__aeabi_ddiv+0x2b4>
 80016f4:	1e83      	subs	r3, r0, #2
 80016f6:	4464      	add	r4, ip
 80016f8:	e6b6      	b.n	8001468 <__aeabi_ddiv+0x2b4>
 80016fa:	428a      	cmp	r2, r1
 80016fc:	d800      	bhi.n	8001700 <__aeabi_ddiv+0x54c>
 80016fe:	e69f      	b.n	8001440 <__aeabi_ddiv+0x28c>
 8001700:	46bc      	mov	ip, r7
 8001702:	1e83      	subs	r3, r0, #2
 8001704:	4698      	mov	r8, r3
 8001706:	4461      	add	r1, ip
 8001708:	e69a      	b.n	8001440 <__aeabi_ddiv+0x28c>
 800170a:	000a      	movs	r2, r1
 800170c:	4284      	cmp	r4, r0
 800170e:	d000      	beq.n	8001712 <__aeabi_ddiv+0x55e>
 8001710:	e72e      	b.n	8001570 <__aeabi_ddiv+0x3bc>
 8001712:	454b      	cmp	r3, r9
 8001714:	d000      	beq.n	8001718 <__aeabi_ddiv+0x564>
 8001716:	e72b      	b.n	8001570 <__aeabi_ddiv+0x3bc>
 8001718:	0035      	movs	r5, r6
 800171a:	e72c      	b.n	8001576 <__aeabi_ddiv+0x3c2>
 800171c:	4b2a      	ldr	r3, [pc, #168]	@ (80017c8 <__aeabi_ddiv+0x614>)
 800171e:	4a2f      	ldr	r2, [pc, #188]	@ (80017dc <__aeabi_ddiv+0x628>)
 8001720:	4453      	add	r3, sl
 8001722:	4592      	cmp	sl, r2
 8001724:	db43      	blt.n	80017ae <__aeabi_ddiv+0x5fa>
 8001726:	2201      	movs	r2, #1
 8001728:	2100      	movs	r1, #0
 800172a:	4493      	add	fp, r2
 800172c:	e72c      	b.n	8001588 <__aeabi_ddiv+0x3d4>
 800172e:	42ac      	cmp	r4, r5
 8001730:	d800      	bhi.n	8001734 <__aeabi_ddiv+0x580>
 8001732:	e6d7      	b.n	80014e4 <__aeabi_ddiv+0x330>
 8001734:	2302      	movs	r3, #2
 8001736:	425b      	negs	r3, r3
 8001738:	469c      	mov	ip, r3
 800173a:	9900      	ldr	r1, [sp, #0]
 800173c:	444d      	add	r5, r9
 800173e:	454d      	cmp	r5, r9
 8001740:	419b      	sbcs	r3, r3
 8001742:	44e3      	add	fp, ip
 8001744:	468c      	mov	ip, r1
 8001746:	425b      	negs	r3, r3
 8001748:	4463      	add	r3, ip
 800174a:	18c0      	adds	r0, r0, r3
 800174c:	e6cc      	b.n	80014e8 <__aeabi_ddiv+0x334>
 800174e:	201f      	movs	r0, #31
 8001750:	4240      	negs	r0, r0
 8001752:	1ac3      	subs	r3, r0, r3
 8001754:	4658      	mov	r0, fp
 8001756:	40d8      	lsrs	r0, r3
 8001758:	2920      	cmp	r1, #32
 800175a:	d004      	beq.n	8001766 <__aeabi_ddiv+0x5b2>
 800175c:	4659      	mov	r1, fp
 800175e:	4b20      	ldr	r3, [pc, #128]	@ (80017e0 <__aeabi_ddiv+0x62c>)
 8001760:	4453      	add	r3, sl
 8001762:	4099      	lsls	r1, r3
 8001764:	430a      	orrs	r2, r1
 8001766:	1e53      	subs	r3, r2, #1
 8001768:	419a      	sbcs	r2, r3
 800176a:	2307      	movs	r3, #7
 800176c:	0019      	movs	r1, r3
 800176e:	4302      	orrs	r2, r0
 8001770:	2400      	movs	r4, #0
 8001772:	4011      	ands	r1, r2
 8001774:	4213      	tst	r3, r2
 8001776:	d009      	beq.n	800178c <__aeabi_ddiv+0x5d8>
 8001778:	3308      	adds	r3, #8
 800177a:	4013      	ands	r3, r2
 800177c:	2b04      	cmp	r3, #4
 800177e:	d01d      	beq.n	80017bc <__aeabi_ddiv+0x608>
 8001780:	1d13      	adds	r3, r2, #4
 8001782:	4293      	cmp	r3, r2
 8001784:	4189      	sbcs	r1, r1
 8001786:	001a      	movs	r2, r3
 8001788:	4249      	negs	r1, r1
 800178a:	0749      	lsls	r1, r1, #29
 800178c:	08d2      	lsrs	r2, r2, #3
 800178e:	430a      	orrs	r2, r1
 8001790:	4690      	mov	r8, r2
 8001792:	2300      	movs	r3, #0
 8001794:	e57a      	b.n	800128c <__aeabi_ddiv+0xd8>
 8001796:	4649      	mov	r1, r9
 8001798:	9f00      	ldr	r7, [sp, #0]
 800179a:	004d      	lsls	r5, r1, #1
 800179c:	454d      	cmp	r5, r9
 800179e:	4189      	sbcs	r1, r1
 80017a0:	46bc      	mov	ip, r7
 80017a2:	4249      	negs	r1, r1
 80017a4:	4461      	add	r1, ip
 80017a6:	46a9      	mov	r9, r5
 80017a8:	3a02      	subs	r2, #2
 80017aa:	1864      	adds	r4, r4, r1
 80017ac:	e7ae      	b.n	800170c <__aeabi_ddiv+0x558>
 80017ae:	2201      	movs	r2, #1
 80017b0:	4252      	negs	r2, r2
 80017b2:	e746      	b.n	8001642 <__aeabi_ddiv+0x48e>
 80017b4:	4599      	cmp	r9, r3
 80017b6:	d3ee      	bcc.n	8001796 <__aeabi_ddiv+0x5e2>
 80017b8:	000a      	movs	r2, r1
 80017ba:	e7aa      	b.n	8001712 <__aeabi_ddiv+0x55e>
 80017bc:	2100      	movs	r1, #0
 80017be:	e7e5      	b.n	800178c <__aeabi_ddiv+0x5d8>
 80017c0:	0759      	lsls	r1, r3, #29
 80017c2:	025b      	lsls	r3, r3, #9
 80017c4:	0b1c      	lsrs	r4, r3, #12
 80017c6:	e7e1      	b.n	800178c <__aeabi_ddiv+0x5d8>
 80017c8:	000003ff 	.word	0x000003ff
 80017cc:	feffffff 	.word	0xfeffffff
 80017d0:	000007fe 	.word	0x000007fe
 80017d4:	000007ff 	.word	0x000007ff
 80017d8:	0000041e 	.word	0x0000041e
 80017dc:	fffffc02 	.word	0xfffffc02
 80017e0:	0000043e 	.word	0x0000043e

080017e4 <__eqdf2>:
 80017e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017e6:	4657      	mov	r7, sl
 80017e8:	46de      	mov	lr, fp
 80017ea:	464e      	mov	r6, r9
 80017ec:	4645      	mov	r5, r8
 80017ee:	b5e0      	push	{r5, r6, r7, lr}
 80017f0:	000d      	movs	r5, r1
 80017f2:	0004      	movs	r4, r0
 80017f4:	0fe8      	lsrs	r0, r5, #31
 80017f6:	4683      	mov	fp, r0
 80017f8:	0309      	lsls	r1, r1, #12
 80017fa:	0fd8      	lsrs	r0, r3, #31
 80017fc:	0b09      	lsrs	r1, r1, #12
 80017fe:	4682      	mov	sl, r0
 8001800:	4819      	ldr	r0, [pc, #100]	@ (8001868 <__eqdf2+0x84>)
 8001802:	468c      	mov	ip, r1
 8001804:	031f      	lsls	r7, r3, #12
 8001806:	0069      	lsls	r1, r5, #1
 8001808:	005e      	lsls	r6, r3, #1
 800180a:	0d49      	lsrs	r1, r1, #21
 800180c:	0b3f      	lsrs	r7, r7, #12
 800180e:	0d76      	lsrs	r6, r6, #21
 8001810:	4281      	cmp	r1, r0
 8001812:	d018      	beq.n	8001846 <__eqdf2+0x62>
 8001814:	4286      	cmp	r6, r0
 8001816:	d00f      	beq.n	8001838 <__eqdf2+0x54>
 8001818:	2001      	movs	r0, #1
 800181a:	42b1      	cmp	r1, r6
 800181c:	d10d      	bne.n	800183a <__eqdf2+0x56>
 800181e:	45bc      	cmp	ip, r7
 8001820:	d10b      	bne.n	800183a <__eqdf2+0x56>
 8001822:	4294      	cmp	r4, r2
 8001824:	d109      	bne.n	800183a <__eqdf2+0x56>
 8001826:	45d3      	cmp	fp, sl
 8001828:	d01c      	beq.n	8001864 <__eqdf2+0x80>
 800182a:	2900      	cmp	r1, #0
 800182c:	d105      	bne.n	800183a <__eqdf2+0x56>
 800182e:	4660      	mov	r0, ip
 8001830:	4320      	orrs	r0, r4
 8001832:	1e43      	subs	r3, r0, #1
 8001834:	4198      	sbcs	r0, r3
 8001836:	e000      	b.n	800183a <__eqdf2+0x56>
 8001838:	2001      	movs	r0, #1
 800183a:	bcf0      	pop	{r4, r5, r6, r7}
 800183c:	46bb      	mov	fp, r7
 800183e:	46b2      	mov	sl, r6
 8001840:	46a9      	mov	r9, r5
 8001842:	46a0      	mov	r8, r4
 8001844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001846:	2001      	movs	r0, #1
 8001848:	428e      	cmp	r6, r1
 800184a:	d1f6      	bne.n	800183a <__eqdf2+0x56>
 800184c:	4661      	mov	r1, ip
 800184e:	4339      	orrs	r1, r7
 8001850:	000f      	movs	r7, r1
 8001852:	4317      	orrs	r7, r2
 8001854:	4327      	orrs	r7, r4
 8001856:	d1f0      	bne.n	800183a <__eqdf2+0x56>
 8001858:	465b      	mov	r3, fp
 800185a:	4652      	mov	r2, sl
 800185c:	1a98      	subs	r0, r3, r2
 800185e:	1e43      	subs	r3, r0, #1
 8001860:	4198      	sbcs	r0, r3
 8001862:	e7ea      	b.n	800183a <__eqdf2+0x56>
 8001864:	2000      	movs	r0, #0
 8001866:	e7e8      	b.n	800183a <__eqdf2+0x56>
 8001868:	000007ff 	.word	0x000007ff

0800186c <__gedf2>:
 800186c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800186e:	4657      	mov	r7, sl
 8001870:	464e      	mov	r6, r9
 8001872:	4645      	mov	r5, r8
 8001874:	46de      	mov	lr, fp
 8001876:	b5e0      	push	{r5, r6, r7, lr}
 8001878:	000d      	movs	r5, r1
 800187a:	030e      	lsls	r6, r1, #12
 800187c:	0049      	lsls	r1, r1, #1
 800187e:	0d49      	lsrs	r1, r1, #21
 8001880:	468a      	mov	sl, r1
 8001882:	0fdf      	lsrs	r7, r3, #31
 8001884:	0fe9      	lsrs	r1, r5, #31
 8001886:	46bc      	mov	ip, r7
 8001888:	b083      	sub	sp, #12
 800188a:	4f2f      	ldr	r7, [pc, #188]	@ (8001948 <__gedf2+0xdc>)
 800188c:	0004      	movs	r4, r0
 800188e:	4680      	mov	r8, r0
 8001890:	9101      	str	r1, [sp, #4]
 8001892:	0058      	lsls	r0, r3, #1
 8001894:	0319      	lsls	r1, r3, #12
 8001896:	4691      	mov	r9, r2
 8001898:	0b36      	lsrs	r6, r6, #12
 800189a:	0b09      	lsrs	r1, r1, #12
 800189c:	0d40      	lsrs	r0, r0, #21
 800189e:	45ba      	cmp	sl, r7
 80018a0:	d01d      	beq.n	80018de <__gedf2+0x72>
 80018a2:	42b8      	cmp	r0, r7
 80018a4:	d00d      	beq.n	80018c2 <__gedf2+0x56>
 80018a6:	4657      	mov	r7, sl
 80018a8:	2f00      	cmp	r7, #0
 80018aa:	d12a      	bne.n	8001902 <__gedf2+0x96>
 80018ac:	4334      	orrs	r4, r6
 80018ae:	2800      	cmp	r0, #0
 80018b0:	d124      	bne.n	80018fc <__gedf2+0x90>
 80018b2:	430a      	orrs	r2, r1
 80018b4:	d036      	beq.n	8001924 <__gedf2+0xb8>
 80018b6:	2c00      	cmp	r4, #0
 80018b8:	d141      	bne.n	800193e <__gedf2+0xd2>
 80018ba:	4663      	mov	r3, ip
 80018bc:	0058      	lsls	r0, r3, #1
 80018be:	3801      	subs	r0, #1
 80018c0:	e015      	b.n	80018ee <__gedf2+0x82>
 80018c2:	4311      	orrs	r1, r2
 80018c4:	d138      	bne.n	8001938 <__gedf2+0xcc>
 80018c6:	4653      	mov	r3, sl
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d101      	bne.n	80018d0 <__gedf2+0x64>
 80018cc:	4326      	orrs	r6, r4
 80018ce:	d0f4      	beq.n	80018ba <__gedf2+0x4e>
 80018d0:	9b01      	ldr	r3, [sp, #4]
 80018d2:	4563      	cmp	r3, ip
 80018d4:	d107      	bne.n	80018e6 <__gedf2+0x7a>
 80018d6:	9b01      	ldr	r3, [sp, #4]
 80018d8:	0058      	lsls	r0, r3, #1
 80018da:	3801      	subs	r0, #1
 80018dc:	e007      	b.n	80018ee <__gedf2+0x82>
 80018de:	4326      	orrs	r6, r4
 80018e0:	d12a      	bne.n	8001938 <__gedf2+0xcc>
 80018e2:	4550      	cmp	r0, sl
 80018e4:	d021      	beq.n	800192a <__gedf2+0xbe>
 80018e6:	2001      	movs	r0, #1
 80018e8:	9b01      	ldr	r3, [sp, #4]
 80018ea:	425f      	negs	r7, r3
 80018ec:	4338      	orrs	r0, r7
 80018ee:	b003      	add	sp, #12
 80018f0:	bcf0      	pop	{r4, r5, r6, r7}
 80018f2:	46bb      	mov	fp, r7
 80018f4:	46b2      	mov	sl, r6
 80018f6:	46a9      	mov	r9, r5
 80018f8:	46a0      	mov	r8, r4
 80018fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018fc:	2c00      	cmp	r4, #0
 80018fe:	d0dc      	beq.n	80018ba <__gedf2+0x4e>
 8001900:	e7e6      	b.n	80018d0 <__gedf2+0x64>
 8001902:	2800      	cmp	r0, #0
 8001904:	d0ef      	beq.n	80018e6 <__gedf2+0x7a>
 8001906:	9b01      	ldr	r3, [sp, #4]
 8001908:	4563      	cmp	r3, ip
 800190a:	d1ec      	bne.n	80018e6 <__gedf2+0x7a>
 800190c:	4582      	cmp	sl, r0
 800190e:	dcea      	bgt.n	80018e6 <__gedf2+0x7a>
 8001910:	dbe1      	blt.n	80018d6 <__gedf2+0x6a>
 8001912:	428e      	cmp	r6, r1
 8001914:	d8e7      	bhi.n	80018e6 <__gedf2+0x7a>
 8001916:	d1de      	bne.n	80018d6 <__gedf2+0x6a>
 8001918:	45c8      	cmp	r8, r9
 800191a:	d8e4      	bhi.n	80018e6 <__gedf2+0x7a>
 800191c:	2000      	movs	r0, #0
 800191e:	45c8      	cmp	r8, r9
 8001920:	d2e5      	bcs.n	80018ee <__gedf2+0x82>
 8001922:	e7d8      	b.n	80018d6 <__gedf2+0x6a>
 8001924:	2c00      	cmp	r4, #0
 8001926:	d0e2      	beq.n	80018ee <__gedf2+0x82>
 8001928:	e7dd      	b.n	80018e6 <__gedf2+0x7a>
 800192a:	4311      	orrs	r1, r2
 800192c:	d104      	bne.n	8001938 <__gedf2+0xcc>
 800192e:	9b01      	ldr	r3, [sp, #4]
 8001930:	4563      	cmp	r3, ip
 8001932:	d1d8      	bne.n	80018e6 <__gedf2+0x7a>
 8001934:	2000      	movs	r0, #0
 8001936:	e7da      	b.n	80018ee <__gedf2+0x82>
 8001938:	2002      	movs	r0, #2
 800193a:	4240      	negs	r0, r0
 800193c:	e7d7      	b.n	80018ee <__gedf2+0x82>
 800193e:	9b01      	ldr	r3, [sp, #4]
 8001940:	4563      	cmp	r3, ip
 8001942:	d0e6      	beq.n	8001912 <__gedf2+0xa6>
 8001944:	e7cf      	b.n	80018e6 <__gedf2+0x7a>
 8001946:	46c0      	nop			@ (mov r8, r8)
 8001948:	000007ff 	.word	0x000007ff

0800194c <__ledf2>:
 800194c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800194e:	4657      	mov	r7, sl
 8001950:	464e      	mov	r6, r9
 8001952:	4645      	mov	r5, r8
 8001954:	46de      	mov	lr, fp
 8001956:	b5e0      	push	{r5, r6, r7, lr}
 8001958:	000d      	movs	r5, r1
 800195a:	030e      	lsls	r6, r1, #12
 800195c:	0049      	lsls	r1, r1, #1
 800195e:	0d49      	lsrs	r1, r1, #21
 8001960:	468a      	mov	sl, r1
 8001962:	0fdf      	lsrs	r7, r3, #31
 8001964:	0fe9      	lsrs	r1, r5, #31
 8001966:	46bc      	mov	ip, r7
 8001968:	b083      	sub	sp, #12
 800196a:	4f2e      	ldr	r7, [pc, #184]	@ (8001a24 <__ledf2+0xd8>)
 800196c:	0004      	movs	r4, r0
 800196e:	4680      	mov	r8, r0
 8001970:	9101      	str	r1, [sp, #4]
 8001972:	0058      	lsls	r0, r3, #1
 8001974:	0319      	lsls	r1, r3, #12
 8001976:	4691      	mov	r9, r2
 8001978:	0b36      	lsrs	r6, r6, #12
 800197a:	0b09      	lsrs	r1, r1, #12
 800197c:	0d40      	lsrs	r0, r0, #21
 800197e:	45ba      	cmp	sl, r7
 8001980:	d01e      	beq.n	80019c0 <__ledf2+0x74>
 8001982:	42b8      	cmp	r0, r7
 8001984:	d00d      	beq.n	80019a2 <__ledf2+0x56>
 8001986:	4657      	mov	r7, sl
 8001988:	2f00      	cmp	r7, #0
 800198a:	d127      	bne.n	80019dc <__ledf2+0x90>
 800198c:	4334      	orrs	r4, r6
 800198e:	2800      	cmp	r0, #0
 8001990:	d133      	bne.n	80019fa <__ledf2+0xae>
 8001992:	430a      	orrs	r2, r1
 8001994:	d034      	beq.n	8001a00 <__ledf2+0xb4>
 8001996:	2c00      	cmp	r4, #0
 8001998:	d140      	bne.n	8001a1c <__ledf2+0xd0>
 800199a:	4663      	mov	r3, ip
 800199c:	0058      	lsls	r0, r3, #1
 800199e:	3801      	subs	r0, #1
 80019a0:	e015      	b.n	80019ce <__ledf2+0x82>
 80019a2:	4311      	orrs	r1, r2
 80019a4:	d112      	bne.n	80019cc <__ledf2+0x80>
 80019a6:	4653      	mov	r3, sl
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d101      	bne.n	80019b0 <__ledf2+0x64>
 80019ac:	4326      	orrs	r6, r4
 80019ae:	d0f4      	beq.n	800199a <__ledf2+0x4e>
 80019b0:	9b01      	ldr	r3, [sp, #4]
 80019b2:	4563      	cmp	r3, ip
 80019b4:	d01d      	beq.n	80019f2 <__ledf2+0xa6>
 80019b6:	2001      	movs	r0, #1
 80019b8:	9b01      	ldr	r3, [sp, #4]
 80019ba:	425f      	negs	r7, r3
 80019bc:	4338      	orrs	r0, r7
 80019be:	e006      	b.n	80019ce <__ledf2+0x82>
 80019c0:	4326      	orrs	r6, r4
 80019c2:	d103      	bne.n	80019cc <__ledf2+0x80>
 80019c4:	4550      	cmp	r0, sl
 80019c6:	d1f6      	bne.n	80019b6 <__ledf2+0x6a>
 80019c8:	4311      	orrs	r1, r2
 80019ca:	d01c      	beq.n	8001a06 <__ledf2+0xba>
 80019cc:	2002      	movs	r0, #2
 80019ce:	b003      	add	sp, #12
 80019d0:	bcf0      	pop	{r4, r5, r6, r7}
 80019d2:	46bb      	mov	fp, r7
 80019d4:	46b2      	mov	sl, r6
 80019d6:	46a9      	mov	r9, r5
 80019d8:	46a0      	mov	r8, r4
 80019da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019dc:	2800      	cmp	r0, #0
 80019de:	d0ea      	beq.n	80019b6 <__ledf2+0x6a>
 80019e0:	9b01      	ldr	r3, [sp, #4]
 80019e2:	4563      	cmp	r3, ip
 80019e4:	d1e7      	bne.n	80019b6 <__ledf2+0x6a>
 80019e6:	4582      	cmp	sl, r0
 80019e8:	dce5      	bgt.n	80019b6 <__ledf2+0x6a>
 80019ea:	db02      	blt.n	80019f2 <__ledf2+0xa6>
 80019ec:	428e      	cmp	r6, r1
 80019ee:	d8e2      	bhi.n	80019b6 <__ledf2+0x6a>
 80019f0:	d00e      	beq.n	8001a10 <__ledf2+0xc4>
 80019f2:	9b01      	ldr	r3, [sp, #4]
 80019f4:	0058      	lsls	r0, r3, #1
 80019f6:	3801      	subs	r0, #1
 80019f8:	e7e9      	b.n	80019ce <__ledf2+0x82>
 80019fa:	2c00      	cmp	r4, #0
 80019fc:	d0cd      	beq.n	800199a <__ledf2+0x4e>
 80019fe:	e7d7      	b.n	80019b0 <__ledf2+0x64>
 8001a00:	2c00      	cmp	r4, #0
 8001a02:	d0e4      	beq.n	80019ce <__ledf2+0x82>
 8001a04:	e7d7      	b.n	80019b6 <__ledf2+0x6a>
 8001a06:	9b01      	ldr	r3, [sp, #4]
 8001a08:	2000      	movs	r0, #0
 8001a0a:	4563      	cmp	r3, ip
 8001a0c:	d0df      	beq.n	80019ce <__ledf2+0x82>
 8001a0e:	e7d2      	b.n	80019b6 <__ledf2+0x6a>
 8001a10:	45c8      	cmp	r8, r9
 8001a12:	d8d0      	bhi.n	80019b6 <__ledf2+0x6a>
 8001a14:	2000      	movs	r0, #0
 8001a16:	45c8      	cmp	r8, r9
 8001a18:	d2d9      	bcs.n	80019ce <__ledf2+0x82>
 8001a1a:	e7ea      	b.n	80019f2 <__ledf2+0xa6>
 8001a1c:	9b01      	ldr	r3, [sp, #4]
 8001a1e:	4563      	cmp	r3, ip
 8001a20:	d0e4      	beq.n	80019ec <__ledf2+0xa0>
 8001a22:	e7c8      	b.n	80019b6 <__ledf2+0x6a>
 8001a24:	000007ff 	.word	0x000007ff

08001a28 <__aeabi_dmul>:
 8001a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a2a:	4657      	mov	r7, sl
 8001a2c:	464e      	mov	r6, r9
 8001a2e:	46de      	mov	lr, fp
 8001a30:	4645      	mov	r5, r8
 8001a32:	b5e0      	push	{r5, r6, r7, lr}
 8001a34:	001f      	movs	r7, r3
 8001a36:	030b      	lsls	r3, r1, #12
 8001a38:	0b1b      	lsrs	r3, r3, #12
 8001a3a:	0016      	movs	r6, r2
 8001a3c:	469a      	mov	sl, r3
 8001a3e:	0fca      	lsrs	r2, r1, #31
 8001a40:	004b      	lsls	r3, r1, #1
 8001a42:	0004      	movs	r4, r0
 8001a44:	4691      	mov	r9, r2
 8001a46:	b085      	sub	sp, #20
 8001a48:	0d5b      	lsrs	r3, r3, #21
 8001a4a:	d100      	bne.n	8001a4e <__aeabi_dmul+0x26>
 8001a4c:	e1cf      	b.n	8001dee <__aeabi_dmul+0x3c6>
 8001a4e:	4acd      	ldr	r2, [pc, #820]	@ (8001d84 <__aeabi_dmul+0x35c>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d055      	beq.n	8001b00 <__aeabi_dmul+0xd8>
 8001a54:	4651      	mov	r1, sl
 8001a56:	0f42      	lsrs	r2, r0, #29
 8001a58:	00c9      	lsls	r1, r1, #3
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	2180      	movs	r1, #128	@ 0x80
 8001a5e:	0409      	lsls	r1, r1, #16
 8001a60:	4311      	orrs	r1, r2
 8001a62:	00c2      	lsls	r2, r0, #3
 8001a64:	4690      	mov	r8, r2
 8001a66:	4ac8      	ldr	r2, [pc, #800]	@ (8001d88 <__aeabi_dmul+0x360>)
 8001a68:	468a      	mov	sl, r1
 8001a6a:	4693      	mov	fp, r2
 8001a6c:	449b      	add	fp, r3
 8001a6e:	2300      	movs	r3, #0
 8001a70:	2500      	movs	r5, #0
 8001a72:	9302      	str	r3, [sp, #8]
 8001a74:	033c      	lsls	r4, r7, #12
 8001a76:	007b      	lsls	r3, r7, #1
 8001a78:	0ffa      	lsrs	r2, r7, #31
 8001a7a:	9601      	str	r6, [sp, #4]
 8001a7c:	0b24      	lsrs	r4, r4, #12
 8001a7e:	0d5b      	lsrs	r3, r3, #21
 8001a80:	9200      	str	r2, [sp, #0]
 8001a82:	d100      	bne.n	8001a86 <__aeabi_dmul+0x5e>
 8001a84:	e188      	b.n	8001d98 <__aeabi_dmul+0x370>
 8001a86:	4abf      	ldr	r2, [pc, #764]	@ (8001d84 <__aeabi_dmul+0x35c>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d100      	bne.n	8001a8e <__aeabi_dmul+0x66>
 8001a8c:	e092      	b.n	8001bb4 <__aeabi_dmul+0x18c>
 8001a8e:	4abe      	ldr	r2, [pc, #760]	@ (8001d88 <__aeabi_dmul+0x360>)
 8001a90:	4694      	mov	ip, r2
 8001a92:	4463      	add	r3, ip
 8001a94:	449b      	add	fp, r3
 8001a96:	2d0a      	cmp	r5, #10
 8001a98:	dc42      	bgt.n	8001b20 <__aeabi_dmul+0xf8>
 8001a9a:	00e4      	lsls	r4, r4, #3
 8001a9c:	0f73      	lsrs	r3, r6, #29
 8001a9e:	4323      	orrs	r3, r4
 8001aa0:	2480      	movs	r4, #128	@ 0x80
 8001aa2:	4649      	mov	r1, r9
 8001aa4:	0424      	lsls	r4, r4, #16
 8001aa6:	431c      	orrs	r4, r3
 8001aa8:	00f3      	lsls	r3, r6, #3
 8001aaa:	9301      	str	r3, [sp, #4]
 8001aac:	9b00      	ldr	r3, [sp, #0]
 8001aae:	2000      	movs	r0, #0
 8001ab0:	4059      	eors	r1, r3
 8001ab2:	b2cb      	uxtb	r3, r1
 8001ab4:	9303      	str	r3, [sp, #12]
 8001ab6:	2d02      	cmp	r5, #2
 8001ab8:	dc00      	bgt.n	8001abc <__aeabi_dmul+0x94>
 8001aba:	e094      	b.n	8001be6 <__aeabi_dmul+0x1be>
 8001abc:	2301      	movs	r3, #1
 8001abe:	40ab      	lsls	r3, r5
 8001ac0:	001d      	movs	r5, r3
 8001ac2:	23a6      	movs	r3, #166	@ 0xa6
 8001ac4:	002a      	movs	r2, r5
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	401a      	ands	r2, r3
 8001aca:	421d      	tst	r5, r3
 8001acc:	d000      	beq.n	8001ad0 <__aeabi_dmul+0xa8>
 8001ace:	e229      	b.n	8001f24 <__aeabi_dmul+0x4fc>
 8001ad0:	2390      	movs	r3, #144	@ 0x90
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	421d      	tst	r5, r3
 8001ad6:	d100      	bne.n	8001ada <__aeabi_dmul+0xb2>
 8001ad8:	e24d      	b.n	8001f76 <__aeabi_dmul+0x54e>
 8001ada:	2300      	movs	r3, #0
 8001adc:	2480      	movs	r4, #128	@ 0x80
 8001ade:	4699      	mov	r9, r3
 8001ae0:	0324      	lsls	r4, r4, #12
 8001ae2:	4ba8      	ldr	r3, [pc, #672]	@ (8001d84 <__aeabi_dmul+0x35c>)
 8001ae4:	0010      	movs	r0, r2
 8001ae6:	464a      	mov	r2, r9
 8001ae8:	051b      	lsls	r3, r3, #20
 8001aea:	4323      	orrs	r3, r4
 8001aec:	07d2      	lsls	r2, r2, #31
 8001aee:	4313      	orrs	r3, r2
 8001af0:	0019      	movs	r1, r3
 8001af2:	b005      	add	sp, #20
 8001af4:	bcf0      	pop	{r4, r5, r6, r7}
 8001af6:	46bb      	mov	fp, r7
 8001af8:	46b2      	mov	sl, r6
 8001afa:	46a9      	mov	r9, r5
 8001afc:	46a0      	mov	r8, r4
 8001afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b00:	4652      	mov	r2, sl
 8001b02:	4302      	orrs	r2, r0
 8001b04:	4690      	mov	r8, r2
 8001b06:	d000      	beq.n	8001b0a <__aeabi_dmul+0xe2>
 8001b08:	e1ac      	b.n	8001e64 <__aeabi_dmul+0x43c>
 8001b0a:	469b      	mov	fp, r3
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	4692      	mov	sl, r2
 8001b10:	2508      	movs	r5, #8
 8001b12:	9302      	str	r3, [sp, #8]
 8001b14:	e7ae      	b.n	8001a74 <__aeabi_dmul+0x4c>
 8001b16:	9b00      	ldr	r3, [sp, #0]
 8001b18:	46a2      	mov	sl, r4
 8001b1a:	4699      	mov	r9, r3
 8001b1c:	9b01      	ldr	r3, [sp, #4]
 8001b1e:	4698      	mov	r8, r3
 8001b20:	9b02      	ldr	r3, [sp, #8]
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d100      	bne.n	8001b28 <__aeabi_dmul+0x100>
 8001b26:	e1ca      	b.n	8001ebe <__aeabi_dmul+0x496>
 8001b28:	2b03      	cmp	r3, #3
 8001b2a:	d100      	bne.n	8001b2e <__aeabi_dmul+0x106>
 8001b2c:	e192      	b.n	8001e54 <__aeabi_dmul+0x42c>
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d110      	bne.n	8001b54 <__aeabi_dmul+0x12c>
 8001b32:	2300      	movs	r3, #0
 8001b34:	2400      	movs	r4, #0
 8001b36:	2200      	movs	r2, #0
 8001b38:	e7d4      	b.n	8001ae4 <__aeabi_dmul+0xbc>
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	087b      	lsrs	r3, r7, #1
 8001b3e:	403a      	ands	r2, r7
 8001b40:	4313      	orrs	r3, r2
 8001b42:	4652      	mov	r2, sl
 8001b44:	07d2      	lsls	r2, r2, #31
 8001b46:	4313      	orrs	r3, r2
 8001b48:	4698      	mov	r8, r3
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	085b      	lsrs	r3, r3, #1
 8001b4e:	469a      	mov	sl, r3
 8001b50:	9b03      	ldr	r3, [sp, #12]
 8001b52:	4699      	mov	r9, r3
 8001b54:	465b      	mov	r3, fp
 8001b56:	1c58      	adds	r0, r3, #1
 8001b58:	2380      	movs	r3, #128	@ 0x80
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	445b      	add	r3, fp
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	dc00      	bgt.n	8001b64 <__aeabi_dmul+0x13c>
 8001b62:	e1b1      	b.n	8001ec8 <__aeabi_dmul+0x4a0>
 8001b64:	4642      	mov	r2, r8
 8001b66:	0752      	lsls	r2, r2, #29
 8001b68:	d00b      	beq.n	8001b82 <__aeabi_dmul+0x15a>
 8001b6a:	220f      	movs	r2, #15
 8001b6c:	4641      	mov	r1, r8
 8001b6e:	400a      	ands	r2, r1
 8001b70:	2a04      	cmp	r2, #4
 8001b72:	d006      	beq.n	8001b82 <__aeabi_dmul+0x15a>
 8001b74:	4642      	mov	r2, r8
 8001b76:	1d11      	adds	r1, r2, #4
 8001b78:	4541      	cmp	r1, r8
 8001b7a:	4192      	sbcs	r2, r2
 8001b7c:	4688      	mov	r8, r1
 8001b7e:	4252      	negs	r2, r2
 8001b80:	4492      	add	sl, r2
 8001b82:	4652      	mov	r2, sl
 8001b84:	01d2      	lsls	r2, r2, #7
 8001b86:	d506      	bpl.n	8001b96 <__aeabi_dmul+0x16e>
 8001b88:	4652      	mov	r2, sl
 8001b8a:	4b80      	ldr	r3, [pc, #512]	@ (8001d8c <__aeabi_dmul+0x364>)
 8001b8c:	401a      	ands	r2, r3
 8001b8e:	2380      	movs	r3, #128	@ 0x80
 8001b90:	4692      	mov	sl, r2
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	18c3      	adds	r3, r0, r3
 8001b96:	4a7e      	ldr	r2, [pc, #504]	@ (8001d90 <__aeabi_dmul+0x368>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	dd00      	ble.n	8001b9e <__aeabi_dmul+0x176>
 8001b9c:	e18f      	b.n	8001ebe <__aeabi_dmul+0x496>
 8001b9e:	4642      	mov	r2, r8
 8001ba0:	08d1      	lsrs	r1, r2, #3
 8001ba2:	4652      	mov	r2, sl
 8001ba4:	0752      	lsls	r2, r2, #29
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	4651      	mov	r1, sl
 8001baa:	055b      	lsls	r3, r3, #21
 8001bac:	024c      	lsls	r4, r1, #9
 8001bae:	0b24      	lsrs	r4, r4, #12
 8001bb0:	0d5b      	lsrs	r3, r3, #21
 8001bb2:	e797      	b.n	8001ae4 <__aeabi_dmul+0xbc>
 8001bb4:	4b73      	ldr	r3, [pc, #460]	@ (8001d84 <__aeabi_dmul+0x35c>)
 8001bb6:	4326      	orrs	r6, r4
 8001bb8:	469c      	mov	ip, r3
 8001bba:	44e3      	add	fp, ip
 8001bbc:	2e00      	cmp	r6, #0
 8001bbe:	d100      	bne.n	8001bc2 <__aeabi_dmul+0x19a>
 8001bc0:	e16f      	b.n	8001ea2 <__aeabi_dmul+0x47a>
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	4649      	mov	r1, r9
 8001bc6:	431d      	orrs	r5, r3
 8001bc8:	9b00      	ldr	r3, [sp, #0]
 8001bca:	4059      	eors	r1, r3
 8001bcc:	b2cb      	uxtb	r3, r1
 8001bce:	9303      	str	r3, [sp, #12]
 8001bd0:	2d0a      	cmp	r5, #10
 8001bd2:	dd00      	ble.n	8001bd6 <__aeabi_dmul+0x1ae>
 8001bd4:	e133      	b.n	8001e3e <__aeabi_dmul+0x416>
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	40ab      	lsls	r3, r5
 8001bda:	001d      	movs	r5, r3
 8001bdc:	2303      	movs	r3, #3
 8001bde:	9302      	str	r3, [sp, #8]
 8001be0:	2288      	movs	r2, #136	@ 0x88
 8001be2:	422a      	tst	r2, r5
 8001be4:	d197      	bne.n	8001b16 <__aeabi_dmul+0xee>
 8001be6:	4642      	mov	r2, r8
 8001be8:	4643      	mov	r3, r8
 8001bea:	0412      	lsls	r2, r2, #16
 8001bec:	0c12      	lsrs	r2, r2, #16
 8001bee:	0016      	movs	r6, r2
 8001bf0:	9801      	ldr	r0, [sp, #4]
 8001bf2:	0c1d      	lsrs	r5, r3, #16
 8001bf4:	0c03      	lsrs	r3, r0, #16
 8001bf6:	0400      	lsls	r0, r0, #16
 8001bf8:	0c00      	lsrs	r0, r0, #16
 8001bfa:	4346      	muls	r6, r0
 8001bfc:	46b4      	mov	ip, r6
 8001bfe:	001e      	movs	r6, r3
 8001c00:	436e      	muls	r6, r5
 8001c02:	9600      	str	r6, [sp, #0]
 8001c04:	0016      	movs	r6, r2
 8001c06:	0007      	movs	r7, r0
 8001c08:	435e      	muls	r6, r3
 8001c0a:	4661      	mov	r1, ip
 8001c0c:	46b0      	mov	r8, r6
 8001c0e:	436f      	muls	r7, r5
 8001c10:	0c0e      	lsrs	r6, r1, #16
 8001c12:	44b8      	add	r8, r7
 8001c14:	4446      	add	r6, r8
 8001c16:	42b7      	cmp	r7, r6
 8001c18:	d905      	bls.n	8001c26 <__aeabi_dmul+0x1fe>
 8001c1a:	2180      	movs	r1, #128	@ 0x80
 8001c1c:	0249      	lsls	r1, r1, #9
 8001c1e:	4688      	mov	r8, r1
 8001c20:	9f00      	ldr	r7, [sp, #0]
 8001c22:	4447      	add	r7, r8
 8001c24:	9700      	str	r7, [sp, #0]
 8001c26:	4661      	mov	r1, ip
 8001c28:	0409      	lsls	r1, r1, #16
 8001c2a:	0c09      	lsrs	r1, r1, #16
 8001c2c:	0c37      	lsrs	r7, r6, #16
 8001c2e:	0436      	lsls	r6, r6, #16
 8001c30:	468c      	mov	ip, r1
 8001c32:	0031      	movs	r1, r6
 8001c34:	4461      	add	r1, ip
 8001c36:	9101      	str	r1, [sp, #4]
 8001c38:	0011      	movs	r1, r2
 8001c3a:	0c26      	lsrs	r6, r4, #16
 8001c3c:	0424      	lsls	r4, r4, #16
 8001c3e:	0c24      	lsrs	r4, r4, #16
 8001c40:	4361      	muls	r1, r4
 8001c42:	468c      	mov	ip, r1
 8001c44:	0021      	movs	r1, r4
 8001c46:	4369      	muls	r1, r5
 8001c48:	4689      	mov	r9, r1
 8001c4a:	4661      	mov	r1, ip
 8001c4c:	0c09      	lsrs	r1, r1, #16
 8001c4e:	4688      	mov	r8, r1
 8001c50:	4372      	muls	r2, r6
 8001c52:	444a      	add	r2, r9
 8001c54:	4442      	add	r2, r8
 8001c56:	4375      	muls	r5, r6
 8001c58:	4591      	cmp	r9, r2
 8001c5a:	d903      	bls.n	8001c64 <__aeabi_dmul+0x23c>
 8001c5c:	2180      	movs	r1, #128	@ 0x80
 8001c5e:	0249      	lsls	r1, r1, #9
 8001c60:	4688      	mov	r8, r1
 8001c62:	4445      	add	r5, r8
 8001c64:	0c11      	lsrs	r1, r2, #16
 8001c66:	4688      	mov	r8, r1
 8001c68:	4661      	mov	r1, ip
 8001c6a:	0409      	lsls	r1, r1, #16
 8001c6c:	0c09      	lsrs	r1, r1, #16
 8001c6e:	468c      	mov	ip, r1
 8001c70:	0412      	lsls	r2, r2, #16
 8001c72:	4462      	add	r2, ip
 8001c74:	18b9      	adds	r1, r7, r2
 8001c76:	9102      	str	r1, [sp, #8]
 8001c78:	4651      	mov	r1, sl
 8001c7a:	0c09      	lsrs	r1, r1, #16
 8001c7c:	468c      	mov	ip, r1
 8001c7e:	4651      	mov	r1, sl
 8001c80:	040f      	lsls	r7, r1, #16
 8001c82:	0c3f      	lsrs	r7, r7, #16
 8001c84:	0039      	movs	r1, r7
 8001c86:	4341      	muls	r1, r0
 8001c88:	4445      	add	r5, r8
 8001c8a:	4688      	mov	r8, r1
 8001c8c:	4661      	mov	r1, ip
 8001c8e:	4341      	muls	r1, r0
 8001c90:	468a      	mov	sl, r1
 8001c92:	4641      	mov	r1, r8
 8001c94:	4660      	mov	r0, ip
 8001c96:	0c09      	lsrs	r1, r1, #16
 8001c98:	4689      	mov	r9, r1
 8001c9a:	4358      	muls	r0, r3
 8001c9c:	437b      	muls	r3, r7
 8001c9e:	4453      	add	r3, sl
 8001ca0:	444b      	add	r3, r9
 8001ca2:	459a      	cmp	sl, r3
 8001ca4:	d903      	bls.n	8001cae <__aeabi_dmul+0x286>
 8001ca6:	2180      	movs	r1, #128	@ 0x80
 8001ca8:	0249      	lsls	r1, r1, #9
 8001caa:	4689      	mov	r9, r1
 8001cac:	4448      	add	r0, r9
 8001cae:	0c19      	lsrs	r1, r3, #16
 8001cb0:	4689      	mov	r9, r1
 8001cb2:	4641      	mov	r1, r8
 8001cb4:	0409      	lsls	r1, r1, #16
 8001cb6:	0c09      	lsrs	r1, r1, #16
 8001cb8:	4688      	mov	r8, r1
 8001cba:	0039      	movs	r1, r7
 8001cbc:	4361      	muls	r1, r4
 8001cbe:	041b      	lsls	r3, r3, #16
 8001cc0:	4443      	add	r3, r8
 8001cc2:	4688      	mov	r8, r1
 8001cc4:	4661      	mov	r1, ip
 8001cc6:	434c      	muls	r4, r1
 8001cc8:	4371      	muls	r1, r6
 8001cca:	468c      	mov	ip, r1
 8001ccc:	4641      	mov	r1, r8
 8001cce:	4377      	muls	r7, r6
 8001cd0:	0c0e      	lsrs	r6, r1, #16
 8001cd2:	193f      	adds	r7, r7, r4
 8001cd4:	19f6      	adds	r6, r6, r7
 8001cd6:	4448      	add	r0, r9
 8001cd8:	42b4      	cmp	r4, r6
 8001cda:	d903      	bls.n	8001ce4 <__aeabi_dmul+0x2bc>
 8001cdc:	2180      	movs	r1, #128	@ 0x80
 8001cde:	0249      	lsls	r1, r1, #9
 8001ce0:	4689      	mov	r9, r1
 8001ce2:	44cc      	add	ip, r9
 8001ce4:	9902      	ldr	r1, [sp, #8]
 8001ce6:	9f00      	ldr	r7, [sp, #0]
 8001ce8:	4689      	mov	r9, r1
 8001cea:	0431      	lsls	r1, r6, #16
 8001cec:	444f      	add	r7, r9
 8001cee:	4689      	mov	r9, r1
 8001cf0:	4641      	mov	r1, r8
 8001cf2:	4297      	cmp	r7, r2
 8001cf4:	4192      	sbcs	r2, r2
 8001cf6:	040c      	lsls	r4, r1, #16
 8001cf8:	0c24      	lsrs	r4, r4, #16
 8001cfa:	444c      	add	r4, r9
 8001cfc:	18ff      	adds	r7, r7, r3
 8001cfe:	4252      	negs	r2, r2
 8001d00:	1964      	adds	r4, r4, r5
 8001d02:	18a1      	adds	r1, r4, r2
 8001d04:	429f      	cmp	r7, r3
 8001d06:	419b      	sbcs	r3, r3
 8001d08:	4688      	mov	r8, r1
 8001d0a:	4682      	mov	sl, r0
 8001d0c:	425b      	negs	r3, r3
 8001d0e:	4699      	mov	r9, r3
 8001d10:	4590      	cmp	r8, r2
 8001d12:	4192      	sbcs	r2, r2
 8001d14:	42ac      	cmp	r4, r5
 8001d16:	41a4      	sbcs	r4, r4
 8001d18:	44c2      	add	sl, r8
 8001d1a:	44d1      	add	r9, sl
 8001d1c:	4252      	negs	r2, r2
 8001d1e:	4264      	negs	r4, r4
 8001d20:	4314      	orrs	r4, r2
 8001d22:	4599      	cmp	r9, r3
 8001d24:	419b      	sbcs	r3, r3
 8001d26:	4582      	cmp	sl, r0
 8001d28:	4192      	sbcs	r2, r2
 8001d2a:	425b      	negs	r3, r3
 8001d2c:	4252      	negs	r2, r2
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	464a      	mov	r2, r9
 8001d32:	0c36      	lsrs	r6, r6, #16
 8001d34:	19a4      	adds	r4, r4, r6
 8001d36:	18e3      	adds	r3, r4, r3
 8001d38:	4463      	add	r3, ip
 8001d3a:	025b      	lsls	r3, r3, #9
 8001d3c:	0dd2      	lsrs	r2, r2, #23
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	9901      	ldr	r1, [sp, #4]
 8001d42:	4692      	mov	sl, r2
 8001d44:	027a      	lsls	r2, r7, #9
 8001d46:	430a      	orrs	r2, r1
 8001d48:	1e50      	subs	r0, r2, #1
 8001d4a:	4182      	sbcs	r2, r0
 8001d4c:	0dff      	lsrs	r7, r7, #23
 8001d4e:	4317      	orrs	r7, r2
 8001d50:	464a      	mov	r2, r9
 8001d52:	0252      	lsls	r2, r2, #9
 8001d54:	4317      	orrs	r7, r2
 8001d56:	46b8      	mov	r8, r7
 8001d58:	01db      	lsls	r3, r3, #7
 8001d5a:	d500      	bpl.n	8001d5e <__aeabi_dmul+0x336>
 8001d5c:	e6ed      	b.n	8001b3a <__aeabi_dmul+0x112>
 8001d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d94 <__aeabi_dmul+0x36c>)
 8001d60:	9a03      	ldr	r2, [sp, #12]
 8001d62:	445b      	add	r3, fp
 8001d64:	4691      	mov	r9, r2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	dc00      	bgt.n	8001d6c <__aeabi_dmul+0x344>
 8001d6a:	e0ac      	b.n	8001ec6 <__aeabi_dmul+0x49e>
 8001d6c:	003a      	movs	r2, r7
 8001d6e:	0752      	lsls	r2, r2, #29
 8001d70:	d100      	bne.n	8001d74 <__aeabi_dmul+0x34c>
 8001d72:	e710      	b.n	8001b96 <__aeabi_dmul+0x16e>
 8001d74:	220f      	movs	r2, #15
 8001d76:	4658      	mov	r0, fp
 8001d78:	403a      	ands	r2, r7
 8001d7a:	2a04      	cmp	r2, #4
 8001d7c:	d000      	beq.n	8001d80 <__aeabi_dmul+0x358>
 8001d7e:	e6f9      	b.n	8001b74 <__aeabi_dmul+0x14c>
 8001d80:	e709      	b.n	8001b96 <__aeabi_dmul+0x16e>
 8001d82:	46c0      	nop			@ (mov r8, r8)
 8001d84:	000007ff 	.word	0x000007ff
 8001d88:	fffffc01 	.word	0xfffffc01
 8001d8c:	feffffff 	.word	0xfeffffff
 8001d90:	000007fe 	.word	0x000007fe
 8001d94:	000003ff 	.word	0x000003ff
 8001d98:	0022      	movs	r2, r4
 8001d9a:	4332      	orrs	r2, r6
 8001d9c:	d06f      	beq.n	8001e7e <__aeabi_dmul+0x456>
 8001d9e:	2c00      	cmp	r4, #0
 8001da0:	d100      	bne.n	8001da4 <__aeabi_dmul+0x37c>
 8001da2:	e0c2      	b.n	8001f2a <__aeabi_dmul+0x502>
 8001da4:	0020      	movs	r0, r4
 8001da6:	f000 fe27 	bl	80029f8 <__clzsi2>
 8001daa:	0002      	movs	r2, r0
 8001dac:	0003      	movs	r3, r0
 8001dae:	3a0b      	subs	r2, #11
 8001db0:	201d      	movs	r0, #29
 8001db2:	1a82      	subs	r2, r0, r2
 8001db4:	0030      	movs	r0, r6
 8001db6:	0019      	movs	r1, r3
 8001db8:	40d0      	lsrs	r0, r2
 8001dba:	3908      	subs	r1, #8
 8001dbc:	408c      	lsls	r4, r1
 8001dbe:	0002      	movs	r2, r0
 8001dc0:	4322      	orrs	r2, r4
 8001dc2:	0034      	movs	r4, r6
 8001dc4:	408c      	lsls	r4, r1
 8001dc6:	4659      	mov	r1, fp
 8001dc8:	1acb      	subs	r3, r1, r3
 8001dca:	4986      	ldr	r1, [pc, #536]	@ (8001fe4 <__aeabi_dmul+0x5bc>)
 8001dcc:	468b      	mov	fp, r1
 8001dce:	449b      	add	fp, r3
 8001dd0:	2d0a      	cmp	r5, #10
 8001dd2:	dd00      	ble.n	8001dd6 <__aeabi_dmul+0x3ae>
 8001dd4:	e6a4      	b.n	8001b20 <__aeabi_dmul+0xf8>
 8001dd6:	4649      	mov	r1, r9
 8001dd8:	9b00      	ldr	r3, [sp, #0]
 8001dda:	9401      	str	r4, [sp, #4]
 8001ddc:	4059      	eors	r1, r3
 8001dde:	b2cb      	uxtb	r3, r1
 8001de0:	0014      	movs	r4, r2
 8001de2:	2000      	movs	r0, #0
 8001de4:	9303      	str	r3, [sp, #12]
 8001de6:	2d02      	cmp	r5, #2
 8001de8:	dd00      	ble.n	8001dec <__aeabi_dmul+0x3c4>
 8001dea:	e667      	b.n	8001abc <__aeabi_dmul+0x94>
 8001dec:	e6fb      	b.n	8001be6 <__aeabi_dmul+0x1be>
 8001dee:	4653      	mov	r3, sl
 8001df0:	4303      	orrs	r3, r0
 8001df2:	4698      	mov	r8, r3
 8001df4:	d03c      	beq.n	8001e70 <__aeabi_dmul+0x448>
 8001df6:	4653      	mov	r3, sl
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d100      	bne.n	8001dfe <__aeabi_dmul+0x3d6>
 8001dfc:	e0a3      	b.n	8001f46 <__aeabi_dmul+0x51e>
 8001dfe:	4650      	mov	r0, sl
 8001e00:	f000 fdfa 	bl	80029f8 <__clzsi2>
 8001e04:	230b      	movs	r3, #11
 8001e06:	425b      	negs	r3, r3
 8001e08:	469c      	mov	ip, r3
 8001e0a:	0002      	movs	r2, r0
 8001e0c:	4484      	add	ip, r0
 8001e0e:	0011      	movs	r1, r2
 8001e10:	4650      	mov	r0, sl
 8001e12:	3908      	subs	r1, #8
 8001e14:	4088      	lsls	r0, r1
 8001e16:	231d      	movs	r3, #29
 8001e18:	4680      	mov	r8, r0
 8001e1a:	4660      	mov	r0, ip
 8001e1c:	1a1b      	subs	r3, r3, r0
 8001e1e:	0020      	movs	r0, r4
 8001e20:	40d8      	lsrs	r0, r3
 8001e22:	0003      	movs	r3, r0
 8001e24:	4640      	mov	r0, r8
 8001e26:	4303      	orrs	r3, r0
 8001e28:	469a      	mov	sl, r3
 8001e2a:	0023      	movs	r3, r4
 8001e2c:	408b      	lsls	r3, r1
 8001e2e:	4698      	mov	r8, r3
 8001e30:	4b6c      	ldr	r3, [pc, #432]	@ (8001fe4 <__aeabi_dmul+0x5bc>)
 8001e32:	2500      	movs	r5, #0
 8001e34:	1a9b      	subs	r3, r3, r2
 8001e36:	469b      	mov	fp, r3
 8001e38:	2300      	movs	r3, #0
 8001e3a:	9302      	str	r3, [sp, #8]
 8001e3c:	e61a      	b.n	8001a74 <__aeabi_dmul+0x4c>
 8001e3e:	2d0f      	cmp	r5, #15
 8001e40:	d000      	beq.n	8001e44 <__aeabi_dmul+0x41c>
 8001e42:	e0c9      	b.n	8001fd8 <__aeabi_dmul+0x5b0>
 8001e44:	2380      	movs	r3, #128	@ 0x80
 8001e46:	4652      	mov	r2, sl
 8001e48:	031b      	lsls	r3, r3, #12
 8001e4a:	421a      	tst	r2, r3
 8001e4c:	d002      	beq.n	8001e54 <__aeabi_dmul+0x42c>
 8001e4e:	421c      	tst	r4, r3
 8001e50:	d100      	bne.n	8001e54 <__aeabi_dmul+0x42c>
 8001e52:	e092      	b.n	8001f7a <__aeabi_dmul+0x552>
 8001e54:	2480      	movs	r4, #128	@ 0x80
 8001e56:	4653      	mov	r3, sl
 8001e58:	0324      	lsls	r4, r4, #12
 8001e5a:	431c      	orrs	r4, r3
 8001e5c:	0324      	lsls	r4, r4, #12
 8001e5e:	4642      	mov	r2, r8
 8001e60:	0b24      	lsrs	r4, r4, #12
 8001e62:	e63e      	b.n	8001ae2 <__aeabi_dmul+0xba>
 8001e64:	469b      	mov	fp, r3
 8001e66:	2303      	movs	r3, #3
 8001e68:	4680      	mov	r8, r0
 8001e6a:	250c      	movs	r5, #12
 8001e6c:	9302      	str	r3, [sp, #8]
 8001e6e:	e601      	b.n	8001a74 <__aeabi_dmul+0x4c>
 8001e70:	2300      	movs	r3, #0
 8001e72:	469a      	mov	sl, r3
 8001e74:	469b      	mov	fp, r3
 8001e76:	3301      	adds	r3, #1
 8001e78:	2504      	movs	r5, #4
 8001e7a:	9302      	str	r3, [sp, #8]
 8001e7c:	e5fa      	b.n	8001a74 <__aeabi_dmul+0x4c>
 8001e7e:	2101      	movs	r1, #1
 8001e80:	430d      	orrs	r5, r1
 8001e82:	2d0a      	cmp	r5, #10
 8001e84:	dd00      	ble.n	8001e88 <__aeabi_dmul+0x460>
 8001e86:	e64b      	b.n	8001b20 <__aeabi_dmul+0xf8>
 8001e88:	4649      	mov	r1, r9
 8001e8a:	9800      	ldr	r0, [sp, #0]
 8001e8c:	4041      	eors	r1, r0
 8001e8e:	b2c9      	uxtb	r1, r1
 8001e90:	9103      	str	r1, [sp, #12]
 8001e92:	2d02      	cmp	r5, #2
 8001e94:	dc00      	bgt.n	8001e98 <__aeabi_dmul+0x470>
 8001e96:	e096      	b.n	8001fc6 <__aeabi_dmul+0x59e>
 8001e98:	2300      	movs	r3, #0
 8001e9a:	2400      	movs	r4, #0
 8001e9c:	2001      	movs	r0, #1
 8001e9e:	9301      	str	r3, [sp, #4]
 8001ea0:	e60c      	b.n	8001abc <__aeabi_dmul+0x94>
 8001ea2:	4649      	mov	r1, r9
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	9a00      	ldr	r2, [sp, #0]
 8001ea8:	432b      	orrs	r3, r5
 8001eaa:	4051      	eors	r1, r2
 8001eac:	b2ca      	uxtb	r2, r1
 8001eae:	9203      	str	r2, [sp, #12]
 8001eb0:	2b0a      	cmp	r3, #10
 8001eb2:	dd00      	ble.n	8001eb6 <__aeabi_dmul+0x48e>
 8001eb4:	e634      	b.n	8001b20 <__aeabi_dmul+0xf8>
 8001eb6:	2d00      	cmp	r5, #0
 8001eb8:	d157      	bne.n	8001f6a <__aeabi_dmul+0x542>
 8001eba:	9b03      	ldr	r3, [sp, #12]
 8001ebc:	4699      	mov	r9, r3
 8001ebe:	2400      	movs	r4, #0
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	4b49      	ldr	r3, [pc, #292]	@ (8001fe8 <__aeabi_dmul+0x5c0>)
 8001ec4:	e60e      	b.n	8001ae4 <__aeabi_dmul+0xbc>
 8001ec6:	4658      	mov	r0, fp
 8001ec8:	2101      	movs	r1, #1
 8001eca:	1ac9      	subs	r1, r1, r3
 8001ecc:	2938      	cmp	r1, #56	@ 0x38
 8001ece:	dd00      	ble.n	8001ed2 <__aeabi_dmul+0x4aa>
 8001ed0:	e62f      	b.n	8001b32 <__aeabi_dmul+0x10a>
 8001ed2:	291f      	cmp	r1, #31
 8001ed4:	dd56      	ble.n	8001f84 <__aeabi_dmul+0x55c>
 8001ed6:	221f      	movs	r2, #31
 8001ed8:	4654      	mov	r4, sl
 8001eda:	4252      	negs	r2, r2
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	40dc      	lsrs	r4, r3
 8001ee0:	2920      	cmp	r1, #32
 8001ee2:	d007      	beq.n	8001ef4 <__aeabi_dmul+0x4cc>
 8001ee4:	4b41      	ldr	r3, [pc, #260]	@ (8001fec <__aeabi_dmul+0x5c4>)
 8001ee6:	4642      	mov	r2, r8
 8001ee8:	469c      	mov	ip, r3
 8001eea:	4653      	mov	r3, sl
 8001eec:	4460      	add	r0, ip
 8001eee:	4083      	lsls	r3, r0
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	4690      	mov	r8, r2
 8001ef4:	4642      	mov	r2, r8
 8001ef6:	2107      	movs	r1, #7
 8001ef8:	1e53      	subs	r3, r2, #1
 8001efa:	419a      	sbcs	r2, r3
 8001efc:	000b      	movs	r3, r1
 8001efe:	4322      	orrs	r2, r4
 8001f00:	4013      	ands	r3, r2
 8001f02:	2400      	movs	r4, #0
 8001f04:	4211      	tst	r1, r2
 8001f06:	d009      	beq.n	8001f1c <__aeabi_dmul+0x4f4>
 8001f08:	230f      	movs	r3, #15
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b04      	cmp	r3, #4
 8001f0e:	d05d      	beq.n	8001fcc <__aeabi_dmul+0x5a4>
 8001f10:	1d11      	adds	r1, r2, #4
 8001f12:	4291      	cmp	r1, r2
 8001f14:	419b      	sbcs	r3, r3
 8001f16:	000a      	movs	r2, r1
 8001f18:	425b      	negs	r3, r3
 8001f1a:	075b      	lsls	r3, r3, #29
 8001f1c:	08d2      	lsrs	r2, r2, #3
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	2300      	movs	r3, #0
 8001f22:	e5df      	b.n	8001ae4 <__aeabi_dmul+0xbc>
 8001f24:	9b03      	ldr	r3, [sp, #12]
 8001f26:	4699      	mov	r9, r3
 8001f28:	e5fa      	b.n	8001b20 <__aeabi_dmul+0xf8>
 8001f2a:	9801      	ldr	r0, [sp, #4]
 8001f2c:	f000 fd64 	bl	80029f8 <__clzsi2>
 8001f30:	0002      	movs	r2, r0
 8001f32:	0003      	movs	r3, r0
 8001f34:	3215      	adds	r2, #21
 8001f36:	3320      	adds	r3, #32
 8001f38:	2a1c      	cmp	r2, #28
 8001f3a:	dc00      	bgt.n	8001f3e <__aeabi_dmul+0x516>
 8001f3c:	e738      	b.n	8001db0 <__aeabi_dmul+0x388>
 8001f3e:	9a01      	ldr	r2, [sp, #4]
 8001f40:	3808      	subs	r0, #8
 8001f42:	4082      	lsls	r2, r0
 8001f44:	e73f      	b.n	8001dc6 <__aeabi_dmul+0x39e>
 8001f46:	f000 fd57 	bl	80029f8 <__clzsi2>
 8001f4a:	2315      	movs	r3, #21
 8001f4c:	469c      	mov	ip, r3
 8001f4e:	4484      	add	ip, r0
 8001f50:	0002      	movs	r2, r0
 8001f52:	4663      	mov	r3, ip
 8001f54:	3220      	adds	r2, #32
 8001f56:	2b1c      	cmp	r3, #28
 8001f58:	dc00      	bgt.n	8001f5c <__aeabi_dmul+0x534>
 8001f5a:	e758      	b.n	8001e0e <__aeabi_dmul+0x3e6>
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	4698      	mov	r8, r3
 8001f60:	0023      	movs	r3, r4
 8001f62:	3808      	subs	r0, #8
 8001f64:	4083      	lsls	r3, r0
 8001f66:	469a      	mov	sl, r3
 8001f68:	e762      	b.n	8001e30 <__aeabi_dmul+0x408>
 8001f6a:	001d      	movs	r5, r3
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	2400      	movs	r4, #0
 8001f70:	2002      	movs	r0, #2
 8001f72:	9301      	str	r3, [sp, #4]
 8001f74:	e5a2      	b.n	8001abc <__aeabi_dmul+0x94>
 8001f76:	9002      	str	r0, [sp, #8]
 8001f78:	e632      	b.n	8001be0 <__aeabi_dmul+0x1b8>
 8001f7a:	431c      	orrs	r4, r3
 8001f7c:	9b00      	ldr	r3, [sp, #0]
 8001f7e:	9a01      	ldr	r2, [sp, #4]
 8001f80:	4699      	mov	r9, r3
 8001f82:	e5ae      	b.n	8001ae2 <__aeabi_dmul+0xba>
 8001f84:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff0 <__aeabi_dmul+0x5c8>)
 8001f86:	4652      	mov	r2, sl
 8001f88:	18c3      	adds	r3, r0, r3
 8001f8a:	4640      	mov	r0, r8
 8001f8c:	409a      	lsls	r2, r3
 8001f8e:	40c8      	lsrs	r0, r1
 8001f90:	4302      	orrs	r2, r0
 8001f92:	4640      	mov	r0, r8
 8001f94:	4098      	lsls	r0, r3
 8001f96:	0003      	movs	r3, r0
 8001f98:	1e58      	subs	r0, r3, #1
 8001f9a:	4183      	sbcs	r3, r0
 8001f9c:	4654      	mov	r4, sl
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	40cc      	lsrs	r4, r1
 8001fa2:	0753      	lsls	r3, r2, #29
 8001fa4:	d009      	beq.n	8001fba <__aeabi_dmul+0x592>
 8001fa6:	230f      	movs	r3, #15
 8001fa8:	4013      	ands	r3, r2
 8001faa:	2b04      	cmp	r3, #4
 8001fac:	d005      	beq.n	8001fba <__aeabi_dmul+0x592>
 8001fae:	1d13      	adds	r3, r2, #4
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	4192      	sbcs	r2, r2
 8001fb4:	4252      	negs	r2, r2
 8001fb6:	18a4      	adds	r4, r4, r2
 8001fb8:	001a      	movs	r2, r3
 8001fba:	0223      	lsls	r3, r4, #8
 8001fbc:	d508      	bpl.n	8001fd0 <__aeabi_dmul+0x5a8>
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	2400      	movs	r4, #0
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	e58e      	b.n	8001ae4 <__aeabi_dmul+0xbc>
 8001fc6:	4689      	mov	r9, r1
 8001fc8:	2400      	movs	r4, #0
 8001fca:	e58b      	b.n	8001ae4 <__aeabi_dmul+0xbc>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	e7a5      	b.n	8001f1c <__aeabi_dmul+0x4f4>
 8001fd0:	0763      	lsls	r3, r4, #29
 8001fd2:	0264      	lsls	r4, r4, #9
 8001fd4:	0b24      	lsrs	r4, r4, #12
 8001fd6:	e7a1      	b.n	8001f1c <__aeabi_dmul+0x4f4>
 8001fd8:	9b00      	ldr	r3, [sp, #0]
 8001fda:	46a2      	mov	sl, r4
 8001fdc:	4699      	mov	r9, r3
 8001fde:	9b01      	ldr	r3, [sp, #4]
 8001fe0:	4698      	mov	r8, r3
 8001fe2:	e737      	b.n	8001e54 <__aeabi_dmul+0x42c>
 8001fe4:	fffffc0d 	.word	0xfffffc0d
 8001fe8:	000007ff 	.word	0x000007ff
 8001fec:	0000043e 	.word	0x0000043e
 8001ff0:	0000041e 	.word	0x0000041e

08001ff4 <__aeabi_dsub>:
 8001ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ff6:	4657      	mov	r7, sl
 8001ff8:	464e      	mov	r6, r9
 8001ffa:	4645      	mov	r5, r8
 8001ffc:	46de      	mov	lr, fp
 8001ffe:	b5e0      	push	{r5, r6, r7, lr}
 8002000:	b083      	sub	sp, #12
 8002002:	9000      	str	r0, [sp, #0]
 8002004:	9101      	str	r1, [sp, #4]
 8002006:	030c      	lsls	r4, r1, #12
 8002008:	004d      	lsls	r5, r1, #1
 800200a:	0fce      	lsrs	r6, r1, #31
 800200c:	0a61      	lsrs	r1, r4, #9
 800200e:	9c00      	ldr	r4, [sp, #0]
 8002010:	005f      	lsls	r7, r3, #1
 8002012:	0f64      	lsrs	r4, r4, #29
 8002014:	430c      	orrs	r4, r1
 8002016:	9900      	ldr	r1, [sp, #0]
 8002018:	9200      	str	r2, [sp, #0]
 800201a:	9301      	str	r3, [sp, #4]
 800201c:	00c8      	lsls	r0, r1, #3
 800201e:	0319      	lsls	r1, r3, #12
 8002020:	0d7b      	lsrs	r3, r7, #21
 8002022:	4699      	mov	r9, r3
 8002024:	9b01      	ldr	r3, [sp, #4]
 8002026:	4fcc      	ldr	r7, [pc, #816]	@ (8002358 <__aeabi_dsub+0x364>)
 8002028:	0fdb      	lsrs	r3, r3, #31
 800202a:	469c      	mov	ip, r3
 800202c:	0a4b      	lsrs	r3, r1, #9
 800202e:	9900      	ldr	r1, [sp, #0]
 8002030:	4680      	mov	r8, r0
 8002032:	0f49      	lsrs	r1, r1, #29
 8002034:	4319      	orrs	r1, r3
 8002036:	9b00      	ldr	r3, [sp, #0]
 8002038:	468b      	mov	fp, r1
 800203a:	00da      	lsls	r2, r3, #3
 800203c:	4692      	mov	sl, r2
 800203e:	0d6d      	lsrs	r5, r5, #21
 8002040:	45b9      	cmp	r9, r7
 8002042:	d100      	bne.n	8002046 <__aeabi_dsub+0x52>
 8002044:	e0bf      	b.n	80021c6 <__aeabi_dsub+0x1d2>
 8002046:	2301      	movs	r3, #1
 8002048:	4661      	mov	r1, ip
 800204a:	4059      	eors	r1, r3
 800204c:	464b      	mov	r3, r9
 800204e:	468c      	mov	ip, r1
 8002050:	1aeb      	subs	r3, r5, r3
 8002052:	428e      	cmp	r6, r1
 8002054:	d075      	beq.n	8002142 <__aeabi_dsub+0x14e>
 8002056:	2b00      	cmp	r3, #0
 8002058:	dc00      	bgt.n	800205c <__aeabi_dsub+0x68>
 800205a:	e2a3      	b.n	80025a4 <__aeabi_dsub+0x5b0>
 800205c:	4649      	mov	r1, r9
 800205e:	2900      	cmp	r1, #0
 8002060:	d100      	bne.n	8002064 <__aeabi_dsub+0x70>
 8002062:	e0ce      	b.n	8002202 <__aeabi_dsub+0x20e>
 8002064:	42bd      	cmp	r5, r7
 8002066:	d100      	bne.n	800206a <__aeabi_dsub+0x76>
 8002068:	e200      	b.n	800246c <__aeabi_dsub+0x478>
 800206a:	2701      	movs	r7, #1
 800206c:	2b38      	cmp	r3, #56	@ 0x38
 800206e:	dc19      	bgt.n	80020a4 <__aeabi_dsub+0xb0>
 8002070:	2780      	movs	r7, #128	@ 0x80
 8002072:	4659      	mov	r1, fp
 8002074:	043f      	lsls	r7, r7, #16
 8002076:	4339      	orrs	r1, r7
 8002078:	468b      	mov	fp, r1
 800207a:	2b1f      	cmp	r3, #31
 800207c:	dd00      	ble.n	8002080 <__aeabi_dsub+0x8c>
 800207e:	e1fa      	b.n	8002476 <__aeabi_dsub+0x482>
 8002080:	2720      	movs	r7, #32
 8002082:	1af9      	subs	r1, r7, r3
 8002084:	468c      	mov	ip, r1
 8002086:	4659      	mov	r1, fp
 8002088:	4667      	mov	r7, ip
 800208a:	40b9      	lsls	r1, r7
 800208c:	000f      	movs	r7, r1
 800208e:	0011      	movs	r1, r2
 8002090:	40d9      	lsrs	r1, r3
 8002092:	430f      	orrs	r7, r1
 8002094:	4661      	mov	r1, ip
 8002096:	408a      	lsls	r2, r1
 8002098:	1e51      	subs	r1, r2, #1
 800209a:	418a      	sbcs	r2, r1
 800209c:	4659      	mov	r1, fp
 800209e:	40d9      	lsrs	r1, r3
 80020a0:	4317      	orrs	r7, r2
 80020a2:	1a64      	subs	r4, r4, r1
 80020a4:	1bc7      	subs	r7, r0, r7
 80020a6:	42b8      	cmp	r0, r7
 80020a8:	4180      	sbcs	r0, r0
 80020aa:	4240      	negs	r0, r0
 80020ac:	1a24      	subs	r4, r4, r0
 80020ae:	0223      	lsls	r3, r4, #8
 80020b0:	d400      	bmi.n	80020b4 <__aeabi_dsub+0xc0>
 80020b2:	e140      	b.n	8002336 <__aeabi_dsub+0x342>
 80020b4:	0264      	lsls	r4, r4, #9
 80020b6:	0a64      	lsrs	r4, r4, #9
 80020b8:	2c00      	cmp	r4, #0
 80020ba:	d100      	bne.n	80020be <__aeabi_dsub+0xca>
 80020bc:	e154      	b.n	8002368 <__aeabi_dsub+0x374>
 80020be:	0020      	movs	r0, r4
 80020c0:	f000 fc9a 	bl	80029f8 <__clzsi2>
 80020c4:	0003      	movs	r3, r0
 80020c6:	3b08      	subs	r3, #8
 80020c8:	2120      	movs	r1, #32
 80020ca:	0038      	movs	r0, r7
 80020cc:	1aca      	subs	r2, r1, r3
 80020ce:	40d0      	lsrs	r0, r2
 80020d0:	409c      	lsls	r4, r3
 80020d2:	0002      	movs	r2, r0
 80020d4:	409f      	lsls	r7, r3
 80020d6:	4322      	orrs	r2, r4
 80020d8:	429d      	cmp	r5, r3
 80020da:	dd00      	ble.n	80020de <__aeabi_dsub+0xea>
 80020dc:	e1a6      	b.n	800242c <__aeabi_dsub+0x438>
 80020de:	1b58      	subs	r0, r3, r5
 80020e0:	3001      	adds	r0, #1
 80020e2:	1a09      	subs	r1, r1, r0
 80020e4:	003c      	movs	r4, r7
 80020e6:	408f      	lsls	r7, r1
 80020e8:	40c4      	lsrs	r4, r0
 80020ea:	1e7b      	subs	r3, r7, #1
 80020ec:	419f      	sbcs	r7, r3
 80020ee:	0013      	movs	r3, r2
 80020f0:	408b      	lsls	r3, r1
 80020f2:	4327      	orrs	r7, r4
 80020f4:	431f      	orrs	r7, r3
 80020f6:	40c2      	lsrs	r2, r0
 80020f8:	003b      	movs	r3, r7
 80020fa:	0014      	movs	r4, r2
 80020fc:	2500      	movs	r5, #0
 80020fe:	4313      	orrs	r3, r2
 8002100:	d100      	bne.n	8002104 <__aeabi_dsub+0x110>
 8002102:	e1f7      	b.n	80024f4 <__aeabi_dsub+0x500>
 8002104:	077b      	lsls	r3, r7, #29
 8002106:	d100      	bne.n	800210a <__aeabi_dsub+0x116>
 8002108:	e377      	b.n	80027fa <__aeabi_dsub+0x806>
 800210a:	230f      	movs	r3, #15
 800210c:	0038      	movs	r0, r7
 800210e:	403b      	ands	r3, r7
 8002110:	2b04      	cmp	r3, #4
 8002112:	d004      	beq.n	800211e <__aeabi_dsub+0x12a>
 8002114:	1d38      	adds	r0, r7, #4
 8002116:	42b8      	cmp	r0, r7
 8002118:	41bf      	sbcs	r7, r7
 800211a:	427f      	negs	r7, r7
 800211c:	19e4      	adds	r4, r4, r7
 800211e:	0223      	lsls	r3, r4, #8
 8002120:	d400      	bmi.n	8002124 <__aeabi_dsub+0x130>
 8002122:	e368      	b.n	80027f6 <__aeabi_dsub+0x802>
 8002124:	4b8c      	ldr	r3, [pc, #560]	@ (8002358 <__aeabi_dsub+0x364>)
 8002126:	3501      	adds	r5, #1
 8002128:	429d      	cmp	r5, r3
 800212a:	d100      	bne.n	800212e <__aeabi_dsub+0x13a>
 800212c:	e0f4      	b.n	8002318 <__aeabi_dsub+0x324>
 800212e:	4b8b      	ldr	r3, [pc, #556]	@ (800235c <__aeabi_dsub+0x368>)
 8002130:	056d      	lsls	r5, r5, #21
 8002132:	401c      	ands	r4, r3
 8002134:	0d6d      	lsrs	r5, r5, #21
 8002136:	0767      	lsls	r7, r4, #29
 8002138:	08c0      	lsrs	r0, r0, #3
 800213a:	0264      	lsls	r4, r4, #9
 800213c:	4307      	orrs	r7, r0
 800213e:	0b24      	lsrs	r4, r4, #12
 8002140:	e0ec      	b.n	800231c <__aeabi_dsub+0x328>
 8002142:	2b00      	cmp	r3, #0
 8002144:	dc00      	bgt.n	8002148 <__aeabi_dsub+0x154>
 8002146:	e329      	b.n	800279c <__aeabi_dsub+0x7a8>
 8002148:	4649      	mov	r1, r9
 800214a:	2900      	cmp	r1, #0
 800214c:	d000      	beq.n	8002150 <__aeabi_dsub+0x15c>
 800214e:	e0d6      	b.n	80022fe <__aeabi_dsub+0x30a>
 8002150:	4659      	mov	r1, fp
 8002152:	4311      	orrs	r1, r2
 8002154:	d100      	bne.n	8002158 <__aeabi_dsub+0x164>
 8002156:	e12e      	b.n	80023b6 <__aeabi_dsub+0x3c2>
 8002158:	1e59      	subs	r1, r3, #1
 800215a:	2b01      	cmp	r3, #1
 800215c:	d100      	bne.n	8002160 <__aeabi_dsub+0x16c>
 800215e:	e1e6      	b.n	800252e <__aeabi_dsub+0x53a>
 8002160:	42bb      	cmp	r3, r7
 8002162:	d100      	bne.n	8002166 <__aeabi_dsub+0x172>
 8002164:	e182      	b.n	800246c <__aeabi_dsub+0x478>
 8002166:	2701      	movs	r7, #1
 8002168:	000b      	movs	r3, r1
 800216a:	2938      	cmp	r1, #56	@ 0x38
 800216c:	dc14      	bgt.n	8002198 <__aeabi_dsub+0x1a4>
 800216e:	2b1f      	cmp	r3, #31
 8002170:	dd00      	ble.n	8002174 <__aeabi_dsub+0x180>
 8002172:	e23c      	b.n	80025ee <__aeabi_dsub+0x5fa>
 8002174:	2720      	movs	r7, #32
 8002176:	1af9      	subs	r1, r7, r3
 8002178:	468c      	mov	ip, r1
 800217a:	4659      	mov	r1, fp
 800217c:	4667      	mov	r7, ip
 800217e:	40b9      	lsls	r1, r7
 8002180:	000f      	movs	r7, r1
 8002182:	0011      	movs	r1, r2
 8002184:	40d9      	lsrs	r1, r3
 8002186:	430f      	orrs	r7, r1
 8002188:	4661      	mov	r1, ip
 800218a:	408a      	lsls	r2, r1
 800218c:	1e51      	subs	r1, r2, #1
 800218e:	418a      	sbcs	r2, r1
 8002190:	4659      	mov	r1, fp
 8002192:	40d9      	lsrs	r1, r3
 8002194:	4317      	orrs	r7, r2
 8002196:	1864      	adds	r4, r4, r1
 8002198:	183f      	adds	r7, r7, r0
 800219a:	4287      	cmp	r7, r0
 800219c:	4180      	sbcs	r0, r0
 800219e:	4240      	negs	r0, r0
 80021a0:	1824      	adds	r4, r4, r0
 80021a2:	0223      	lsls	r3, r4, #8
 80021a4:	d400      	bmi.n	80021a8 <__aeabi_dsub+0x1b4>
 80021a6:	e0c6      	b.n	8002336 <__aeabi_dsub+0x342>
 80021a8:	4b6b      	ldr	r3, [pc, #428]	@ (8002358 <__aeabi_dsub+0x364>)
 80021aa:	3501      	adds	r5, #1
 80021ac:	429d      	cmp	r5, r3
 80021ae:	d100      	bne.n	80021b2 <__aeabi_dsub+0x1be>
 80021b0:	e0b2      	b.n	8002318 <__aeabi_dsub+0x324>
 80021b2:	2101      	movs	r1, #1
 80021b4:	4b69      	ldr	r3, [pc, #420]	@ (800235c <__aeabi_dsub+0x368>)
 80021b6:	087a      	lsrs	r2, r7, #1
 80021b8:	401c      	ands	r4, r3
 80021ba:	4039      	ands	r1, r7
 80021bc:	430a      	orrs	r2, r1
 80021be:	07e7      	lsls	r7, r4, #31
 80021c0:	4317      	orrs	r7, r2
 80021c2:	0864      	lsrs	r4, r4, #1
 80021c4:	e79e      	b.n	8002104 <__aeabi_dsub+0x110>
 80021c6:	4b66      	ldr	r3, [pc, #408]	@ (8002360 <__aeabi_dsub+0x36c>)
 80021c8:	4311      	orrs	r1, r2
 80021ca:	468a      	mov	sl, r1
 80021cc:	18eb      	adds	r3, r5, r3
 80021ce:	2900      	cmp	r1, #0
 80021d0:	d028      	beq.n	8002224 <__aeabi_dsub+0x230>
 80021d2:	4566      	cmp	r6, ip
 80021d4:	d02c      	beq.n	8002230 <__aeabi_dsub+0x23c>
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d05b      	beq.n	8002292 <__aeabi_dsub+0x29e>
 80021da:	2d00      	cmp	r5, #0
 80021dc:	d100      	bne.n	80021e0 <__aeabi_dsub+0x1ec>
 80021de:	e12c      	b.n	800243a <__aeabi_dsub+0x446>
 80021e0:	465b      	mov	r3, fp
 80021e2:	4666      	mov	r6, ip
 80021e4:	075f      	lsls	r7, r3, #29
 80021e6:	08d2      	lsrs	r2, r2, #3
 80021e8:	4317      	orrs	r7, r2
 80021ea:	08dd      	lsrs	r5, r3, #3
 80021ec:	003b      	movs	r3, r7
 80021ee:	432b      	orrs	r3, r5
 80021f0:	d100      	bne.n	80021f4 <__aeabi_dsub+0x200>
 80021f2:	e0e2      	b.n	80023ba <__aeabi_dsub+0x3c6>
 80021f4:	2480      	movs	r4, #128	@ 0x80
 80021f6:	0324      	lsls	r4, r4, #12
 80021f8:	432c      	orrs	r4, r5
 80021fa:	0324      	lsls	r4, r4, #12
 80021fc:	4d56      	ldr	r5, [pc, #344]	@ (8002358 <__aeabi_dsub+0x364>)
 80021fe:	0b24      	lsrs	r4, r4, #12
 8002200:	e08c      	b.n	800231c <__aeabi_dsub+0x328>
 8002202:	4659      	mov	r1, fp
 8002204:	4311      	orrs	r1, r2
 8002206:	d100      	bne.n	800220a <__aeabi_dsub+0x216>
 8002208:	e0d5      	b.n	80023b6 <__aeabi_dsub+0x3c2>
 800220a:	1e59      	subs	r1, r3, #1
 800220c:	2b01      	cmp	r3, #1
 800220e:	d100      	bne.n	8002212 <__aeabi_dsub+0x21e>
 8002210:	e1b9      	b.n	8002586 <__aeabi_dsub+0x592>
 8002212:	42bb      	cmp	r3, r7
 8002214:	d100      	bne.n	8002218 <__aeabi_dsub+0x224>
 8002216:	e1b1      	b.n	800257c <__aeabi_dsub+0x588>
 8002218:	2701      	movs	r7, #1
 800221a:	000b      	movs	r3, r1
 800221c:	2938      	cmp	r1, #56	@ 0x38
 800221e:	dd00      	ble.n	8002222 <__aeabi_dsub+0x22e>
 8002220:	e740      	b.n	80020a4 <__aeabi_dsub+0xb0>
 8002222:	e72a      	b.n	800207a <__aeabi_dsub+0x86>
 8002224:	4661      	mov	r1, ip
 8002226:	2701      	movs	r7, #1
 8002228:	4079      	eors	r1, r7
 800222a:	468c      	mov	ip, r1
 800222c:	4566      	cmp	r6, ip
 800222e:	d1d2      	bne.n	80021d6 <__aeabi_dsub+0x1e2>
 8002230:	2b00      	cmp	r3, #0
 8002232:	d100      	bne.n	8002236 <__aeabi_dsub+0x242>
 8002234:	e0c5      	b.n	80023c2 <__aeabi_dsub+0x3ce>
 8002236:	2d00      	cmp	r5, #0
 8002238:	d000      	beq.n	800223c <__aeabi_dsub+0x248>
 800223a:	e155      	b.n	80024e8 <__aeabi_dsub+0x4f4>
 800223c:	464b      	mov	r3, r9
 800223e:	0025      	movs	r5, r4
 8002240:	4305      	orrs	r5, r0
 8002242:	d100      	bne.n	8002246 <__aeabi_dsub+0x252>
 8002244:	e212      	b.n	800266c <__aeabi_dsub+0x678>
 8002246:	1e59      	subs	r1, r3, #1
 8002248:	468c      	mov	ip, r1
 800224a:	2b01      	cmp	r3, #1
 800224c:	d100      	bne.n	8002250 <__aeabi_dsub+0x25c>
 800224e:	e249      	b.n	80026e4 <__aeabi_dsub+0x6f0>
 8002250:	4d41      	ldr	r5, [pc, #260]	@ (8002358 <__aeabi_dsub+0x364>)
 8002252:	42ab      	cmp	r3, r5
 8002254:	d100      	bne.n	8002258 <__aeabi_dsub+0x264>
 8002256:	e28f      	b.n	8002778 <__aeabi_dsub+0x784>
 8002258:	2701      	movs	r7, #1
 800225a:	2938      	cmp	r1, #56	@ 0x38
 800225c:	dc11      	bgt.n	8002282 <__aeabi_dsub+0x28e>
 800225e:	4663      	mov	r3, ip
 8002260:	2b1f      	cmp	r3, #31
 8002262:	dd00      	ble.n	8002266 <__aeabi_dsub+0x272>
 8002264:	e25b      	b.n	800271e <__aeabi_dsub+0x72a>
 8002266:	4661      	mov	r1, ip
 8002268:	2320      	movs	r3, #32
 800226a:	0027      	movs	r7, r4
 800226c:	1a5b      	subs	r3, r3, r1
 800226e:	0005      	movs	r5, r0
 8002270:	4098      	lsls	r0, r3
 8002272:	409f      	lsls	r7, r3
 8002274:	40cd      	lsrs	r5, r1
 8002276:	1e43      	subs	r3, r0, #1
 8002278:	4198      	sbcs	r0, r3
 800227a:	40cc      	lsrs	r4, r1
 800227c:	432f      	orrs	r7, r5
 800227e:	4307      	orrs	r7, r0
 8002280:	44a3      	add	fp, r4
 8002282:	18bf      	adds	r7, r7, r2
 8002284:	4297      	cmp	r7, r2
 8002286:	4192      	sbcs	r2, r2
 8002288:	4252      	negs	r2, r2
 800228a:	445a      	add	r2, fp
 800228c:	0014      	movs	r4, r2
 800228e:	464d      	mov	r5, r9
 8002290:	e787      	b.n	80021a2 <__aeabi_dsub+0x1ae>
 8002292:	4f34      	ldr	r7, [pc, #208]	@ (8002364 <__aeabi_dsub+0x370>)
 8002294:	1c6b      	adds	r3, r5, #1
 8002296:	423b      	tst	r3, r7
 8002298:	d000      	beq.n	800229c <__aeabi_dsub+0x2a8>
 800229a:	e0b6      	b.n	800240a <__aeabi_dsub+0x416>
 800229c:	4659      	mov	r1, fp
 800229e:	0023      	movs	r3, r4
 80022a0:	4311      	orrs	r1, r2
 80022a2:	000f      	movs	r7, r1
 80022a4:	4303      	orrs	r3, r0
 80022a6:	2d00      	cmp	r5, #0
 80022a8:	d000      	beq.n	80022ac <__aeabi_dsub+0x2b8>
 80022aa:	e126      	b.n	80024fa <__aeabi_dsub+0x506>
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d100      	bne.n	80022b2 <__aeabi_dsub+0x2be>
 80022b0:	e1c0      	b.n	8002634 <__aeabi_dsub+0x640>
 80022b2:	2900      	cmp	r1, #0
 80022b4:	d100      	bne.n	80022b8 <__aeabi_dsub+0x2c4>
 80022b6:	e0a1      	b.n	80023fc <__aeabi_dsub+0x408>
 80022b8:	1a83      	subs	r3, r0, r2
 80022ba:	4698      	mov	r8, r3
 80022bc:	465b      	mov	r3, fp
 80022be:	4540      	cmp	r0, r8
 80022c0:	41ad      	sbcs	r5, r5
 80022c2:	1ae3      	subs	r3, r4, r3
 80022c4:	426d      	negs	r5, r5
 80022c6:	1b5b      	subs	r3, r3, r5
 80022c8:	2580      	movs	r5, #128	@ 0x80
 80022ca:	042d      	lsls	r5, r5, #16
 80022cc:	422b      	tst	r3, r5
 80022ce:	d100      	bne.n	80022d2 <__aeabi_dsub+0x2de>
 80022d0:	e14b      	b.n	800256a <__aeabi_dsub+0x576>
 80022d2:	465b      	mov	r3, fp
 80022d4:	1a10      	subs	r0, r2, r0
 80022d6:	4282      	cmp	r2, r0
 80022d8:	4192      	sbcs	r2, r2
 80022da:	1b1c      	subs	r4, r3, r4
 80022dc:	0007      	movs	r7, r0
 80022de:	2601      	movs	r6, #1
 80022e0:	4663      	mov	r3, ip
 80022e2:	4252      	negs	r2, r2
 80022e4:	1aa4      	subs	r4, r4, r2
 80022e6:	4327      	orrs	r7, r4
 80022e8:	401e      	ands	r6, r3
 80022ea:	2f00      	cmp	r7, #0
 80022ec:	d100      	bne.n	80022f0 <__aeabi_dsub+0x2fc>
 80022ee:	e142      	b.n	8002576 <__aeabi_dsub+0x582>
 80022f0:	422c      	tst	r4, r5
 80022f2:	d100      	bne.n	80022f6 <__aeabi_dsub+0x302>
 80022f4:	e26d      	b.n	80027d2 <__aeabi_dsub+0x7de>
 80022f6:	4b19      	ldr	r3, [pc, #100]	@ (800235c <__aeabi_dsub+0x368>)
 80022f8:	2501      	movs	r5, #1
 80022fa:	401c      	ands	r4, r3
 80022fc:	e71b      	b.n	8002136 <__aeabi_dsub+0x142>
 80022fe:	42bd      	cmp	r5, r7
 8002300:	d100      	bne.n	8002304 <__aeabi_dsub+0x310>
 8002302:	e13b      	b.n	800257c <__aeabi_dsub+0x588>
 8002304:	2701      	movs	r7, #1
 8002306:	2b38      	cmp	r3, #56	@ 0x38
 8002308:	dd00      	ble.n	800230c <__aeabi_dsub+0x318>
 800230a:	e745      	b.n	8002198 <__aeabi_dsub+0x1a4>
 800230c:	2780      	movs	r7, #128	@ 0x80
 800230e:	4659      	mov	r1, fp
 8002310:	043f      	lsls	r7, r7, #16
 8002312:	4339      	orrs	r1, r7
 8002314:	468b      	mov	fp, r1
 8002316:	e72a      	b.n	800216e <__aeabi_dsub+0x17a>
 8002318:	2400      	movs	r4, #0
 800231a:	2700      	movs	r7, #0
 800231c:	052d      	lsls	r5, r5, #20
 800231e:	4325      	orrs	r5, r4
 8002320:	07f6      	lsls	r6, r6, #31
 8002322:	4335      	orrs	r5, r6
 8002324:	0038      	movs	r0, r7
 8002326:	0029      	movs	r1, r5
 8002328:	b003      	add	sp, #12
 800232a:	bcf0      	pop	{r4, r5, r6, r7}
 800232c:	46bb      	mov	fp, r7
 800232e:	46b2      	mov	sl, r6
 8002330:	46a9      	mov	r9, r5
 8002332:	46a0      	mov	r8, r4
 8002334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002336:	077b      	lsls	r3, r7, #29
 8002338:	d004      	beq.n	8002344 <__aeabi_dsub+0x350>
 800233a:	230f      	movs	r3, #15
 800233c:	403b      	ands	r3, r7
 800233e:	2b04      	cmp	r3, #4
 8002340:	d000      	beq.n	8002344 <__aeabi_dsub+0x350>
 8002342:	e6e7      	b.n	8002114 <__aeabi_dsub+0x120>
 8002344:	002b      	movs	r3, r5
 8002346:	08f8      	lsrs	r0, r7, #3
 8002348:	4a03      	ldr	r2, [pc, #12]	@ (8002358 <__aeabi_dsub+0x364>)
 800234a:	0767      	lsls	r7, r4, #29
 800234c:	4307      	orrs	r7, r0
 800234e:	08e5      	lsrs	r5, r4, #3
 8002350:	4293      	cmp	r3, r2
 8002352:	d100      	bne.n	8002356 <__aeabi_dsub+0x362>
 8002354:	e74a      	b.n	80021ec <__aeabi_dsub+0x1f8>
 8002356:	e0a5      	b.n	80024a4 <__aeabi_dsub+0x4b0>
 8002358:	000007ff 	.word	0x000007ff
 800235c:	ff7fffff 	.word	0xff7fffff
 8002360:	fffff801 	.word	0xfffff801
 8002364:	000007fe 	.word	0x000007fe
 8002368:	0038      	movs	r0, r7
 800236a:	f000 fb45 	bl	80029f8 <__clzsi2>
 800236e:	0003      	movs	r3, r0
 8002370:	3318      	adds	r3, #24
 8002372:	2b1f      	cmp	r3, #31
 8002374:	dc00      	bgt.n	8002378 <__aeabi_dsub+0x384>
 8002376:	e6a7      	b.n	80020c8 <__aeabi_dsub+0xd4>
 8002378:	003a      	movs	r2, r7
 800237a:	3808      	subs	r0, #8
 800237c:	4082      	lsls	r2, r0
 800237e:	429d      	cmp	r5, r3
 8002380:	dd00      	ble.n	8002384 <__aeabi_dsub+0x390>
 8002382:	e08a      	b.n	800249a <__aeabi_dsub+0x4a6>
 8002384:	1b5b      	subs	r3, r3, r5
 8002386:	1c58      	adds	r0, r3, #1
 8002388:	281f      	cmp	r0, #31
 800238a:	dc00      	bgt.n	800238e <__aeabi_dsub+0x39a>
 800238c:	e1d8      	b.n	8002740 <__aeabi_dsub+0x74c>
 800238e:	0017      	movs	r7, r2
 8002390:	3b1f      	subs	r3, #31
 8002392:	40df      	lsrs	r7, r3
 8002394:	2820      	cmp	r0, #32
 8002396:	d005      	beq.n	80023a4 <__aeabi_dsub+0x3b0>
 8002398:	2340      	movs	r3, #64	@ 0x40
 800239a:	1a1b      	subs	r3, r3, r0
 800239c:	409a      	lsls	r2, r3
 800239e:	1e53      	subs	r3, r2, #1
 80023a0:	419a      	sbcs	r2, r3
 80023a2:	4317      	orrs	r7, r2
 80023a4:	2500      	movs	r5, #0
 80023a6:	2f00      	cmp	r7, #0
 80023a8:	d100      	bne.n	80023ac <__aeabi_dsub+0x3b8>
 80023aa:	e0e5      	b.n	8002578 <__aeabi_dsub+0x584>
 80023ac:	077b      	lsls	r3, r7, #29
 80023ae:	d000      	beq.n	80023b2 <__aeabi_dsub+0x3be>
 80023b0:	e6ab      	b.n	800210a <__aeabi_dsub+0x116>
 80023b2:	002c      	movs	r4, r5
 80023b4:	e7c6      	b.n	8002344 <__aeabi_dsub+0x350>
 80023b6:	08c0      	lsrs	r0, r0, #3
 80023b8:	e7c6      	b.n	8002348 <__aeabi_dsub+0x354>
 80023ba:	2700      	movs	r7, #0
 80023bc:	2400      	movs	r4, #0
 80023be:	4dd1      	ldr	r5, [pc, #836]	@ (8002704 <__aeabi_dsub+0x710>)
 80023c0:	e7ac      	b.n	800231c <__aeabi_dsub+0x328>
 80023c2:	4fd1      	ldr	r7, [pc, #836]	@ (8002708 <__aeabi_dsub+0x714>)
 80023c4:	1c6b      	adds	r3, r5, #1
 80023c6:	423b      	tst	r3, r7
 80023c8:	d171      	bne.n	80024ae <__aeabi_dsub+0x4ba>
 80023ca:	0023      	movs	r3, r4
 80023cc:	4303      	orrs	r3, r0
 80023ce:	2d00      	cmp	r5, #0
 80023d0:	d000      	beq.n	80023d4 <__aeabi_dsub+0x3e0>
 80023d2:	e14e      	b.n	8002672 <__aeabi_dsub+0x67e>
 80023d4:	4657      	mov	r7, sl
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d100      	bne.n	80023dc <__aeabi_dsub+0x3e8>
 80023da:	e1b5      	b.n	8002748 <__aeabi_dsub+0x754>
 80023dc:	2f00      	cmp	r7, #0
 80023de:	d00d      	beq.n	80023fc <__aeabi_dsub+0x408>
 80023e0:	1883      	adds	r3, r0, r2
 80023e2:	4283      	cmp	r3, r0
 80023e4:	4180      	sbcs	r0, r0
 80023e6:	445c      	add	r4, fp
 80023e8:	4240      	negs	r0, r0
 80023ea:	1824      	adds	r4, r4, r0
 80023ec:	0222      	lsls	r2, r4, #8
 80023ee:	d500      	bpl.n	80023f2 <__aeabi_dsub+0x3fe>
 80023f0:	e1c8      	b.n	8002784 <__aeabi_dsub+0x790>
 80023f2:	001f      	movs	r7, r3
 80023f4:	4698      	mov	r8, r3
 80023f6:	4327      	orrs	r7, r4
 80023f8:	d100      	bne.n	80023fc <__aeabi_dsub+0x408>
 80023fa:	e0bc      	b.n	8002576 <__aeabi_dsub+0x582>
 80023fc:	4643      	mov	r3, r8
 80023fe:	0767      	lsls	r7, r4, #29
 8002400:	08db      	lsrs	r3, r3, #3
 8002402:	431f      	orrs	r7, r3
 8002404:	08e5      	lsrs	r5, r4, #3
 8002406:	2300      	movs	r3, #0
 8002408:	e04c      	b.n	80024a4 <__aeabi_dsub+0x4b0>
 800240a:	1a83      	subs	r3, r0, r2
 800240c:	4698      	mov	r8, r3
 800240e:	465b      	mov	r3, fp
 8002410:	4540      	cmp	r0, r8
 8002412:	41bf      	sbcs	r7, r7
 8002414:	1ae3      	subs	r3, r4, r3
 8002416:	427f      	negs	r7, r7
 8002418:	1bdb      	subs	r3, r3, r7
 800241a:	021f      	lsls	r7, r3, #8
 800241c:	d47c      	bmi.n	8002518 <__aeabi_dsub+0x524>
 800241e:	4647      	mov	r7, r8
 8002420:	431f      	orrs	r7, r3
 8002422:	d100      	bne.n	8002426 <__aeabi_dsub+0x432>
 8002424:	e0a6      	b.n	8002574 <__aeabi_dsub+0x580>
 8002426:	001c      	movs	r4, r3
 8002428:	4647      	mov	r7, r8
 800242a:	e645      	b.n	80020b8 <__aeabi_dsub+0xc4>
 800242c:	4cb7      	ldr	r4, [pc, #732]	@ (800270c <__aeabi_dsub+0x718>)
 800242e:	1aed      	subs	r5, r5, r3
 8002430:	4014      	ands	r4, r2
 8002432:	077b      	lsls	r3, r7, #29
 8002434:	d000      	beq.n	8002438 <__aeabi_dsub+0x444>
 8002436:	e780      	b.n	800233a <__aeabi_dsub+0x346>
 8002438:	e784      	b.n	8002344 <__aeabi_dsub+0x350>
 800243a:	464b      	mov	r3, r9
 800243c:	0025      	movs	r5, r4
 800243e:	4305      	orrs	r5, r0
 8002440:	d066      	beq.n	8002510 <__aeabi_dsub+0x51c>
 8002442:	1e5f      	subs	r7, r3, #1
 8002444:	2b01      	cmp	r3, #1
 8002446:	d100      	bne.n	800244a <__aeabi_dsub+0x456>
 8002448:	e0fc      	b.n	8002644 <__aeabi_dsub+0x650>
 800244a:	4dae      	ldr	r5, [pc, #696]	@ (8002704 <__aeabi_dsub+0x710>)
 800244c:	42ab      	cmp	r3, r5
 800244e:	d100      	bne.n	8002452 <__aeabi_dsub+0x45e>
 8002450:	e15e      	b.n	8002710 <__aeabi_dsub+0x71c>
 8002452:	4666      	mov	r6, ip
 8002454:	2f38      	cmp	r7, #56	@ 0x38
 8002456:	dc00      	bgt.n	800245a <__aeabi_dsub+0x466>
 8002458:	e0b4      	b.n	80025c4 <__aeabi_dsub+0x5d0>
 800245a:	2001      	movs	r0, #1
 800245c:	1a17      	subs	r7, r2, r0
 800245e:	42ba      	cmp	r2, r7
 8002460:	4192      	sbcs	r2, r2
 8002462:	465b      	mov	r3, fp
 8002464:	4252      	negs	r2, r2
 8002466:	464d      	mov	r5, r9
 8002468:	1a9c      	subs	r4, r3, r2
 800246a:	e620      	b.n	80020ae <__aeabi_dsub+0xba>
 800246c:	0767      	lsls	r7, r4, #29
 800246e:	08c0      	lsrs	r0, r0, #3
 8002470:	4307      	orrs	r7, r0
 8002472:	08e5      	lsrs	r5, r4, #3
 8002474:	e6ba      	b.n	80021ec <__aeabi_dsub+0x1f8>
 8002476:	001f      	movs	r7, r3
 8002478:	4659      	mov	r1, fp
 800247a:	3f20      	subs	r7, #32
 800247c:	40f9      	lsrs	r1, r7
 800247e:	000f      	movs	r7, r1
 8002480:	2b20      	cmp	r3, #32
 8002482:	d005      	beq.n	8002490 <__aeabi_dsub+0x49c>
 8002484:	2140      	movs	r1, #64	@ 0x40
 8002486:	1acb      	subs	r3, r1, r3
 8002488:	4659      	mov	r1, fp
 800248a:	4099      	lsls	r1, r3
 800248c:	430a      	orrs	r2, r1
 800248e:	4692      	mov	sl, r2
 8002490:	4653      	mov	r3, sl
 8002492:	1e5a      	subs	r2, r3, #1
 8002494:	4193      	sbcs	r3, r2
 8002496:	431f      	orrs	r7, r3
 8002498:	e604      	b.n	80020a4 <__aeabi_dsub+0xb0>
 800249a:	1aeb      	subs	r3, r5, r3
 800249c:	4d9b      	ldr	r5, [pc, #620]	@ (800270c <__aeabi_dsub+0x718>)
 800249e:	4015      	ands	r5, r2
 80024a0:	076f      	lsls	r7, r5, #29
 80024a2:	08ed      	lsrs	r5, r5, #3
 80024a4:	032c      	lsls	r4, r5, #12
 80024a6:	055d      	lsls	r5, r3, #21
 80024a8:	0b24      	lsrs	r4, r4, #12
 80024aa:	0d6d      	lsrs	r5, r5, #21
 80024ac:	e736      	b.n	800231c <__aeabi_dsub+0x328>
 80024ae:	4d95      	ldr	r5, [pc, #596]	@ (8002704 <__aeabi_dsub+0x710>)
 80024b0:	42ab      	cmp	r3, r5
 80024b2:	d100      	bne.n	80024b6 <__aeabi_dsub+0x4c2>
 80024b4:	e0d6      	b.n	8002664 <__aeabi_dsub+0x670>
 80024b6:	1882      	adds	r2, r0, r2
 80024b8:	0021      	movs	r1, r4
 80024ba:	4282      	cmp	r2, r0
 80024bc:	4180      	sbcs	r0, r0
 80024be:	4459      	add	r1, fp
 80024c0:	4240      	negs	r0, r0
 80024c2:	1808      	adds	r0, r1, r0
 80024c4:	07c7      	lsls	r7, r0, #31
 80024c6:	0852      	lsrs	r2, r2, #1
 80024c8:	4317      	orrs	r7, r2
 80024ca:	0844      	lsrs	r4, r0, #1
 80024cc:	0752      	lsls	r2, r2, #29
 80024ce:	d400      	bmi.n	80024d2 <__aeabi_dsub+0x4de>
 80024d0:	e185      	b.n	80027de <__aeabi_dsub+0x7ea>
 80024d2:	220f      	movs	r2, #15
 80024d4:	001d      	movs	r5, r3
 80024d6:	403a      	ands	r2, r7
 80024d8:	2a04      	cmp	r2, #4
 80024da:	d000      	beq.n	80024de <__aeabi_dsub+0x4ea>
 80024dc:	e61a      	b.n	8002114 <__aeabi_dsub+0x120>
 80024de:	08ff      	lsrs	r7, r7, #3
 80024e0:	0764      	lsls	r4, r4, #29
 80024e2:	4327      	orrs	r7, r4
 80024e4:	0905      	lsrs	r5, r0, #4
 80024e6:	e7dd      	b.n	80024a4 <__aeabi_dsub+0x4b0>
 80024e8:	465b      	mov	r3, fp
 80024ea:	08d2      	lsrs	r2, r2, #3
 80024ec:	075f      	lsls	r7, r3, #29
 80024ee:	4317      	orrs	r7, r2
 80024f0:	08dd      	lsrs	r5, r3, #3
 80024f2:	e67b      	b.n	80021ec <__aeabi_dsub+0x1f8>
 80024f4:	2700      	movs	r7, #0
 80024f6:	2400      	movs	r4, #0
 80024f8:	e710      	b.n	800231c <__aeabi_dsub+0x328>
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d000      	beq.n	8002500 <__aeabi_dsub+0x50c>
 80024fe:	e0d6      	b.n	80026ae <__aeabi_dsub+0x6ba>
 8002500:	2900      	cmp	r1, #0
 8002502:	d000      	beq.n	8002506 <__aeabi_dsub+0x512>
 8002504:	e12f      	b.n	8002766 <__aeabi_dsub+0x772>
 8002506:	2480      	movs	r4, #128	@ 0x80
 8002508:	2600      	movs	r6, #0
 800250a:	4d7e      	ldr	r5, [pc, #504]	@ (8002704 <__aeabi_dsub+0x710>)
 800250c:	0324      	lsls	r4, r4, #12
 800250e:	e705      	b.n	800231c <__aeabi_dsub+0x328>
 8002510:	4666      	mov	r6, ip
 8002512:	465c      	mov	r4, fp
 8002514:	08d0      	lsrs	r0, r2, #3
 8002516:	e717      	b.n	8002348 <__aeabi_dsub+0x354>
 8002518:	465b      	mov	r3, fp
 800251a:	1a17      	subs	r7, r2, r0
 800251c:	42ba      	cmp	r2, r7
 800251e:	4192      	sbcs	r2, r2
 8002520:	1b1c      	subs	r4, r3, r4
 8002522:	2601      	movs	r6, #1
 8002524:	4663      	mov	r3, ip
 8002526:	4252      	negs	r2, r2
 8002528:	1aa4      	subs	r4, r4, r2
 800252a:	401e      	ands	r6, r3
 800252c:	e5c4      	b.n	80020b8 <__aeabi_dsub+0xc4>
 800252e:	1883      	adds	r3, r0, r2
 8002530:	4283      	cmp	r3, r0
 8002532:	4180      	sbcs	r0, r0
 8002534:	445c      	add	r4, fp
 8002536:	4240      	negs	r0, r0
 8002538:	1825      	adds	r5, r4, r0
 800253a:	022a      	lsls	r2, r5, #8
 800253c:	d400      	bmi.n	8002540 <__aeabi_dsub+0x54c>
 800253e:	e0da      	b.n	80026f6 <__aeabi_dsub+0x702>
 8002540:	4a72      	ldr	r2, [pc, #456]	@ (800270c <__aeabi_dsub+0x718>)
 8002542:	085b      	lsrs	r3, r3, #1
 8002544:	4015      	ands	r5, r2
 8002546:	07ea      	lsls	r2, r5, #31
 8002548:	431a      	orrs	r2, r3
 800254a:	0869      	lsrs	r1, r5, #1
 800254c:	075b      	lsls	r3, r3, #29
 800254e:	d400      	bmi.n	8002552 <__aeabi_dsub+0x55e>
 8002550:	e14a      	b.n	80027e8 <__aeabi_dsub+0x7f4>
 8002552:	230f      	movs	r3, #15
 8002554:	4013      	ands	r3, r2
 8002556:	2b04      	cmp	r3, #4
 8002558:	d100      	bne.n	800255c <__aeabi_dsub+0x568>
 800255a:	e0fc      	b.n	8002756 <__aeabi_dsub+0x762>
 800255c:	1d17      	adds	r7, r2, #4
 800255e:	4297      	cmp	r7, r2
 8002560:	41a4      	sbcs	r4, r4
 8002562:	4264      	negs	r4, r4
 8002564:	2502      	movs	r5, #2
 8002566:	1864      	adds	r4, r4, r1
 8002568:	e6ec      	b.n	8002344 <__aeabi_dsub+0x350>
 800256a:	4647      	mov	r7, r8
 800256c:	001c      	movs	r4, r3
 800256e:	431f      	orrs	r7, r3
 8002570:	d000      	beq.n	8002574 <__aeabi_dsub+0x580>
 8002572:	e743      	b.n	80023fc <__aeabi_dsub+0x408>
 8002574:	2600      	movs	r6, #0
 8002576:	2500      	movs	r5, #0
 8002578:	2400      	movs	r4, #0
 800257a:	e6cf      	b.n	800231c <__aeabi_dsub+0x328>
 800257c:	08c0      	lsrs	r0, r0, #3
 800257e:	0767      	lsls	r7, r4, #29
 8002580:	4307      	orrs	r7, r0
 8002582:	08e5      	lsrs	r5, r4, #3
 8002584:	e632      	b.n	80021ec <__aeabi_dsub+0x1f8>
 8002586:	1a87      	subs	r7, r0, r2
 8002588:	465b      	mov	r3, fp
 800258a:	42b8      	cmp	r0, r7
 800258c:	4180      	sbcs	r0, r0
 800258e:	1ae4      	subs	r4, r4, r3
 8002590:	4240      	negs	r0, r0
 8002592:	1a24      	subs	r4, r4, r0
 8002594:	0223      	lsls	r3, r4, #8
 8002596:	d428      	bmi.n	80025ea <__aeabi_dsub+0x5f6>
 8002598:	0763      	lsls	r3, r4, #29
 800259a:	08ff      	lsrs	r7, r7, #3
 800259c:	431f      	orrs	r7, r3
 800259e:	08e5      	lsrs	r5, r4, #3
 80025a0:	2301      	movs	r3, #1
 80025a2:	e77f      	b.n	80024a4 <__aeabi_dsub+0x4b0>
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d100      	bne.n	80025aa <__aeabi_dsub+0x5b6>
 80025a8:	e673      	b.n	8002292 <__aeabi_dsub+0x29e>
 80025aa:	464b      	mov	r3, r9
 80025ac:	1b5f      	subs	r7, r3, r5
 80025ae:	003b      	movs	r3, r7
 80025b0:	2d00      	cmp	r5, #0
 80025b2:	d100      	bne.n	80025b6 <__aeabi_dsub+0x5c2>
 80025b4:	e742      	b.n	800243c <__aeabi_dsub+0x448>
 80025b6:	2f38      	cmp	r7, #56	@ 0x38
 80025b8:	dd00      	ble.n	80025bc <__aeabi_dsub+0x5c8>
 80025ba:	e0ec      	b.n	8002796 <__aeabi_dsub+0x7a2>
 80025bc:	2380      	movs	r3, #128	@ 0x80
 80025be:	000e      	movs	r6, r1
 80025c0:	041b      	lsls	r3, r3, #16
 80025c2:	431c      	orrs	r4, r3
 80025c4:	2f1f      	cmp	r7, #31
 80025c6:	dc25      	bgt.n	8002614 <__aeabi_dsub+0x620>
 80025c8:	2520      	movs	r5, #32
 80025ca:	0023      	movs	r3, r4
 80025cc:	1bed      	subs	r5, r5, r7
 80025ce:	0001      	movs	r1, r0
 80025d0:	40a8      	lsls	r0, r5
 80025d2:	40ab      	lsls	r3, r5
 80025d4:	40f9      	lsrs	r1, r7
 80025d6:	1e45      	subs	r5, r0, #1
 80025d8:	41a8      	sbcs	r0, r5
 80025da:	430b      	orrs	r3, r1
 80025dc:	40fc      	lsrs	r4, r7
 80025de:	4318      	orrs	r0, r3
 80025e0:	465b      	mov	r3, fp
 80025e2:	1b1b      	subs	r3, r3, r4
 80025e4:	469b      	mov	fp, r3
 80025e6:	e739      	b.n	800245c <__aeabi_dsub+0x468>
 80025e8:	4666      	mov	r6, ip
 80025ea:	2501      	movs	r5, #1
 80025ec:	e562      	b.n	80020b4 <__aeabi_dsub+0xc0>
 80025ee:	001f      	movs	r7, r3
 80025f0:	4659      	mov	r1, fp
 80025f2:	3f20      	subs	r7, #32
 80025f4:	40f9      	lsrs	r1, r7
 80025f6:	468c      	mov	ip, r1
 80025f8:	2b20      	cmp	r3, #32
 80025fa:	d005      	beq.n	8002608 <__aeabi_dsub+0x614>
 80025fc:	2740      	movs	r7, #64	@ 0x40
 80025fe:	4659      	mov	r1, fp
 8002600:	1afb      	subs	r3, r7, r3
 8002602:	4099      	lsls	r1, r3
 8002604:	430a      	orrs	r2, r1
 8002606:	4692      	mov	sl, r2
 8002608:	4657      	mov	r7, sl
 800260a:	1e7b      	subs	r3, r7, #1
 800260c:	419f      	sbcs	r7, r3
 800260e:	4663      	mov	r3, ip
 8002610:	431f      	orrs	r7, r3
 8002612:	e5c1      	b.n	8002198 <__aeabi_dsub+0x1a4>
 8002614:	003b      	movs	r3, r7
 8002616:	0025      	movs	r5, r4
 8002618:	3b20      	subs	r3, #32
 800261a:	40dd      	lsrs	r5, r3
 800261c:	2f20      	cmp	r7, #32
 800261e:	d004      	beq.n	800262a <__aeabi_dsub+0x636>
 8002620:	2340      	movs	r3, #64	@ 0x40
 8002622:	1bdb      	subs	r3, r3, r7
 8002624:	409c      	lsls	r4, r3
 8002626:	4320      	orrs	r0, r4
 8002628:	4680      	mov	r8, r0
 800262a:	4640      	mov	r0, r8
 800262c:	1e43      	subs	r3, r0, #1
 800262e:	4198      	sbcs	r0, r3
 8002630:	4328      	orrs	r0, r5
 8002632:	e713      	b.n	800245c <__aeabi_dsub+0x468>
 8002634:	2900      	cmp	r1, #0
 8002636:	d09d      	beq.n	8002574 <__aeabi_dsub+0x580>
 8002638:	2601      	movs	r6, #1
 800263a:	4663      	mov	r3, ip
 800263c:	465c      	mov	r4, fp
 800263e:	4690      	mov	r8, r2
 8002640:	401e      	ands	r6, r3
 8002642:	e6db      	b.n	80023fc <__aeabi_dsub+0x408>
 8002644:	1a17      	subs	r7, r2, r0
 8002646:	465b      	mov	r3, fp
 8002648:	42ba      	cmp	r2, r7
 800264a:	4192      	sbcs	r2, r2
 800264c:	1b1c      	subs	r4, r3, r4
 800264e:	4252      	negs	r2, r2
 8002650:	1aa4      	subs	r4, r4, r2
 8002652:	0223      	lsls	r3, r4, #8
 8002654:	d4c8      	bmi.n	80025e8 <__aeabi_dsub+0x5f4>
 8002656:	0763      	lsls	r3, r4, #29
 8002658:	08ff      	lsrs	r7, r7, #3
 800265a:	431f      	orrs	r7, r3
 800265c:	4666      	mov	r6, ip
 800265e:	2301      	movs	r3, #1
 8002660:	08e5      	lsrs	r5, r4, #3
 8002662:	e71f      	b.n	80024a4 <__aeabi_dsub+0x4b0>
 8002664:	001d      	movs	r5, r3
 8002666:	2400      	movs	r4, #0
 8002668:	2700      	movs	r7, #0
 800266a:	e657      	b.n	800231c <__aeabi_dsub+0x328>
 800266c:	465c      	mov	r4, fp
 800266e:	08d0      	lsrs	r0, r2, #3
 8002670:	e66a      	b.n	8002348 <__aeabi_dsub+0x354>
 8002672:	2b00      	cmp	r3, #0
 8002674:	d100      	bne.n	8002678 <__aeabi_dsub+0x684>
 8002676:	e737      	b.n	80024e8 <__aeabi_dsub+0x4f4>
 8002678:	4653      	mov	r3, sl
 800267a:	08c0      	lsrs	r0, r0, #3
 800267c:	0767      	lsls	r7, r4, #29
 800267e:	4307      	orrs	r7, r0
 8002680:	08e5      	lsrs	r5, r4, #3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d100      	bne.n	8002688 <__aeabi_dsub+0x694>
 8002686:	e5b1      	b.n	80021ec <__aeabi_dsub+0x1f8>
 8002688:	2380      	movs	r3, #128	@ 0x80
 800268a:	031b      	lsls	r3, r3, #12
 800268c:	421d      	tst	r5, r3
 800268e:	d008      	beq.n	80026a2 <__aeabi_dsub+0x6ae>
 8002690:	4659      	mov	r1, fp
 8002692:	08c8      	lsrs	r0, r1, #3
 8002694:	4218      	tst	r0, r3
 8002696:	d104      	bne.n	80026a2 <__aeabi_dsub+0x6ae>
 8002698:	08d2      	lsrs	r2, r2, #3
 800269a:	0749      	lsls	r1, r1, #29
 800269c:	430a      	orrs	r2, r1
 800269e:	0017      	movs	r7, r2
 80026a0:	0005      	movs	r5, r0
 80026a2:	0f7b      	lsrs	r3, r7, #29
 80026a4:	00ff      	lsls	r7, r7, #3
 80026a6:	08ff      	lsrs	r7, r7, #3
 80026a8:	075b      	lsls	r3, r3, #29
 80026aa:	431f      	orrs	r7, r3
 80026ac:	e59e      	b.n	80021ec <__aeabi_dsub+0x1f8>
 80026ae:	08c0      	lsrs	r0, r0, #3
 80026b0:	0763      	lsls	r3, r4, #29
 80026b2:	4318      	orrs	r0, r3
 80026b4:	08e5      	lsrs	r5, r4, #3
 80026b6:	2900      	cmp	r1, #0
 80026b8:	d053      	beq.n	8002762 <__aeabi_dsub+0x76e>
 80026ba:	2380      	movs	r3, #128	@ 0x80
 80026bc:	031b      	lsls	r3, r3, #12
 80026be:	421d      	tst	r5, r3
 80026c0:	d00a      	beq.n	80026d8 <__aeabi_dsub+0x6e4>
 80026c2:	4659      	mov	r1, fp
 80026c4:	08cc      	lsrs	r4, r1, #3
 80026c6:	421c      	tst	r4, r3
 80026c8:	d106      	bne.n	80026d8 <__aeabi_dsub+0x6e4>
 80026ca:	2601      	movs	r6, #1
 80026cc:	4663      	mov	r3, ip
 80026ce:	0025      	movs	r5, r4
 80026d0:	08d0      	lsrs	r0, r2, #3
 80026d2:	0749      	lsls	r1, r1, #29
 80026d4:	4308      	orrs	r0, r1
 80026d6:	401e      	ands	r6, r3
 80026d8:	0f47      	lsrs	r7, r0, #29
 80026da:	00c0      	lsls	r0, r0, #3
 80026dc:	08c0      	lsrs	r0, r0, #3
 80026de:	077f      	lsls	r7, r7, #29
 80026e0:	4307      	orrs	r7, r0
 80026e2:	e583      	b.n	80021ec <__aeabi_dsub+0x1f8>
 80026e4:	1883      	adds	r3, r0, r2
 80026e6:	4293      	cmp	r3, r2
 80026e8:	4192      	sbcs	r2, r2
 80026ea:	445c      	add	r4, fp
 80026ec:	4252      	negs	r2, r2
 80026ee:	18a5      	adds	r5, r4, r2
 80026f0:	022a      	lsls	r2, r5, #8
 80026f2:	d500      	bpl.n	80026f6 <__aeabi_dsub+0x702>
 80026f4:	e724      	b.n	8002540 <__aeabi_dsub+0x54c>
 80026f6:	076f      	lsls	r7, r5, #29
 80026f8:	08db      	lsrs	r3, r3, #3
 80026fa:	431f      	orrs	r7, r3
 80026fc:	08ed      	lsrs	r5, r5, #3
 80026fe:	2301      	movs	r3, #1
 8002700:	e6d0      	b.n	80024a4 <__aeabi_dsub+0x4b0>
 8002702:	46c0      	nop			@ (mov r8, r8)
 8002704:	000007ff 	.word	0x000007ff
 8002708:	000007fe 	.word	0x000007fe
 800270c:	ff7fffff 	.word	0xff7fffff
 8002710:	465b      	mov	r3, fp
 8002712:	08d2      	lsrs	r2, r2, #3
 8002714:	075f      	lsls	r7, r3, #29
 8002716:	4666      	mov	r6, ip
 8002718:	4317      	orrs	r7, r2
 800271a:	08dd      	lsrs	r5, r3, #3
 800271c:	e566      	b.n	80021ec <__aeabi_dsub+0x1f8>
 800271e:	0025      	movs	r5, r4
 8002720:	3b20      	subs	r3, #32
 8002722:	40dd      	lsrs	r5, r3
 8002724:	4663      	mov	r3, ip
 8002726:	2b20      	cmp	r3, #32
 8002728:	d005      	beq.n	8002736 <__aeabi_dsub+0x742>
 800272a:	2340      	movs	r3, #64	@ 0x40
 800272c:	4661      	mov	r1, ip
 800272e:	1a5b      	subs	r3, r3, r1
 8002730:	409c      	lsls	r4, r3
 8002732:	4320      	orrs	r0, r4
 8002734:	4680      	mov	r8, r0
 8002736:	4647      	mov	r7, r8
 8002738:	1e7b      	subs	r3, r7, #1
 800273a:	419f      	sbcs	r7, r3
 800273c:	432f      	orrs	r7, r5
 800273e:	e5a0      	b.n	8002282 <__aeabi_dsub+0x28e>
 8002740:	2120      	movs	r1, #32
 8002742:	2700      	movs	r7, #0
 8002744:	1a09      	subs	r1, r1, r0
 8002746:	e4d2      	b.n	80020ee <__aeabi_dsub+0xfa>
 8002748:	2f00      	cmp	r7, #0
 800274a:	d100      	bne.n	800274e <__aeabi_dsub+0x75a>
 800274c:	e713      	b.n	8002576 <__aeabi_dsub+0x582>
 800274e:	465c      	mov	r4, fp
 8002750:	0017      	movs	r7, r2
 8002752:	2500      	movs	r5, #0
 8002754:	e5f6      	b.n	8002344 <__aeabi_dsub+0x350>
 8002756:	08d7      	lsrs	r7, r2, #3
 8002758:	0749      	lsls	r1, r1, #29
 800275a:	2302      	movs	r3, #2
 800275c:	430f      	orrs	r7, r1
 800275e:	092d      	lsrs	r5, r5, #4
 8002760:	e6a0      	b.n	80024a4 <__aeabi_dsub+0x4b0>
 8002762:	0007      	movs	r7, r0
 8002764:	e542      	b.n	80021ec <__aeabi_dsub+0x1f8>
 8002766:	465b      	mov	r3, fp
 8002768:	2601      	movs	r6, #1
 800276a:	075f      	lsls	r7, r3, #29
 800276c:	08dd      	lsrs	r5, r3, #3
 800276e:	4663      	mov	r3, ip
 8002770:	08d2      	lsrs	r2, r2, #3
 8002772:	4317      	orrs	r7, r2
 8002774:	401e      	ands	r6, r3
 8002776:	e539      	b.n	80021ec <__aeabi_dsub+0x1f8>
 8002778:	465b      	mov	r3, fp
 800277a:	08d2      	lsrs	r2, r2, #3
 800277c:	075f      	lsls	r7, r3, #29
 800277e:	4317      	orrs	r7, r2
 8002780:	08dd      	lsrs	r5, r3, #3
 8002782:	e533      	b.n	80021ec <__aeabi_dsub+0x1f8>
 8002784:	4a1e      	ldr	r2, [pc, #120]	@ (8002800 <__aeabi_dsub+0x80c>)
 8002786:	08db      	lsrs	r3, r3, #3
 8002788:	4022      	ands	r2, r4
 800278a:	0757      	lsls	r7, r2, #29
 800278c:	0252      	lsls	r2, r2, #9
 800278e:	2501      	movs	r5, #1
 8002790:	431f      	orrs	r7, r3
 8002792:	0b14      	lsrs	r4, r2, #12
 8002794:	e5c2      	b.n	800231c <__aeabi_dsub+0x328>
 8002796:	000e      	movs	r6, r1
 8002798:	2001      	movs	r0, #1
 800279a:	e65f      	b.n	800245c <__aeabi_dsub+0x468>
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00d      	beq.n	80027bc <__aeabi_dsub+0x7c8>
 80027a0:	464b      	mov	r3, r9
 80027a2:	1b5b      	subs	r3, r3, r5
 80027a4:	469c      	mov	ip, r3
 80027a6:	2d00      	cmp	r5, #0
 80027a8:	d100      	bne.n	80027ac <__aeabi_dsub+0x7b8>
 80027aa:	e548      	b.n	800223e <__aeabi_dsub+0x24a>
 80027ac:	2701      	movs	r7, #1
 80027ae:	2b38      	cmp	r3, #56	@ 0x38
 80027b0:	dd00      	ble.n	80027b4 <__aeabi_dsub+0x7c0>
 80027b2:	e566      	b.n	8002282 <__aeabi_dsub+0x28e>
 80027b4:	2380      	movs	r3, #128	@ 0x80
 80027b6:	041b      	lsls	r3, r3, #16
 80027b8:	431c      	orrs	r4, r3
 80027ba:	e550      	b.n	800225e <__aeabi_dsub+0x26a>
 80027bc:	1c6b      	adds	r3, r5, #1
 80027be:	4d11      	ldr	r5, [pc, #68]	@ (8002804 <__aeabi_dsub+0x810>)
 80027c0:	422b      	tst	r3, r5
 80027c2:	d000      	beq.n	80027c6 <__aeabi_dsub+0x7d2>
 80027c4:	e673      	b.n	80024ae <__aeabi_dsub+0x4ba>
 80027c6:	4659      	mov	r1, fp
 80027c8:	0023      	movs	r3, r4
 80027ca:	4311      	orrs	r1, r2
 80027cc:	468a      	mov	sl, r1
 80027ce:	4303      	orrs	r3, r0
 80027d0:	e600      	b.n	80023d4 <__aeabi_dsub+0x3e0>
 80027d2:	0767      	lsls	r7, r4, #29
 80027d4:	08c0      	lsrs	r0, r0, #3
 80027d6:	2300      	movs	r3, #0
 80027d8:	4307      	orrs	r7, r0
 80027da:	08e5      	lsrs	r5, r4, #3
 80027dc:	e662      	b.n	80024a4 <__aeabi_dsub+0x4b0>
 80027de:	0764      	lsls	r4, r4, #29
 80027e0:	08ff      	lsrs	r7, r7, #3
 80027e2:	4327      	orrs	r7, r4
 80027e4:	0905      	lsrs	r5, r0, #4
 80027e6:	e65d      	b.n	80024a4 <__aeabi_dsub+0x4b0>
 80027e8:	08d2      	lsrs	r2, r2, #3
 80027ea:	0749      	lsls	r1, r1, #29
 80027ec:	4311      	orrs	r1, r2
 80027ee:	000f      	movs	r7, r1
 80027f0:	2302      	movs	r3, #2
 80027f2:	092d      	lsrs	r5, r5, #4
 80027f4:	e656      	b.n	80024a4 <__aeabi_dsub+0x4b0>
 80027f6:	0007      	movs	r7, r0
 80027f8:	e5a4      	b.n	8002344 <__aeabi_dsub+0x350>
 80027fa:	0038      	movs	r0, r7
 80027fc:	e48f      	b.n	800211e <__aeabi_dsub+0x12a>
 80027fe:	46c0      	nop			@ (mov r8, r8)
 8002800:	ff7fffff 	.word	0xff7fffff
 8002804:	000007fe 	.word	0x000007fe

08002808 <__aeabi_dcmpun>:
 8002808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800280a:	46c6      	mov	lr, r8
 800280c:	031e      	lsls	r6, r3, #12
 800280e:	0b36      	lsrs	r6, r6, #12
 8002810:	46b0      	mov	r8, r6
 8002812:	4e0d      	ldr	r6, [pc, #52]	@ (8002848 <__aeabi_dcmpun+0x40>)
 8002814:	030c      	lsls	r4, r1, #12
 8002816:	004d      	lsls	r5, r1, #1
 8002818:	005f      	lsls	r7, r3, #1
 800281a:	b500      	push	{lr}
 800281c:	0b24      	lsrs	r4, r4, #12
 800281e:	0d6d      	lsrs	r5, r5, #21
 8002820:	0d7f      	lsrs	r7, r7, #21
 8002822:	42b5      	cmp	r5, r6
 8002824:	d00b      	beq.n	800283e <__aeabi_dcmpun+0x36>
 8002826:	4908      	ldr	r1, [pc, #32]	@ (8002848 <__aeabi_dcmpun+0x40>)
 8002828:	2000      	movs	r0, #0
 800282a:	428f      	cmp	r7, r1
 800282c:	d104      	bne.n	8002838 <__aeabi_dcmpun+0x30>
 800282e:	4646      	mov	r6, r8
 8002830:	4316      	orrs	r6, r2
 8002832:	0030      	movs	r0, r6
 8002834:	1e43      	subs	r3, r0, #1
 8002836:	4198      	sbcs	r0, r3
 8002838:	bc80      	pop	{r7}
 800283a:	46b8      	mov	r8, r7
 800283c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800283e:	4304      	orrs	r4, r0
 8002840:	2001      	movs	r0, #1
 8002842:	2c00      	cmp	r4, #0
 8002844:	d1f8      	bne.n	8002838 <__aeabi_dcmpun+0x30>
 8002846:	e7ee      	b.n	8002826 <__aeabi_dcmpun+0x1e>
 8002848:	000007ff 	.word	0x000007ff

0800284c <__aeabi_d2iz>:
 800284c:	000b      	movs	r3, r1
 800284e:	0002      	movs	r2, r0
 8002850:	b570      	push	{r4, r5, r6, lr}
 8002852:	4d16      	ldr	r5, [pc, #88]	@ (80028ac <__aeabi_d2iz+0x60>)
 8002854:	030c      	lsls	r4, r1, #12
 8002856:	b082      	sub	sp, #8
 8002858:	0049      	lsls	r1, r1, #1
 800285a:	2000      	movs	r0, #0
 800285c:	9200      	str	r2, [sp, #0]
 800285e:	9301      	str	r3, [sp, #4]
 8002860:	0b24      	lsrs	r4, r4, #12
 8002862:	0d49      	lsrs	r1, r1, #21
 8002864:	0fde      	lsrs	r6, r3, #31
 8002866:	42a9      	cmp	r1, r5
 8002868:	dd04      	ble.n	8002874 <__aeabi_d2iz+0x28>
 800286a:	4811      	ldr	r0, [pc, #68]	@ (80028b0 <__aeabi_d2iz+0x64>)
 800286c:	4281      	cmp	r1, r0
 800286e:	dd03      	ble.n	8002878 <__aeabi_d2iz+0x2c>
 8002870:	4b10      	ldr	r3, [pc, #64]	@ (80028b4 <__aeabi_d2iz+0x68>)
 8002872:	18f0      	adds	r0, r6, r3
 8002874:	b002      	add	sp, #8
 8002876:	bd70      	pop	{r4, r5, r6, pc}
 8002878:	2080      	movs	r0, #128	@ 0x80
 800287a:	0340      	lsls	r0, r0, #13
 800287c:	4320      	orrs	r0, r4
 800287e:	4c0e      	ldr	r4, [pc, #56]	@ (80028b8 <__aeabi_d2iz+0x6c>)
 8002880:	1a64      	subs	r4, r4, r1
 8002882:	2c1f      	cmp	r4, #31
 8002884:	dd08      	ble.n	8002898 <__aeabi_d2iz+0x4c>
 8002886:	4b0d      	ldr	r3, [pc, #52]	@ (80028bc <__aeabi_d2iz+0x70>)
 8002888:	1a5b      	subs	r3, r3, r1
 800288a:	40d8      	lsrs	r0, r3
 800288c:	0003      	movs	r3, r0
 800288e:	4258      	negs	r0, r3
 8002890:	2e00      	cmp	r6, #0
 8002892:	d1ef      	bne.n	8002874 <__aeabi_d2iz+0x28>
 8002894:	0018      	movs	r0, r3
 8002896:	e7ed      	b.n	8002874 <__aeabi_d2iz+0x28>
 8002898:	4b09      	ldr	r3, [pc, #36]	@ (80028c0 <__aeabi_d2iz+0x74>)
 800289a:	9a00      	ldr	r2, [sp, #0]
 800289c:	469c      	mov	ip, r3
 800289e:	0003      	movs	r3, r0
 80028a0:	4461      	add	r1, ip
 80028a2:	408b      	lsls	r3, r1
 80028a4:	40e2      	lsrs	r2, r4
 80028a6:	4313      	orrs	r3, r2
 80028a8:	e7f1      	b.n	800288e <__aeabi_d2iz+0x42>
 80028aa:	46c0      	nop			@ (mov r8, r8)
 80028ac:	000003fe 	.word	0x000003fe
 80028b0:	0000041d 	.word	0x0000041d
 80028b4:	7fffffff 	.word	0x7fffffff
 80028b8:	00000433 	.word	0x00000433
 80028bc:	00000413 	.word	0x00000413
 80028c0:	fffffbed 	.word	0xfffffbed

080028c4 <__aeabi_i2d>:
 80028c4:	b570      	push	{r4, r5, r6, lr}
 80028c6:	2800      	cmp	r0, #0
 80028c8:	d016      	beq.n	80028f8 <__aeabi_i2d+0x34>
 80028ca:	17c3      	asrs	r3, r0, #31
 80028cc:	18c5      	adds	r5, r0, r3
 80028ce:	405d      	eors	r5, r3
 80028d0:	0fc4      	lsrs	r4, r0, #31
 80028d2:	0028      	movs	r0, r5
 80028d4:	f000 f890 	bl	80029f8 <__clzsi2>
 80028d8:	4b10      	ldr	r3, [pc, #64]	@ (800291c <__aeabi_i2d+0x58>)
 80028da:	1a1b      	subs	r3, r3, r0
 80028dc:	055b      	lsls	r3, r3, #21
 80028de:	0d5b      	lsrs	r3, r3, #21
 80028e0:	280a      	cmp	r0, #10
 80028e2:	dc14      	bgt.n	800290e <__aeabi_i2d+0x4a>
 80028e4:	0002      	movs	r2, r0
 80028e6:	002e      	movs	r6, r5
 80028e8:	3215      	adds	r2, #21
 80028ea:	4096      	lsls	r6, r2
 80028ec:	220b      	movs	r2, #11
 80028ee:	1a12      	subs	r2, r2, r0
 80028f0:	40d5      	lsrs	r5, r2
 80028f2:	032d      	lsls	r5, r5, #12
 80028f4:	0b2d      	lsrs	r5, r5, #12
 80028f6:	e003      	b.n	8002900 <__aeabi_i2d+0x3c>
 80028f8:	2400      	movs	r4, #0
 80028fa:	2300      	movs	r3, #0
 80028fc:	2500      	movs	r5, #0
 80028fe:	2600      	movs	r6, #0
 8002900:	051b      	lsls	r3, r3, #20
 8002902:	432b      	orrs	r3, r5
 8002904:	07e4      	lsls	r4, r4, #31
 8002906:	4323      	orrs	r3, r4
 8002908:	0030      	movs	r0, r6
 800290a:	0019      	movs	r1, r3
 800290c:	bd70      	pop	{r4, r5, r6, pc}
 800290e:	380b      	subs	r0, #11
 8002910:	4085      	lsls	r5, r0
 8002912:	032d      	lsls	r5, r5, #12
 8002914:	2600      	movs	r6, #0
 8002916:	0b2d      	lsrs	r5, r5, #12
 8002918:	e7f2      	b.n	8002900 <__aeabi_i2d+0x3c>
 800291a:	46c0      	nop			@ (mov r8, r8)
 800291c:	0000041e 	.word	0x0000041e

08002920 <__aeabi_ui2d>:
 8002920:	b510      	push	{r4, lr}
 8002922:	1e04      	subs	r4, r0, #0
 8002924:	d010      	beq.n	8002948 <__aeabi_ui2d+0x28>
 8002926:	f000 f867 	bl	80029f8 <__clzsi2>
 800292a:	4b0e      	ldr	r3, [pc, #56]	@ (8002964 <__aeabi_ui2d+0x44>)
 800292c:	1a1b      	subs	r3, r3, r0
 800292e:	055b      	lsls	r3, r3, #21
 8002930:	0d5b      	lsrs	r3, r3, #21
 8002932:	280a      	cmp	r0, #10
 8002934:	dc0f      	bgt.n	8002956 <__aeabi_ui2d+0x36>
 8002936:	220b      	movs	r2, #11
 8002938:	0021      	movs	r1, r4
 800293a:	1a12      	subs	r2, r2, r0
 800293c:	40d1      	lsrs	r1, r2
 800293e:	3015      	adds	r0, #21
 8002940:	030a      	lsls	r2, r1, #12
 8002942:	4084      	lsls	r4, r0
 8002944:	0b12      	lsrs	r2, r2, #12
 8002946:	e001      	b.n	800294c <__aeabi_ui2d+0x2c>
 8002948:	2300      	movs	r3, #0
 800294a:	2200      	movs	r2, #0
 800294c:	051b      	lsls	r3, r3, #20
 800294e:	4313      	orrs	r3, r2
 8002950:	0020      	movs	r0, r4
 8002952:	0019      	movs	r1, r3
 8002954:	bd10      	pop	{r4, pc}
 8002956:	0022      	movs	r2, r4
 8002958:	380b      	subs	r0, #11
 800295a:	4082      	lsls	r2, r0
 800295c:	0312      	lsls	r2, r2, #12
 800295e:	2400      	movs	r4, #0
 8002960:	0b12      	lsrs	r2, r2, #12
 8002962:	e7f3      	b.n	800294c <__aeabi_ui2d+0x2c>
 8002964:	0000041e 	.word	0x0000041e

08002968 <__aeabi_f2d>:
 8002968:	b570      	push	{r4, r5, r6, lr}
 800296a:	0242      	lsls	r2, r0, #9
 800296c:	0043      	lsls	r3, r0, #1
 800296e:	0fc4      	lsrs	r4, r0, #31
 8002970:	20fe      	movs	r0, #254	@ 0xfe
 8002972:	0e1b      	lsrs	r3, r3, #24
 8002974:	1c59      	adds	r1, r3, #1
 8002976:	0a55      	lsrs	r5, r2, #9
 8002978:	4208      	tst	r0, r1
 800297a:	d00c      	beq.n	8002996 <__aeabi_f2d+0x2e>
 800297c:	21e0      	movs	r1, #224	@ 0xe0
 800297e:	0089      	lsls	r1, r1, #2
 8002980:	468c      	mov	ip, r1
 8002982:	076d      	lsls	r5, r5, #29
 8002984:	0b12      	lsrs	r2, r2, #12
 8002986:	4463      	add	r3, ip
 8002988:	051b      	lsls	r3, r3, #20
 800298a:	4313      	orrs	r3, r2
 800298c:	07e4      	lsls	r4, r4, #31
 800298e:	4323      	orrs	r3, r4
 8002990:	0028      	movs	r0, r5
 8002992:	0019      	movs	r1, r3
 8002994:	bd70      	pop	{r4, r5, r6, pc}
 8002996:	2b00      	cmp	r3, #0
 8002998:	d114      	bne.n	80029c4 <__aeabi_f2d+0x5c>
 800299a:	2d00      	cmp	r5, #0
 800299c:	d01b      	beq.n	80029d6 <__aeabi_f2d+0x6e>
 800299e:	0028      	movs	r0, r5
 80029a0:	f000 f82a 	bl	80029f8 <__clzsi2>
 80029a4:	280a      	cmp	r0, #10
 80029a6:	dc1c      	bgt.n	80029e2 <__aeabi_f2d+0x7a>
 80029a8:	230b      	movs	r3, #11
 80029aa:	002a      	movs	r2, r5
 80029ac:	1a1b      	subs	r3, r3, r0
 80029ae:	40da      	lsrs	r2, r3
 80029b0:	0003      	movs	r3, r0
 80029b2:	3315      	adds	r3, #21
 80029b4:	409d      	lsls	r5, r3
 80029b6:	4b0e      	ldr	r3, [pc, #56]	@ (80029f0 <__aeabi_f2d+0x88>)
 80029b8:	0312      	lsls	r2, r2, #12
 80029ba:	1a1b      	subs	r3, r3, r0
 80029bc:	055b      	lsls	r3, r3, #21
 80029be:	0b12      	lsrs	r2, r2, #12
 80029c0:	0d5b      	lsrs	r3, r3, #21
 80029c2:	e7e1      	b.n	8002988 <__aeabi_f2d+0x20>
 80029c4:	2d00      	cmp	r5, #0
 80029c6:	d009      	beq.n	80029dc <__aeabi_f2d+0x74>
 80029c8:	0b13      	lsrs	r3, r2, #12
 80029ca:	2280      	movs	r2, #128	@ 0x80
 80029cc:	0312      	lsls	r2, r2, #12
 80029ce:	431a      	orrs	r2, r3
 80029d0:	076d      	lsls	r5, r5, #29
 80029d2:	4b08      	ldr	r3, [pc, #32]	@ (80029f4 <__aeabi_f2d+0x8c>)
 80029d4:	e7d8      	b.n	8002988 <__aeabi_f2d+0x20>
 80029d6:	2300      	movs	r3, #0
 80029d8:	2200      	movs	r2, #0
 80029da:	e7d5      	b.n	8002988 <__aeabi_f2d+0x20>
 80029dc:	2200      	movs	r2, #0
 80029de:	4b05      	ldr	r3, [pc, #20]	@ (80029f4 <__aeabi_f2d+0x8c>)
 80029e0:	e7d2      	b.n	8002988 <__aeabi_f2d+0x20>
 80029e2:	0003      	movs	r3, r0
 80029e4:	002a      	movs	r2, r5
 80029e6:	3b0b      	subs	r3, #11
 80029e8:	409a      	lsls	r2, r3
 80029ea:	2500      	movs	r5, #0
 80029ec:	e7e3      	b.n	80029b6 <__aeabi_f2d+0x4e>
 80029ee:	46c0      	nop			@ (mov r8, r8)
 80029f0:	00000389 	.word	0x00000389
 80029f4:	000007ff 	.word	0x000007ff

080029f8 <__clzsi2>:
 80029f8:	211c      	movs	r1, #28
 80029fa:	2301      	movs	r3, #1
 80029fc:	041b      	lsls	r3, r3, #16
 80029fe:	4298      	cmp	r0, r3
 8002a00:	d301      	bcc.n	8002a06 <__clzsi2+0xe>
 8002a02:	0c00      	lsrs	r0, r0, #16
 8002a04:	3910      	subs	r1, #16
 8002a06:	0a1b      	lsrs	r3, r3, #8
 8002a08:	4298      	cmp	r0, r3
 8002a0a:	d301      	bcc.n	8002a10 <__clzsi2+0x18>
 8002a0c:	0a00      	lsrs	r0, r0, #8
 8002a0e:	3908      	subs	r1, #8
 8002a10:	091b      	lsrs	r3, r3, #4
 8002a12:	4298      	cmp	r0, r3
 8002a14:	d301      	bcc.n	8002a1a <__clzsi2+0x22>
 8002a16:	0900      	lsrs	r0, r0, #4
 8002a18:	3904      	subs	r1, #4
 8002a1a:	a202      	add	r2, pc, #8	@ (adr r2, 8002a24 <__clzsi2+0x2c>)
 8002a1c:	5c10      	ldrb	r0, [r2, r0]
 8002a1e:	1840      	adds	r0, r0, r1
 8002a20:	4770      	bx	lr
 8002a22:	46c0      	nop			@ (mov r8, r8)
 8002a24:	02020304 	.word	0x02020304
 8002a28:	01010101 	.word	0x01010101
	...

08002a34 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002a38:	4b0c      	ldr	r3, [pc, #48]	@ (8002a6c <MX_CRC_Init+0x38>)
 8002a3a:	4a0d      	ldr	r2, [pc, #52]	@ (8002a70 <MX_CRC_Init+0x3c>)
 8002a3c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8002a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a6c <MX_CRC_Init+0x38>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	711a      	strb	r2, [r3, #4]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8002a44:	4b09      	ldr	r3, [pc, #36]	@ (8002a6c <MX_CRC_Init+0x38>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	60da      	str	r2, [r3, #12]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8002a4a:	4b08      	ldr	r3, [pc, #32]	@ (8002a6c <MX_CRC_Init+0x38>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	611a      	str	r2, [r3, #16]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002a50:	4b06      	ldr	r3, [pc, #24]	@ (8002a6c <MX_CRC_Init+0x38>)
 8002a52:	2201      	movs	r2, #1
 8002a54:	619a      	str	r2, [r3, #24]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002a56:	4b05      	ldr	r3, [pc, #20]	@ (8002a6c <MX_CRC_Init+0x38>)
 8002a58:	0018      	movs	r0, r3
 8002a5a:	f000 fdd1 	bl	8003600 <HAL_CRC_Init>
 8002a5e:	1e03      	subs	r3, r0, #0
 8002a60:	d001      	beq.n	8002a66 <MX_CRC_Init+0x32>
  {
    Error_Handler();
 8002a62:	f000 fa9b 	bl	8002f9c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002a66:	46c0      	nop			@ (mov r8, r8)
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	200001f0 	.word	0x200001f0
 8002a70:	40023000 	.word	0x40023000

08002a74 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a09      	ldr	r2, [pc, #36]	@ (8002aa8 <HAL_CRC_MspInit+0x34>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d10b      	bne.n	8002a9e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002a86:	4b09      	ldr	r3, [pc, #36]	@ (8002aac <HAL_CRC_MspInit+0x38>)
 8002a88:	695a      	ldr	r2, [r3, #20]
 8002a8a:	4b08      	ldr	r3, [pc, #32]	@ (8002aac <HAL_CRC_MspInit+0x38>)
 8002a8c:	2140      	movs	r1, #64	@ 0x40
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	615a      	str	r2, [r3, #20]
 8002a92:	4b06      	ldr	r3, [pc, #24]	@ (8002aac <HAL_CRC_MspInit+0x38>)
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	2240      	movs	r2, #64	@ 0x40
 8002a98:	4013      	ands	r3, r2
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8002a9e:	46c0      	nop			@ (mov r8, r8)
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	b004      	add	sp, #16
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	46c0      	nop			@ (mov r8, r8)
 8002aa8:	40023000 	.word	0x40023000
 8002aac:	40021000 	.word	0x40021000

08002ab0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002ab0:	b590      	push	{r4, r7, lr}
 8002ab2:	b08b      	sub	sp, #44	@ 0x2c
 8002ab4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab6:	2414      	movs	r4, #20
 8002ab8:	193b      	adds	r3, r7, r4
 8002aba:	0018      	movs	r0, r3
 8002abc:	2314      	movs	r3, #20
 8002abe:	001a      	movs	r2, r3
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	f003 fe1f 	bl	8006704 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ac6:	4b34      	ldr	r3, [pc, #208]	@ (8002b98 <MX_GPIO_Init+0xe8>)
 8002ac8:	695a      	ldr	r2, [r3, #20]
 8002aca:	4b33      	ldr	r3, [pc, #204]	@ (8002b98 <MX_GPIO_Init+0xe8>)
 8002acc:	2180      	movs	r1, #128	@ 0x80
 8002ace:	0309      	lsls	r1, r1, #12
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	615a      	str	r2, [r3, #20]
 8002ad4:	4b30      	ldr	r3, [pc, #192]	@ (8002b98 <MX_GPIO_Init+0xe8>)
 8002ad6:	695a      	ldr	r2, [r3, #20]
 8002ad8:	2380      	movs	r3, #128	@ 0x80
 8002ada:	031b      	lsls	r3, r3, #12
 8002adc:	4013      	ands	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
 8002ae0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ae2:	4b2d      	ldr	r3, [pc, #180]	@ (8002b98 <MX_GPIO_Init+0xe8>)
 8002ae4:	695a      	ldr	r2, [r3, #20]
 8002ae6:	4b2c      	ldr	r3, [pc, #176]	@ (8002b98 <MX_GPIO_Init+0xe8>)
 8002ae8:	2180      	movs	r1, #128	@ 0x80
 8002aea:	03c9      	lsls	r1, r1, #15
 8002aec:	430a      	orrs	r2, r1
 8002aee:	615a      	str	r2, [r3, #20]
 8002af0:	4b29      	ldr	r3, [pc, #164]	@ (8002b98 <MX_GPIO_Init+0xe8>)
 8002af2:	695a      	ldr	r2, [r3, #20]
 8002af4:	2380      	movs	r3, #128	@ 0x80
 8002af6:	03db      	lsls	r3, r3, #15
 8002af8:	4013      	ands	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002afe:	4b26      	ldr	r3, [pc, #152]	@ (8002b98 <MX_GPIO_Init+0xe8>)
 8002b00:	695a      	ldr	r2, [r3, #20]
 8002b02:	4b25      	ldr	r3, [pc, #148]	@ (8002b98 <MX_GPIO_Init+0xe8>)
 8002b04:	2180      	movs	r1, #128	@ 0x80
 8002b06:	0289      	lsls	r1, r1, #10
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	615a      	str	r2, [r3, #20]
 8002b0c:	4b22      	ldr	r3, [pc, #136]	@ (8002b98 <MX_GPIO_Init+0xe8>)
 8002b0e:	695a      	ldr	r2, [r3, #20]
 8002b10:	2380      	movs	r3, #128	@ 0x80
 8002b12:	029b      	lsls	r3, r3, #10
 8002b14:	4013      	ands	r3, r2
 8002b16:	60bb      	str	r3, [r7, #8]
 8002b18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b1a:	4b1f      	ldr	r3, [pc, #124]	@ (8002b98 <MX_GPIO_Init+0xe8>)
 8002b1c:	695a      	ldr	r2, [r3, #20]
 8002b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8002b98 <MX_GPIO_Init+0xe8>)
 8002b20:	2180      	movs	r1, #128	@ 0x80
 8002b22:	02c9      	lsls	r1, r1, #11
 8002b24:	430a      	orrs	r2, r1
 8002b26:	615a      	str	r2, [r3, #20]
 8002b28:	4b1b      	ldr	r3, [pc, #108]	@ (8002b98 <MX_GPIO_Init+0xe8>)
 8002b2a:	695a      	ldr	r2, [r3, #20]
 8002b2c:	2380      	movs	r3, #128	@ 0x80
 8002b2e:	02db      	lsls	r3, r3, #11
 8002b30:	4013      	ands	r3, r2
 8002b32:	607b      	str	r3, [r7, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002b36:	2390      	movs	r3, #144	@ 0x90
 8002b38:	05db      	lsls	r3, r3, #23
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	2120      	movs	r1, #32
 8002b3e:	0018      	movs	r0, r3
 8002b40:	f000 ff16 	bl	8003970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002b44:	193b      	adds	r3, r7, r4
 8002b46:	2280      	movs	r2, #128	@ 0x80
 8002b48:	0192      	lsls	r2, r2, #6
 8002b4a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b4c:	193b      	adds	r3, r7, r4
 8002b4e:	2284      	movs	r2, #132	@ 0x84
 8002b50:	0392      	lsls	r2, r2, #14
 8002b52:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b54:	193b      	adds	r3, r7, r4
 8002b56:	2200      	movs	r2, #0
 8002b58:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002b5a:	193b      	adds	r3, r7, r4
 8002b5c:	4a0f      	ldr	r2, [pc, #60]	@ (8002b9c <MX_GPIO_Init+0xec>)
 8002b5e:	0019      	movs	r1, r3
 8002b60:	0010      	movs	r0, r2
 8002b62:	f000 fd95 	bl	8003690 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002b66:	0021      	movs	r1, r4
 8002b68:	187b      	adds	r3, r7, r1
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b6e:	187b      	adds	r3, r7, r1
 8002b70:	2201      	movs	r2, #1
 8002b72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b74:	187b      	adds	r3, r7, r1
 8002b76:	2200      	movs	r2, #0
 8002b78:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7a:	187b      	adds	r3, r7, r1
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002b80:	187a      	adds	r2, r7, r1
 8002b82:	2390      	movs	r3, #144	@ 0x90
 8002b84:	05db      	lsls	r3, r3, #23
 8002b86:	0011      	movs	r1, r2
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f000 fd81 	bl	8003690 <HAL_GPIO_Init>

}
 8002b8e:	46c0      	nop			@ (mov r8, r8)
 8002b90:	46bd      	mov	sp, r7
 8002b92:	b00b      	add	sp, #44	@ 0x2c
 8002b94:	bd90      	pop	{r4, r7, pc}
 8002b96:	46c0      	nop			@ (mov r8, r8)
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	48000800 	.word	0x48000800

08002ba0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c14 <MX_I2C1_Init+0x74>)
 8002ba6:	4a1c      	ldr	r2, [pc, #112]	@ (8002c18 <MX_I2C1_Init+0x78>)
 8002ba8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10805D88;
 8002baa:	4b1a      	ldr	r3, [pc, #104]	@ (8002c14 <MX_I2C1_Init+0x74>)
 8002bac:	4a1b      	ldr	r2, [pc, #108]	@ (8002c1c <MX_I2C1_Init+0x7c>)
 8002bae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002bb0:	4b18      	ldr	r3, [pc, #96]	@ (8002c14 <MX_I2C1_Init+0x74>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bb6:	4b17      	ldr	r3, [pc, #92]	@ (8002c14 <MX_I2C1_Init+0x74>)
 8002bb8:	2201      	movs	r2, #1
 8002bba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bbc:	4b15      	ldr	r3, [pc, #84]	@ (8002c14 <MX_I2C1_Init+0x74>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002bc2:	4b14      	ldr	r3, [pc, #80]	@ (8002c14 <MX_I2C1_Init+0x74>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002bc8:	4b12      	ldr	r3, [pc, #72]	@ (8002c14 <MX_I2C1_Init+0x74>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002bce:	4b11      	ldr	r3, [pc, #68]	@ (8002c14 <MX_I2C1_Init+0x74>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8002c14 <MX_I2C1_Init+0x74>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002bda:	4b0e      	ldr	r3, [pc, #56]	@ (8002c14 <MX_I2C1_Init+0x74>)
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f000 fee5 	bl	80039ac <HAL_I2C_Init>
 8002be2:	1e03      	subs	r3, r0, #0
 8002be4:	d001      	beq.n	8002bea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002be6:	f000 f9d9 	bl	8002f9c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002bea:	4b0a      	ldr	r3, [pc, #40]	@ (8002c14 <MX_I2C1_Init+0x74>)
 8002bec:	2100      	movs	r1, #0
 8002bee:	0018      	movs	r0, r3
 8002bf0:	f001 fce0 	bl	80045b4 <HAL_I2CEx_ConfigAnalogFilter>
 8002bf4:	1e03      	subs	r3, r0, #0
 8002bf6:	d001      	beq.n	8002bfc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002bf8:	f000 f9d0 	bl	8002f9c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002bfc:	4b05      	ldr	r3, [pc, #20]	@ (8002c14 <MX_I2C1_Init+0x74>)
 8002bfe:	2100      	movs	r1, #0
 8002c00:	0018      	movs	r0, r3
 8002c02:	f001 fd23 	bl	800464c <HAL_I2CEx_ConfigDigitalFilter>
 8002c06:	1e03      	subs	r3, r0, #0
 8002c08:	d001      	beq.n	8002c0e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002c0a:	f000 f9c7 	bl	8002f9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c0e:	46c0      	nop			@ (mov r8, r8)
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	2000020c 	.word	0x2000020c
 8002c18:	40005400 	.word	0x40005400
 8002c1c:	10805d88 	.word	0x10805d88

08002c20 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002c20:	b590      	push	{r4, r7, lr}
 8002c22:	b08b      	sub	sp, #44	@ 0x2c
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c28:	2414      	movs	r4, #20
 8002c2a:	193b      	adds	r3, r7, r4
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	2314      	movs	r3, #20
 8002c30:	001a      	movs	r2, r3
 8002c32:	2100      	movs	r1, #0
 8002c34:	f003 fd66 	bl	8006704 <memset>
  if(i2cHandle->Instance==I2C1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a1c      	ldr	r2, [pc, #112]	@ (8002cb0 <HAL_I2C_MspInit+0x90>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d132      	bne.n	8002ca8 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c42:	4b1c      	ldr	r3, [pc, #112]	@ (8002cb4 <HAL_I2C_MspInit+0x94>)
 8002c44:	695a      	ldr	r2, [r3, #20]
 8002c46:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb4 <HAL_I2C_MspInit+0x94>)
 8002c48:	2180      	movs	r1, #128	@ 0x80
 8002c4a:	02c9      	lsls	r1, r1, #11
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	615a      	str	r2, [r3, #20]
 8002c50:	4b18      	ldr	r3, [pc, #96]	@ (8002cb4 <HAL_I2C_MspInit+0x94>)
 8002c52:	695a      	ldr	r2, [r3, #20]
 8002c54:	2380      	movs	r3, #128	@ 0x80
 8002c56:	02db      	lsls	r3, r3, #11
 8002c58:	4013      	ands	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]
 8002c5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c5e:	193b      	adds	r3, r7, r4
 8002c60:	22c0      	movs	r2, #192	@ 0xc0
 8002c62:	0092      	lsls	r2, r2, #2
 8002c64:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c66:	0021      	movs	r1, r4
 8002c68:	187b      	adds	r3, r7, r1
 8002c6a:	2212      	movs	r2, #18
 8002c6c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6e:	187b      	adds	r3, r7, r1
 8002c70:	2200      	movs	r2, #0
 8002c72:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c74:	187b      	adds	r3, r7, r1
 8002c76:	2203      	movs	r2, #3
 8002c78:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002c7a:	187b      	adds	r3, r7, r1
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c80:	187b      	adds	r3, r7, r1
 8002c82:	4a0d      	ldr	r2, [pc, #52]	@ (8002cb8 <HAL_I2C_MspInit+0x98>)
 8002c84:	0019      	movs	r1, r3
 8002c86:	0010      	movs	r0, r2
 8002c88:	f000 fd02 	bl	8003690 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c8c:	4b09      	ldr	r3, [pc, #36]	@ (8002cb4 <HAL_I2C_MspInit+0x94>)
 8002c8e:	69da      	ldr	r2, [r3, #28]
 8002c90:	4b08      	ldr	r3, [pc, #32]	@ (8002cb4 <HAL_I2C_MspInit+0x94>)
 8002c92:	2180      	movs	r1, #128	@ 0x80
 8002c94:	0389      	lsls	r1, r1, #14
 8002c96:	430a      	orrs	r2, r1
 8002c98:	61da      	str	r2, [r3, #28]
 8002c9a:	4b06      	ldr	r3, [pc, #24]	@ (8002cb4 <HAL_I2C_MspInit+0x94>)
 8002c9c:	69da      	ldr	r2, [r3, #28]
 8002c9e:	2380      	movs	r3, #128	@ 0x80
 8002ca0:	039b      	lsls	r3, r3, #14
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002ca8:	46c0      	nop			@ (mov r8, r8)
 8002caa:	46bd      	mov	sp, r7
 8002cac:	b00b      	add	sp, #44	@ 0x2c
 8002cae:	bd90      	pop	{r4, r7, pc}
 8002cb0:	40005400 	.word	0x40005400
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	48000400 	.word	0x48000400

08002cbc <MPU6050_Init>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define MPU6050_ADDR 0x68 << 1
#define CONVERT_G_TO_MS2 9.80665f

void MPU6050_Init(void) {
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af04      	add	r7, sp, #16
    uint8_t check, data;
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, 0x75, 1, &check, 1, 100);
 8002cc2:	4811      	ldr	r0, [pc, #68]	@ (8002d08 <MPU6050_Init+0x4c>)
 8002cc4:	2364      	movs	r3, #100	@ 0x64
 8002cc6:	9302      	str	r3, [sp, #8]
 8002cc8:	2301      	movs	r3, #1
 8002cca:	9301      	str	r3, [sp, #4]
 8002ccc:	1dfb      	adds	r3, r7, #7
 8002cce:	9300      	str	r3, [sp, #0]
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	2275      	movs	r2, #117	@ 0x75
 8002cd4:	21d0      	movs	r1, #208	@ 0xd0
 8002cd6:	f001 f83d 	bl	8003d54 <HAL_I2C_Mem_Read>
    if (check == 0x68) {
 8002cda:	1dfb      	adds	r3, r7, #7
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	2b68      	cmp	r3, #104	@ 0x68
 8002ce0:	d10e      	bne.n	8002d00 <MPU6050_Init+0x44>
        data = 0;
 8002ce2:	1dbb      	adds	r3, r7, #6
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x6B, 1, &data, 1, 100);  // Wake up
 8002ce8:	4807      	ldr	r0, [pc, #28]	@ (8002d08 <MPU6050_Init+0x4c>)
 8002cea:	2364      	movs	r3, #100	@ 0x64
 8002cec:	9302      	str	r3, [sp, #8]
 8002cee:	2301      	movs	r3, #1
 8002cf0:	9301      	str	r3, [sp, #4]
 8002cf2:	1dbb      	adds	r3, r7, #6
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	226b      	movs	r2, #107	@ 0x6b
 8002cfa:	21d0      	movs	r1, #208	@ 0xd0
 8002cfc:	f000 fefc 	bl	8003af8 <HAL_I2C_Mem_Write>
    }
}
 8002d00:	46c0      	nop			@ (mov r8, r8)
 8002d02:	46bd      	mov	sp, r7
 8002d04:	b002      	add	sp, #8
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	2000020c 	.word	0x2000020c

08002d0c <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(float *ax, float *ay, float *az) {
 8002d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d0e:	b08d      	sub	sp, #52	@ 0x34
 8002d10:	af04      	add	r7, sp, #16
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
    uint8_t rec[6];
    int16_t raw_x, raw_y, raw_z;

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, 0x3B, 1, rec, 6, 100);
 8002d18:	483a      	ldr	r0, [pc, #232]	@ (8002e04 <MPU6050_Read_Accel+0xf8>)
 8002d1a:	2364      	movs	r3, #100	@ 0x64
 8002d1c:	9302      	str	r3, [sp, #8]
 8002d1e:	2306      	movs	r3, #6
 8002d20:	9301      	str	r3, [sp, #4]
 8002d22:	2414      	movs	r4, #20
 8002d24:	193b      	adds	r3, r7, r4
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	2301      	movs	r3, #1
 8002d2a:	223b      	movs	r2, #59	@ 0x3b
 8002d2c:	21d0      	movs	r1, #208	@ 0xd0
 8002d2e:	f001 f811 	bl	8003d54 <HAL_I2C_Mem_Read>
    raw_x = (int16_t)(rec[0] << 8 | rec[1]);
 8002d32:	0020      	movs	r0, r4
 8002d34:	183b      	adds	r3, r7, r0
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	b21b      	sxth	r3, r3
 8002d3a:	021b      	lsls	r3, r3, #8
 8002d3c:	b219      	sxth	r1, r3
 8002d3e:	183b      	adds	r3, r7, r0
 8002d40:	785b      	ldrb	r3, [r3, #1]
 8002d42:	b21a      	sxth	r2, r3
 8002d44:	241e      	movs	r4, #30
 8002d46:	193b      	adds	r3, r7, r4
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	801a      	strh	r2, [r3, #0]
    raw_y = (int16_t)(rec[2] << 8 | rec[3]);
 8002d4c:	183b      	adds	r3, r7, r0
 8002d4e:	789b      	ldrb	r3, [r3, #2]
 8002d50:	b21b      	sxth	r3, r3
 8002d52:	021b      	lsls	r3, r3, #8
 8002d54:	b219      	sxth	r1, r3
 8002d56:	183b      	adds	r3, r7, r0
 8002d58:	78db      	ldrb	r3, [r3, #3]
 8002d5a:	b21a      	sxth	r2, r3
 8002d5c:	251c      	movs	r5, #28
 8002d5e:	197b      	adds	r3, r7, r5
 8002d60:	430a      	orrs	r2, r1
 8002d62:	801a      	strh	r2, [r3, #0]
    raw_z = (int16_t)(rec[4] << 8 | rec[5]);
 8002d64:	183b      	adds	r3, r7, r0
 8002d66:	791b      	ldrb	r3, [r3, #4]
 8002d68:	b21b      	sxth	r3, r3
 8002d6a:	021b      	lsls	r3, r3, #8
 8002d6c:	b219      	sxth	r1, r3
 8002d6e:	183b      	adds	r3, r7, r0
 8002d70:	795b      	ldrb	r3, [r3, #5]
 8002d72:	b21a      	sxth	r2, r3
 8002d74:	261a      	movs	r6, #26
 8002d76:	19bb      	adds	r3, r7, r6
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	801a      	strh	r2, [r3, #0]

    *ax = ((float)raw_x / 16384.0f) * CONVERT_G_TO_MS2;
 8002d7c:	193b      	adds	r3, r7, r4
 8002d7e:	2200      	movs	r2, #0
 8002d80:	5e9b      	ldrsh	r3, [r3, r2]
 8002d82:	0018      	movs	r0, r3
 8002d84:	f7fd fe00 	bl	8000988 <__aeabi_i2f>
 8002d88:	1c03      	adds	r3, r0, #0
 8002d8a:	218d      	movs	r1, #141	@ 0x8d
 8002d8c:	05c9      	lsls	r1, r1, #23
 8002d8e:	1c18      	adds	r0, r3, #0
 8002d90:	f7fd fb8a 	bl	80004a8 <__aeabi_fdiv>
 8002d94:	1c03      	adds	r3, r0, #0
 8002d96:	491c      	ldr	r1, [pc, #112]	@ (8002e08 <MPU6050_Read_Accel+0xfc>)
 8002d98:	1c18      	adds	r0, r3, #0
 8002d9a:	f7fd fc9b 	bl	80006d4 <__aeabi_fmul>
 8002d9e:	1c03      	adds	r3, r0, #0
 8002da0:	1c1a      	adds	r2, r3, #0
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	601a      	str	r2, [r3, #0]
    *ay = ((float)raw_y / 16384.0f) * CONVERT_G_TO_MS2;
 8002da6:	197b      	adds	r3, r7, r5
 8002da8:	2200      	movs	r2, #0
 8002daa:	5e9b      	ldrsh	r3, [r3, r2]
 8002dac:	0018      	movs	r0, r3
 8002dae:	f7fd fdeb 	bl	8000988 <__aeabi_i2f>
 8002db2:	1c03      	adds	r3, r0, #0
 8002db4:	218d      	movs	r1, #141	@ 0x8d
 8002db6:	05c9      	lsls	r1, r1, #23
 8002db8:	1c18      	adds	r0, r3, #0
 8002dba:	f7fd fb75 	bl	80004a8 <__aeabi_fdiv>
 8002dbe:	1c03      	adds	r3, r0, #0
 8002dc0:	4911      	ldr	r1, [pc, #68]	@ (8002e08 <MPU6050_Read_Accel+0xfc>)
 8002dc2:	1c18      	adds	r0, r3, #0
 8002dc4:	f7fd fc86 	bl	80006d4 <__aeabi_fmul>
 8002dc8:	1c03      	adds	r3, r0, #0
 8002dca:	1c1a      	adds	r2, r3, #0
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	601a      	str	r2, [r3, #0]
    *az = ((float)raw_z / 16384.0f) * CONVERT_G_TO_MS2;
 8002dd0:	19bb      	adds	r3, r7, r6
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	5e9b      	ldrsh	r3, [r3, r2]
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	f7fd fdd6 	bl	8000988 <__aeabi_i2f>
 8002ddc:	1c03      	adds	r3, r0, #0
 8002dde:	218d      	movs	r1, #141	@ 0x8d
 8002de0:	05c9      	lsls	r1, r1, #23
 8002de2:	1c18      	adds	r0, r3, #0
 8002de4:	f7fd fb60 	bl	80004a8 <__aeabi_fdiv>
 8002de8:	1c03      	adds	r3, r0, #0
 8002dea:	4907      	ldr	r1, [pc, #28]	@ (8002e08 <MPU6050_Read_Accel+0xfc>)
 8002dec:	1c18      	adds	r0, r3, #0
 8002dee:	f7fd fc71 	bl	80006d4 <__aeabi_fmul>
 8002df2:	1c03      	adds	r3, r0, #0
 8002df4:	1c1a      	adds	r2, r3, #0
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	601a      	str	r2, [r3, #0]
}
 8002dfa:	46c0      	nop			@ (mov r8, r8)
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	b009      	add	sp, #36	@ 0x24
 8002e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e02:	46c0      	nop			@ (mov r8, r8)
 8002e04:	2000020c 	.word	0x2000020c
 8002e08:	411ce80a 	.word	0x411ce80a

08002e0c <__io_putchar>:

int __io_putchar(int ch) {
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002e14:	2301      	movs	r3, #1
 8002e16:	425b      	negs	r3, r3
 8002e18:	1d39      	adds	r1, r7, #4
 8002e1a:	4804      	ldr	r0, [pc, #16]	@ (8002e2c <__io_putchar+0x20>)
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f002 f9e1 	bl	80051e4 <HAL_UART_Transmit>
    return ch;
 8002e22:	687b      	ldr	r3, [r7, #4]
}
 8002e24:	0018      	movs	r0, r3
 8002e26:	46bd      	mov	sp, r7
 8002e28:	b002      	add	sp, #8
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	200002ec 	.word	0x200002ec

08002e30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e30:	b5b0      	push	{r4, r5, r7, lr}
 8002e32:	b08a      	sub	sp, #40	@ 0x28
 8002e34:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e36:	f000 facb 	bl	80033d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e3a:	f000 f84b 	bl	8002ed4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e3e:	f7ff fe37 	bl	8002ab0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002e42:	f7ff fead 	bl	8002ba0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002e46:	f000 f9b1 	bl	80031ac <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002e4a:	f000 f9df 	bl	800320c <MX_USART2_UART_Init>
  MX_CRC_Init();
 8002e4e:	f7ff fdf1 	bl	8002a34 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init();
 8002e52:	f7ff ff33 	bl	8002cbc <MPU6050_Init>
  printf("Started\r\n");
 8002e56:	4b1d      	ldr	r3, [pc, #116]	@ (8002ecc <main+0x9c>)
 8002e58:	0018      	movs	r0, r3
 8002e5a:	f003 fb5d 	bl	8006518 <puts>
  float ax, ay, az;
  uint32_t t0 = HAL_GetTick();
 8002e5e:	f000 fb11 	bl	8003484 <HAL_GetTick>
 8002e62:	0003      	movs	r3, r0
 8002e64:	617b      	str	r3, [r7, #20]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      if (HAL_GetTick() - t0 >= 20) {  // ~50Hz
 8002e66:	f000 fb0d 	bl	8003484 <HAL_GetTick>
 8002e6a:	0002      	movs	r2, r0
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b13      	cmp	r3, #19
 8002e72:	d9f8      	bls.n	8002e66 <main+0x36>
          t0 = HAL_GetTick();
 8002e74:	f000 fb06 	bl	8003484 <HAL_GetTick>
 8002e78:	0003      	movs	r3, r0
 8002e7a:	617b      	str	r3, [r7, #20]
          MPU6050_Read_Accel(&ax, &ay, &az);
 8002e7c:	2008      	movs	r0, #8
 8002e7e:	183a      	adds	r2, r7, r0
 8002e80:	230c      	movs	r3, #12
 8002e82:	18f9      	adds	r1, r7, r3
 8002e84:	2308      	movs	r3, #8
 8002e86:	181b      	adds	r3, r3, r0
 8002e88:	19db      	adds	r3, r3, r7
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	f7ff ff3e 	bl	8002d0c <MPU6050_Read_Accel>
          printf("%.2f,%.2f,%.2f\r\n", ax, ay, az);  // Формат для data-forwarder
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1c18      	adds	r0, r3, #0
 8002e94:	f7ff fd68 	bl	8002968 <__aeabi_f2d>
 8002e98:	6038      	str	r0, [r7, #0]
 8002e9a:	6079      	str	r1, [r7, #4]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	1c18      	adds	r0, r3, #0
 8002ea0:	f7ff fd62 	bl	8002968 <__aeabi_f2d>
 8002ea4:	0004      	movs	r4, r0
 8002ea6:	000d      	movs	r5, r1
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	1c18      	adds	r0, r3, #0
 8002eac:	f7ff fd5c 	bl	8002968 <__aeabi_f2d>
 8002eb0:	0002      	movs	r2, r0
 8002eb2:	000b      	movs	r3, r1
 8002eb4:	4906      	ldr	r1, [pc, #24]	@ (8002ed0 <main+0xa0>)
 8002eb6:	9202      	str	r2, [sp, #8]
 8002eb8:	9303      	str	r3, [sp, #12]
 8002eba:	9400      	str	r4, [sp, #0]
 8002ebc:	9501      	str	r5, [sp, #4]
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	0008      	movs	r0, r1
 8002ec4:	f003 fac2 	bl	800644c <iprintf>
      if (HAL_GetTick() - t0 >= 20) {  // ~50Hz
 8002ec8:	e7cd      	b.n	8002e66 <main+0x36>
 8002eca:	46c0      	nop			@ (mov r8, r8)
 8002ecc:	08008548 	.word	0x08008548
 8002ed0:	08008554 	.word	0x08008554

08002ed4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ed4:	b590      	push	{r4, r7, lr}
 8002ed6:	b095      	sub	sp, #84	@ 0x54
 8002ed8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002eda:	2420      	movs	r4, #32
 8002edc:	193b      	adds	r3, r7, r4
 8002ede:	0018      	movs	r0, r3
 8002ee0:	2330      	movs	r3, #48	@ 0x30
 8002ee2:	001a      	movs	r2, r3
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	f003 fc0d 	bl	8006704 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002eea:	2310      	movs	r3, #16
 8002eec:	18fb      	adds	r3, r7, r3
 8002eee:	0018      	movs	r0, r3
 8002ef0:	2310      	movs	r3, #16
 8002ef2:	001a      	movs	r2, r3
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	f003 fc05 	bl	8006704 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002efa:	003b      	movs	r3, r7
 8002efc:	0018      	movs	r0, r3
 8002efe:	2310      	movs	r3, #16
 8002f00:	001a      	movs	r2, r3
 8002f02:	2100      	movs	r1, #0
 8002f04:	f003 fbfe 	bl	8006704 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f08:	0021      	movs	r1, r4
 8002f0a:	187b      	adds	r3, r7, r1
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f10:	187b      	adds	r3, r7, r1
 8002f12:	2201      	movs	r2, #1
 8002f14:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f16:	187b      	adds	r3, r7, r1
 8002f18:	2210      	movs	r2, #16
 8002f1a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f1c:	187b      	adds	r3, r7, r1
 8002f1e:	2202      	movs	r2, #2
 8002f20:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f22:	187b      	adds	r3, r7, r1
 8002f24:	2200      	movs	r2, #0
 8002f26:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002f28:	187b      	adds	r3, r7, r1
 8002f2a:	22a0      	movs	r2, #160	@ 0xa0
 8002f2c:	0392      	lsls	r2, r2, #14
 8002f2e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002f30:	187b      	adds	r3, r7, r1
 8002f32:	2200      	movs	r2, #0
 8002f34:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f36:	187b      	adds	r3, r7, r1
 8002f38:	0018      	movs	r0, r3
 8002f3a:	f001 fbd3 	bl	80046e4 <HAL_RCC_OscConfig>
 8002f3e:	1e03      	subs	r3, r0, #0
 8002f40:	d001      	beq.n	8002f46 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002f42:	f000 f82b 	bl	8002f9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f46:	2110      	movs	r1, #16
 8002f48:	187b      	adds	r3, r7, r1
 8002f4a:	2207      	movs	r2, #7
 8002f4c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f4e:	187b      	adds	r3, r7, r1
 8002f50:	2202      	movs	r2, #2
 8002f52:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f54:	187b      	adds	r3, r7, r1
 8002f56:	2200      	movs	r2, #0
 8002f58:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f5a:	187b      	adds	r3, r7, r1
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002f60:	187b      	adds	r3, r7, r1
 8002f62:	2101      	movs	r1, #1
 8002f64:	0018      	movs	r0, r3
 8002f66:	f001 fed7 	bl	8004d18 <HAL_RCC_ClockConfig>
 8002f6a:	1e03      	subs	r3, r0, #0
 8002f6c:	d001      	beq.n	8002f72 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002f6e:	f000 f815 	bl	8002f9c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002f72:	003b      	movs	r3, r7
 8002f74:	2221      	movs	r2, #33	@ 0x21
 8002f76:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002f78:	003b      	movs	r3, r7
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8002f7e:	003b      	movs	r3, r7
 8002f80:	2210      	movs	r2, #16
 8002f82:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f84:	003b      	movs	r3, r7
 8002f86:	0018      	movs	r0, r3
 8002f88:	f002 f80a 	bl	8004fa0 <HAL_RCCEx_PeriphCLKConfig>
 8002f8c:	1e03      	subs	r3, r0, #0
 8002f8e:	d001      	beq.n	8002f94 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002f90:	f000 f804 	bl	8002f9c <Error_Handler>
  }
}
 8002f94:	46c0      	nop			@ (mov r8, r8)
 8002f96:	46bd      	mov	sp, r7
 8002f98:	b015      	add	sp, #84	@ 0x54
 8002f9a:	bd90      	pop	{r4, r7, pc}

08002f9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fa0:	b672      	cpsid	i
}
 8002fa2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fa4:	46c0      	nop			@ (mov r8, r8)
 8002fa6:	e7fd      	b.n	8002fa4 <Error_Handler+0x8>

08002fa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fae:	4b0f      	ldr	r3, [pc, #60]	@ (8002fec <HAL_MspInit+0x44>)
 8002fb0:	699a      	ldr	r2, [r3, #24]
 8002fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8002fec <HAL_MspInit+0x44>)
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	619a      	str	r2, [r3, #24]
 8002fba:	4b0c      	ldr	r3, [pc, #48]	@ (8002fec <HAL_MspInit+0x44>)
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	607b      	str	r3, [r7, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fc6:	4b09      	ldr	r3, [pc, #36]	@ (8002fec <HAL_MspInit+0x44>)
 8002fc8:	69da      	ldr	r2, [r3, #28]
 8002fca:	4b08      	ldr	r3, [pc, #32]	@ (8002fec <HAL_MspInit+0x44>)
 8002fcc:	2180      	movs	r1, #128	@ 0x80
 8002fce:	0549      	lsls	r1, r1, #21
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	61da      	str	r2, [r3, #28]
 8002fd4:	4b05      	ldr	r3, [pc, #20]	@ (8002fec <HAL_MspInit+0x44>)
 8002fd6:	69da      	ldr	r2, [r3, #28]
 8002fd8:	2380      	movs	r3, #128	@ 0x80
 8002fda:	055b      	lsls	r3, r3, #21
 8002fdc:	4013      	ands	r3, r2
 8002fde:	603b      	str	r3, [r7, #0]
 8002fe0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fe2:	46c0      	nop			@ (mov r8, r8)
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	b002      	add	sp, #8
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	46c0      	nop			@ (mov r8, r8)
 8002fec:	40021000 	.word	0x40021000

08002ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ff4:	46c0      	nop			@ (mov r8, r8)
 8002ff6:	e7fd      	b.n	8002ff4 <NMI_Handler+0x4>

08002ff8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ffc:	46c0      	nop			@ (mov r8, r8)
 8002ffe:	e7fd      	b.n	8002ffc <HardFault_Handler+0x4>

08003000 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003004:	46c0      	nop			@ (mov r8, r8)
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800300e:	46c0      	nop			@ (mov r8, r8)
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003018:	f000 fa22 	bl	8003460 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800301c:	46c0      	nop			@ (mov r8, r8)
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	af00      	add	r7, sp, #0
  return 1;
 8003026:	2301      	movs	r3, #1
}
 8003028:	0018      	movs	r0, r3
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <_kill>:

int _kill(int pid, int sig)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b082      	sub	sp, #8
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
 8003036:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003038:	f003 fbbe 	bl	80067b8 <__errno>
 800303c:	0003      	movs	r3, r0
 800303e:	2216      	movs	r2, #22
 8003040:	601a      	str	r2, [r3, #0]
  return -1;
 8003042:	2301      	movs	r3, #1
 8003044:	425b      	negs	r3, r3
}
 8003046:	0018      	movs	r0, r3
 8003048:	46bd      	mov	sp, r7
 800304a:	b002      	add	sp, #8
 800304c:	bd80      	pop	{r7, pc}

0800304e <_exit>:

void _exit (int status)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b082      	sub	sp, #8
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003056:	2301      	movs	r3, #1
 8003058:	425a      	negs	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	0011      	movs	r1, r2
 800305e:	0018      	movs	r0, r3
 8003060:	f7ff ffe5 	bl	800302e <_kill>
  while (1) {}    /* Make sure we hang here */
 8003064:	46c0      	nop			@ (mov r8, r8)
 8003066:	e7fd      	b.n	8003064 <_exit+0x16>

08003068 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003074:	2300      	movs	r3, #0
 8003076:	617b      	str	r3, [r7, #20]
 8003078:	e00a      	b.n	8003090 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800307a:	e000      	b.n	800307e <_read+0x16>
 800307c:	bf00      	nop
 800307e:	0001      	movs	r1, r0
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	1c5a      	adds	r2, r3, #1
 8003084:	60ba      	str	r2, [r7, #8]
 8003086:	b2ca      	uxtb	r2, r1
 8003088:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	3301      	adds	r3, #1
 800308e:	617b      	str	r3, [r7, #20]
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	429a      	cmp	r2, r3
 8003096:	dbf0      	blt.n	800307a <_read+0x12>
  }

  return len;
 8003098:	687b      	ldr	r3, [r7, #4]
}
 800309a:	0018      	movs	r0, r3
 800309c:	46bd      	mov	sp, r7
 800309e:	b006      	add	sp, #24
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b086      	sub	sp, #24
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	60f8      	str	r0, [r7, #12]
 80030aa:	60b9      	str	r1, [r7, #8]
 80030ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030ae:	2300      	movs	r3, #0
 80030b0:	617b      	str	r3, [r7, #20]
 80030b2:	e009      	b.n	80030c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	1c5a      	adds	r2, r3, #1
 80030b8:	60ba      	str	r2, [r7, #8]
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	0018      	movs	r0, r3
 80030be:	f7ff fea5 	bl	8002e0c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	3301      	adds	r3, #1
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	dbf1      	blt.n	80030b4 <_write+0x12>
  }
  return len;
 80030d0:	687b      	ldr	r3, [r7, #4]
}
 80030d2:	0018      	movs	r0, r3
 80030d4:	46bd      	mov	sp, r7
 80030d6:	b006      	add	sp, #24
 80030d8:	bd80      	pop	{r7, pc}

080030da <_close>:

int _close(int file)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b082      	sub	sp, #8
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80030e2:	2301      	movs	r3, #1
 80030e4:	425b      	negs	r3, r3
}
 80030e6:	0018      	movs	r0, r3
 80030e8:	46bd      	mov	sp, r7
 80030ea:	b002      	add	sp, #8
 80030ec:	bd80      	pop	{r7, pc}

080030ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b082      	sub	sp, #8
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
 80030f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	2280      	movs	r2, #128	@ 0x80
 80030fc:	0192      	lsls	r2, r2, #6
 80030fe:	605a      	str	r2, [r3, #4]
  return 0;
 8003100:	2300      	movs	r3, #0
}
 8003102:	0018      	movs	r0, r3
 8003104:	46bd      	mov	sp, r7
 8003106:	b002      	add	sp, #8
 8003108:	bd80      	pop	{r7, pc}

0800310a <_isatty>:

int _isatty(int file)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b082      	sub	sp, #8
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003112:	2301      	movs	r3, #1
}
 8003114:	0018      	movs	r0, r3
 8003116:	46bd      	mov	sp, r7
 8003118:	b002      	add	sp, #8
 800311a:	bd80      	pop	{r7, pc}

0800311c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003128:	2300      	movs	r3, #0
}
 800312a:	0018      	movs	r0, r3
 800312c:	46bd      	mov	sp, r7
 800312e:	b004      	add	sp, #16
 8003130:	bd80      	pop	{r7, pc}
	...

08003134 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800313c:	4a14      	ldr	r2, [pc, #80]	@ (8003190 <_sbrk+0x5c>)
 800313e:	4b15      	ldr	r3, [pc, #84]	@ (8003194 <_sbrk+0x60>)
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003148:	4b13      	ldr	r3, [pc, #76]	@ (8003198 <_sbrk+0x64>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d102      	bne.n	8003156 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003150:	4b11      	ldr	r3, [pc, #68]	@ (8003198 <_sbrk+0x64>)
 8003152:	4a12      	ldr	r2, [pc, #72]	@ (800319c <_sbrk+0x68>)
 8003154:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003156:	4b10      	ldr	r3, [pc, #64]	@ (8003198 <_sbrk+0x64>)
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	18d3      	adds	r3, r2, r3
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	429a      	cmp	r2, r3
 8003162:	d207      	bcs.n	8003174 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003164:	f003 fb28 	bl	80067b8 <__errno>
 8003168:	0003      	movs	r3, r0
 800316a:	220c      	movs	r2, #12
 800316c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800316e:	2301      	movs	r3, #1
 8003170:	425b      	negs	r3, r3
 8003172:	e009      	b.n	8003188 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003174:	4b08      	ldr	r3, [pc, #32]	@ (8003198 <_sbrk+0x64>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800317a:	4b07      	ldr	r3, [pc, #28]	@ (8003198 <_sbrk+0x64>)
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	18d2      	adds	r2, r2, r3
 8003182:	4b05      	ldr	r3, [pc, #20]	@ (8003198 <_sbrk+0x64>)
 8003184:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003186:	68fb      	ldr	r3, [r7, #12]
}
 8003188:	0018      	movs	r0, r3
 800318a:	46bd      	mov	sp, r7
 800318c:	b006      	add	sp, #24
 800318e:	bd80      	pop	{r7, pc}
 8003190:	20002000 	.word	0x20002000
 8003194:	00000400 	.word	0x00000400
 8003198:	20000260 	.word	0x20000260
 800319c:	200004c8 	.word	0x200004c8

080031a0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80031a4:	46c0      	nop			@ (mov r8, r8)
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80031b0:	4b14      	ldr	r3, [pc, #80]	@ (8003204 <MX_USART1_UART_Init+0x58>)
 80031b2:	4a15      	ldr	r2, [pc, #84]	@ (8003208 <MX_USART1_UART_Init+0x5c>)
 80031b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80031b6:	4b13      	ldr	r3, [pc, #76]	@ (8003204 <MX_USART1_UART_Init+0x58>)
 80031b8:	22e1      	movs	r2, #225	@ 0xe1
 80031ba:	0252      	lsls	r2, r2, #9
 80031bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80031be:	4b11      	ldr	r3, [pc, #68]	@ (8003204 <MX_USART1_UART_Init+0x58>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80031c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003204 <MX_USART1_UART_Init+0x58>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80031ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003204 <MX_USART1_UART_Init+0x58>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80031d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003204 <MX_USART1_UART_Init+0x58>)
 80031d2:	220c      	movs	r2, #12
 80031d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003204 <MX_USART1_UART_Init+0x58>)
 80031d8:	2200      	movs	r2, #0
 80031da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80031dc:	4b09      	ldr	r3, [pc, #36]	@ (8003204 <MX_USART1_UART_Init+0x58>)
 80031de:	2200      	movs	r2, #0
 80031e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031e2:	4b08      	ldr	r3, [pc, #32]	@ (8003204 <MX_USART1_UART_Init+0x58>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031e8:	4b06      	ldr	r3, [pc, #24]	@ (8003204 <MX_USART1_UART_Init+0x58>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80031ee:	4b05      	ldr	r3, [pc, #20]	@ (8003204 <MX_USART1_UART_Init+0x58>)
 80031f0:	0018      	movs	r0, r3
 80031f2:	f001 ffa3 	bl	800513c <HAL_UART_Init>
 80031f6:	1e03      	subs	r3, r0, #0
 80031f8:	d001      	beq.n	80031fe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80031fa:	f7ff fecf 	bl	8002f9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80031fe:	46c0      	nop			@ (mov r8, r8)
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	20000264 	.word	0x20000264
 8003208:	40013800 	.word	0x40013800

0800320c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003210:	4b14      	ldr	r3, [pc, #80]	@ (8003264 <MX_USART2_UART_Init+0x58>)
 8003212:	4a15      	ldr	r2, [pc, #84]	@ (8003268 <MX_USART2_UART_Init+0x5c>)
 8003214:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003216:	4b13      	ldr	r3, [pc, #76]	@ (8003264 <MX_USART2_UART_Init+0x58>)
 8003218:	22e1      	movs	r2, #225	@ 0xe1
 800321a:	0252      	lsls	r2, r2, #9
 800321c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800321e:	4b11      	ldr	r3, [pc, #68]	@ (8003264 <MX_USART2_UART_Init+0x58>)
 8003220:	2200      	movs	r2, #0
 8003222:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003224:	4b0f      	ldr	r3, [pc, #60]	@ (8003264 <MX_USART2_UART_Init+0x58>)
 8003226:	2200      	movs	r2, #0
 8003228:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800322a:	4b0e      	ldr	r3, [pc, #56]	@ (8003264 <MX_USART2_UART_Init+0x58>)
 800322c:	2200      	movs	r2, #0
 800322e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003230:	4b0c      	ldr	r3, [pc, #48]	@ (8003264 <MX_USART2_UART_Init+0x58>)
 8003232:	220c      	movs	r2, #12
 8003234:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003236:	4b0b      	ldr	r3, [pc, #44]	@ (8003264 <MX_USART2_UART_Init+0x58>)
 8003238:	2200      	movs	r2, #0
 800323a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800323c:	4b09      	ldr	r3, [pc, #36]	@ (8003264 <MX_USART2_UART_Init+0x58>)
 800323e:	2200      	movs	r2, #0
 8003240:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003242:	4b08      	ldr	r3, [pc, #32]	@ (8003264 <MX_USART2_UART_Init+0x58>)
 8003244:	2200      	movs	r2, #0
 8003246:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003248:	4b06      	ldr	r3, [pc, #24]	@ (8003264 <MX_USART2_UART_Init+0x58>)
 800324a:	2200      	movs	r2, #0
 800324c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800324e:	4b05      	ldr	r3, [pc, #20]	@ (8003264 <MX_USART2_UART_Init+0x58>)
 8003250:	0018      	movs	r0, r3
 8003252:	f001 ff73 	bl	800513c <HAL_UART_Init>
 8003256:	1e03      	subs	r3, r0, #0
 8003258:	d001      	beq.n	800325e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800325a:	f7ff fe9f 	bl	8002f9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800325e:	46c0      	nop			@ (mov r8, r8)
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	200002ec 	.word	0x200002ec
 8003268:	40004400 	.word	0x40004400

0800326c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800326c:	b590      	push	{r4, r7, lr}
 800326e:	b08d      	sub	sp, #52	@ 0x34
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003274:	241c      	movs	r4, #28
 8003276:	193b      	adds	r3, r7, r4
 8003278:	0018      	movs	r0, r3
 800327a:	2314      	movs	r3, #20
 800327c:	001a      	movs	r2, r3
 800327e:	2100      	movs	r1, #0
 8003280:	f003 fa40 	bl	8006704 <memset>
  if(uartHandle->Instance==USART1)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a39      	ldr	r2, [pc, #228]	@ (8003370 <HAL_UART_MspInit+0x104>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d134      	bne.n	80032f8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800328e:	4b39      	ldr	r3, [pc, #228]	@ (8003374 <HAL_UART_MspInit+0x108>)
 8003290:	699a      	ldr	r2, [r3, #24]
 8003292:	4b38      	ldr	r3, [pc, #224]	@ (8003374 <HAL_UART_MspInit+0x108>)
 8003294:	2180      	movs	r1, #128	@ 0x80
 8003296:	01c9      	lsls	r1, r1, #7
 8003298:	430a      	orrs	r2, r1
 800329a:	619a      	str	r2, [r3, #24]
 800329c:	4b35      	ldr	r3, [pc, #212]	@ (8003374 <HAL_UART_MspInit+0x108>)
 800329e:	699a      	ldr	r2, [r3, #24]
 80032a0:	2380      	movs	r3, #128	@ 0x80
 80032a2:	01db      	lsls	r3, r3, #7
 80032a4:	4013      	ands	r3, r2
 80032a6:	61bb      	str	r3, [r7, #24]
 80032a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032aa:	4b32      	ldr	r3, [pc, #200]	@ (8003374 <HAL_UART_MspInit+0x108>)
 80032ac:	695a      	ldr	r2, [r3, #20]
 80032ae:	4b31      	ldr	r3, [pc, #196]	@ (8003374 <HAL_UART_MspInit+0x108>)
 80032b0:	2180      	movs	r1, #128	@ 0x80
 80032b2:	0289      	lsls	r1, r1, #10
 80032b4:	430a      	orrs	r2, r1
 80032b6:	615a      	str	r2, [r3, #20]
 80032b8:	4b2e      	ldr	r3, [pc, #184]	@ (8003374 <HAL_UART_MspInit+0x108>)
 80032ba:	695a      	ldr	r2, [r3, #20]
 80032bc:	2380      	movs	r3, #128	@ 0x80
 80032be:	029b      	lsls	r3, r3, #10
 80032c0:	4013      	ands	r3, r2
 80032c2:	617b      	str	r3, [r7, #20]
 80032c4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80032c6:	193b      	adds	r3, r7, r4
 80032c8:	22c0      	movs	r2, #192	@ 0xc0
 80032ca:	00d2      	lsls	r2, r2, #3
 80032cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ce:	0021      	movs	r1, r4
 80032d0:	187b      	adds	r3, r7, r1
 80032d2:	2202      	movs	r2, #2
 80032d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d6:	187b      	adds	r3, r7, r1
 80032d8:	2200      	movs	r2, #0
 80032da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032dc:	187b      	adds	r3, r7, r1
 80032de:	2203      	movs	r2, #3
 80032e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80032e2:	187b      	adds	r3, r7, r1
 80032e4:	2201      	movs	r2, #1
 80032e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032e8:	187a      	adds	r2, r7, r1
 80032ea:	2390      	movs	r3, #144	@ 0x90
 80032ec:	05db      	lsls	r3, r3, #23
 80032ee:	0011      	movs	r1, r2
 80032f0:	0018      	movs	r0, r3
 80032f2:	f000 f9cd 	bl	8003690 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80032f6:	e037      	b.n	8003368 <HAL_UART_MspInit+0xfc>
  else if(uartHandle->Instance==USART2)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a1e      	ldr	r2, [pc, #120]	@ (8003378 <HAL_UART_MspInit+0x10c>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d132      	bne.n	8003368 <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003302:	4b1c      	ldr	r3, [pc, #112]	@ (8003374 <HAL_UART_MspInit+0x108>)
 8003304:	69da      	ldr	r2, [r3, #28]
 8003306:	4b1b      	ldr	r3, [pc, #108]	@ (8003374 <HAL_UART_MspInit+0x108>)
 8003308:	2180      	movs	r1, #128	@ 0x80
 800330a:	0289      	lsls	r1, r1, #10
 800330c:	430a      	orrs	r2, r1
 800330e:	61da      	str	r2, [r3, #28]
 8003310:	4b18      	ldr	r3, [pc, #96]	@ (8003374 <HAL_UART_MspInit+0x108>)
 8003312:	69da      	ldr	r2, [r3, #28]
 8003314:	2380      	movs	r3, #128	@ 0x80
 8003316:	029b      	lsls	r3, r3, #10
 8003318:	4013      	ands	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
 800331c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800331e:	4b15      	ldr	r3, [pc, #84]	@ (8003374 <HAL_UART_MspInit+0x108>)
 8003320:	695a      	ldr	r2, [r3, #20]
 8003322:	4b14      	ldr	r3, [pc, #80]	@ (8003374 <HAL_UART_MspInit+0x108>)
 8003324:	2180      	movs	r1, #128	@ 0x80
 8003326:	0289      	lsls	r1, r1, #10
 8003328:	430a      	orrs	r2, r1
 800332a:	615a      	str	r2, [r3, #20]
 800332c:	4b11      	ldr	r3, [pc, #68]	@ (8003374 <HAL_UART_MspInit+0x108>)
 800332e:	695a      	ldr	r2, [r3, #20]
 8003330:	2380      	movs	r3, #128	@ 0x80
 8003332:	029b      	lsls	r3, r3, #10
 8003334:	4013      	ands	r3, r2
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800333a:	211c      	movs	r1, #28
 800333c:	187b      	adds	r3, r7, r1
 800333e:	220c      	movs	r2, #12
 8003340:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003342:	187b      	adds	r3, r7, r1
 8003344:	2202      	movs	r2, #2
 8003346:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003348:	187b      	adds	r3, r7, r1
 800334a:	2200      	movs	r2, #0
 800334c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800334e:	187b      	adds	r3, r7, r1
 8003350:	2200      	movs	r2, #0
 8003352:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003354:	187b      	adds	r3, r7, r1
 8003356:	2201      	movs	r2, #1
 8003358:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800335a:	187a      	adds	r2, r7, r1
 800335c:	2390      	movs	r3, #144	@ 0x90
 800335e:	05db      	lsls	r3, r3, #23
 8003360:	0011      	movs	r1, r2
 8003362:	0018      	movs	r0, r3
 8003364:	f000 f994 	bl	8003690 <HAL_GPIO_Init>
}
 8003368:	46c0      	nop			@ (mov r8, r8)
 800336a:	46bd      	mov	sp, r7
 800336c:	b00d      	add	sp, #52	@ 0x34
 800336e:	bd90      	pop	{r4, r7, pc}
 8003370:	40013800 	.word	0x40013800
 8003374:	40021000 	.word	0x40021000
 8003378:	40004400 	.word	0x40004400

0800337c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800337c:	480d      	ldr	r0, [pc, #52]	@ (80033b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800337e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003380:	f7ff ff0e 	bl	80031a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003384:	480c      	ldr	r0, [pc, #48]	@ (80033b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003386:	490d      	ldr	r1, [pc, #52]	@ (80033bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003388:	4a0d      	ldr	r2, [pc, #52]	@ (80033c0 <LoopForever+0xe>)
  movs r3, #0
 800338a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800338c:	e002      	b.n	8003394 <LoopCopyDataInit>

0800338e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800338e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003392:	3304      	adds	r3, #4

08003394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003398:	d3f9      	bcc.n	800338e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800339a:	4a0a      	ldr	r2, [pc, #40]	@ (80033c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800339c:	4c0a      	ldr	r4, [pc, #40]	@ (80033c8 <LoopForever+0x16>)
  movs r3, #0
 800339e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033a0:	e001      	b.n	80033a6 <LoopFillZerobss>

080033a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033a4:	3204      	adds	r2, #4

080033a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033a8:	d3fb      	bcc.n	80033a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80033aa:	f003 fa0b 	bl	80067c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80033ae:	f7ff fd3f 	bl	8002e30 <main>

080033b2 <LoopForever>:

LoopForever:
    b LoopForever
 80033b2:	e7fe      	b.n	80033b2 <LoopForever>
  ldr   r0, =_estack
 80033b4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80033b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033bc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80033c0:	080089dc 	.word	0x080089dc
  ldr r2, =_sbss
 80033c4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80033c8:	200004c4 	.word	0x200004c4

080033cc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80033cc:	e7fe      	b.n	80033cc <ADC1_IRQHandler>
	...

080033d0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033d4:	4b07      	ldr	r3, [pc, #28]	@ (80033f4 <HAL_Init+0x24>)
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	4b06      	ldr	r3, [pc, #24]	@ (80033f4 <HAL_Init+0x24>)
 80033da:	2110      	movs	r1, #16
 80033dc:	430a      	orrs	r2, r1
 80033de:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80033e0:	2000      	movs	r0, #0
 80033e2:	f000 f809 	bl	80033f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033e6:	f7ff fddf 	bl	8002fa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	0018      	movs	r0, r3
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	46c0      	nop			@ (mov r8, r8)
 80033f4:	40022000 	.word	0x40022000

080033f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033f8:	b590      	push	{r4, r7, lr}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003400:	4b14      	ldr	r3, [pc, #80]	@ (8003454 <HAL_InitTick+0x5c>)
 8003402:	681c      	ldr	r4, [r3, #0]
 8003404:	4b14      	ldr	r3, [pc, #80]	@ (8003458 <HAL_InitTick+0x60>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	0019      	movs	r1, r3
 800340a:	23fa      	movs	r3, #250	@ 0xfa
 800340c:	0098      	lsls	r0, r3, #2
 800340e:	f7fc fe97 	bl	8000140 <__udivsi3>
 8003412:	0003      	movs	r3, r0
 8003414:	0019      	movs	r1, r3
 8003416:	0020      	movs	r0, r4
 8003418:	f7fc fe92 	bl	8000140 <__udivsi3>
 800341c:	0003      	movs	r3, r0
 800341e:	0018      	movs	r0, r3
 8003420:	f000 f8e1 	bl	80035e6 <HAL_SYSTICK_Config>
 8003424:	1e03      	subs	r3, r0, #0
 8003426:	d001      	beq.n	800342c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e00f      	b.n	800344c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b03      	cmp	r3, #3
 8003430:	d80b      	bhi.n	800344a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	2301      	movs	r3, #1
 8003436:	425b      	negs	r3, r3
 8003438:	2200      	movs	r2, #0
 800343a:	0018      	movs	r0, r3
 800343c:	f000 f8be 	bl	80035bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003440:	4b06      	ldr	r3, [pc, #24]	@ (800345c <HAL_InitTick+0x64>)
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003446:	2300      	movs	r3, #0
 8003448:	e000      	b.n	800344c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
}
 800344c:	0018      	movs	r0, r3
 800344e:	46bd      	mov	sp, r7
 8003450:	b003      	add	sp, #12
 8003452:	bd90      	pop	{r4, r7, pc}
 8003454:	20000000 	.word	0x20000000
 8003458:	20000008 	.word	0x20000008
 800345c:	20000004 	.word	0x20000004

08003460 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003464:	4b05      	ldr	r3, [pc, #20]	@ (800347c <HAL_IncTick+0x1c>)
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	001a      	movs	r2, r3
 800346a:	4b05      	ldr	r3, [pc, #20]	@ (8003480 <HAL_IncTick+0x20>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	18d2      	adds	r2, r2, r3
 8003470:	4b03      	ldr	r3, [pc, #12]	@ (8003480 <HAL_IncTick+0x20>)
 8003472:	601a      	str	r2, [r3, #0]
}
 8003474:	46c0      	nop			@ (mov r8, r8)
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	46c0      	nop			@ (mov r8, r8)
 800347c:	20000008 	.word	0x20000008
 8003480:	20000374 	.word	0x20000374

08003484 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  return uwTick;
 8003488:	4b02      	ldr	r3, [pc, #8]	@ (8003494 <HAL_GetTick+0x10>)
 800348a:	681b      	ldr	r3, [r3, #0]
}
 800348c:	0018      	movs	r0, r3
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	46c0      	nop			@ (mov r8, r8)
 8003494:	20000374 	.word	0x20000374

08003498 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003498:	b590      	push	{r4, r7, lr}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	0002      	movs	r2, r0
 80034a0:	6039      	str	r1, [r7, #0]
 80034a2:	1dfb      	adds	r3, r7, #7
 80034a4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80034a6:	1dfb      	adds	r3, r7, #7
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80034ac:	d828      	bhi.n	8003500 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034ae:	4a2f      	ldr	r2, [pc, #188]	@ (800356c <__NVIC_SetPriority+0xd4>)
 80034b0:	1dfb      	adds	r3, r7, #7
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	b25b      	sxtb	r3, r3
 80034b6:	089b      	lsrs	r3, r3, #2
 80034b8:	33c0      	adds	r3, #192	@ 0xc0
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	589b      	ldr	r3, [r3, r2]
 80034be:	1dfa      	adds	r2, r7, #7
 80034c0:	7812      	ldrb	r2, [r2, #0]
 80034c2:	0011      	movs	r1, r2
 80034c4:	2203      	movs	r2, #3
 80034c6:	400a      	ands	r2, r1
 80034c8:	00d2      	lsls	r2, r2, #3
 80034ca:	21ff      	movs	r1, #255	@ 0xff
 80034cc:	4091      	lsls	r1, r2
 80034ce:	000a      	movs	r2, r1
 80034d0:	43d2      	mvns	r2, r2
 80034d2:	401a      	ands	r2, r3
 80034d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	019b      	lsls	r3, r3, #6
 80034da:	22ff      	movs	r2, #255	@ 0xff
 80034dc:	401a      	ands	r2, r3
 80034de:	1dfb      	adds	r3, r7, #7
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	0018      	movs	r0, r3
 80034e4:	2303      	movs	r3, #3
 80034e6:	4003      	ands	r3, r0
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034ec:	481f      	ldr	r0, [pc, #124]	@ (800356c <__NVIC_SetPriority+0xd4>)
 80034ee:	1dfb      	adds	r3, r7, #7
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	b25b      	sxtb	r3, r3
 80034f4:	089b      	lsrs	r3, r3, #2
 80034f6:	430a      	orrs	r2, r1
 80034f8:	33c0      	adds	r3, #192	@ 0xc0
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80034fe:	e031      	b.n	8003564 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003500:	4a1b      	ldr	r2, [pc, #108]	@ (8003570 <__NVIC_SetPriority+0xd8>)
 8003502:	1dfb      	adds	r3, r7, #7
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	0019      	movs	r1, r3
 8003508:	230f      	movs	r3, #15
 800350a:	400b      	ands	r3, r1
 800350c:	3b08      	subs	r3, #8
 800350e:	089b      	lsrs	r3, r3, #2
 8003510:	3306      	adds	r3, #6
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	18d3      	adds	r3, r2, r3
 8003516:	3304      	adds	r3, #4
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	1dfa      	adds	r2, r7, #7
 800351c:	7812      	ldrb	r2, [r2, #0]
 800351e:	0011      	movs	r1, r2
 8003520:	2203      	movs	r2, #3
 8003522:	400a      	ands	r2, r1
 8003524:	00d2      	lsls	r2, r2, #3
 8003526:	21ff      	movs	r1, #255	@ 0xff
 8003528:	4091      	lsls	r1, r2
 800352a:	000a      	movs	r2, r1
 800352c:	43d2      	mvns	r2, r2
 800352e:	401a      	ands	r2, r3
 8003530:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	019b      	lsls	r3, r3, #6
 8003536:	22ff      	movs	r2, #255	@ 0xff
 8003538:	401a      	ands	r2, r3
 800353a:	1dfb      	adds	r3, r7, #7
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	0018      	movs	r0, r3
 8003540:	2303      	movs	r3, #3
 8003542:	4003      	ands	r3, r0
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003548:	4809      	ldr	r0, [pc, #36]	@ (8003570 <__NVIC_SetPriority+0xd8>)
 800354a:	1dfb      	adds	r3, r7, #7
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	001c      	movs	r4, r3
 8003550:	230f      	movs	r3, #15
 8003552:	4023      	ands	r3, r4
 8003554:	3b08      	subs	r3, #8
 8003556:	089b      	lsrs	r3, r3, #2
 8003558:	430a      	orrs	r2, r1
 800355a:	3306      	adds	r3, #6
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	18c3      	adds	r3, r0, r3
 8003560:	3304      	adds	r3, #4
 8003562:	601a      	str	r2, [r3, #0]
}
 8003564:	46c0      	nop			@ (mov r8, r8)
 8003566:	46bd      	mov	sp, r7
 8003568:	b003      	add	sp, #12
 800356a:	bd90      	pop	{r4, r7, pc}
 800356c:	e000e100 	.word	0xe000e100
 8003570:	e000ed00 	.word	0xe000ed00

08003574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	1e5a      	subs	r2, r3, #1
 8003580:	2380      	movs	r3, #128	@ 0x80
 8003582:	045b      	lsls	r3, r3, #17
 8003584:	429a      	cmp	r2, r3
 8003586:	d301      	bcc.n	800358c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003588:	2301      	movs	r3, #1
 800358a:	e010      	b.n	80035ae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800358c:	4b0a      	ldr	r3, [pc, #40]	@ (80035b8 <SysTick_Config+0x44>)
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	3a01      	subs	r2, #1
 8003592:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003594:	2301      	movs	r3, #1
 8003596:	425b      	negs	r3, r3
 8003598:	2103      	movs	r1, #3
 800359a:	0018      	movs	r0, r3
 800359c:	f7ff ff7c 	bl	8003498 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035a0:	4b05      	ldr	r3, [pc, #20]	@ (80035b8 <SysTick_Config+0x44>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035a6:	4b04      	ldr	r3, [pc, #16]	@ (80035b8 <SysTick_Config+0x44>)
 80035a8:	2207      	movs	r2, #7
 80035aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	0018      	movs	r0, r3
 80035b0:	46bd      	mov	sp, r7
 80035b2:	b002      	add	sp, #8
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	46c0      	nop			@ (mov r8, r8)
 80035b8:	e000e010 	.word	0xe000e010

080035bc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60b9      	str	r1, [r7, #8]
 80035c4:	607a      	str	r2, [r7, #4]
 80035c6:	210f      	movs	r1, #15
 80035c8:	187b      	adds	r3, r7, r1
 80035ca:	1c02      	adds	r2, r0, #0
 80035cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	187b      	adds	r3, r7, r1
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	b25b      	sxtb	r3, r3
 80035d6:	0011      	movs	r1, r2
 80035d8:	0018      	movs	r0, r3
 80035da:	f7ff ff5d 	bl	8003498 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80035de:	46c0      	nop			@ (mov r8, r8)
 80035e0:	46bd      	mov	sp, r7
 80035e2:	b004      	add	sp, #16
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b082      	sub	sp, #8
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	0018      	movs	r0, r3
 80035f2:	f7ff ffbf 	bl	8003574 <SysTick_Config>
 80035f6:	0003      	movs	r3, r0
}
 80035f8:	0018      	movs	r0, r3
 80035fa:	46bd      	mov	sp, r7
 80035fc:	b002      	add	sp, #8
 80035fe:	bd80      	pop	{r7, pc}

08003600 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e039      	b.n	8003686 <HAL_CRC_Init+0x86>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	7d5b      	ldrb	r3, [r3, #21]
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b00      	cmp	r3, #0
 800361a:	d106      	bne.n	800362a <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	751a      	strb	r2, [r3, #20]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	0018      	movs	r0, r3
 8003626:	f7ff fa25 	bl	8002a74 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2202      	movs	r2, #2
 800362e:	755a      	strb	r2, [r3, #21]
#endif /* CRC_POL_POL */

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	791b      	ldrb	r3, [r3, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d105      	bne.n	8003644 <HAL_CRC_Init+0x44>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2201      	movs	r2, #1
 800363e:	4252      	negs	r2, r2
 8003640:	611a      	str	r2, [r3, #16]
 8003642:	e004      	b.n	800364e <HAL_CRC_Init+0x4e>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	6892      	ldr	r2, [r2, #8]
 800364c:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	2260      	movs	r2, #96	@ 0x60
 8003656:	4393      	bics	r3, r2
 8003658:	0019      	movs	r1, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68da      	ldr	r2, [r3, #12]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	430a      	orrs	r2, r1
 8003664:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	2280      	movs	r2, #128	@ 0x80
 800366e:	4393      	bics	r3, r2
 8003670:	0019      	movs	r1, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	691a      	ldr	r2, [r3, #16]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	755a      	strb	r2, [r3, #21]

  /* Return function status */
  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	0018      	movs	r0, r3
 8003688:	46bd      	mov	sp, r7
 800368a:	b002      	add	sp, #8
 800368c:	bd80      	pop	{r7, pc}
	...

08003690 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800369a:	2300      	movs	r3, #0
 800369c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800369e:	e14f      	b.n	8003940 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2101      	movs	r1, #1
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	4091      	lsls	r1, r2
 80036aa:	000a      	movs	r2, r1
 80036ac:	4013      	ands	r3, r2
 80036ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d100      	bne.n	80036b8 <HAL_GPIO_Init+0x28>
 80036b6:	e140      	b.n	800393a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	2203      	movs	r2, #3
 80036be:	4013      	ands	r3, r2
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d005      	beq.n	80036d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	2203      	movs	r2, #3
 80036ca:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d130      	bne.n	8003732 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	2203      	movs	r2, #3
 80036dc:	409a      	lsls	r2, r3
 80036de:	0013      	movs	r3, r2
 80036e0:	43da      	mvns	r2, r3
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	4013      	ands	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	68da      	ldr	r2, [r3, #12]
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	409a      	lsls	r2, r3
 80036f2:	0013      	movs	r3, r2
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003706:	2201      	movs	r2, #1
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	409a      	lsls	r2, r3
 800370c:	0013      	movs	r3, r2
 800370e:	43da      	mvns	r2, r3
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	4013      	ands	r3, r2
 8003714:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	091b      	lsrs	r3, r3, #4
 800371c:	2201      	movs	r2, #1
 800371e:	401a      	ands	r2, r3
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	409a      	lsls	r2, r3
 8003724:	0013      	movs	r3, r2
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	4313      	orrs	r3, r2
 800372a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2203      	movs	r2, #3
 8003738:	4013      	ands	r3, r2
 800373a:	2b03      	cmp	r3, #3
 800373c:	d017      	beq.n	800376e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	2203      	movs	r2, #3
 800374a:	409a      	lsls	r2, r3
 800374c:	0013      	movs	r3, r2
 800374e:	43da      	mvns	r2, r3
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	4013      	ands	r3, r2
 8003754:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	689a      	ldr	r2, [r3, #8]
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	409a      	lsls	r2, r3
 8003760:	0013      	movs	r3, r2
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	4313      	orrs	r3, r2
 8003766:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2203      	movs	r2, #3
 8003774:	4013      	ands	r3, r2
 8003776:	2b02      	cmp	r3, #2
 8003778:	d123      	bne.n	80037c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	08da      	lsrs	r2, r3, #3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	3208      	adds	r2, #8
 8003782:	0092      	lsls	r2, r2, #2
 8003784:	58d3      	ldr	r3, [r2, r3]
 8003786:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	2207      	movs	r2, #7
 800378c:	4013      	ands	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	220f      	movs	r2, #15
 8003792:	409a      	lsls	r2, r3
 8003794:	0013      	movs	r3, r2
 8003796:	43da      	mvns	r2, r3
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	4013      	ands	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	691a      	ldr	r2, [r3, #16]
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	2107      	movs	r1, #7
 80037a6:	400b      	ands	r3, r1
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	409a      	lsls	r2, r3
 80037ac:	0013      	movs	r3, r2
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	08da      	lsrs	r2, r3, #3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3208      	adds	r2, #8
 80037bc:	0092      	lsls	r2, r2, #2
 80037be:	6939      	ldr	r1, [r7, #16]
 80037c0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	2203      	movs	r2, #3
 80037ce:	409a      	lsls	r2, r3
 80037d0:	0013      	movs	r3, r2
 80037d2:	43da      	mvns	r2, r3
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	4013      	ands	r3, r2
 80037d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2203      	movs	r2, #3
 80037e0:	401a      	ands	r2, r3
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	409a      	lsls	r2, r3
 80037e8:	0013      	movs	r3, r2
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	23c0      	movs	r3, #192	@ 0xc0
 80037fc:	029b      	lsls	r3, r3, #10
 80037fe:	4013      	ands	r3, r2
 8003800:	d100      	bne.n	8003804 <HAL_GPIO_Init+0x174>
 8003802:	e09a      	b.n	800393a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003804:	4b54      	ldr	r3, [pc, #336]	@ (8003958 <HAL_GPIO_Init+0x2c8>)
 8003806:	699a      	ldr	r2, [r3, #24]
 8003808:	4b53      	ldr	r3, [pc, #332]	@ (8003958 <HAL_GPIO_Init+0x2c8>)
 800380a:	2101      	movs	r1, #1
 800380c:	430a      	orrs	r2, r1
 800380e:	619a      	str	r2, [r3, #24]
 8003810:	4b51      	ldr	r3, [pc, #324]	@ (8003958 <HAL_GPIO_Init+0x2c8>)
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	2201      	movs	r2, #1
 8003816:	4013      	ands	r3, r2
 8003818:	60bb      	str	r3, [r7, #8]
 800381a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800381c:	4a4f      	ldr	r2, [pc, #316]	@ (800395c <HAL_GPIO_Init+0x2cc>)
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	089b      	lsrs	r3, r3, #2
 8003822:	3302      	adds	r3, #2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	589b      	ldr	r3, [r3, r2]
 8003828:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	2203      	movs	r2, #3
 800382e:	4013      	ands	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	220f      	movs	r2, #15
 8003834:	409a      	lsls	r2, r3
 8003836:	0013      	movs	r3, r2
 8003838:	43da      	mvns	r2, r3
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	4013      	ands	r3, r2
 800383e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	2390      	movs	r3, #144	@ 0x90
 8003844:	05db      	lsls	r3, r3, #23
 8003846:	429a      	cmp	r2, r3
 8003848:	d013      	beq.n	8003872 <HAL_GPIO_Init+0x1e2>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a44      	ldr	r2, [pc, #272]	@ (8003960 <HAL_GPIO_Init+0x2d0>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d00d      	beq.n	800386e <HAL_GPIO_Init+0x1de>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a43      	ldr	r2, [pc, #268]	@ (8003964 <HAL_GPIO_Init+0x2d4>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d007      	beq.n	800386a <HAL_GPIO_Init+0x1da>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a42      	ldr	r2, [pc, #264]	@ (8003968 <HAL_GPIO_Init+0x2d8>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d101      	bne.n	8003866 <HAL_GPIO_Init+0x1d6>
 8003862:	2303      	movs	r3, #3
 8003864:	e006      	b.n	8003874 <HAL_GPIO_Init+0x1e4>
 8003866:	2305      	movs	r3, #5
 8003868:	e004      	b.n	8003874 <HAL_GPIO_Init+0x1e4>
 800386a:	2302      	movs	r3, #2
 800386c:	e002      	b.n	8003874 <HAL_GPIO_Init+0x1e4>
 800386e:	2301      	movs	r3, #1
 8003870:	e000      	b.n	8003874 <HAL_GPIO_Init+0x1e4>
 8003872:	2300      	movs	r3, #0
 8003874:	697a      	ldr	r2, [r7, #20]
 8003876:	2103      	movs	r1, #3
 8003878:	400a      	ands	r2, r1
 800387a:	0092      	lsls	r2, r2, #2
 800387c:	4093      	lsls	r3, r2
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	4313      	orrs	r3, r2
 8003882:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003884:	4935      	ldr	r1, [pc, #212]	@ (800395c <HAL_GPIO_Init+0x2cc>)
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	089b      	lsrs	r3, r3, #2
 800388a:	3302      	adds	r3, #2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003892:	4b36      	ldr	r3, [pc, #216]	@ (800396c <HAL_GPIO_Init+0x2dc>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	43da      	mvns	r2, r3
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	4013      	ands	r3, r2
 80038a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	2380      	movs	r3, #128	@ 0x80
 80038a8:	035b      	lsls	r3, r3, #13
 80038aa:	4013      	ands	r3, r2
 80038ac:	d003      	beq.n	80038b6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80038b6:	4b2d      	ldr	r3, [pc, #180]	@ (800396c <HAL_GPIO_Init+0x2dc>)
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80038bc:	4b2b      	ldr	r3, [pc, #172]	@ (800396c <HAL_GPIO_Init+0x2dc>)
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	43da      	mvns	r2, r3
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	4013      	ands	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	2380      	movs	r3, #128	@ 0x80
 80038d2:	039b      	lsls	r3, r3, #14
 80038d4:	4013      	ands	r3, r2
 80038d6:	d003      	beq.n	80038e0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	4313      	orrs	r3, r2
 80038de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80038e0:	4b22      	ldr	r3, [pc, #136]	@ (800396c <HAL_GPIO_Init+0x2dc>)
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80038e6:	4b21      	ldr	r3, [pc, #132]	@ (800396c <HAL_GPIO_Init+0x2dc>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	43da      	mvns	r2, r3
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	4013      	ands	r3, r2
 80038f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	2380      	movs	r3, #128	@ 0x80
 80038fc:	029b      	lsls	r3, r3, #10
 80038fe:	4013      	ands	r3, r2
 8003900:	d003      	beq.n	800390a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4313      	orrs	r3, r2
 8003908:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800390a:	4b18      	ldr	r3, [pc, #96]	@ (800396c <HAL_GPIO_Init+0x2dc>)
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003910:	4b16      	ldr	r3, [pc, #88]	@ (800396c <HAL_GPIO_Init+0x2dc>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	43da      	mvns	r2, r3
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	4013      	ands	r3, r2
 800391e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685a      	ldr	r2, [r3, #4]
 8003924:	2380      	movs	r3, #128	@ 0x80
 8003926:	025b      	lsls	r3, r3, #9
 8003928:	4013      	ands	r3, r2
 800392a:	d003      	beq.n	8003934 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	4313      	orrs	r3, r2
 8003932:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003934:	4b0d      	ldr	r3, [pc, #52]	@ (800396c <HAL_GPIO_Init+0x2dc>)
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	3301      	adds	r3, #1
 800393e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	40da      	lsrs	r2, r3
 8003948:	1e13      	subs	r3, r2, #0
 800394a:	d000      	beq.n	800394e <HAL_GPIO_Init+0x2be>
 800394c:	e6a8      	b.n	80036a0 <HAL_GPIO_Init+0x10>
  } 
}
 800394e:	46c0      	nop			@ (mov r8, r8)
 8003950:	46c0      	nop			@ (mov r8, r8)
 8003952:	46bd      	mov	sp, r7
 8003954:	b006      	add	sp, #24
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40021000 	.word	0x40021000
 800395c:	40010000 	.word	0x40010000
 8003960:	48000400 	.word	0x48000400
 8003964:	48000800 	.word	0x48000800
 8003968:	48000c00 	.word	0x48000c00
 800396c:	40010400 	.word	0x40010400

08003970 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	0008      	movs	r0, r1
 800397a:	0011      	movs	r1, r2
 800397c:	1cbb      	adds	r3, r7, #2
 800397e:	1c02      	adds	r2, r0, #0
 8003980:	801a      	strh	r2, [r3, #0]
 8003982:	1c7b      	adds	r3, r7, #1
 8003984:	1c0a      	adds	r2, r1, #0
 8003986:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003988:	1c7b      	adds	r3, r7, #1
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d004      	beq.n	800399a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003990:	1cbb      	adds	r3, r7, #2
 8003992:	881a      	ldrh	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003998:	e003      	b.n	80039a2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800399a:	1cbb      	adds	r3, r7, #2
 800399c:	881a      	ldrh	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80039a2:	46c0      	nop			@ (mov r8, r8)
 80039a4:	46bd      	mov	sp, r7
 80039a6:	b002      	add	sp, #8
 80039a8:	bd80      	pop	{r7, pc}
	...

080039ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e08f      	b.n	8003ade <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2241      	movs	r2, #65	@ 0x41
 80039c2:	5c9b      	ldrb	r3, [r3, r2]
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d107      	bne.n	80039da <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2240      	movs	r2, #64	@ 0x40
 80039ce:	2100      	movs	r1, #0
 80039d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	0018      	movs	r0, r3
 80039d6:	f7ff f923 	bl	8002c20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2241      	movs	r2, #65	@ 0x41
 80039de:	2124      	movs	r1, #36	@ 0x24
 80039e0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2101      	movs	r1, #1
 80039ee:	438a      	bics	r2, r1
 80039f0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	493b      	ldr	r1, [pc, #236]	@ (8003ae8 <HAL_I2C_Init+0x13c>)
 80039fc:	400a      	ands	r2, r1
 80039fe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689a      	ldr	r2, [r3, #8]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4938      	ldr	r1, [pc, #224]	@ (8003aec <HAL_I2C_Init+0x140>)
 8003a0c:	400a      	ands	r2, r1
 8003a0e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d108      	bne.n	8003a2a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2180      	movs	r1, #128	@ 0x80
 8003a22:	0209      	lsls	r1, r1, #8
 8003a24:	430a      	orrs	r2, r1
 8003a26:	609a      	str	r2, [r3, #8]
 8003a28:	e007      	b.n	8003a3a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	689a      	ldr	r2, [r3, #8]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2184      	movs	r1, #132	@ 0x84
 8003a34:	0209      	lsls	r1, r1, #8
 8003a36:	430a      	orrs	r2, r1
 8003a38:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d109      	bne.n	8003a56 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2180      	movs	r1, #128	@ 0x80
 8003a4e:	0109      	lsls	r1, r1, #4
 8003a50:	430a      	orrs	r2, r1
 8003a52:	605a      	str	r2, [r3, #4]
 8003a54:	e007      	b.n	8003a66 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4923      	ldr	r1, [pc, #140]	@ (8003af0 <HAL_I2C_Init+0x144>)
 8003a62:	400a      	ands	r2, r1
 8003a64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4920      	ldr	r1, [pc, #128]	@ (8003af4 <HAL_I2C_Init+0x148>)
 8003a72:	430a      	orrs	r2, r1
 8003a74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68da      	ldr	r2, [r3, #12]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	491a      	ldr	r1, [pc, #104]	@ (8003aec <HAL_I2C_Init+0x140>)
 8003a82:	400a      	ands	r2, r1
 8003a84:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	691a      	ldr	r2, [r3, #16]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	69d9      	ldr	r1, [r3, #28]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a1a      	ldr	r2, [r3, #32]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2101      	movs	r1, #1
 8003abc:	430a      	orrs	r2, r1
 8003abe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2241      	movs	r2, #65	@ 0x41
 8003aca:	2120      	movs	r1, #32
 8003acc:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2242      	movs	r2, #66	@ 0x42
 8003ad8:	2100      	movs	r1, #0
 8003ada:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	0018      	movs	r0, r3
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	b002      	add	sp, #8
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	46c0      	nop			@ (mov r8, r8)
 8003ae8:	f0ffffff 	.word	0xf0ffffff
 8003aec:	ffff7fff 	.word	0xffff7fff
 8003af0:	fffff7ff 	.word	0xfffff7ff
 8003af4:	02008000 	.word	0x02008000

08003af8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003af8:	b590      	push	{r4, r7, lr}
 8003afa:	b089      	sub	sp, #36	@ 0x24
 8003afc:	af02      	add	r7, sp, #8
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	000c      	movs	r4, r1
 8003b02:	0010      	movs	r0, r2
 8003b04:	0019      	movs	r1, r3
 8003b06:	230a      	movs	r3, #10
 8003b08:	18fb      	adds	r3, r7, r3
 8003b0a:	1c22      	adds	r2, r4, #0
 8003b0c:	801a      	strh	r2, [r3, #0]
 8003b0e:	2308      	movs	r3, #8
 8003b10:	18fb      	adds	r3, r7, r3
 8003b12:	1c02      	adds	r2, r0, #0
 8003b14:	801a      	strh	r2, [r3, #0]
 8003b16:	1dbb      	adds	r3, r7, #6
 8003b18:	1c0a      	adds	r2, r1, #0
 8003b1a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2241      	movs	r2, #65	@ 0x41
 8003b20:	5c9b      	ldrb	r3, [r3, r2]
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b20      	cmp	r3, #32
 8003b26:	d000      	beq.n	8003b2a <HAL_I2C_Mem_Write+0x32>
 8003b28:	e10c      	b.n	8003d44 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d004      	beq.n	8003b3a <HAL_I2C_Mem_Write+0x42>
 8003b30:	232c      	movs	r3, #44	@ 0x2c
 8003b32:	18fb      	adds	r3, r7, r3
 8003b34:	881b      	ldrh	r3, [r3, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d105      	bne.n	8003b46 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2280      	movs	r2, #128	@ 0x80
 8003b3e:	0092      	lsls	r2, r2, #2
 8003b40:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e0ff      	b.n	8003d46 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2240      	movs	r2, #64	@ 0x40
 8003b4a:	5c9b      	ldrb	r3, [r3, r2]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d101      	bne.n	8003b54 <HAL_I2C_Mem_Write+0x5c>
 8003b50:	2302      	movs	r3, #2
 8003b52:	e0f8      	b.n	8003d46 <HAL_I2C_Mem_Write+0x24e>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2240      	movs	r2, #64	@ 0x40
 8003b58:	2101      	movs	r1, #1
 8003b5a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b5c:	f7ff fc92 	bl	8003484 <HAL_GetTick>
 8003b60:	0003      	movs	r3, r0
 8003b62:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b64:	2380      	movs	r3, #128	@ 0x80
 8003b66:	0219      	lsls	r1, r3, #8
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	2319      	movs	r3, #25
 8003b70:	2201      	movs	r2, #1
 8003b72:	f000 fb0b 	bl	800418c <I2C_WaitOnFlagUntilTimeout>
 8003b76:	1e03      	subs	r3, r0, #0
 8003b78:	d001      	beq.n	8003b7e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e0e3      	b.n	8003d46 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2241      	movs	r2, #65	@ 0x41
 8003b82:	2121      	movs	r1, #33	@ 0x21
 8003b84:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2242      	movs	r2, #66	@ 0x42
 8003b8a:	2140      	movs	r1, #64	@ 0x40
 8003b8c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b98:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	222c      	movs	r2, #44	@ 0x2c
 8003b9e:	18ba      	adds	r2, r7, r2
 8003ba0:	8812      	ldrh	r2, [r2, #0]
 8003ba2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003baa:	1dbb      	adds	r3, r7, #6
 8003bac:	881c      	ldrh	r4, [r3, #0]
 8003bae:	2308      	movs	r3, #8
 8003bb0:	18fb      	adds	r3, r7, r3
 8003bb2:	881a      	ldrh	r2, [r3, #0]
 8003bb4:	230a      	movs	r3, #10
 8003bb6:	18fb      	adds	r3, r7, r3
 8003bb8:	8819      	ldrh	r1, [r3, #0]
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	9301      	str	r3, [sp, #4]
 8003bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	0023      	movs	r3, r4
 8003bc6:	f000 f9f9 	bl	8003fbc <I2C_RequestMemoryWrite>
 8003bca:	1e03      	subs	r3, r0, #0
 8003bcc:	d005      	beq.n	8003bda <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2240      	movs	r2, #64	@ 0x40
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e0b5      	b.n	8003d46 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	2bff      	cmp	r3, #255	@ 0xff
 8003be2:	d911      	bls.n	8003c08 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	22ff      	movs	r2, #255	@ 0xff
 8003be8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bee:	b2da      	uxtb	r2, r3
 8003bf0:	2380      	movs	r3, #128	@ 0x80
 8003bf2:	045c      	lsls	r4, r3, #17
 8003bf4:	230a      	movs	r3, #10
 8003bf6:	18fb      	adds	r3, r7, r3
 8003bf8:	8819      	ldrh	r1, [r3, #0]
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	0023      	movs	r3, r4
 8003c02:	f000 fc9d 	bl	8004540 <I2C_TransferConfig>
 8003c06:	e012      	b.n	8003c2e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	2380      	movs	r3, #128	@ 0x80
 8003c1a:	049c      	lsls	r4, r3, #18
 8003c1c:	230a      	movs	r3, #10
 8003c1e:	18fb      	adds	r3, r7, r3
 8003c20:	8819      	ldrh	r1, [r3, #0]
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	2300      	movs	r3, #0
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	0023      	movs	r3, r4
 8003c2a:	f000 fc89 	bl	8004540 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	0018      	movs	r0, r3
 8003c36:	f000 fb01 	bl	800423c <I2C_WaitOnTXISFlagUntilTimeout>
 8003c3a:	1e03      	subs	r3, r0, #0
 8003c3c:	d001      	beq.n	8003c42 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e081      	b.n	8003d46 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c46:	781a      	ldrb	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c52:	1c5a      	adds	r2, r3, #1
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d03a      	beq.n	8003cf2 <HAL_I2C_Mem_Write+0x1fa>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d136      	bne.n	8003cf2 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	0013      	movs	r3, r2
 8003c8e:	2200      	movs	r2, #0
 8003c90:	2180      	movs	r1, #128	@ 0x80
 8003c92:	f000 fa7b 	bl	800418c <I2C_WaitOnFlagUntilTimeout>
 8003c96:	1e03      	subs	r3, r0, #0
 8003c98:	d001      	beq.n	8003c9e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e053      	b.n	8003d46 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	2bff      	cmp	r3, #255	@ 0xff
 8003ca6:	d911      	bls.n	8003ccc <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	22ff      	movs	r2, #255	@ 0xff
 8003cac:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	2380      	movs	r3, #128	@ 0x80
 8003cb6:	045c      	lsls	r4, r3, #17
 8003cb8:	230a      	movs	r3, #10
 8003cba:	18fb      	adds	r3, r7, r3
 8003cbc:	8819      	ldrh	r1, [r3, #0]
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	0023      	movs	r3, r4
 8003cc6:	f000 fc3b 	bl	8004540 <I2C_TransferConfig>
 8003cca:	e012      	b.n	8003cf2 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cda:	b2da      	uxtb	r2, r3
 8003cdc:	2380      	movs	r3, #128	@ 0x80
 8003cde:	049c      	lsls	r4, r3, #18
 8003ce0:	230a      	movs	r3, #10
 8003ce2:	18fb      	adds	r3, r7, r3
 8003ce4:	8819      	ldrh	r1, [r3, #0]
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	2300      	movs	r3, #0
 8003cea:	9300      	str	r3, [sp, #0]
 8003cec:	0023      	movs	r3, r4
 8003cee:	f000 fc27 	bl	8004540 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d198      	bne.n	8003c2e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	0018      	movs	r0, r3
 8003d04:	f000 fae0 	bl	80042c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d08:	1e03      	subs	r3, r0, #0
 8003d0a:	d001      	beq.n	8003d10 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e01a      	b.n	8003d46 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2220      	movs	r2, #32
 8003d16:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	490b      	ldr	r1, [pc, #44]	@ (8003d50 <HAL_I2C_Mem_Write+0x258>)
 8003d24:	400a      	ands	r2, r1
 8003d26:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2241      	movs	r2, #65	@ 0x41
 8003d2c:	2120      	movs	r1, #32
 8003d2e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2242      	movs	r2, #66	@ 0x42
 8003d34:	2100      	movs	r1, #0
 8003d36:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2240      	movs	r2, #64	@ 0x40
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003d40:	2300      	movs	r3, #0
 8003d42:	e000      	b.n	8003d46 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003d44:	2302      	movs	r3, #2
  }
}
 8003d46:	0018      	movs	r0, r3
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	b007      	add	sp, #28
 8003d4c:	bd90      	pop	{r4, r7, pc}
 8003d4e:	46c0      	nop			@ (mov r8, r8)
 8003d50:	fe00e800 	.word	0xfe00e800

08003d54 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d54:	b590      	push	{r4, r7, lr}
 8003d56:	b089      	sub	sp, #36	@ 0x24
 8003d58:	af02      	add	r7, sp, #8
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	000c      	movs	r4, r1
 8003d5e:	0010      	movs	r0, r2
 8003d60:	0019      	movs	r1, r3
 8003d62:	230a      	movs	r3, #10
 8003d64:	18fb      	adds	r3, r7, r3
 8003d66:	1c22      	adds	r2, r4, #0
 8003d68:	801a      	strh	r2, [r3, #0]
 8003d6a:	2308      	movs	r3, #8
 8003d6c:	18fb      	adds	r3, r7, r3
 8003d6e:	1c02      	adds	r2, r0, #0
 8003d70:	801a      	strh	r2, [r3, #0]
 8003d72:	1dbb      	adds	r3, r7, #6
 8003d74:	1c0a      	adds	r2, r1, #0
 8003d76:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2241      	movs	r2, #65	@ 0x41
 8003d7c:	5c9b      	ldrb	r3, [r3, r2]
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b20      	cmp	r3, #32
 8003d82:	d000      	beq.n	8003d86 <HAL_I2C_Mem_Read+0x32>
 8003d84:	e110      	b.n	8003fa8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d004      	beq.n	8003d96 <HAL_I2C_Mem_Read+0x42>
 8003d8c:	232c      	movs	r3, #44	@ 0x2c
 8003d8e:	18fb      	adds	r3, r7, r3
 8003d90:	881b      	ldrh	r3, [r3, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d105      	bne.n	8003da2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2280      	movs	r2, #128	@ 0x80
 8003d9a:	0092      	lsls	r2, r2, #2
 8003d9c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e103      	b.n	8003faa <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2240      	movs	r2, #64	@ 0x40
 8003da6:	5c9b      	ldrb	r3, [r3, r2]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d101      	bne.n	8003db0 <HAL_I2C_Mem_Read+0x5c>
 8003dac:	2302      	movs	r3, #2
 8003dae:	e0fc      	b.n	8003faa <HAL_I2C_Mem_Read+0x256>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2240      	movs	r2, #64	@ 0x40
 8003db4:	2101      	movs	r1, #1
 8003db6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003db8:	f7ff fb64 	bl	8003484 <HAL_GetTick>
 8003dbc:	0003      	movs	r3, r0
 8003dbe:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003dc0:	2380      	movs	r3, #128	@ 0x80
 8003dc2:	0219      	lsls	r1, r3, #8
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	2319      	movs	r3, #25
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f000 f9dd 	bl	800418c <I2C_WaitOnFlagUntilTimeout>
 8003dd2:	1e03      	subs	r3, r0, #0
 8003dd4:	d001      	beq.n	8003dda <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e0e7      	b.n	8003faa <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2241      	movs	r2, #65	@ 0x41
 8003dde:	2122      	movs	r1, #34	@ 0x22
 8003de0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2242      	movs	r2, #66	@ 0x42
 8003de6:	2140      	movs	r1, #64	@ 0x40
 8003de8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003df4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	222c      	movs	r2, #44	@ 0x2c
 8003dfa:	18ba      	adds	r2, r7, r2
 8003dfc:	8812      	ldrh	r2, [r2, #0]
 8003dfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e06:	1dbb      	adds	r3, r7, #6
 8003e08:	881c      	ldrh	r4, [r3, #0]
 8003e0a:	2308      	movs	r3, #8
 8003e0c:	18fb      	adds	r3, r7, r3
 8003e0e:	881a      	ldrh	r2, [r3, #0]
 8003e10:	230a      	movs	r3, #10
 8003e12:	18fb      	adds	r3, r7, r3
 8003e14:	8819      	ldrh	r1, [r3, #0]
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	9301      	str	r3, [sp, #4]
 8003e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	0023      	movs	r3, r4
 8003e22:	f000 f92f 	bl	8004084 <I2C_RequestMemoryRead>
 8003e26:	1e03      	subs	r3, r0, #0
 8003e28:	d005      	beq.n	8003e36 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2240      	movs	r2, #64	@ 0x40
 8003e2e:	2100      	movs	r1, #0
 8003e30:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e0b9      	b.n	8003faa <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	2bff      	cmp	r3, #255	@ 0xff
 8003e3e:	d911      	bls.n	8003e64 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = 1U;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2201      	movs	r2, #1
 8003e44:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	2380      	movs	r3, #128	@ 0x80
 8003e4e:	045c      	lsls	r4, r3, #17
 8003e50:	230a      	movs	r3, #10
 8003e52:	18fb      	adds	r3, r7, r3
 8003e54:	8819      	ldrh	r1, [r3, #0]
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	4b56      	ldr	r3, [pc, #344]	@ (8003fb4 <HAL_I2C_Mem_Read+0x260>)
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	0023      	movs	r3, r4
 8003e5e:	f000 fb6f 	bl	8004540 <I2C_TransferConfig>
 8003e62:	e012      	b.n	8003e8a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e72:	b2da      	uxtb	r2, r3
 8003e74:	2380      	movs	r3, #128	@ 0x80
 8003e76:	049c      	lsls	r4, r3, #18
 8003e78:	230a      	movs	r3, #10
 8003e7a:	18fb      	adds	r3, r7, r3
 8003e7c:	8819      	ldrh	r1, [r3, #0]
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	4b4c      	ldr	r3, [pc, #304]	@ (8003fb4 <HAL_I2C_Mem_Read+0x260>)
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	0023      	movs	r3, r4
 8003e86:	f000 fb5b 	bl	8004540 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003e8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	0013      	movs	r3, r2
 8003e94:	2200      	movs	r2, #0
 8003e96:	2104      	movs	r1, #4
 8003e98:	f000 f978 	bl	800418c <I2C_WaitOnFlagUntilTimeout>
 8003e9c:	1e03      	subs	r3, r0, #0
 8003e9e:	d001      	beq.n	8003ea4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e082      	b.n	8003faa <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eae:	b2d2      	uxtb	r2, r2
 8003eb0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb6:	1c5a      	adds	r2, r3, #1
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d03a      	beq.n	8003f56 <HAL_I2C_Mem_Read+0x202>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d136      	bne.n	8003f56 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ee8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	0013      	movs	r3, r2
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	2180      	movs	r1, #128	@ 0x80
 8003ef6:	f000 f949 	bl	800418c <I2C_WaitOnFlagUntilTimeout>
 8003efa:	1e03      	subs	r3, r0, #0
 8003efc:	d001      	beq.n	8003f02 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e053      	b.n	8003faa <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	2bff      	cmp	r3, #255	@ 0xff
 8003f0a:	d911      	bls.n	8003f30 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = 1U;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	2380      	movs	r3, #128	@ 0x80
 8003f1a:	045c      	lsls	r4, r3, #17
 8003f1c:	230a      	movs	r3, #10
 8003f1e:	18fb      	adds	r3, r7, r3
 8003f20:	8819      	ldrh	r1, [r3, #0]
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	2300      	movs	r3, #0
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	0023      	movs	r3, r4
 8003f2a:	f000 fb09 	bl	8004540 <I2C_TransferConfig>
 8003f2e:	e012      	b.n	8003f56 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	2380      	movs	r3, #128	@ 0x80
 8003f42:	049c      	lsls	r4, r3, #18
 8003f44:	230a      	movs	r3, #10
 8003f46:	18fb      	adds	r3, r7, r3
 8003f48:	8819      	ldrh	r1, [r3, #0]
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	0023      	movs	r3, r4
 8003f52:	f000 faf5 	bl	8004540 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d194      	bne.n	8003e8a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	0018      	movs	r0, r3
 8003f68:	f000 f9ae 	bl	80042c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f6c:	1e03      	subs	r3, r0, #0
 8003f6e:	d001      	beq.n	8003f74 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e01a      	b.n	8003faa <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	490c      	ldr	r1, [pc, #48]	@ (8003fb8 <HAL_I2C_Mem_Read+0x264>)
 8003f88:	400a      	ands	r2, r1
 8003f8a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2241      	movs	r2, #65	@ 0x41
 8003f90:	2120      	movs	r1, #32
 8003f92:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2242      	movs	r2, #66	@ 0x42
 8003f98:	2100      	movs	r1, #0
 8003f9a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2240      	movs	r2, #64	@ 0x40
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	e000      	b.n	8003faa <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003fa8:	2302      	movs	r3, #2
  }
}
 8003faa:	0018      	movs	r0, r3
 8003fac:	46bd      	mov	sp, r7
 8003fae:	b007      	add	sp, #28
 8003fb0:	bd90      	pop	{r4, r7, pc}
 8003fb2:	46c0      	nop			@ (mov r8, r8)
 8003fb4:	80002400 	.word	0x80002400
 8003fb8:	fe00e800 	.word	0xfe00e800

08003fbc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003fbc:	b5b0      	push	{r4, r5, r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af02      	add	r7, sp, #8
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	000c      	movs	r4, r1
 8003fc6:	0010      	movs	r0, r2
 8003fc8:	0019      	movs	r1, r3
 8003fca:	250a      	movs	r5, #10
 8003fcc:	197b      	adds	r3, r7, r5
 8003fce:	1c22      	adds	r2, r4, #0
 8003fd0:	801a      	strh	r2, [r3, #0]
 8003fd2:	2308      	movs	r3, #8
 8003fd4:	18fb      	adds	r3, r7, r3
 8003fd6:	1c02      	adds	r2, r0, #0
 8003fd8:	801a      	strh	r2, [r3, #0]
 8003fda:	1dbb      	adds	r3, r7, #6
 8003fdc:	1c0a      	adds	r2, r1, #0
 8003fde:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003fe0:	1dbb      	adds	r3, r7, #6
 8003fe2:	881b      	ldrh	r3, [r3, #0]
 8003fe4:	b2da      	uxtb	r2, r3
 8003fe6:	2380      	movs	r3, #128	@ 0x80
 8003fe8:	045c      	lsls	r4, r3, #17
 8003fea:	197b      	adds	r3, r7, r5
 8003fec:	8819      	ldrh	r1, [r3, #0]
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	4b23      	ldr	r3, [pc, #140]	@ (8004080 <I2C_RequestMemoryWrite+0xc4>)
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	0023      	movs	r3, r4
 8003ff6:	f000 faa3 	bl	8004540 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ffa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ffc:	6a39      	ldr	r1, [r7, #32]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	0018      	movs	r0, r3
 8004002:	f000 f91b 	bl	800423c <I2C_WaitOnTXISFlagUntilTimeout>
 8004006:	1e03      	subs	r3, r0, #0
 8004008:	d001      	beq.n	800400e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e033      	b.n	8004076 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800400e:	1dbb      	adds	r3, r7, #6
 8004010:	881b      	ldrh	r3, [r3, #0]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d107      	bne.n	8004026 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004016:	2308      	movs	r3, #8
 8004018:	18fb      	adds	r3, r7, r3
 800401a:	881b      	ldrh	r3, [r3, #0]
 800401c:	b2da      	uxtb	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	629a      	str	r2, [r3, #40]	@ 0x28
 8004024:	e019      	b.n	800405a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004026:	2308      	movs	r3, #8
 8004028:	18fb      	adds	r3, r7, r3
 800402a:	881b      	ldrh	r3, [r3, #0]
 800402c:	0a1b      	lsrs	r3, r3, #8
 800402e:	b29b      	uxth	r3, r3
 8004030:	b2da      	uxtb	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004038:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800403a:	6a39      	ldr	r1, [r7, #32]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	0018      	movs	r0, r3
 8004040:	f000 f8fc 	bl	800423c <I2C_WaitOnTXISFlagUntilTimeout>
 8004044:	1e03      	subs	r3, r0, #0
 8004046:	d001      	beq.n	800404c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e014      	b.n	8004076 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800404c:	2308      	movs	r3, #8
 800404e:	18fb      	adds	r3, r7, r3
 8004050:	881b      	ldrh	r3, [r3, #0]
 8004052:	b2da      	uxtb	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800405a:	6a3a      	ldr	r2, [r7, #32]
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	0013      	movs	r3, r2
 8004064:	2200      	movs	r2, #0
 8004066:	2180      	movs	r1, #128	@ 0x80
 8004068:	f000 f890 	bl	800418c <I2C_WaitOnFlagUntilTimeout>
 800406c:	1e03      	subs	r3, r0, #0
 800406e:	d001      	beq.n	8004074 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e000      	b.n	8004076 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	0018      	movs	r0, r3
 8004078:	46bd      	mov	sp, r7
 800407a:	b004      	add	sp, #16
 800407c:	bdb0      	pop	{r4, r5, r7, pc}
 800407e:	46c0      	nop			@ (mov r8, r8)
 8004080:	80002000 	.word	0x80002000

08004084 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004084:	b5b0      	push	{r4, r5, r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af02      	add	r7, sp, #8
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	000c      	movs	r4, r1
 800408e:	0010      	movs	r0, r2
 8004090:	0019      	movs	r1, r3
 8004092:	250a      	movs	r5, #10
 8004094:	197b      	adds	r3, r7, r5
 8004096:	1c22      	adds	r2, r4, #0
 8004098:	801a      	strh	r2, [r3, #0]
 800409a:	2308      	movs	r3, #8
 800409c:	18fb      	adds	r3, r7, r3
 800409e:	1c02      	adds	r2, r0, #0
 80040a0:	801a      	strh	r2, [r3, #0]
 80040a2:	1dbb      	adds	r3, r7, #6
 80040a4:	1c0a      	adds	r2, r1, #0
 80040a6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80040a8:	1dbb      	adds	r3, r7, #6
 80040aa:	881b      	ldrh	r3, [r3, #0]
 80040ac:	b2da      	uxtb	r2, r3
 80040ae:	197b      	adds	r3, r7, r5
 80040b0:	8819      	ldrh	r1, [r3, #0]
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	4b23      	ldr	r3, [pc, #140]	@ (8004144 <I2C_RequestMemoryRead+0xc0>)
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	2300      	movs	r3, #0
 80040ba:	f000 fa41 	bl	8004540 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040c0:	6a39      	ldr	r1, [r7, #32]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	0018      	movs	r0, r3
 80040c6:	f000 f8b9 	bl	800423c <I2C_WaitOnTXISFlagUntilTimeout>
 80040ca:	1e03      	subs	r3, r0, #0
 80040cc:	d001      	beq.n	80040d2 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e033      	b.n	800413a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040d2:	1dbb      	adds	r3, r7, #6
 80040d4:	881b      	ldrh	r3, [r3, #0]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d107      	bne.n	80040ea <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040da:	2308      	movs	r3, #8
 80040dc:	18fb      	adds	r3, r7, r3
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80040e8:	e019      	b.n	800411e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80040ea:	2308      	movs	r3, #8
 80040ec:	18fb      	adds	r3, r7, r3
 80040ee:	881b      	ldrh	r3, [r3, #0]
 80040f0:	0a1b      	lsrs	r3, r3, #8
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	b2da      	uxtb	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040fe:	6a39      	ldr	r1, [r7, #32]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	0018      	movs	r0, r3
 8004104:	f000 f89a 	bl	800423c <I2C_WaitOnTXISFlagUntilTimeout>
 8004108:	1e03      	subs	r3, r0, #0
 800410a:	d001      	beq.n	8004110 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e014      	b.n	800413a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004110:	2308      	movs	r3, #8
 8004112:	18fb      	adds	r3, r7, r3
 8004114:	881b      	ldrh	r3, [r3, #0]
 8004116:	b2da      	uxtb	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800411e:	6a3a      	ldr	r2, [r7, #32]
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	0013      	movs	r3, r2
 8004128:	2200      	movs	r2, #0
 800412a:	2140      	movs	r1, #64	@ 0x40
 800412c:	f000 f82e 	bl	800418c <I2C_WaitOnFlagUntilTimeout>
 8004130:	1e03      	subs	r3, r0, #0
 8004132:	d001      	beq.n	8004138 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e000      	b.n	800413a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	0018      	movs	r0, r3
 800413c:	46bd      	mov	sp, r7
 800413e:	b004      	add	sp, #16
 8004140:	bdb0      	pop	{r4, r5, r7, pc}
 8004142:	46c0      	nop			@ (mov r8, r8)
 8004144:	80002000 	.word	0x80002000

08004148 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	2202      	movs	r2, #2
 8004158:	4013      	ands	r3, r2
 800415a:	2b02      	cmp	r3, #2
 800415c:	d103      	bne.n	8004166 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2200      	movs	r2, #0
 8004164:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	2201      	movs	r2, #1
 800416e:	4013      	ands	r3, r2
 8004170:	2b01      	cmp	r3, #1
 8004172:	d007      	beq.n	8004184 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	699a      	ldr	r2, [r3, #24]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2101      	movs	r1, #1
 8004180:	430a      	orrs	r2, r1
 8004182:	619a      	str	r2, [r3, #24]
  }
}
 8004184:	46c0      	nop			@ (mov r8, r8)
 8004186:	46bd      	mov	sp, r7
 8004188:	b002      	add	sp, #8
 800418a:	bd80      	pop	{r7, pc}

0800418c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	603b      	str	r3, [r7, #0]
 8004198:	1dfb      	adds	r3, r7, #7
 800419a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800419c:	e03a      	b.n	8004214 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800419e:	69ba      	ldr	r2, [r7, #24]
 80041a0:	6839      	ldr	r1, [r7, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	0018      	movs	r0, r3
 80041a6:	f000 f8d3 	bl	8004350 <I2C_IsErrorOccurred>
 80041aa:	1e03      	subs	r3, r0, #0
 80041ac:	d001      	beq.n	80041b2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e040      	b.n	8004234 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	3301      	adds	r3, #1
 80041b6:	d02d      	beq.n	8004214 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041b8:	f7ff f964 	bl	8003484 <HAL_GetTick>
 80041bc:	0002      	movs	r2, r0
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d302      	bcc.n	80041ce <I2C_WaitOnFlagUntilTimeout+0x42>
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d122      	bne.n	8004214 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	68ba      	ldr	r2, [r7, #8]
 80041d6:	4013      	ands	r3, r2
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	425a      	negs	r2, r3
 80041de:	4153      	adcs	r3, r2
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	001a      	movs	r2, r3
 80041e4:	1dfb      	adds	r3, r7, #7
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d113      	bne.n	8004214 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f0:	2220      	movs	r2, #32
 80041f2:	431a      	orrs	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2241      	movs	r2, #65	@ 0x41
 80041fc:	2120      	movs	r1, #32
 80041fe:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2242      	movs	r2, #66	@ 0x42
 8004204:	2100      	movs	r1, #0
 8004206:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2240      	movs	r2, #64	@ 0x40
 800420c:	2100      	movs	r1, #0
 800420e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e00f      	b.n	8004234 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	4013      	ands	r3, r2
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	425a      	negs	r2, r3
 8004224:	4153      	adcs	r3, r2
 8004226:	b2db      	uxtb	r3, r3
 8004228:	001a      	movs	r2, r3
 800422a:	1dfb      	adds	r3, r7, #7
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	429a      	cmp	r2, r3
 8004230:	d0b5      	beq.n	800419e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	0018      	movs	r0, r3
 8004236:	46bd      	mov	sp, r7
 8004238:	b004      	add	sp, #16
 800423a:	bd80      	pop	{r7, pc}

0800423c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004248:	e032      	b.n	80042b0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	68b9      	ldr	r1, [r7, #8]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	0018      	movs	r0, r3
 8004252:	f000 f87d 	bl	8004350 <I2C_IsErrorOccurred>
 8004256:	1e03      	subs	r3, r0, #0
 8004258:	d001      	beq.n	800425e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e030      	b.n	80042c0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	3301      	adds	r3, #1
 8004262:	d025      	beq.n	80042b0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004264:	f7ff f90e 	bl	8003484 <HAL_GetTick>
 8004268:	0002      	movs	r2, r0
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	429a      	cmp	r2, r3
 8004272:	d302      	bcc.n	800427a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d11a      	bne.n	80042b0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	2202      	movs	r2, #2
 8004282:	4013      	ands	r3, r2
 8004284:	2b02      	cmp	r3, #2
 8004286:	d013      	beq.n	80042b0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800428c:	2220      	movs	r2, #32
 800428e:	431a      	orrs	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2241      	movs	r2, #65	@ 0x41
 8004298:	2120      	movs	r1, #32
 800429a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2242      	movs	r2, #66	@ 0x42
 80042a0:	2100      	movs	r1, #0
 80042a2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2240      	movs	r2, #64	@ 0x40
 80042a8:	2100      	movs	r1, #0
 80042aa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e007      	b.n	80042c0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	2202      	movs	r2, #2
 80042b8:	4013      	ands	r3, r2
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d1c5      	bne.n	800424a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	0018      	movs	r0, r3
 80042c2:	46bd      	mov	sp, r7
 80042c4:	b004      	add	sp, #16
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042d4:	e02f      	b.n	8004336 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	68b9      	ldr	r1, [r7, #8]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	0018      	movs	r0, r3
 80042de:	f000 f837 	bl	8004350 <I2C_IsErrorOccurred>
 80042e2:	1e03      	subs	r3, r0, #0
 80042e4:	d001      	beq.n	80042ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e02d      	b.n	8004346 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ea:	f7ff f8cb 	bl	8003484 <HAL_GetTick>
 80042ee:	0002      	movs	r2, r0
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d302      	bcc.n	8004300 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d11a      	bne.n	8004336 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	2220      	movs	r2, #32
 8004308:	4013      	ands	r3, r2
 800430a:	2b20      	cmp	r3, #32
 800430c:	d013      	beq.n	8004336 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004312:	2220      	movs	r2, #32
 8004314:	431a      	orrs	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2241      	movs	r2, #65	@ 0x41
 800431e:	2120      	movs	r1, #32
 8004320:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2242      	movs	r2, #66	@ 0x42
 8004326:	2100      	movs	r1, #0
 8004328:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2240      	movs	r2, #64	@ 0x40
 800432e:	2100      	movs	r1, #0
 8004330:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e007      	b.n	8004346 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	2220      	movs	r2, #32
 800433e:	4013      	ands	r3, r2
 8004340:	2b20      	cmp	r3, #32
 8004342:	d1c8      	bne.n	80042d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	0018      	movs	r0, r3
 8004348:	46bd      	mov	sp, r7
 800434a:	b004      	add	sp, #16
 800434c:	bd80      	pop	{r7, pc}
	...

08004350 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b08a      	sub	sp, #40	@ 0x28
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800435c:	2327      	movs	r3, #39	@ 0x27
 800435e:	18fb      	adds	r3, r7, r3
 8004360:	2200      	movs	r2, #0
 8004362:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800436c:	2300      	movs	r3, #0
 800436e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	2210      	movs	r2, #16
 8004378:	4013      	ands	r3, r2
 800437a:	d100      	bne.n	800437e <I2C_IsErrorOccurred+0x2e>
 800437c:	e079      	b.n	8004472 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2210      	movs	r2, #16
 8004384:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004386:	e057      	b.n	8004438 <I2C_IsErrorOccurred+0xe8>
 8004388:	2227      	movs	r2, #39	@ 0x27
 800438a:	18bb      	adds	r3, r7, r2
 800438c:	18ba      	adds	r2, r7, r2
 800438e:	7812      	ldrb	r2, [r2, #0]
 8004390:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	3301      	adds	r3, #1
 8004396:	d04f      	beq.n	8004438 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004398:	f7ff f874 	bl	8003484 <HAL_GetTick>
 800439c:	0002      	movs	r2, r0
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d302      	bcc.n	80043ae <I2C_IsErrorOccurred+0x5e>
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d144      	bne.n	8004438 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	2380      	movs	r3, #128	@ 0x80
 80043b6:	01db      	lsls	r3, r3, #7
 80043b8:	4013      	ands	r3, r2
 80043ba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80043bc:	2013      	movs	r0, #19
 80043be:	183b      	adds	r3, r7, r0
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	2142      	movs	r1, #66	@ 0x42
 80043c4:	5c52      	ldrb	r2, [r2, r1]
 80043c6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	699a      	ldr	r2, [r3, #24]
 80043ce:	2380      	movs	r3, #128	@ 0x80
 80043d0:	021b      	lsls	r3, r3, #8
 80043d2:	401a      	ands	r2, r3
 80043d4:	2380      	movs	r3, #128	@ 0x80
 80043d6:	021b      	lsls	r3, r3, #8
 80043d8:	429a      	cmp	r2, r3
 80043da:	d126      	bne.n	800442a <I2C_IsErrorOccurred+0xda>
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	2380      	movs	r3, #128	@ 0x80
 80043e0:	01db      	lsls	r3, r3, #7
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d021      	beq.n	800442a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80043e6:	183b      	adds	r3, r7, r0
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	2b20      	cmp	r3, #32
 80043ec:	d01d      	beq.n	800442a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2180      	movs	r1, #128	@ 0x80
 80043fa:	01c9      	lsls	r1, r1, #7
 80043fc:	430a      	orrs	r2, r1
 80043fe:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004400:	f7ff f840 	bl	8003484 <HAL_GetTick>
 8004404:	0003      	movs	r3, r0
 8004406:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004408:	e00f      	b.n	800442a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800440a:	f7ff f83b 	bl	8003484 <HAL_GetTick>
 800440e:	0002      	movs	r2, r0
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b19      	cmp	r3, #25
 8004416:	d908      	bls.n	800442a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004418:	6a3b      	ldr	r3, [r7, #32]
 800441a:	2220      	movs	r2, #32
 800441c:	4313      	orrs	r3, r2
 800441e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004420:	2327      	movs	r3, #39	@ 0x27
 8004422:	18fb      	adds	r3, r7, r3
 8004424:	2201      	movs	r2, #1
 8004426:	701a      	strb	r2, [r3, #0]

              break;
 8004428:	e006      	b.n	8004438 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	2220      	movs	r2, #32
 8004432:	4013      	ands	r3, r2
 8004434:	2b20      	cmp	r3, #32
 8004436:	d1e8      	bne.n	800440a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	2220      	movs	r2, #32
 8004440:	4013      	ands	r3, r2
 8004442:	2b20      	cmp	r3, #32
 8004444:	d004      	beq.n	8004450 <I2C_IsErrorOccurred+0x100>
 8004446:	2327      	movs	r3, #39	@ 0x27
 8004448:	18fb      	adds	r3, r7, r3
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d09b      	beq.n	8004388 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004450:	2327      	movs	r3, #39	@ 0x27
 8004452:	18fb      	adds	r3, r7, r3
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d103      	bne.n	8004462 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2220      	movs	r2, #32
 8004460:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	2204      	movs	r2, #4
 8004466:	4313      	orrs	r3, r2
 8004468:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800446a:	2327      	movs	r3, #39	@ 0x27
 800446c:	18fb      	adds	r3, r7, r3
 800446e:	2201      	movs	r2, #1
 8004470:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	2380      	movs	r3, #128	@ 0x80
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	4013      	ands	r3, r2
 8004482:	d00c      	beq.n	800449e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004484:	6a3b      	ldr	r3, [r7, #32]
 8004486:	2201      	movs	r2, #1
 8004488:	4313      	orrs	r3, r2
 800448a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2280      	movs	r2, #128	@ 0x80
 8004492:	0052      	lsls	r2, r2, #1
 8004494:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004496:	2327      	movs	r3, #39	@ 0x27
 8004498:	18fb      	adds	r3, r7, r3
 800449a:	2201      	movs	r2, #1
 800449c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	2380      	movs	r3, #128	@ 0x80
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	4013      	ands	r3, r2
 80044a6:	d00c      	beq.n	80044c2 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80044a8:	6a3b      	ldr	r3, [r7, #32]
 80044aa:	2208      	movs	r2, #8
 80044ac:	4313      	orrs	r3, r2
 80044ae:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2280      	movs	r2, #128	@ 0x80
 80044b6:	00d2      	lsls	r2, r2, #3
 80044b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80044ba:	2327      	movs	r3, #39	@ 0x27
 80044bc:	18fb      	adds	r3, r7, r3
 80044be:	2201      	movs	r2, #1
 80044c0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	2380      	movs	r3, #128	@ 0x80
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4013      	ands	r3, r2
 80044ca:	d00c      	beq.n	80044e6 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80044cc:	6a3b      	ldr	r3, [r7, #32]
 80044ce:	2202      	movs	r2, #2
 80044d0:	4313      	orrs	r3, r2
 80044d2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2280      	movs	r2, #128	@ 0x80
 80044da:	0092      	lsls	r2, r2, #2
 80044dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80044de:	2327      	movs	r3, #39	@ 0x27
 80044e0:	18fb      	adds	r3, r7, r3
 80044e2:	2201      	movs	r2, #1
 80044e4:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80044e6:	2327      	movs	r3, #39	@ 0x27
 80044e8:	18fb      	adds	r3, r7, r3
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d01d      	beq.n	800452c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	0018      	movs	r0, r3
 80044f4:	f7ff fe28 	bl	8004148 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	490e      	ldr	r1, [pc, #56]	@ (800453c <I2C_IsErrorOccurred+0x1ec>)
 8004504:	400a      	ands	r2, r1
 8004506:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800450c:	6a3b      	ldr	r3, [r7, #32]
 800450e:	431a      	orrs	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2241      	movs	r2, #65	@ 0x41
 8004518:	2120      	movs	r1, #32
 800451a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2242      	movs	r2, #66	@ 0x42
 8004520:	2100      	movs	r1, #0
 8004522:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2240      	movs	r2, #64	@ 0x40
 8004528:	2100      	movs	r1, #0
 800452a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800452c:	2327      	movs	r3, #39	@ 0x27
 800452e:	18fb      	adds	r3, r7, r3
 8004530:	781b      	ldrb	r3, [r3, #0]
}
 8004532:	0018      	movs	r0, r3
 8004534:	46bd      	mov	sp, r7
 8004536:	b00a      	add	sp, #40	@ 0x28
 8004538:	bd80      	pop	{r7, pc}
 800453a:	46c0      	nop			@ (mov r8, r8)
 800453c:	fe00e800 	.word	0xfe00e800

08004540 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004540:	b590      	push	{r4, r7, lr}
 8004542:	b087      	sub	sp, #28
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	0008      	movs	r0, r1
 800454a:	0011      	movs	r1, r2
 800454c:	607b      	str	r3, [r7, #4]
 800454e:	240a      	movs	r4, #10
 8004550:	193b      	adds	r3, r7, r4
 8004552:	1c02      	adds	r2, r0, #0
 8004554:	801a      	strh	r2, [r3, #0]
 8004556:	2009      	movs	r0, #9
 8004558:	183b      	adds	r3, r7, r0
 800455a:	1c0a      	adds	r2, r1, #0
 800455c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800455e:	193b      	adds	r3, r7, r4
 8004560:	881b      	ldrh	r3, [r3, #0]
 8004562:	059b      	lsls	r3, r3, #22
 8004564:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004566:	183b      	adds	r3, r7, r0
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	0419      	lsls	r1, r3, #16
 800456c:	23ff      	movs	r3, #255	@ 0xff
 800456e:	041b      	lsls	r3, r3, #16
 8004570:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004572:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800457a:	4313      	orrs	r3, r2
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	085b      	lsrs	r3, r3, #1
 8004580:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800458a:	0d51      	lsrs	r1, r2, #21
 800458c:	2280      	movs	r2, #128	@ 0x80
 800458e:	00d2      	lsls	r2, r2, #3
 8004590:	400a      	ands	r2, r1
 8004592:	4907      	ldr	r1, [pc, #28]	@ (80045b0 <I2C_TransferConfig+0x70>)
 8004594:	430a      	orrs	r2, r1
 8004596:	43d2      	mvns	r2, r2
 8004598:	401a      	ands	r2, r3
 800459a:	0011      	movs	r1, r2
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	697a      	ldr	r2, [r7, #20]
 80045a2:	430a      	orrs	r2, r1
 80045a4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80045a6:	46c0      	nop			@ (mov r8, r8)
 80045a8:	46bd      	mov	sp, r7
 80045aa:	b007      	add	sp, #28
 80045ac:	bd90      	pop	{r4, r7, pc}
 80045ae:	46c0      	nop			@ (mov r8, r8)
 80045b0:	03ff63ff 	.word	0x03ff63ff

080045b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2241      	movs	r2, #65	@ 0x41
 80045c2:	5c9b      	ldrb	r3, [r3, r2]
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b20      	cmp	r3, #32
 80045c8:	d138      	bne.n	800463c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2240      	movs	r2, #64	@ 0x40
 80045ce:	5c9b      	ldrb	r3, [r3, r2]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d101      	bne.n	80045d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80045d4:	2302      	movs	r3, #2
 80045d6:	e032      	b.n	800463e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2240      	movs	r2, #64	@ 0x40
 80045dc:	2101      	movs	r1, #1
 80045de:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2241      	movs	r2, #65	@ 0x41
 80045e4:	2124      	movs	r1, #36	@ 0x24
 80045e6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2101      	movs	r1, #1
 80045f4:	438a      	bics	r2, r1
 80045f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4911      	ldr	r1, [pc, #68]	@ (8004648 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004604:	400a      	ands	r2, r1
 8004606:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6819      	ldr	r1, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2101      	movs	r1, #1
 8004624:	430a      	orrs	r2, r1
 8004626:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2241      	movs	r2, #65	@ 0x41
 800462c:	2120      	movs	r1, #32
 800462e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2240      	movs	r2, #64	@ 0x40
 8004634:	2100      	movs	r1, #0
 8004636:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004638:	2300      	movs	r3, #0
 800463a:	e000      	b.n	800463e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800463c:	2302      	movs	r3, #2
  }
}
 800463e:	0018      	movs	r0, r3
 8004640:	46bd      	mov	sp, r7
 8004642:	b002      	add	sp, #8
 8004644:	bd80      	pop	{r7, pc}
 8004646:	46c0      	nop			@ (mov r8, r8)
 8004648:	ffffefff 	.word	0xffffefff

0800464c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2241      	movs	r2, #65	@ 0x41
 800465a:	5c9b      	ldrb	r3, [r3, r2]
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b20      	cmp	r3, #32
 8004660:	d139      	bne.n	80046d6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2240      	movs	r2, #64	@ 0x40
 8004666:	5c9b      	ldrb	r3, [r3, r2]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d101      	bne.n	8004670 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800466c:	2302      	movs	r3, #2
 800466e:	e033      	b.n	80046d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2240      	movs	r2, #64	@ 0x40
 8004674:	2101      	movs	r1, #1
 8004676:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2241      	movs	r2, #65	@ 0x41
 800467c:	2124      	movs	r1, #36	@ 0x24
 800467e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2101      	movs	r1, #1
 800468c:	438a      	bics	r2, r1
 800468e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	4a11      	ldr	r2, [pc, #68]	@ (80046e0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800469c:	4013      	ands	r3, r2
 800469e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	021b      	lsls	r3, r3, #8
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2101      	movs	r1, #1
 80046be:	430a      	orrs	r2, r1
 80046c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2241      	movs	r2, #65	@ 0x41
 80046c6:	2120      	movs	r1, #32
 80046c8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2240      	movs	r2, #64	@ 0x40
 80046ce:	2100      	movs	r1, #0
 80046d0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80046d2:	2300      	movs	r3, #0
 80046d4:	e000      	b.n	80046d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80046d6:	2302      	movs	r3, #2
  }
}
 80046d8:	0018      	movs	r0, r3
 80046da:	46bd      	mov	sp, r7
 80046dc:	b004      	add	sp, #16
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	fffff0ff 	.word	0xfffff0ff

080046e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b088      	sub	sp, #32
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e301      	b.n	8004cfa <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2201      	movs	r2, #1
 80046fc:	4013      	ands	r3, r2
 80046fe:	d100      	bne.n	8004702 <HAL_RCC_OscConfig+0x1e>
 8004700:	e08d      	b.n	800481e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004702:	4bc3      	ldr	r3, [pc, #780]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	220c      	movs	r2, #12
 8004708:	4013      	ands	r3, r2
 800470a:	2b04      	cmp	r3, #4
 800470c:	d00e      	beq.n	800472c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800470e:	4bc0      	ldr	r3, [pc, #768]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	220c      	movs	r2, #12
 8004714:	4013      	ands	r3, r2
 8004716:	2b08      	cmp	r3, #8
 8004718:	d116      	bne.n	8004748 <HAL_RCC_OscConfig+0x64>
 800471a:	4bbd      	ldr	r3, [pc, #756]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 800471c:	685a      	ldr	r2, [r3, #4]
 800471e:	2380      	movs	r3, #128	@ 0x80
 8004720:	025b      	lsls	r3, r3, #9
 8004722:	401a      	ands	r2, r3
 8004724:	2380      	movs	r3, #128	@ 0x80
 8004726:	025b      	lsls	r3, r3, #9
 8004728:	429a      	cmp	r2, r3
 800472a:	d10d      	bne.n	8004748 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800472c:	4bb8      	ldr	r3, [pc, #736]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	2380      	movs	r3, #128	@ 0x80
 8004732:	029b      	lsls	r3, r3, #10
 8004734:	4013      	ands	r3, r2
 8004736:	d100      	bne.n	800473a <HAL_RCC_OscConfig+0x56>
 8004738:	e070      	b.n	800481c <HAL_RCC_OscConfig+0x138>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d000      	beq.n	8004744 <HAL_RCC_OscConfig+0x60>
 8004742:	e06b      	b.n	800481c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e2d8      	b.n	8004cfa <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d107      	bne.n	8004760 <HAL_RCC_OscConfig+0x7c>
 8004750:	4baf      	ldr	r3, [pc, #700]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	4bae      	ldr	r3, [pc, #696]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 8004756:	2180      	movs	r1, #128	@ 0x80
 8004758:	0249      	lsls	r1, r1, #9
 800475a:	430a      	orrs	r2, r1
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	e02f      	b.n	80047c0 <HAL_RCC_OscConfig+0xdc>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10c      	bne.n	8004782 <HAL_RCC_OscConfig+0x9e>
 8004768:	4ba9      	ldr	r3, [pc, #676]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	4ba8      	ldr	r3, [pc, #672]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 800476e:	49a9      	ldr	r1, [pc, #676]	@ (8004a14 <HAL_RCC_OscConfig+0x330>)
 8004770:	400a      	ands	r2, r1
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	4ba6      	ldr	r3, [pc, #664]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	4ba5      	ldr	r3, [pc, #660]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 800477a:	49a7      	ldr	r1, [pc, #668]	@ (8004a18 <HAL_RCC_OscConfig+0x334>)
 800477c:	400a      	ands	r2, r1
 800477e:	601a      	str	r2, [r3, #0]
 8004780:	e01e      	b.n	80047c0 <HAL_RCC_OscConfig+0xdc>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2b05      	cmp	r3, #5
 8004788:	d10e      	bne.n	80047a8 <HAL_RCC_OscConfig+0xc4>
 800478a:	4ba1      	ldr	r3, [pc, #644]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	4ba0      	ldr	r3, [pc, #640]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 8004790:	2180      	movs	r1, #128	@ 0x80
 8004792:	02c9      	lsls	r1, r1, #11
 8004794:	430a      	orrs	r2, r1
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	4b9d      	ldr	r3, [pc, #628]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	4b9c      	ldr	r3, [pc, #624]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 800479e:	2180      	movs	r1, #128	@ 0x80
 80047a0:	0249      	lsls	r1, r1, #9
 80047a2:	430a      	orrs	r2, r1
 80047a4:	601a      	str	r2, [r3, #0]
 80047a6:	e00b      	b.n	80047c0 <HAL_RCC_OscConfig+0xdc>
 80047a8:	4b99      	ldr	r3, [pc, #612]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	4b98      	ldr	r3, [pc, #608]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 80047ae:	4999      	ldr	r1, [pc, #612]	@ (8004a14 <HAL_RCC_OscConfig+0x330>)
 80047b0:	400a      	ands	r2, r1
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	4b96      	ldr	r3, [pc, #600]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	4b95      	ldr	r3, [pc, #596]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 80047ba:	4997      	ldr	r1, [pc, #604]	@ (8004a18 <HAL_RCC_OscConfig+0x334>)
 80047bc:	400a      	ands	r2, r1
 80047be:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d014      	beq.n	80047f2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c8:	f7fe fe5c 	bl	8003484 <HAL_GetTick>
 80047cc:	0003      	movs	r3, r0
 80047ce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047d0:	e008      	b.n	80047e4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047d2:	f7fe fe57 	bl	8003484 <HAL_GetTick>
 80047d6:	0002      	movs	r2, r0
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	2b64      	cmp	r3, #100	@ 0x64
 80047de:	d901      	bls.n	80047e4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e28a      	b.n	8004cfa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047e4:	4b8a      	ldr	r3, [pc, #552]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	2380      	movs	r3, #128	@ 0x80
 80047ea:	029b      	lsls	r3, r3, #10
 80047ec:	4013      	ands	r3, r2
 80047ee:	d0f0      	beq.n	80047d2 <HAL_RCC_OscConfig+0xee>
 80047f0:	e015      	b.n	800481e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f2:	f7fe fe47 	bl	8003484 <HAL_GetTick>
 80047f6:	0003      	movs	r3, r0
 80047f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047fa:	e008      	b.n	800480e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047fc:	f7fe fe42 	bl	8003484 <HAL_GetTick>
 8004800:	0002      	movs	r2, r0
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b64      	cmp	r3, #100	@ 0x64
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e275      	b.n	8004cfa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800480e:	4b80      	ldr	r3, [pc, #512]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	2380      	movs	r3, #128	@ 0x80
 8004814:	029b      	lsls	r3, r3, #10
 8004816:	4013      	ands	r3, r2
 8004818:	d1f0      	bne.n	80047fc <HAL_RCC_OscConfig+0x118>
 800481a:	e000      	b.n	800481e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800481c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2202      	movs	r2, #2
 8004824:	4013      	ands	r3, r2
 8004826:	d100      	bne.n	800482a <HAL_RCC_OscConfig+0x146>
 8004828:	e069      	b.n	80048fe <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800482a:	4b79      	ldr	r3, [pc, #484]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	220c      	movs	r2, #12
 8004830:	4013      	ands	r3, r2
 8004832:	d00b      	beq.n	800484c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004834:	4b76      	ldr	r3, [pc, #472]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	220c      	movs	r2, #12
 800483a:	4013      	ands	r3, r2
 800483c:	2b08      	cmp	r3, #8
 800483e:	d11c      	bne.n	800487a <HAL_RCC_OscConfig+0x196>
 8004840:	4b73      	ldr	r3, [pc, #460]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	2380      	movs	r3, #128	@ 0x80
 8004846:	025b      	lsls	r3, r3, #9
 8004848:	4013      	ands	r3, r2
 800484a:	d116      	bne.n	800487a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800484c:	4b70      	ldr	r3, [pc, #448]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2202      	movs	r2, #2
 8004852:	4013      	ands	r3, r2
 8004854:	d005      	beq.n	8004862 <HAL_RCC_OscConfig+0x17e>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d001      	beq.n	8004862 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e24b      	b.n	8004cfa <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004862:	4b6b      	ldr	r3, [pc, #428]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	22f8      	movs	r2, #248	@ 0xf8
 8004868:	4393      	bics	r3, r2
 800486a:	0019      	movs	r1, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	00da      	lsls	r2, r3, #3
 8004872:	4b67      	ldr	r3, [pc, #412]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 8004874:	430a      	orrs	r2, r1
 8004876:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004878:	e041      	b.n	80048fe <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d024      	beq.n	80048cc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004882:	4b63      	ldr	r3, [pc, #396]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	4b62      	ldr	r3, [pc, #392]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 8004888:	2101      	movs	r1, #1
 800488a:	430a      	orrs	r2, r1
 800488c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800488e:	f7fe fdf9 	bl	8003484 <HAL_GetTick>
 8004892:	0003      	movs	r3, r0
 8004894:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004898:	f7fe fdf4 	bl	8003484 <HAL_GetTick>
 800489c:	0002      	movs	r2, r0
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e227      	b.n	8004cfa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048aa:	4b59      	ldr	r3, [pc, #356]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2202      	movs	r2, #2
 80048b0:	4013      	ands	r3, r2
 80048b2:	d0f1      	beq.n	8004898 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048b4:	4b56      	ldr	r3, [pc, #344]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	22f8      	movs	r2, #248	@ 0xf8
 80048ba:	4393      	bics	r3, r2
 80048bc:	0019      	movs	r1, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	00da      	lsls	r2, r3, #3
 80048c4:	4b52      	ldr	r3, [pc, #328]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 80048c6:	430a      	orrs	r2, r1
 80048c8:	601a      	str	r2, [r3, #0]
 80048ca:	e018      	b.n	80048fe <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048cc:	4b50      	ldr	r3, [pc, #320]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	4b4f      	ldr	r3, [pc, #316]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 80048d2:	2101      	movs	r1, #1
 80048d4:	438a      	bics	r2, r1
 80048d6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d8:	f7fe fdd4 	bl	8003484 <HAL_GetTick>
 80048dc:	0003      	movs	r3, r0
 80048de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048e0:	e008      	b.n	80048f4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048e2:	f7fe fdcf 	bl	8003484 <HAL_GetTick>
 80048e6:	0002      	movs	r2, r0
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d901      	bls.n	80048f4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e202      	b.n	8004cfa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048f4:	4b46      	ldr	r3, [pc, #280]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2202      	movs	r2, #2
 80048fa:	4013      	ands	r3, r2
 80048fc:	d1f1      	bne.n	80048e2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2208      	movs	r2, #8
 8004904:	4013      	ands	r3, r2
 8004906:	d036      	beq.n	8004976 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	69db      	ldr	r3, [r3, #28]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d019      	beq.n	8004944 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004910:	4b3f      	ldr	r3, [pc, #252]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 8004912:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004914:	4b3e      	ldr	r3, [pc, #248]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 8004916:	2101      	movs	r1, #1
 8004918:	430a      	orrs	r2, r1
 800491a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800491c:	f7fe fdb2 	bl	8003484 <HAL_GetTick>
 8004920:	0003      	movs	r3, r0
 8004922:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004924:	e008      	b.n	8004938 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004926:	f7fe fdad 	bl	8003484 <HAL_GetTick>
 800492a:	0002      	movs	r2, r0
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	2b02      	cmp	r3, #2
 8004932:	d901      	bls.n	8004938 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e1e0      	b.n	8004cfa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004938:	4b35      	ldr	r3, [pc, #212]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 800493a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800493c:	2202      	movs	r2, #2
 800493e:	4013      	ands	r3, r2
 8004940:	d0f1      	beq.n	8004926 <HAL_RCC_OscConfig+0x242>
 8004942:	e018      	b.n	8004976 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004944:	4b32      	ldr	r3, [pc, #200]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 8004946:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004948:	4b31      	ldr	r3, [pc, #196]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 800494a:	2101      	movs	r1, #1
 800494c:	438a      	bics	r2, r1
 800494e:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004950:	f7fe fd98 	bl	8003484 <HAL_GetTick>
 8004954:	0003      	movs	r3, r0
 8004956:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004958:	e008      	b.n	800496c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800495a:	f7fe fd93 	bl	8003484 <HAL_GetTick>
 800495e:	0002      	movs	r2, r0
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	2b02      	cmp	r3, #2
 8004966:	d901      	bls.n	800496c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e1c6      	b.n	8004cfa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800496c:	4b28      	ldr	r3, [pc, #160]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 800496e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004970:	2202      	movs	r2, #2
 8004972:	4013      	ands	r3, r2
 8004974:	d1f1      	bne.n	800495a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2204      	movs	r2, #4
 800497c:	4013      	ands	r3, r2
 800497e:	d100      	bne.n	8004982 <HAL_RCC_OscConfig+0x29e>
 8004980:	e0b4      	b.n	8004aec <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004982:	201f      	movs	r0, #31
 8004984:	183b      	adds	r3, r7, r0
 8004986:	2200      	movs	r2, #0
 8004988:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800498a:	4b21      	ldr	r3, [pc, #132]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 800498c:	69da      	ldr	r2, [r3, #28]
 800498e:	2380      	movs	r3, #128	@ 0x80
 8004990:	055b      	lsls	r3, r3, #21
 8004992:	4013      	ands	r3, r2
 8004994:	d110      	bne.n	80049b8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004996:	4b1e      	ldr	r3, [pc, #120]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 8004998:	69da      	ldr	r2, [r3, #28]
 800499a:	4b1d      	ldr	r3, [pc, #116]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 800499c:	2180      	movs	r1, #128	@ 0x80
 800499e:	0549      	lsls	r1, r1, #21
 80049a0:	430a      	orrs	r2, r1
 80049a2:	61da      	str	r2, [r3, #28]
 80049a4:	4b1a      	ldr	r3, [pc, #104]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 80049a6:	69da      	ldr	r2, [r3, #28]
 80049a8:	2380      	movs	r3, #128	@ 0x80
 80049aa:	055b      	lsls	r3, r3, #21
 80049ac:	4013      	ands	r3, r2
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80049b2:	183b      	adds	r3, r7, r0
 80049b4:	2201      	movs	r2, #1
 80049b6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049b8:	4b18      	ldr	r3, [pc, #96]	@ (8004a1c <HAL_RCC_OscConfig+0x338>)
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	2380      	movs	r3, #128	@ 0x80
 80049be:	005b      	lsls	r3, r3, #1
 80049c0:	4013      	ands	r3, r2
 80049c2:	d11a      	bne.n	80049fa <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049c4:	4b15      	ldr	r3, [pc, #84]	@ (8004a1c <HAL_RCC_OscConfig+0x338>)
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	4b14      	ldr	r3, [pc, #80]	@ (8004a1c <HAL_RCC_OscConfig+0x338>)
 80049ca:	2180      	movs	r1, #128	@ 0x80
 80049cc:	0049      	lsls	r1, r1, #1
 80049ce:	430a      	orrs	r2, r1
 80049d0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049d2:	f7fe fd57 	bl	8003484 <HAL_GetTick>
 80049d6:	0003      	movs	r3, r0
 80049d8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049da:	e008      	b.n	80049ee <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049dc:	f7fe fd52 	bl	8003484 <HAL_GetTick>
 80049e0:	0002      	movs	r2, r0
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b64      	cmp	r3, #100	@ 0x64
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e185      	b.n	8004cfa <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ee:	4b0b      	ldr	r3, [pc, #44]	@ (8004a1c <HAL_RCC_OscConfig+0x338>)
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	2380      	movs	r3, #128	@ 0x80
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	4013      	ands	r3, r2
 80049f8:	d0f0      	beq.n	80049dc <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d10e      	bne.n	8004a20 <HAL_RCC_OscConfig+0x33c>
 8004a02:	4b03      	ldr	r3, [pc, #12]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 8004a04:	6a1a      	ldr	r2, [r3, #32]
 8004a06:	4b02      	ldr	r3, [pc, #8]	@ (8004a10 <HAL_RCC_OscConfig+0x32c>)
 8004a08:	2101      	movs	r1, #1
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	621a      	str	r2, [r3, #32]
 8004a0e:	e035      	b.n	8004a7c <HAL_RCC_OscConfig+0x398>
 8004a10:	40021000 	.word	0x40021000
 8004a14:	fffeffff 	.word	0xfffeffff
 8004a18:	fffbffff 	.word	0xfffbffff
 8004a1c:	40007000 	.word	0x40007000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d10c      	bne.n	8004a42 <HAL_RCC_OscConfig+0x35e>
 8004a28:	4bb6      	ldr	r3, [pc, #728]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004a2a:	6a1a      	ldr	r2, [r3, #32]
 8004a2c:	4bb5      	ldr	r3, [pc, #724]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004a2e:	2101      	movs	r1, #1
 8004a30:	438a      	bics	r2, r1
 8004a32:	621a      	str	r2, [r3, #32]
 8004a34:	4bb3      	ldr	r3, [pc, #716]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004a36:	6a1a      	ldr	r2, [r3, #32]
 8004a38:	4bb2      	ldr	r3, [pc, #712]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004a3a:	2104      	movs	r1, #4
 8004a3c:	438a      	bics	r2, r1
 8004a3e:	621a      	str	r2, [r3, #32]
 8004a40:	e01c      	b.n	8004a7c <HAL_RCC_OscConfig+0x398>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	2b05      	cmp	r3, #5
 8004a48:	d10c      	bne.n	8004a64 <HAL_RCC_OscConfig+0x380>
 8004a4a:	4bae      	ldr	r3, [pc, #696]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004a4c:	6a1a      	ldr	r2, [r3, #32]
 8004a4e:	4bad      	ldr	r3, [pc, #692]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004a50:	2104      	movs	r1, #4
 8004a52:	430a      	orrs	r2, r1
 8004a54:	621a      	str	r2, [r3, #32]
 8004a56:	4bab      	ldr	r3, [pc, #684]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004a58:	6a1a      	ldr	r2, [r3, #32]
 8004a5a:	4baa      	ldr	r3, [pc, #680]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004a5c:	2101      	movs	r1, #1
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	621a      	str	r2, [r3, #32]
 8004a62:	e00b      	b.n	8004a7c <HAL_RCC_OscConfig+0x398>
 8004a64:	4ba7      	ldr	r3, [pc, #668]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004a66:	6a1a      	ldr	r2, [r3, #32]
 8004a68:	4ba6      	ldr	r3, [pc, #664]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004a6a:	2101      	movs	r1, #1
 8004a6c:	438a      	bics	r2, r1
 8004a6e:	621a      	str	r2, [r3, #32]
 8004a70:	4ba4      	ldr	r3, [pc, #656]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004a72:	6a1a      	ldr	r2, [r3, #32]
 8004a74:	4ba3      	ldr	r3, [pc, #652]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004a76:	2104      	movs	r1, #4
 8004a78:	438a      	bics	r2, r1
 8004a7a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d014      	beq.n	8004aae <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a84:	f7fe fcfe 	bl	8003484 <HAL_GetTick>
 8004a88:	0003      	movs	r3, r0
 8004a8a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a8c:	e009      	b.n	8004aa2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a8e:	f7fe fcf9 	bl	8003484 <HAL_GetTick>
 8004a92:	0002      	movs	r2, r0
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	4a9b      	ldr	r2, [pc, #620]	@ (8004d08 <HAL_RCC_OscConfig+0x624>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e12b      	b.n	8004cfa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aa2:	4b98      	ldr	r3, [pc, #608]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	d0f0      	beq.n	8004a8e <HAL_RCC_OscConfig+0x3aa>
 8004aac:	e013      	b.n	8004ad6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aae:	f7fe fce9 	bl	8003484 <HAL_GetTick>
 8004ab2:	0003      	movs	r3, r0
 8004ab4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ab6:	e009      	b.n	8004acc <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ab8:	f7fe fce4 	bl	8003484 <HAL_GetTick>
 8004abc:	0002      	movs	r2, r0
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	4a91      	ldr	r2, [pc, #580]	@ (8004d08 <HAL_RCC_OscConfig+0x624>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d901      	bls.n	8004acc <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e116      	b.n	8004cfa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004acc:	4b8d      	ldr	r3, [pc, #564]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004ace:	6a1b      	ldr	r3, [r3, #32]
 8004ad0:	2202      	movs	r2, #2
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	d1f0      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ad6:	231f      	movs	r3, #31
 8004ad8:	18fb      	adds	r3, r7, r3
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d105      	bne.n	8004aec <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ae0:	4b88      	ldr	r3, [pc, #544]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004ae2:	69da      	ldr	r2, [r3, #28]
 8004ae4:	4b87      	ldr	r3, [pc, #540]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004ae6:	4989      	ldr	r1, [pc, #548]	@ (8004d0c <HAL_RCC_OscConfig+0x628>)
 8004ae8:	400a      	ands	r2, r1
 8004aea:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2210      	movs	r2, #16
 8004af2:	4013      	ands	r3, r2
 8004af4:	d063      	beq.n	8004bbe <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d12a      	bne.n	8004b54 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004afe:	4b81      	ldr	r3, [pc, #516]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004b00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b02:	4b80      	ldr	r3, [pc, #512]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004b04:	2104      	movs	r1, #4
 8004b06:	430a      	orrs	r2, r1
 8004b08:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004b0a:	4b7e      	ldr	r3, [pc, #504]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004b0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b0e:	4b7d      	ldr	r3, [pc, #500]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004b10:	2101      	movs	r1, #1
 8004b12:	430a      	orrs	r2, r1
 8004b14:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b16:	f7fe fcb5 	bl	8003484 <HAL_GetTick>
 8004b1a:	0003      	movs	r3, r0
 8004b1c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004b1e:	e008      	b.n	8004b32 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004b20:	f7fe fcb0 	bl	8003484 <HAL_GetTick>
 8004b24:	0002      	movs	r2, r0
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e0e3      	b.n	8004cfa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004b32:	4b74      	ldr	r3, [pc, #464]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004b34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b36:	2202      	movs	r2, #2
 8004b38:	4013      	ands	r3, r2
 8004b3a:	d0f1      	beq.n	8004b20 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004b3c:	4b71      	ldr	r3, [pc, #452]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004b3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b40:	22f8      	movs	r2, #248	@ 0xf8
 8004b42:	4393      	bics	r3, r2
 8004b44:	0019      	movs	r1, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	00da      	lsls	r2, r3, #3
 8004b4c:	4b6d      	ldr	r3, [pc, #436]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	635a      	str	r2, [r3, #52]	@ 0x34
 8004b52:	e034      	b.n	8004bbe <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	695b      	ldr	r3, [r3, #20]
 8004b58:	3305      	adds	r3, #5
 8004b5a:	d111      	bne.n	8004b80 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004b5c:	4b69      	ldr	r3, [pc, #420]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004b5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b60:	4b68      	ldr	r3, [pc, #416]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004b62:	2104      	movs	r1, #4
 8004b64:	438a      	bics	r2, r1
 8004b66:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004b68:	4b66      	ldr	r3, [pc, #408]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004b6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b6c:	22f8      	movs	r2, #248	@ 0xf8
 8004b6e:	4393      	bics	r3, r2
 8004b70:	0019      	movs	r1, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	00da      	lsls	r2, r3, #3
 8004b78:	4b62      	ldr	r3, [pc, #392]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	635a      	str	r2, [r3, #52]	@ 0x34
 8004b7e:	e01e      	b.n	8004bbe <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004b80:	4b60      	ldr	r3, [pc, #384]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004b82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b84:	4b5f      	ldr	r3, [pc, #380]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004b86:	2104      	movs	r1, #4
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004b8c:	4b5d      	ldr	r3, [pc, #372]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004b8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b90:	4b5c      	ldr	r3, [pc, #368]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004b92:	2101      	movs	r1, #1
 8004b94:	438a      	bics	r2, r1
 8004b96:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b98:	f7fe fc74 	bl	8003484 <HAL_GetTick>
 8004b9c:	0003      	movs	r3, r0
 8004b9e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004ba0:	e008      	b.n	8004bb4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004ba2:	f7fe fc6f 	bl	8003484 <HAL_GetTick>
 8004ba6:	0002      	movs	r2, r0
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d901      	bls.n	8004bb4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e0a2      	b.n	8004cfa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004bb4:	4b53      	ldr	r3, [pc, #332]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004bb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bb8:	2202      	movs	r2, #2
 8004bba:	4013      	ands	r3, r2
 8004bbc:	d1f1      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d100      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x4e4>
 8004bc6:	e097      	b.n	8004cf8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bc8:	4b4e      	ldr	r3, [pc, #312]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	220c      	movs	r2, #12
 8004bce:	4013      	ands	r3, r2
 8004bd0:	2b08      	cmp	r3, #8
 8004bd2:	d100      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x4f2>
 8004bd4:	e06b      	b.n	8004cae <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d14c      	bne.n	8004c78 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bde:	4b49      	ldr	r3, [pc, #292]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	4b48      	ldr	r3, [pc, #288]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004be4:	494a      	ldr	r1, [pc, #296]	@ (8004d10 <HAL_RCC_OscConfig+0x62c>)
 8004be6:	400a      	ands	r2, r1
 8004be8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bea:	f7fe fc4b 	bl	8003484 <HAL_GetTick>
 8004bee:	0003      	movs	r3, r0
 8004bf0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bf2:	e008      	b.n	8004c06 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bf4:	f7fe fc46 	bl	8003484 <HAL_GetTick>
 8004bf8:	0002      	movs	r2, r0
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e079      	b.n	8004cfa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c06:	4b3f      	ldr	r3, [pc, #252]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	2380      	movs	r3, #128	@ 0x80
 8004c0c:	049b      	lsls	r3, r3, #18
 8004c0e:	4013      	ands	r3, r2
 8004c10:	d1f0      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c12:	4b3c      	ldr	r3, [pc, #240]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c16:	220f      	movs	r2, #15
 8004c18:	4393      	bics	r3, r2
 8004c1a:	0019      	movs	r1, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c20:	4b38      	ldr	r3, [pc, #224]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004c22:	430a      	orrs	r2, r1
 8004c24:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004c26:	4b37      	ldr	r3, [pc, #220]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	4a3a      	ldr	r2, [pc, #232]	@ (8004d14 <HAL_RCC_OscConfig+0x630>)
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	0019      	movs	r1, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c38:	431a      	orrs	r2, r3
 8004c3a:	4b32      	ldr	r3, [pc, #200]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c40:	4b30      	ldr	r3, [pc, #192]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	4b2f      	ldr	r3, [pc, #188]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004c46:	2180      	movs	r1, #128	@ 0x80
 8004c48:	0449      	lsls	r1, r1, #17
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c4e:	f7fe fc19 	bl	8003484 <HAL_GetTick>
 8004c52:	0003      	movs	r3, r0
 8004c54:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c56:	e008      	b.n	8004c6a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c58:	f7fe fc14 	bl	8003484 <HAL_GetTick>
 8004c5c:	0002      	movs	r2, r0
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e047      	b.n	8004cfa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c6a:	4b26      	ldr	r3, [pc, #152]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	2380      	movs	r3, #128	@ 0x80
 8004c70:	049b      	lsls	r3, r3, #18
 8004c72:	4013      	ands	r3, r2
 8004c74:	d0f0      	beq.n	8004c58 <HAL_RCC_OscConfig+0x574>
 8004c76:	e03f      	b.n	8004cf8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c78:	4b22      	ldr	r3, [pc, #136]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	4b21      	ldr	r3, [pc, #132]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004c7e:	4924      	ldr	r1, [pc, #144]	@ (8004d10 <HAL_RCC_OscConfig+0x62c>)
 8004c80:	400a      	ands	r2, r1
 8004c82:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c84:	f7fe fbfe 	bl	8003484 <HAL_GetTick>
 8004c88:	0003      	movs	r3, r0
 8004c8a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c8c:	e008      	b.n	8004ca0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c8e:	f7fe fbf9 	bl	8003484 <HAL_GetTick>
 8004c92:	0002      	movs	r2, r0
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d901      	bls.n	8004ca0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e02c      	b.n	8004cfa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ca0:	4b18      	ldr	r3, [pc, #96]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	2380      	movs	r3, #128	@ 0x80
 8004ca6:	049b      	lsls	r3, r3, #18
 8004ca8:	4013      	ands	r3, r2
 8004caa:	d1f0      	bne.n	8004c8e <HAL_RCC_OscConfig+0x5aa>
 8004cac:	e024      	b.n	8004cf8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d101      	bne.n	8004cba <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e01f      	b.n	8004cfa <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004cba:	4b12      	ldr	r3, [pc, #72]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004cc0:	4b10      	ldr	r3, [pc, #64]	@ (8004d04 <HAL_RCC_OscConfig+0x620>)
 8004cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	2380      	movs	r3, #128	@ 0x80
 8004cca:	025b      	lsls	r3, r3, #9
 8004ccc:	401a      	ands	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d10e      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	220f      	movs	r2, #15
 8004cda:	401a      	ands	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d107      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	23f0      	movs	r3, #240	@ 0xf0
 8004ce8:	039b      	lsls	r3, r3, #14
 8004cea:	401a      	ands	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d001      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e000      	b.n	8004cfa <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	0018      	movs	r0, r3
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	b008      	add	sp, #32
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	46c0      	nop			@ (mov r8, r8)
 8004d04:	40021000 	.word	0x40021000
 8004d08:	00001388 	.word	0x00001388
 8004d0c:	efffffff 	.word	0xefffffff
 8004d10:	feffffff 	.word	0xfeffffff
 8004d14:	ffc2ffff 	.word	0xffc2ffff

08004d18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d101      	bne.n	8004d2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e0b3      	b.n	8004e94 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d2c:	4b5b      	ldr	r3, [pc, #364]	@ (8004e9c <HAL_RCC_ClockConfig+0x184>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2201      	movs	r2, #1
 8004d32:	4013      	ands	r3, r2
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d911      	bls.n	8004d5e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d3a:	4b58      	ldr	r3, [pc, #352]	@ (8004e9c <HAL_RCC_ClockConfig+0x184>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	4393      	bics	r3, r2
 8004d42:	0019      	movs	r1, r3
 8004d44:	4b55      	ldr	r3, [pc, #340]	@ (8004e9c <HAL_RCC_ClockConfig+0x184>)
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d4c:	4b53      	ldr	r3, [pc, #332]	@ (8004e9c <HAL_RCC_ClockConfig+0x184>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2201      	movs	r2, #1
 8004d52:	4013      	ands	r3, r2
 8004d54:	683a      	ldr	r2, [r7, #0]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d001      	beq.n	8004d5e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e09a      	b.n	8004e94 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2202      	movs	r2, #2
 8004d64:	4013      	ands	r3, r2
 8004d66:	d015      	beq.n	8004d94 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2204      	movs	r2, #4
 8004d6e:	4013      	ands	r3, r2
 8004d70:	d006      	beq.n	8004d80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004d72:	4b4b      	ldr	r3, [pc, #300]	@ (8004ea0 <HAL_RCC_ClockConfig+0x188>)
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	4b4a      	ldr	r3, [pc, #296]	@ (8004ea0 <HAL_RCC_ClockConfig+0x188>)
 8004d78:	21e0      	movs	r1, #224	@ 0xe0
 8004d7a:	00c9      	lsls	r1, r1, #3
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d80:	4b47      	ldr	r3, [pc, #284]	@ (8004ea0 <HAL_RCC_ClockConfig+0x188>)
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	22f0      	movs	r2, #240	@ 0xf0
 8004d86:	4393      	bics	r3, r2
 8004d88:	0019      	movs	r1, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	689a      	ldr	r2, [r3, #8]
 8004d8e:	4b44      	ldr	r3, [pc, #272]	@ (8004ea0 <HAL_RCC_ClockConfig+0x188>)
 8004d90:	430a      	orrs	r2, r1
 8004d92:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	d040      	beq.n	8004e20 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d107      	bne.n	8004db6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004da6:	4b3e      	ldr	r3, [pc, #248]	@ (8004ea0 <HAL_RCC_ClockConfig+0x188>)
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	2380      	movs	r3, #128	@ 0x80
 8004dac:	029b      	lsls	r3, r3, #10
 8004dae:	4013      	ands	r3, r2
 8004db0:	d114      	bne.n	8004ddc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e06e      	b.n	8004e94 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d107      	bne.n	8004dce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dbe:	4b38      	ldr	r3, [pc, #224]	@ (8004ea0 <HAL_RCC_ClockConfig+0x188>)
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	2380      	movs	r3, #128	@ 0x80
 8004dc4:	049b      	lsls	r3, r3, #18
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	d108      	bne.n	8004ddc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e062      	b.n	8004e94 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dce:	4b34      	ldr	r3, [pc, #208]	@ (8004ea0 <HAL_RCC_ClockConfig+0x188>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	d101      	bne.n	8004ddc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e05b      	b.n	8004e94 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ddc:	4b30      	ldr	r3, [pc, #192]	@ (8004ea0 <HAL_RCC_ClockConfig+0x188>)
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	2203      	movs	r2, #3
 8004de2:	4393      	bics	r3, r2
 8004de4:	0019      	movs	r1, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	4b2d      	ldr	r3, [pc, #180]	@ (8004ea0 <HAL_RCC_ClockConfig+0x188>)
 8004dec:	430a      	orrs	r2, r1
 8004dee:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004df0:	f7fe fb48 	bl	8003484 <HAL_GetTick>
 8004df4:	0003      	movs	r3, r0
 8004df6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004df8:	e009      	b.n	8004e0e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dfa:	f7fe fb43 	bl	8003484 <HAL_GetTick>
 8004dfe:	0002      	movs	r2, r0
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	4a27      	ldr	r2, [pc, #156]	@ (8004ea4 <HAL_RCC_ClockConfig+0x18c>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e042      	b.n	8004e94 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e0e:	4b24      	ldr	r3, [pc, #144]	@ (8004ea0 <HAL_RCC_ClockConfig+0x188>)
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	220c      	movs	r2, #12
 8004e14:	401a      	ands	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d1ec      	bne.n	8004dfa <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e20:	4b1e      	ldr	r3, [pc, #120]	@ (8004e9c <HAL_RCC_ClockConfig+0x184>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2201      	movs	r2, #1
 8004e26:	4013      	ands	r3, r2
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d211      	bcs.n	8004e52 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e2e:	4b1b      	ldr	r3, [pc, #108]	@ (8004e9c <HAL_RCC_ClockConfig+0x184>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2201      	movs	r2, #1
 8004e34:	4393      	bics	r3, r2
 8004e36:	0019      	movs	r1, r3
 8004e38:	4b18      	ldr	r3, [pc, #96]	@ (8004e9c <HAL_RCC_ClockConfig+0x184>)
 8004e3a:	683a      	ldr	r2, [r7, #0]
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e40:	4b16      	ldr	r3, [pc, #88]	@ (8004e9c <HAL_RCC_ClockConfig+0x184>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2201      	movs	r2, #1
 8004e46:	4013      	ands	r3, r2
 8004e48:	683a      	ldr	r2, [r7, #0]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d001      	beq.n	8004e52 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e020      	b.n	8004e94 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2204      	movs	r2, #4
 8004e58:	4013      	ands	r3, r2
 8004e5a:	d009      	beq.n	8004e70 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004e5c:	4b10      	ldr	r3, [pc, #64]	@ (8004ea0 <HAL_RCC_ClockConfig+0x188>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	4a11      	ldr	r2, [pc, #68]	@ (8004ea8 <HAL_RCC_ClockConfig+0x190>)
 8004e62:	4013      	ands	r3, r2
 8004e64:	0019      	movs	r1, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68da      	ldr	r2, [r3, #12]
 8004e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ea0 <HAL_RCC_ClockConfig+0x188>)
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004e70:	f000 f820 	bl	8004eb4 <HAL_RCC_GetSysClockFreq>
 8004e74:	0001      	movs	r1, r0
 8004e76:	4b0a      	ldr	r3, [pc, #40]	@ (8004ea0 <HAL_RCC_ClockConfig+0x188>)
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	091b      	lsrs	r3, r3, #4
 8004e7c:	220f      	movs	r2, #15
 8004e7e:	4013      	ands	r3, r2
 8004e80:	4a0a      	ldr	r2, [pc, #40]	@ (8004eac <HAL_RCC_ClockConfig+0x194>)
 8004e82:	5cd3      	ldrb	r3, [r2, r3]
 8004e84:	000a      	movs	r2, r1
 8004e86:	40da      	lsrs	r2, r3
 8004e88:	4b09      	ldr	r3, [pc, #36]	@ (8004eb0 <HAL_RCC_ClockConfig+0x198>)
 8004e8a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004e8c:	2000      	movs	r0, #0
 8004e8e:	f7fe fab3 	bl	80033f8 <HAL_InitTick>
  
  return HAL_OK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	0018      	movs	r0, r3
 8004e96:	46bd      	mov	sp, r7
 8004e98:	b004      	add	sp, #16
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	40022000 	.word	0x40022000
 8004ea0:	40021000 	.word	0x40021000
 8004ea4:	00001388 	.word	0x00001388
 8004ea8:	fffff8ff 	.word	0xfffff8ff
 8004eac:	08008624 	.word	0x08008624
 8004eb0:	20000000 	.word	0x20000000

08004eb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b086      	sub	sp, #24
 8004eb8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	60fb      	str	r3, [r7, #12]
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	60bb      	str	r3, [r7, #8]
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	617b      	str	r3, [r7, #20]
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004ece:	4b20      	ldr	r3, [pc, #128]	@ (8004f50 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	220c      	movs	r2, #12
 8004ed8:	4013      	ands	r3, r2
 8004eda:	2b04      	cmp	r3, #4
 8004edc:	d002      	beq.n	8004ee4 <HAL_RCC_GetSysClockFreq+0x30>
 8004ede:	2b08      	cmp	r3, #8
 8004ee0:	d003      	beq.n	8004eea <HAL_RCC_GetSysClockFreq+0x36>
 8004ee2:	e02c      	b.n	8004f3e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ee4:	4b1b      	ldr	r3, [pc, #108]	@ (8004f54 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004ee6:	613b      	str	r3, [r7, #16]
      break;
 8004ee8:	e02c      	b.n	8004f44 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	0c9b      	lsrs	r3, r3, #18
 8004eee:	220f      	movs	r2, #15
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	4a19      	ldr	r2, [pc, #100]	@ (8004f58 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004ef4:	5cd3      	ldrb	r3, [r2, r3]
 8004ef6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004ef8:	4b15      	ldr	r3, [pc, #84]	@ (8004f50 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efc:	220f      	movs	r2, #15
 8004efe:	4013      	ands	r3, r2
 8004f00:	4a16      	ldr	r2, [pc, #88]	@ (8004f5c <HAL_RCC_GetSysClockFreq+0xa8>)
 8004f02:	5cd3      	ldrb	r3, [r2, r3]
 8004f04:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	2380      	movs	r3, #128	@ 0x80
 8004f0a:	025b      	lsls	r3, r3, #9
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	d009      	beq.n	8004f24 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004f10:	68b9      	ldr	r1, [r7, #8]
 8004f12:	4810      	ldr	r0, [pc, #64]	@ (8004f54 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004f14:	f7fb f914 	bl	8000140 <__udivsi3>
 8004f18:	0003      	movs	r3, r0
 8004f1a:	001a      	movs	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4353      	muls	r3, r2
 8004f20:	617b      	str	r3, [r7, #20]
 8004f22:	e009      	b.n	8004f38 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004f24:	6879      	ldr	r1, [r7, #4]
 8004f26:	000a      	movs	r2, r1
 8004f28:	0152      	lsls	r2, r2, #5
 8004f2a:	1a52      	subs	r2, r2, r1
 8004f2c:	0193      	lsls	r3, r2, #6
 8004f2e:	1a9b      	subs	r3, r3, r2
 8004f30:	00db      	lsls	r3, r3, #3
 8004f32:	185b      	adds	r3, r3, r1
 8004f34:	021b      	lsls	r3, r3, #8
 8004f36:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	613b      	str	r3, [r7, #16]
      break;
 8004f3c:	e002      	b.n	8004f44 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004f3e:	4b05      	ldr	r3, [pc, #20]	@ (8004f54 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004f40:	613b      	str	r3, [r7, #16]
      break;
 8004f42:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004f44:	693b      	ldr	r3, [r7, #16]
}
 8004f46:	0018      	movs	r0, r3
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	b006      	add	sp, #24
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	46c0      	nop			@ (mov r8, r8)
 8004f50:	40021000 	.word	0x40021000
 8004f54:	007a1200 	.word	0x007a1200
 8004f58:	0800863c 	.word	0x0800863c
 8004f5c:	0800864c 	.word	0x0800864c

08004f60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f64:	4b02      	ldr	r3, [pc, #8]	@ (8004f70 <HAL_RCC_GetHCLKFreq+0x10>)
 8004f66:	681b      	ldr	r3, [r3, #0]
}
 8004f68:	0018      	movs	r0, r3
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	46c0      	nop			@ (mov r8, r8)
 8004f70:	20000000 	.word	0x20000000

08004f74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004f78:	f7ff fff2 	bl	8004f60 <HAL_RCC_GetHCLKFreq>
 8004f7c:	0001      	movs	r1, r0
 8004f7e:	4b06      	ldr	r3, [pc, #24]	@ (8004f98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	0a1b      	lsrs	r3, r3, #8
 8004f84:	2207      	movs	r2, #7
 8004f86:	4013      	ands	r3, r2
 8004f88:	4a04      	ldr	r2, [pc, #16]	@ (8004f9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f8a:	5cd3      	ldrb	r3, [r2, r3]
 8004f8c:	40d9      	lsrs	r1, r3
 8004f8e:	000b      	movs	r3, r1
}    
 8004f90:	0018      	movs	r0, r3
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	46c0      	nop			@ (mov r8, r8)
 8004f98:	40021000 	.word	0x40021000
 8004f9c:	08008634 	.word	0x08008634

08004fa0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004fac:	2300      	movs	r3, #0
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	2380      	movs	r3, #128	@ 0x80
 8004fb6:	025b      	lsls	r3, r3, #9
 8004fb8:	4013      	ands	r3, r2
 8004fba:	d100      	bne.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004fbc:	e08e      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004fbe:	2017      	movs	r0, #23
 8004fc0:	183b      	adds	r3, r7, r0
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fc6:	4b57      	ldr	r3, [pc, #348]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004fc8:	69da      	ldr	r2, [r3, #28]
 8004fca:	2380      	movs	r3, #128	@ 0x80
 8004fcc:	055b      	lsls	r3, r3, #21
 8004fce:	4013      	ands	r3, r2
 8004fd0:	d110      	bne.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fd2:	4b54      	ldr	r3, [pc, #336]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004fd4:	69da      	ldr	r2, [r3, #28]
 8004fd6:	4b53      	ldr	r3, [pc, #332]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004fd8:	2180      	movs	r1, #128	@ 0x80
 8004fda:	0549      	lsls	r1, r1, #21
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	61da      	str	r2, [r3, #28]
 8004fe0:	4b50      	ldr	r3, [pc, #320]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004fe2:	69da      	ldr	r2, [r3, #28]
 8004fe4:	2380      	movs	r3, #128	@ 0x80
 8004fe6:	055b      	lsls	r3, r3, #21
 8004fe8:	4013      	ands	r3, r2
 8004fea:	60bb      	str	r3, [r7, #8]
 8004fec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fee:	183b      	adds	r3, r7, r0
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ff4:	4b4c      	ldr	r3, [pc, #304]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	2380      	movs	r3, #128	@ 0x80
 8004ffa:	005b      	lsls	r3, r3, #1
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	d11a      	bne.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005000:	4b49      	ldr	r3, [pc, #292]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	4b48      	ldr	r3, [pc, #288]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005006:	2180      	movs	r1, #128	@ 0x80
 8005008:	0049      	lsls	r1, r1, #1
 800500a:	430a      	orrs	r2, r1
 800500c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800500e:	f7fe fa39 	bl	8003484 <HAL_GetTick>
 8005012:	0003      	movs	r3, r0
 8005014:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005016:	e008      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005018:	f7fe fa34 	bl	8003484 <HAL_GetTick>
 800501c:	0002      	movs	r2, r0
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b64      	cmp	r3, #100	@ 0x64
 8005024:	d901      	bls.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e077      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800502a:	4b3f      	ldr	r3, [pc, #252]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	2380      	movs	r3, #128	@ 0x80
 8005030:	005b      	lsls	r3, r3, #1
 8005032:	4013      	ands	r3, r2
 8005034:	d0f0      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005036:	4b3b      	ldr	r3, [pc, #236]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005038:	6a1a      	ldr	r2, [r3, #32]
 800503a:	23c0      	movs	r3, #192	@ 0xc0
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4013      	ands	r3, r2
 8005040:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d034      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	23c0      	movs	r3, #192	@ 0xc0
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	4013      	ands	r3, r2
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	429a      	cmp	r2, r3
 8005056:	d02c      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005058:	4b32      	ldr	r3, [pc, #200]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800505a:	6a1b      	ldr	r3, [r3, #32]
 800505c:	4a33      	ldr	r2, [pc, #204]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800505e:	4013      	ands	r3, r2
 8005060:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005062:	4b30      	ldr	r3, [pc, #192]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005064:	6a1a      	ldr	r2, [r3, #32]
 8005066:	4b2f      	ldr	r3, [pc, #188]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005068:	2180      	movs	r1, #128	@ 0x80
 800506a:	0249      	lsls	r1, r1, #9
 800506c:	430a      	orrs	r2, r1
 800506e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005070:	4b2c      	ldr	r3, [pc, #176]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005072:	6a1a      	ldr	r2, [r3, #32]
 8005074:	4b2b      	ldr	r3, [pc, #172]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005076:	492e      	ldr	r1, [pc, #184]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8005078:	400a      	ands	r2, r1
 800507a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800507c:	4b29      	ldr	r3, [pc, #164]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2201      	movs	r2, #1
 8005086:	4013      	ands	r3, r2
 8005088:	d013      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800508a:	f7fe f9fb 	bl	8003484 <HAL_GetTick>
 800508e:	0003      	movs	r3, r0
 8005090:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005092:	e009      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005094:	f7fe f9f6 	bl	8003484 <HAL_GetTick>
 8005098:	0002      	movs	r2, r0
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	4a25      	ldr	r2, [pc, #148]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d901      	bls.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e038      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050a8:	4b1e      	ldr	r3, [pc, #120]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80050aa:	6a1b      	ldr	r3, [r3, #32]
 80050ac:	2202      	movs	r2, #2
 80050ae:	4013      	ands	r3, r2
 80050b0:	d0f0      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050b2:	4b1c      	ldr	r3, [pc, #112]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	4a1d      	ldr	r2, [pc, #116]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80050b8:	4013      	ands	r3, r2
 80050ba:	0019      	movs	r1, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685a      	ldr	r2, [r3, #4]
 80050c0:	4b18      	ldr	r3, [pc, #96]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80050c2:	430a      	orrs	r2, r1
 80050c4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80050c6:	2317      	movs	r3, #23
 80050c8:	18fb      	adds	r3, r7, r3
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d105      	bne.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050d0:	4b14      	ldr	r3, [pc, #80]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80050d2:	69da      	ldr	r2, [r3, #28]
 80050d4:	4b13      	ldr	r3, [pc, #76]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80050d6:	4918      	ldr	r1, [pc, #96]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80050d8:	400a      	ands	r2, r1
 80050da:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2201      	movs	r2, #1
 80050e2:	4013      	ands	r3, r2
 80050e4:	d009      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050e6:	4b0f      	ldr	r3, [pc, #60]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80050e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ea:	2203      	movs	r2, #3
 80050ec:	4393      	bics	r3, r2
 80050ee:	0019      	movs	r1, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689a      	ldr	r2, [r3, #8]
 80050f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80050f6:	430a      	orrs	r2, r1
 80050f8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2220      	movs	r2, #32
 8005100:	4013      	ands	r3, r2
 8005102:	d009      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005104:	4b07      	ldr	r3, [pc, #28]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005108:	2210      	movs	r2, #16
 800510a:	4393      	bics	r3, r2
 800510c:	0019      	movs	r1, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68da      	ldr	r2, [r3, #12]
 8005112:	4b04      	ldr	r3, [pc, #16]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005114:	430a      	orrs	r2, r1
 8005116:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	0018      	movs	r0, r3
 800511c:	46bd      	mov	sp, r7
 800511e:	b006      	add	sp, #24
 8005120:	bd80      	pop	{r7, pc}
 8005122:	46c0      	nop			@ (mov r8, r8)
 8005124:	40021000 	.word	0x40021000
 8005128:	40007000 	.word	0x40007000
 800512c:	fffffcff 	.word	0xfffffcff
 8005130:	fffeffff 	.word	0xfffeffff
 8005134:	00001388 	.word	0x00001388
 8005138:	efffffff 	.word	0xefffffff

0800513c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e044      	b.n	80051d8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005152:	2b00      	cmp	r3, #0
 8005154:	d107      	bne.n	8005166 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2278      	movs	r2, #120	@ 0x78
 800515a:	2100      	movs	r1, #0
 800515c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	0018      	movs	r0, r3
 8005162:	f7fe f883 	bl	800326c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2224      	movs	r2, #36	@ 0x24
 800516a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2101      	movs	r1, #1
 8005178:	438a      	bics	r2, r1
 800517a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005180:	2b00      	cmp	r3, #0
 8005182:	d003      	beq.n	800518c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	0018      	movs	r0, r3
 8005188:	f000 fa0c 	bl	80055a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	0018      	movs	r0, r3
 8005190:	f000 f8c8 	bl	8005324 <UART_SetConfig>
 8005194:	0003      	movs	r3, r0
 8005196:	2b01      	cmp	r3, #1
 8005198:	d101      	bne.n	800519e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e01c      	b.n	80051d8 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	685a      	ldr	r2, [r3, #4]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	490d      	ldr	r1, [pc, #52]	@ (80051e0 <HAL_UART_Init+0xa4>)
 80051aa:	400a      	ands	r2, r1
 80051ac:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	689a      	ldr	r2, [r3, #8]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2108      	movs	r1, #8
 80051ba:	438a      	bics	r2, r1
 80051bc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2101      	movs	r1, #1
 80051ca:	430a      	orrs	r2, r1
 80051cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	0018      	movs	r0, r3
 80051d2:	f000 fa9b 	bl	800570c <UART_CheckIdleState>
 80051d6:	0003      	movs	r3, r0
}
 80051d8:	0018      	movs	r0, r3
 80051da:	46bd      	mov	sp, r7
 80051dc:	b002      	add	sp, #8
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	fffff7ff 	.word	0xfffff7ff

080051e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b08a      	sub	sp, #40	@ 0x28
 80051e8:	af02      	add	r7, sp, #8
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	603b      	str	r3, [r7, #0]
 80051f0:	1dbb      	adds	r3, r7, #6
 80051f2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051f8:	2b20      	cmp	r3, #32
 80051fa:	d000      	beq.n	80051fe <HAL_UART_Transmit+0x1a>
 80051fc:	e08c      	b.n	8005318 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d003      	beq.n	800520c <HAL_UART_Transmit+0x28>
 8005204:	1dbb      	adds	r3, r7, #6
 8005206:	881b      	ldrh	r3, [r3, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d101      	bne.n	8005210 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e084      	b.n	800531a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	689a      	ldr	r2, [r3, #8]
 8005214:	2380      	movs	r3, #128	@ 0x80
 8005216:	015b      	lsls	r3, r3, #5
 8005218:	429a      	cmp	r2, r3
 800521a:	d109      	bne.n	8005230 <HAL_UART_Transmit+0x4c>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d105      	bne.n	8005230 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	2201      	movs	r2, #1
 8005228:	4013      	ands	r3, r2
 800522a:	d001      	beq.n	8005230 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e074      	b.n	800531a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2284      	movs	r2, #132	@ 0x84
 8005234:	2100      	movs	r1, #0
 8005236:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2221      	movs	r2, #33	@ 0x21
 800523c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800523e:	f7fe f921 	bl	8003484 <HAL_GetTick>
 8005242:	0003      	movs	r3, r0
 8005244:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	1dba      	adds	r2, r7, #6
 800524a:	2150      	movs	r1, #80	@ 0x50
 800524c:	8812      	ldrh	r2, [r2, #0]
 800524e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	1dba      	adds	r2, r7, #6
 8005254:	2152      	movs	r1, #82	@ 0x52
 8005256:	8812      	ldrh	r2, [r2, #0]
 8005258:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	689a      	ldr	r2, [r3, #8]
 800525e:	2380      	movs	r3, #128	@ 0x80
 8005260:	015b      	lsls	r3, r3, #5
 8005262:	429a      	cmp	r2, r3
 8005264:	d108      	bne.n	8005278 <HAL_UART_Transmit+0x94>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d104      	bne.n	8005278 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800526e:	2300      	movs	r3, #0
 8005270:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	61bb      	str	r3, [r7, #24]
 8005276:	e003      	b.n	8005280 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800527c:	2300      	movs	r3, #0
 800527e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005280:	e02f      	b.n	80052e2 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	9300      	str	r3, [sp, #0]
 800528a:	0013      	movs	r3, r2
 800528c:	2200      	movs	r2, #0
 800528e:	2180      	movs	r1, #128	@ 0x80
 8005290:	f000 fae4 	bl	800585c <UART_WaitOnFlagUntilTimeout>
 8005294:	1e03      	subs	r3, r0, #0
 8005296:	d004      	beq.n	80052a2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2220      	movs	r2, #32
 800529c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e03b      	b.n	800531a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10b      	bne.n	80052c0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	881a      	ldrh	r2, [r3, #0]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	05d2      	lsls	r2, r2, #23
 80052b2:	0dd2      	lsrs	r2, r2, #23
 80052b4:	b292      	uxth	r2, r2
 80052b6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	3302      	adds	r3, #2
 80052bc:	61bb      	str	r3, [r7, #24]
 80052be:	e007      	b.n	80052d0 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	781a      	ldrb	r2, [r3, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	3301      	adds	r3, #1
 80052ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2252      	movs	r2, #82	@ 0x52
 80052d4:	5a9b      	ldrh	r3, [r3, r2]
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	3b01      	subs	r3, #1
 80052da:	b299      	uxth	r1, r3
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2252      	movs	r2, #82	@ 0x52
 80052e0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2252      	movs	r2, #82	@ 0x52
 80052e6:	5a9b      	ldrh	r3, [r3, r2]
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1c9      	bne.n	8005282 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	68f8      	ldr	r0, [r7, #12]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	0013      	movs	r3, r2
 80052f8:	2200      	movs	r2, #0
 80052fa:	2140      	movs	r1, #64	@ 0x40
 80052fc:	f000 faae 	bl	800585c <UART_WaitOnFlagUntilTimeout>
 8005300:	1e03      	subs	r3, r0, #0
 8005302:	d004      	beq.n	800530e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2220      	movs	r2, #32
 8005308:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e005      	b.n	800531a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2220      	movs	r2, #32
 8005312:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005314:	2300      	movs	r3, #0
 8005316:	e000      	b.n	800531a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8005318:	2302      	movs	r3, #2
  }
}
 800531a:	0018      	movs	r0, r3
 800531c:	46bd      	mov	sp, r7
 800531e:	b008      	add	sp, #32
 8005320:	bd80      	pop	{r7, pc}
	...

08005324 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b088      	sub	sp, #32
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800532c:	231e      	movs	r3, #30
 800532e:	18fb      	adds	r3, r7, r3
 8005330:	2200      	movs	r2, #0
 8005332:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	689a      	ldr	r2, [r3, #8]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	431a      	orrs	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	431a      	orrs	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	69db      	ldr	r3, [r3, #28]
 8005348:	4313      	orrs	r3, r2
 800534a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a8d      	ldr	r2, [pc, #564]	@ (8005588 <UART_SetConfig+0x264>)
 8005354:	4013      	ands	r3, r2
 8005356:	0019      	movs	r1, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	430a      	orrs	r2, r1
 8005360:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	4a88      	ldr	r2, [pc, #544]	@ (800558c <UART_SetConfig+0x268>)
 800536a:	4013      	ands	r3, r2
 800536c:	0019      	movs	r1, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	68da      	ldr	r2, [r3, #12]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	430a      	orrs	r2, r1
 8005378:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a1b      	ldr	r3, [r3, #32]
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	4313      	orrs	r3, r2
 8005388:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	4a7f      	ldr	r2, [pc, #508]	@ (8005590 <UART_SetConfig+0x26c>)
 8005392:	4013      	ands	r3, r2
 8005394:	0019      	movs	r1, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	430a      	orrs	r2, r1
 800539e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a7b      	ldr	r2, [pc, #492]	@ (8005594 <UART_SetConfig+0x270>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d127      	bne.n	80053fa <UART_SetConfig+0xd6>
 80053aa:	4b7b      	ldr	r3, [pc, #492]	@ (8005598 <UART_SetConfig+0x274>)
 80053ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ae:	2203      	movs	r2, #3
 80053b0:	4013      	ands	r3, r2
 80053b2:	2b03      	cmp	r3, #3
 80053b4:	d00d      	beq.n	80053d2 <UART_SetConfig+0xae>
 80053b6:	d81b      	bhi.n	80053f0 <UART_SetConfig+0xcc>
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d014      	beq.n	80053e6 <UART_SetConfig+0xc2>
 80053bc:	d818      	bhi.n	80053f0 <UART_SetConfig+0xcc>
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d002      	beq.n	80053c8 <UART_SetConfig+0xa4>
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d00a      	beq.n	80053dc <UART_SetConfig+0xb8>
 80053c6:	e013      	b.n	80053f0 <UART_SetConfig+0xcc>
 80053c8:	231f      	movs	r3, #31
 80053ca:	18fb      	adds	r3, r7, r3
 80053cc:	2200      	movs	r2, #0
 80053ce:	701a      	strb	r2, [r3, #0]
 80053d0:	e021      	b.n	8005416 <UART_SetConfig+0xf2>
 80053d2:	231f      	movs	r3, #31
 80053d4:	18fb      	adds	r3, r7, r3
 80053d6:	2202      	movs	r2, #2
 80053d8:	701a      	strb	r2, [r3, #0]
 80053da:	e01c      	b.n	8005416 <UART_SetConfig+0xf2>
 80053dc:	231f      	movs	r3, #31
 80053de:	18fb      	adds	r3, r7, r3
 80053e0:	2204      	movs	r2, #4
 80053e2:	701a      	strb	r2, [r3, #0]
 80053e4:	e017      	b.n	8005416 <UART_SetConfig+0xf2>
 80053e6:	231f      	movs	r3, #31
 80053e8:	18fb      	adds	r3, r7, r3
 80053ea:	2208      	movs	r2, #8
 80053ec:	701a      	strb	r2, [r3, #0]
 80053ee:	e012      	b.n	8005416 <UART_SetConfig+0xf2>
 80053f0:	231f      	movs	r3, #31
 80053f2:	18fb      	adds	r3, r7, r3
 80053f4:	2210      	movs	r2, #16
 80053f6:	701a      	strb	r2, [r3, #0]
 80053f8:	e00d      	b.n	8005416 <UART_SetConfig+0xf2>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a67      	ldr	r2, [pc, #412]	@ (800559c <UART_SetConfig+0x278>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d104      	bne.n	800540e <UART_SetConfig+0xea>
 8005404:	231f      	movs	r3, #31
 8005406:	18fb      	adds	r3, r7, r3
 8005408:	2200      	movs	r2, #0
 800540a:	701a      	strb	r2, [r3, #0]
 800540c:	e003      	b.n	8005416 <UART_SetConfig+0xf2>
 800540e:	231f      	movs	r3, #31
 8005410:	18fb      	adds	r3, r7, r3
 8005412:	2210      	movs	r2, #16
 8005414:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	69da      	ldr	r2, [r3, #28]
 800541a:	2380      	movs	r3, #128	@ 0x80
 800541c:	021b      	lsls	r3, r3, #8
 800541e:	429a      	cmp	r2, r3
 8005420:	d15c      	bne.n	80054dc <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8005422:	231f      	movs	r3, #31
 8005424:	18fb      	adds	r3, r7, r3
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	2b08      	cmp	r3, #8
 800542a:	d015      	beq.n	8005458 <UART_SetConfig+0x134>
 800542c:	dc18      	bgt.n	8005460 <UART_SetConfig+0x13c>
 800542e:	2b04      	cmp	r3, #4
 8005430:	d00d      	beq.n	800544e <UART_SetConfig+0x12a>
 8005432:	dc15      	bgt.n	8005460 <UART_SetConfig+0x13c>
 8005434:	2b00      	cmp	r3, #0
 8005436:	d002      	beq.n	800543e <UART_SetConfig+0x11a>
 8005438:	2b02      	cmp	r3, #2
 800543a:	d005      	beq.n	8005448 <UART_SetConfig+0x124>
 800543c:	e010      	b.n	8005460 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800543e:	f7ff fd99 	bl	8004f74 <HAL_RCC_GetPCLK1Freq>
 8005442:	0003      	movs	r3, r0
 8005444:	61bb      	str	r3, [r7, #24]
        break;
 8005446:	e012      	b.n	800546e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005448:	4b55      	ldr	r3, [pc, #340]	@ (80055a0 <UART_SetConfig+0x27c>)
 800544a:	61bb      	str	r3, [r7, #24]
        break;
 800544c:	e00f      	b.n	800546e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800544e:	f7ff fd31 	bl	8004eb4 <HAL_RCC_GetSysClockFreq>
 8005452:	0003      	movs	r3, r0
 8005454:	61bb      	str	r3, [r7, #24]
        break;
 8005456:	e00a      	b.n	800546e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005458:	2380      	movs	r3, #128	@ 0x80
 800545a:	021b      	lsls	r3, r3, #8
 800545c:	61bb      	str	r3, [r7, #24]
        break;
 800545e:	e006      	b.n	800546e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8005460:	2300      	movs	r3, #0
 8005462:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005464:	231e      	movs	r3, #30
 8005466:	18fb      	adds	r3, r7, r3
 8005468:	2201      	movs	r2, #1
 800546a:	701a      	strb	r2, [r3, #0]
        break;
 800546c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d100      	bne.n	8005476 <UART_SetConfig+0x152>
 8005474:	e07a      	b.n	800556c <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	005a      	lsls	r2, r3, #1
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	085b      	lsrs	r3, r3, #1
 8005480:	18d2      	adds	r2, r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	0019      	movs	r1, r3
 8005488:	0010      	movs	r0, r2
 800548a:	f7fa fe59 	bl	8000140 <__udivsi3>
 800548e:	0003      	movs	r3, r0
 8005490:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	2b0f      	cmp	r3, #15
 8005496:	d91c      	bls.n	80054d2 <UART_SetConfig+0x1ae>
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	2380      	movs	r3, #128	@ 0x80
 800549c:	025b      	lsls	r3, r3, #9
 800549e:	429a      	cmp	r2, r3
 80054a0:	d217      	bcs.n	80054d2 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	200e      	movs	r0, #14
 80054a8:	183b      	adds	r3, r7, r0
 80054aa:	210f      	movs	r1, #15
 80054ac:	438a      	bics	r2, r1
 80054ae:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	085b      	lsrs	r3, r3, #1
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	2207      	movs	r2, #7
 80054b8:	4013      	ands	r3, r2
 80054ba:	b299      	uxth	r1, r3
 80054bc:	183b      	adds	r3, r7, r0
 80054be:	183a      	adds	r2, r7, r0
 80054c0:	8812      	ldrh	r2, [r2, #0]
 80054c2:	430a      	orrs	r2, r1
 80054c4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	183a      	adds	r2, r7, r0
 80054cc:	8812      	ldrh	r2, [r2, #0]
 80054ce:	60da      	str	r2, [r3, #12]
 80054d0:	e04c      	b.n	800556c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80054d2:	231e      	movs	r3, #30
 80054d4:	18fb      	adds	r3, r7, r3
 80054d6:	2201      	movs	r2, #1
 80054d8:	701a      	strb	r2, [r3, #0]
 80054da:	e047      	b.n	800556c <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054dc:	231f      	movs	r3, #31
 80054de:	18fb      	adds	r3, r7, r3
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	2b08      	cmp	r3, #8
 80054e4:	d015      	beq.n	8005512 <UART_SetConfig+0x1ee>
 80054e6:	dc18      	bgt.n	800551a <UART_SetConfig+0x1f6>
 80054e8:	2b04      	cmp	r3, #4
 80054ea:	d00d      	beq.n	8005508 <UART_SetConfig+0x1e4>
 80054ec:	dc15      	bgt.n	800551a <UART_SetConfig+0x1f6>
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d002      	beq.n	80054f8 <UART_SetConfig+0x1d4>
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d005      	beq.n	8005502 <UART_SetConfig+0x1de>
 80054f6:	e010      	b.n	800551a <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054f8:	f7ff fd3c 	bl	8004f74 <HAL_RCC_GetPCLK1Freq>
 80054fc:	0003      	movs	r3, r0
 80054fe:	61bb      	str	r3, [r7, #24]
        break;
 8005500:	e012      	b.n	8005528 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005502:	4b27      	ldr	r3, [pc, #156]	@ (80055a0 <UART_SetConfig+0x27c>)
 8005504:	61bb      	str	r3, [r7, #24]
        break;
 8005506:	e00f      	b.n	8005528 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005508:	f7ff fcd4 	bl	8004eb4 <HAL_RCC_GetSysClockFreq>
 800550c:	0003      	movs	r3, r0
 800550e:	61bb      	str	r3, [r7, #24]
        break;
 8005510:	e00a      	b.n	8005528 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005512:	2380      	movs	r3, #128	@ 0x80
 8005514:	021b      	lsls	r3, r3, #8
 8005516:	61bb      	str	r3, [r7, #24]
        break;
 8005518:	e006      	b.n	8005528 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800551a:	2300      	movs	r3, #0
 800551c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800551e:	231e      	movs	r3, #30
 8005520:	18fb      	adds	r3, r7, r3
 8005522:	2201      	movs	r2, #1
 8005524:	701a      	strb	r2, [r3, #0]
        break;
 8005526:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d01e      	beq.n	800556c <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	085a      	lsrs	r2, r3, #1
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	18d2      	adds	r2, r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	0019      	movs	r1, r3
 800553e:	0010      	movs	r0, r2
 8005540:	f7fa fdfe 	bl	8000140 <__udivsi3>
 8005544:	0003      	movs	r3, r0
 8005546:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	2b0f      	cmp	r3, #15
 800554c:	d90a      	bls.n	8005564 <UART_SetConfig+0x240>
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	2380      	movs	r3, #128	@ 0x80
 8005552:	025b      	lsls	r3, r3, #9
 8005554:	429a      	cmp	r2, r3
 8005556:	d205      	bcs.n	8005564 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	b29a      	uxth	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	60da      	str	r2, [r3, #12]
 8005562:	e003      	b.n	800556c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8005564:	231e      	movs	r3, #30
 8005566:	18fb      	adds	r3, r7, r3
 8005568:	2201      	movs	r2, #1
 800556a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005578:	231e      	movs	r3, #30
 800557a:	18fb      	adds	r3, r7, r3
 800557c:	781b      	ldrb	r3, [r3, #0]
}
 800557e:	0018      	movs	r0, r3
 8005580:	46bd      	mov	sp, r7
 8005582:	b008      	add	sp, #32
 8005584:	bd80      	pop	{r7, pc}
 8005586:	46c0      	nop			@ (mov r8, r8)
 8005588:	ffff69f3 	.word	0xffff69f3
 800558c:	ffffcfff 	.word	0xffffcfff
 8005590:	fffff4ff 	.word	0xfffff4ff
 8005594:	40013800 	.word	0x40013800
 8005598:	40021000 	.word	0x40021000
 800559c:	40004400 	.word	0x40004400
 80055a0:	007a1200 	.word	0x007a1200

080055a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b0:	2208      	movs	r2, #8
 80055b2:	4013      	ands	r3, r2
 80055b4:	d00b      	beq.n	80055ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	4a4a      	ldr	r2, [pc, #296]	@ (80056e8 <UART_AdvFeatureConfig+0x144>)
 80055be:	4013      	ands	r3, r2
 80055c0:	0019      	movs	r1, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	430a      	orrs	r2, r1
 80055cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d2:	2201      	movs	r2, #1
 80055d4:	4013      	ands	r3, r2
 80055d6:	d00b      	beq.n	80055f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	4a43      	ldr	r2, [pc, #268]	@ (80056ec <UART_AdvFeatureConfig+0x148>)
 80055e0:	4013      	ands	r3, r2
 80055e2:	0019      	movs	r1, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	430a      	orrs	r2, r1
 80055ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f4:	2202      	movs	r2, #2
 80055f6:	4013      	ands	r3, r2
 80055f8:	d00b      	beq.n	8005612 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	4a3b      	ldr	r2, [pc, #236]	@ (80056f0 <UART_AdvFeatureConfig+0x14c>)
 8005602:	4013      	ands	r3, r2
 8005604:	0019      	movs	r1, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	430a      	orrs	r2, r1
 8005610:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005616:	2204      	movs	r2, #4
 8005618:	4013      	ands	r3, r2
 800561a:	d00b      	beq.n	8005634 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	4a34      	ldr	r2, [pc, #208]	@ (80056f4 <UART_AdvFeatureConfig+0x150>)
 8005624:	4013      	ands	r3, r2
 8005626:	0019      	movs	r1, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	430a      	orrs	r2, r1
 8005632:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005638:	2210      	movs	r2, #16
 800563a:	4013      	ands	r3, r2
 800563c:	d00b      	beq.n	8005656 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	4a2c      	ldr	r2, [pc, #176]	@ (80056f8 <UART_AdvFeatureConfig+0x154>)
 8005646:	4013      	ands	r3, r2
 8005648:	0019      	movs	r1, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	430a      	orrs	r2, r1
 8005654:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800565a:	2220      	movs	r2, #32
 800565c:	4013      	ands	r3, r2
 800565e:	d00b      	beq.n	8005678 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	4a25      	ldr	r2, [pc, #148]	@ (80056fc <UART_AdvFeatureConfig+0x158>)
 8005668:	4013      	ands	r3, r2
 800566a:	0019      	movs	r1, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	430a      	orrs	r2, r1
 8005676:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800567c:	2240      	movs	r2, #64	@ 0x40
 800567e:	4013      	ands	r3, r2
 8005680:	d01d      	beq.n	80056be <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	4a1d      	ldr	r2, [pc, #116]	@ (8005700 <UART_AdvFeatureConfig+0x15c>)
 800568a:	4013      	ands	r3, r2
 800568c:	0019      	movs	r1, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	430a      	orrs	r2, r1
 8005698:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800569e:	2380      	movs	r3, #128	@ 0x80
 80056a0:	035b      	lsls	r3, r3, #13
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d10b      	bne.n	80056be <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	4a15      	ldr	r2, [pc, #84]	@ (8005704 <UART_AdvFeatureConfig+0x160>)
 80056ae:	4013      	ands	r3, r2
 80056b0:	0019      	movs	r1, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c2:	2280      	movs	r2, #128	@ 0x80
 80056c4:	4013      	ands	r3, r2
 80056c6:	d00b      	beq.n	80056e0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	4a0e      	ldr	r2, [pc, #56]	@ (8005708 <UART_AdvFeatureConfig+0x164>)
 80056d0:	4013      	ands	r3, r2
 80056d2:	0019      	movs	r1, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	430a      	orrs	r2, r1
 80056de:	605a      	str	r2, [r3, #4]
  }
}
 80056e0:	46c0      	nop			@ (mov r8, r8)
 80056e2:	46bd      	mov	sp, r7
 80056e4:	b002      	add	sp, #8
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	ffff7fff 	.word	0xffff7fff
 80056ec:	fffdffff 	.word	0xfffdffff
 80056f0:	fffeffff 	.word	0xfffeffff
 80056f4:	fffbffff 	.word	0xfffbffff
 80056f8:	ffffefff 	.word	0xffffefff
 80056fc:	ffffdfff 	.word	0xffffdfff
 8005700:	ffefffff 	.word	0xffefffff
 8005704:	ff9fffff 	.word	0xff9fffff
 8005708:	fff7ffff 	.word	0xfff7ffff

0800570c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b092      	sub	sp, #72	@ 0x48
 8005710:	af02      	add	r7, sp, #8
 8005712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2284      	movs	r2, #132	@ 0x84
 8005718:	2100      	movs	r1, #0
 800571a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800571c:	f7fd feb2 	bl	8003484 <HAL_GetTick>
 8005720:	0003      	movs	r3, r0
 8005722:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2208      	movs	r2, #8
 800572c:	4013      	ands	r3, r2
 800572e:	2b08      	cmp	r3, #8
 8005730:	d12c      	bne.n	800578c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005732:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005734:	2280      	movs	r2, #128	@ 0x80
 8005736:	0391      	lsls	r1, r2, #14
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	4a46      	ldr	r2, [pc, #280]	@ (8005854 <UART_CheckIdleState+0x148>)
 800573c:	9200      	str	r2, [sp, #0]
 800573e:	2200      	movs	r2, #0
 8005740:	f000 f88c 	bl	800585c <UART_WaitOnFlagUntilTimeout>
 8005744:	1e03      	subs	r3, r0, #0
 8005746:	d021      	beq.n	800578c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005748:	f3ef 8310 	mrs	r3, PRIMASK
 800574c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800574e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005750:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005752:	2301      	movs	r3, #1
 8005754:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005758:	f383 8810 	msr	PRIMASK, r3
}
 800575c:	46c0      	nop			@ (mov r8, r8)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2180      	movs	r1, #128	@ 0x80
 800576a:	438a      	bics	r2, r1
 800576c:	601a      	str	r2, [r3, #0]
 800576e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005770:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005774:	f383 8810 	msr	PRIMASK, r3
}
 8005778:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2220      	movs	r2, #32
 800577e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2278      	movs	r2, #120	@ 0x78
 8005784:	2100      	movs	r1, #0
 8005786:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e05f      	b.n	800584c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2204      	movs	r2, #4
 8005794:	4013      	ands	r3, r2
 8005796:	2b04      	cmp	r3, #4
 8005798:	d146      	bne.n	8005828 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800579a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800579c:	2280      	movs	r2, #128	@ 0x80
 800579e:	03d1      	lsls	r1, r2, #15
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	4a2c      	ldr	r2, [pc, #176]	@ (8005854 <UART_CheckIdleState+0x148>)
 80057a4:	9200      	str	r2, [sp, #0]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f000 f858 	bl	800585c <UART_WaitOnFlagUntilTimeout>
 80057ac:	1e03      	subs	r3, r0, #0
 80057ae:	d03b      	beq.n	8005828 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057b0:	f3ef 8310 	mrs	r3, PRIMASK
 80057b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80057b6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80057ba:	2301      	movs	r3, #1
 80057bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	f383 8810 	msr	PRIMASK, r3
}
 80057c4:	46c0      	nop			@ (mov r8, r8)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4921      	ldr	r1, [pc, #132]	@ (8005858 <UART_CheckIdleState+0x14c>)
 80057d2:	400a      	ands	r2, r1
 80057d4:	601a      	str	r2, [r3, #0]
 80057d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	f383 8810 	msr	PRIMASK, r3
}
 80057e0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057e2:	f3ef 8310 	mrs	r3, PRIMASK
 80057e6:	61bb      	str	r3, [r7, #24]
  return(result);
 80057e8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80057ec:	2301      	movs	r3, #1
 80057ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	f383 8810 	msr	PRIMASK, r3
}
 80057f6:	46c0      	nop			@ (mov r8, r8)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	689a      	ldr	r2, [r3, #8]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2101      	movs	r1, #1
 8005804:	438a      	bics	r2, r1
 8005806:	609a      	str	r2, [r3, #8]
 8005808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800580a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800580c:	6a3b      	ldr	r3, [r7, #32]
 800580e:	f383 8810 	msr	PRIMASK, r3
}
 8005812:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2280      	movs	r2, #128	@ 0x80
 8005818:	2120      	movs	r1, #32
 800581a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2278      	movs	r2, #120	@ 0x78
 8005820:	2100      	movs	r1, #0
 8005822:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e011      	b.n	800584c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2220      	movs	r2, #32
 800582c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2280      	movs	r2, #128	@ 0x80
 8005832:	2120      	movs	r1, #32
 8005834:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2278      	movs	r2, #120	@ 0x78
 8005846:	2100      	movs	r1, #0
 8005848:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	0018      	movs	r0, r3
 800584e:	46bd      	mov	sp, r7
 8005850:	b010      	add	sp, #64	@ 0x40
 8005852:	bd80      	pop	{r7, pc}
 8005854:	01ffffff 	.word	0x01ffffff
 8005858:	fffffedf 	.word	0xfffffedf

0800585c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	603b      	str	r3, [r7, #0]
 8005868:	1dfb      	adds	r3, r7, #7
 800586a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800586c:	e051      	b.n	8005912 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	3301      	adds	r3, #1
 8005872:	d04e      	beq.n	8005912 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005874:	f7fd fe06 	bl	8003484 <HAL_GetTick>
 8005878:	0002      	movs	r2, r0
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	429a      	cmp	r2, r3
 8005882:	d302      	bcc.n	800588a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e051      	b.n	8005932 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2204      	movs	r2, #4
 8005896:	4013      	ands	r3, r2
 8005898:	d03b      	beq.n	8005912 <UART_WaitOnFlagUntilTimeout+0xb6>
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2b80      	cmp	r3, #128	@ 0x80
 800589e:	d038      	beq.n	8005912 <UART_WaitOnFlagUntilTimeout+0xb6>
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	2b40      	cmp	r3, #64	@ 0x40
 80058a4:	d035      	beq.n	8005912 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	69db      	ldr	r3, [r3, #28]
 80058ac:	2208      	movs	r2, #8
 80058ae:	4013      	ands	r3, r2
 80058b0:	2b08      	cmp	r3, #8
 80058b2:	d111      	bne.n	80058d8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2208      	movs	r2, #8
 80058ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	0018      	movs	r0, r3
 80058c0:	f000 f83c 	bl	800593c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2284      	movs	r2, #132	@ 0x84
 80058c8:	2108      	movs	r1, #8
 80058ca:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2278      	movs	r2, #120	@ 0x78
 80058d0:	2100      	movs	r1, #0
 80058d2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e02c      	b.n	8005932 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	69da      	ldr	r2, [r3, #28]
 80058de:	2380      	movs	r3, #128	@ 0x80
 80058e0:	011b      	lsls	r3, r3, #4
 80058e2:	401a      	ands	r2, r3
 80058e4:	2380      	movs	r3, #128	@ 0x80
 80058e6:	011b      	lsls	r3, r3, #4
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d112      	bne.n	8005912 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2280      	movs	r2, #128	@ 0x80
 80058f2:	0112      	lsls	r2, r2, #4
 80058f4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	0018      	movs	r0, r3
 80058fa:	f000 f81f 	bl	800593c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2284      	movs	r2, #132	@ 0x84
 8005902:	2120      	movs	r1, #32
 8005904:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2278      	movs	r2, #120	@ 0x78
 800590a:	2100      	movs	r1, #0
 800590c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e00f      	b.n	8005932 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	69db      	ldr	r3, [r3, #28]
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	4013      	ands	r3, r2
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	425a      	negs	r2, r3
 8005922:	4153      	adcs	r3, r2
 8005924:	b2db      	uxtb	r3, r3
 8005926:	001a      	movs	r2, r3
 8005928:	1dfb      	adds	r3, r7, #7
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	429a      	cmp	r2, r3
 800592e:	d09e      	beq.n	800586e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	0018      	movs	r0, r3
 8005934:	46bd      	mov	sp, r7
 8005936:	b004      	add	sp, #16
 8005938:	bd80      	pop	{r7, pc}
	...

0800593c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b08e      	sub	sp, #56	@ 0x38
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005944:	f3ef 8310 	mrs	r3, PRIMASK
 8005948:	617b      	str	r3, [r7, #20]
  return(result);
 800594a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800594c:	637b      	str	r3, [r7, #52]	@ 0x34
 800594e:	2301      	movs	r3, #1
 8005950:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	f383 8810 	msr	PRIMASK, r3
}
 8005958:	46c0      	nop			@ (mov r8, r8)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4926      	ldr	r1, [pc, #152]	@ (8005a00 <UART_EndRxTransfer+0xc4>)
 8005966:	400a      	ands	r2, r1
 8005968:	601a      	str	r2, [r3, #0]
 800596a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800596c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	f383 8810 	msr	PRIMASK, r3
}
 8005974:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005976:	f3ef 8310 	mrs	r3, PRIMASK
 800597a:	623b      	str	r3, [r7, #32]
  return(result);
 800597c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800597e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005980:	2301      	movs	r3, #1
 8005982:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005986:	f383 8810 	msr	PRIMASK, r3
}
 800598a:	46c0      	nop			@ (mov r8, r8)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	689a      	ldr	r2, [r3, #8]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2101      	movs	r1, #1
 8005998:	438a      	bics	r2, r1
 800599a:	609a      	str	r2, [r3, #8]
 800599c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800599e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a2:	f383 8810 	msr	PRIMASK, r3
}
 80059a6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d118      	bne.n	80059e2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059b0:	f3ef 8310 	mrs	r3, PRIMASK
 80059b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80059b6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059ba:	2301      	movs	r3, #1
 80059bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f383 8810 	msr	PRIMASK, r3
}
 80059c4:	46c0      	nop			@ (mov r8, r8)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2110      	movs	r1, #16
 80059d2:	438a      	bics	r2, r1
 80059d4:	601a      	str	r2, [r3, #0]
 80059d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	f383 8810 	msr	PRIMASK, r3
}
 80059e0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2280      	movs	r2, #128	@ 0x80
 80059e6:	2120      	movs	r1, #32
 80059e8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80059f6:	46c0      	nop			@ (mov r8, r8)
 80059f8:	46bd      	mov	sp, r7
 80059fa:	b00e      	add	sp, #56	@ 0x38
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	46c0      	nop			@ (mov r8, r8)
 8005a00:	fffffedf 	.word	0xfffffedf

08005a04 <__cvt>:
 8005a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a06:	001f      	movs	r7, r3
 8005a08:	2300      	movs	r3, #0
 8005a0a:	0016      	movs	r6, r2
 8005a0c:	b08b      	sub	sp, #44	@ 0x2c
 8005a0e:	429f      	cmp	r7, r3
 8005a10:	da04      	bge.n	8005a1c <__cvt+0x18>
 8005a12:	2180      	movs	r1, #128	@ 0x80
 8005a14:	0609      	lsls	r1, r1, #24
 8005a16:	187b      	adds	r3, r7, r1
 8005a18:	001f      	movs	r7, r3
 8005a1a:	232d      	movs	r3, #45	@ 0x2d
 8005a1c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005a1e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8005a20:	7013      	strb	r3, [r2, #0]
 8005a22:	2320      	movs	r3, #32
 8005a24:	2203      	movs	r2, #3
 8005a26:	439d      	bics	r5, r3
 8005a28:	2d46      	cmp	r5, #70	@ 0x46
 8005a2a:	d007      	beq.n	8005a3c <__cvt+0x38>
 8005a2c:	002b      	movs	r3, r5
 8005a2e:	3b45      	subs	r3, #69	@ 0x45
 8005a30:	4259      	negs	r1, r3
 8005a32:	414b      	adcs	r3, r1
 8005a34:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8005a36:	3a01      	subs	r2, #1
 8005a38:	18cb      	adds	r3, r1, r3
 8005a3a:	9310      	str	r3, [sp, #64]	@ 0x40
 8005a3c:	ab09      	add	r3, sp, #36	@ 0x24
 8005a3e:	9304      	str	r3, [sp, #16]
 8005a40:	ab08      	add	r3, sp, #32
 8005a42:	9303      	str	r3, [sp, #12]
 8005a44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005a46:	9200      	str	r2, [sp, #0]
 8005a48:	9302      	str	r3, [sp, #8]
 8005a4a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005a4c:	0032      	movs	r2, r6
 8005a4e:	9301      	str	r3, [sp, #4]
 8005a50:	003b      	movs	r3, r7
 8005a52:	f000 ff6f 	bl	8006934 <_dtoa_r>
 8005a56:	0004      	movs	r4, r0
 8005a58:	2d47      	cmp	r5, #71	@ 0x47
 8005a5a:	d11b      	bne.n	8005a94 <__cvt+0x90>
 8005a5c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005a5e:	07db      	lsls	r3, r3, #31
 8005a60:	d511      	bpl.n	8005a86 <__cvt+0x82>
 8005a62:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005a64:	18c3      	adds	r3, r0, r3
 8005a66:	9307      	str	r3, [sp, #28]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	0030      	movs	r0, r6
 8005a6e:	0039      	movs	r1, r7
 8005a70:	f7fa fcec 	bl	800044c <__aeabi_dcmpeq>
 8005a74:	2800      	cmp	r0, #0
 8005a76:	d001      	beq.n	8005a7c <__cvt+0x78>
 8005a78:	9b07      	ldr	r3, [sp, #28]
 8005a7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a7c:	2230      	movs	r2, #48	@ 0x30
 8005a7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a80:	9907      	ldr	r1, [sp, #28]
 8005a82:	428b      	cmp	r3, r1
 8005a84:	d320      	bcc.n	8005ac8 <__cvt+0xc4>
 8005a86:	0020      	movs	r0, r4
 8005a88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a8a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005a8c:	1b1b      	subs	r3, r3, r4
 8005a8e:	6013      	str	r3, [r2, #0]
 8005a90:	b00b      	add	sp, #44	@ 0x2c
 8005a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a94:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005a96:	18c3      	adds	r3, r0, r3
 8005a98:	9307      	str	r3, [sp, #28]
 8005a9a:	2d46      	cmp	r5, #70	@ 0x46
 8005a9c:	d1e4      	bne.n	8005a68 <__cvt+0x64>
 8005a9e:	7803      	ldrb	r3, [r0, #0]
 8005aa0:	2b30      	cmp	r3, #48	@ 0x30
 8005aa2:	d10c      	bne.n	8005abe <__cvt+0xba>
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	0030      	movs	r0, r6
 8005aaa:	0039      	movs	r1, r7
 8005aac:	f7fa fcce 	bl	800044c <__aeabi_dcmpeq>
 8005ab0:	2800      	cmp	r0, #0
 8005ab2:	d104      	bne.n	8005abe <__cvt+0xba>
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8005ab8:	1a9b      	subs	r3, r3, r2
 8005aba:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005abc:	6013      	str	r3, [r2, #0]
 8005abe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005ac0:	9a07      	ldr	r2, [sp, #28]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	18d3      	adds	r3, r2, r3
 8005ac6:	e7ce      	b.n	8005a66 <__cvt+0x62>
 8005ac8:	1c59      	adds	r1, r3, #1
 8005aca:	9109      	str	r1, [sp, #36]	@ 0x24
 8005acc:	701a      	strb	r2, [r3, #0]
 8005ace:	e7d6      	b.n	8005a7e <__cvt+0x7a>

08005ad0 <__exponent>:
 8005ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ad2:	232b      	movs	r3, #43	@ 0x2b
 8005ad4:	b085      	sub	sp, #20
 8005ad6:	0005      	movs	r5, r0
 8005ad8:	1e0c      	subs	r4, r1, #0
 8005ada:	7002      	strb	r2, [r0, #0]
 8005adc:	da01      	bge.n	8005ae2 <__exponent+0x12>
 8005ade:	424c      	negs	r4, r1
 8005ae0:	3302      	adds	r3, #2
 8005ae2:	706b      	strb	r3, [r5, #1]
 8005ae4:	2c09      	cmp	r4, #9
 8005ae6:	dd2c      	ble.n	8005b42 <__exponent+0x72>
 8005ae8:	ab02      	add	r3, sp, #8
 8005aea:	1dde      	adds	r6, r3, #7
 8005aec:	0020      	movs	r0, r4
 8005aee:	210a      	movs	r1, #10
 8005af0:	f7fa fc96 	bl	8000420 <__aeabi_idivmod>
 8005af4:	0037      	movs	r7, r6
 8005af6:	3130      	adds	r1, #48	@ 0x30
 8005af8:	3e01      	subs	r6, #1
 8005afa:	0020      	movs	r0, r4
 8005afc:	7031      	strb	r1, [r6, #0]
 8005afe:	210a      	movs	r1, #10
 8005b00:	9401      	str	r4, [sp, #4]
 8005b02:	f7fa fba7 	bl	8000254 <__divsi3>
 8005b06:	9b01      	ldr	r3, [sp, #4]
 8005b08:	0004      	movs	r4, r0
 8005b0a:	2b63      	cmp	r3, #99	@ 0x63
 8005b0c:	dcee      	bgt.n	8005aec <__exponent+0x1c>
 8005b0e:	1eba      	subs	r2, r7, #2
 8005b10:	1ca8      	adds	r0, r5, #2
 8005b12:	0001      	movs	r1, r0
 8005b14:	0013      	movs	r3, r2
 8005b16:	3430      	adds	r4, #48	@ 0x30
 8005b18:	7014      	strb	r4, [r2, #0]
 8005b1a:	ac02      	add	r4, sp, #8
 8005b1c:	3407      	adds	r4, #7
 8005b1e:	429c      	cmp	r4, r3
 8005b20:	d80a      	bhi.n	8005b38 <__exponent+0x68>
 8005b22:	2300      	movs	r3, #0
 8005b24:	4294      	cmp	r4, r2
 8005b26:	d303      	bcc.n	8005b30 <__exponent+0x60>
 8005b28:	3309      	adds	r3, #9
 8005b2a:	aa02      	add	r2, sp, #8
 8005b2c:	189b      	adds	r3, r3, r2
 8005b2e:	1bdb      	subs	r3, r3, r7
 8005b30:	18c0      	adds	r0, r0, r3
 8005b32:	1b40      	subs	r0, r0, r5
 8005b34:	b005      	add	sp, #20
 8005b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b38:	781c      	ldrb	r4, [r3, #0]
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	700c      	strb	r4, [r1, #0]
 8005b3e:	3101      	adds	r1, #1
 8005b40:	e7eb      	b.n	8005b1a <__exponent+0x4a>
 8005b42:	2330      	movs	r3, #48	@ 0x30
 8005b44:	18e4      	adds	r4, r4, r3
 8005b46:	70ab      	strb	r3, [r5, #2]
 8005b48:	1d28      	adds	r0, r5, #4
 8005b4a:	70ec      	strb	r4, [r5, #3]
 8005b4c:	e7f1      	b.n	8005b32 <__exponent+0x62>
	...

08005b50 <_printf_float>:
 8005b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b52:	b097      	sub	sp, #92	@ 0x5c
 8005b54:	000d      	movs	r5, r1
 8005b56:	920a      	str	r2, [sp, #40]	@ 0x28
 8005b58:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8005b5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b5c:	9009      	str	r0, [sp, #36]	@ 0x24
 8005b5e:	f000 fdd9 	bl	8006714 <_localeconv_r>
 8005b62:	6803      	ldr	r3, [r0, #0]
 8005b64:	0018      	movs	r0, r3
 8005b66:	930d      	str	r3, [sp, #52]	@ 0x34
 8005b68:	f7fa face 	bl	8000108 <strlen>
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005b70:	9314      	str	r3, [sp, #80]	@ 0x50
 8005b72:	7e2b      	ldrb	r3, [r5, #24]
 8005b74:	2207      	movs	r2, #7
 8005b76:	930c      	str	r3, [sp, #48]	@ 0x30
 8005b78:	682b      	ldr	r3, [r5, #0]
 8005b7a:	930e      	str	r3, [sp, #56]	@ 0x38
 8005b7c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005b7e:	6823      	ldr	r3, [r4, #0]
 8005b80:	05c9      	lsls	r1, r1, #23
 8005b82:	d545      	bpl.n	8005c10 <_printf_float+0xc0>
 8005b84:	189b      	adds	r3, r3, r2
 8005b86:	4393      	bics	r3, r2
 8005b88:	001a      	movs	r2, r3
 8005b8a:	3208      	adds	r2, #8
 8005b8c:	6022      	str	r2, [r4, #0]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	681e      	ldr	r6, [r3, #0]
 8005b92:	685f      	ldr	r7, [r3, #4]
 8005b94:	007b      	lsls	r3, r7, #1
 8005b96:	085b      	lsrs	r3, r3, #1
 8005b98:	9311      	str	r3, [sp, #68]	@ 0x44
 8005b9a:	9610      	str	r6, [sp, #64]	@ 0x40
 8005b9c:	64ae      	str	r6, [r5, #72]	@ 0x48
 8005b9e:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8005ba0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8005ba2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8005ba4:	4ba7      	ldr	r3, [pc, #668]	@ (8005e44 <_printf_float+0x2f4>)
 8005ba6:	4252      	negs	r2, r2
 8005ba8:	f7fc fe2e 	bl	8002808 <__aeabi_dcmpun>
 8005bac:	2800      	cmp	r0, #0
 8005bae:	d131      	bne.n	8005c14 <_printf_float+0xc4>
 8005bb0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8005bb2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	4ba3      	ldr	r3, [pc, #652]	@ (8005e44 <_printf_float+0x2f4>)
 8005bb8:	4252      	negs	r2, r2
 8005bba:	f7fa fc57 	bl	800046c <__aeabi_dcmple>
 8005bbe:	2800      	cmp	r0, #0
 8005bc0:	d128      	bne.n	8005c14 <_printf_float+0xc4>
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	0030      	movs	r0, r6
 8005bc8:	0039      	movs	r1, r7
 8005bca:	f7fa fc45 	bl	8000458 <__aeabi_dcmplt>
 8005bce:	2800      	cmp	r0, #0
 8005bd0:	d003      	beq.n	8005bda <_printf_float+0x8a>
 8005bd2:	002b      	movs	r3, r5
 8005bd4:	222d      	movs	r2, #45	@ 0x2d
 8005bd6:	3343      	adds	r3, #67	@ 0x43
 8005bd8:	701a      	strb	r2, [r3, #0]
 8005bda:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005bdc:	4f9a      	ldr	r7, [pc, #616]	@ (8005e48 <_printf_float+0x2f8>)
 8005bde:	2b47      	cmp	r3, #71	@ 0x47
 8005be0:	d800      	bhi.n	8005be4 <_printf_float+0x94>
 8005be2:	4f9a      	ldr	r7, [pc, #616]	@ (8005e4c <_printf_float+0x2fc>)
 8005be4:	2303      	movs	r3, #3
 8005be6:	2400      	movs	r4, #0
 8005be8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005bea:	612b      	str	r3, [r5, #16]
 8005bec:	3301      	adds	r3, #1
 8005bee:	439a      	bics	r2, r3
 8005bf0:	602a      	str	r2, [r5, #0]
 8005bf2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005bf4:	0029      	movs	r1, r5
 8005bf6:	9300      	str	r3, [sp, #0]
 8005bf8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005bfa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005bfc:	aa15      	add	r2, sp, #84	@ 0x54
 8005bfe:	f000 f9e5 	bl	8005fcc <_printf_common>
 8005c02:	3001      	adds	r0, #1
 8005c04:	d000      	beq.n	8005c08 <_printf_float+0xb8>
 8005c06:	e09e      	b.n	8005d46 <_printf_float+0x1f6>
 8005c08:	2001      	movs	r0, #1
 8005c0a:	4240      	negs	r0, r0
 8005c0c:	b017      	add	sp, #92	@ 0x5c
 8005c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c10:	3307      	adds	r3, #7
 8005c12:	e7b8      	b.n	8005b86 <_printf_float+0x36>
 8005c14:	0032      	movs	r2, r6
 8005c16:	003b      	movs	r3, r7
 8005c18:	0030      	movs	r0, r6
 8005c1a:	0039      	movs	r1, r7
 8005c1c:	f7fc fdf4 	bl	8002808 <__aeabi_dcmpun>
 8005c20:	2800      	cmp	r0, #0
 8005c22:	d00b      	beq.n	8005c3c <_printf_float+0xec>
 8005c24:	2f00      	cmp	r7, #0
 8005c26:	da03      	bge.n	8005c30 <_printf_float+0xe0>
 8005c28:	002b      	movs	r3, r5
 8005c2a:	222d      	movs	r2, #45	@ 0x2d
 8005c2c:	3343      	adds	r3, #67	@ 0x43
 8005c2e:	701a      	strb	r2, [r3, #0]
 8005c30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005c32:	4f87      	ldr	r7, [pc, #540]	@ (8005e50 <_printf_float+0x300>)
 8005c34:	2b47      	cmp	r3, #71	@ 0x47
 8005c36:	d8d5      	bhi.n	8005be4 <_printf_float+0x94>
 8005c38:	4f86      	ldr	r7, [pc, #536]	@ (8005e54 <_printf_float+0x304>)
 8005c3a:	e7d3      	b.n	8005be4 <_printf_float+0x94>
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8005c40:	686b      	ldr	r3, [r5, #4]
 8005c42:	4394      	bics	r4, r2
 8005c44:	1c5a      	adds	r2, r3, #1
 8005c46:	d146      	bne.n	8005cd6 <_printf_float+0x186>
 8005c48:	3307      	adds	r3, #7
 8005c4a:	606b      	str	r3, [r5, #4]
 8005c4c:	2380      	movs	r3, #128	@ 0x80
 8005c4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005c50:	00db      	lsls	r3, r3, #3
 8005c52:	4313      	orrs	r3, r2
 8005c54:	2200      	movs	r2, #0
 8005c56:	602b      	str	r3, [r5, #0]
 8005c58:	9206      	str	r2, [sp, #24]
 8005c5a:	aa14      	add	r2, sp, #80	@ 0x50
 8005c5c:	9205      	str	r2, [sp, #20]
 8005c5e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005c60:	a90a      	add	r1, sp, #40	@ 0x28
 8005c62:	9204      	str	r2, [sp, #16]
 8005c64:	aa13      	add	r2, sp, #76	@ 0x4c
 8005c66:	9203      	str	r2, [sp, #12]
 8005c68:	2223      	movs	r2, #35	@ 0x23
 8005c6a:	1852      	adds	r2, r2, r1
 8005c6c:	9202      	str	r2, [sp, #8]
 8005c6e:	9301      	str	r3, [sp, #4]
 8005c70:	686b      	ldr	r3, [r5, #4]
 8005c72:	0032      	movs	r2, r6
 8005c74:	9300      	str	r3, [sp, #0]
 8005c76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c78:	003b      	movs	r3, r7
 8005c7a:	f7ff fec3 	bl	8005a04 <__cvt>
 8005c7e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005c80:	0007      	movs	r7, r0
 8005c82:	2c47      	cmp	r4, #71	@ 0x47
 8005c84:	d12d      	bne.n	8005ce2 <_printf_float+0x192>
 8005c86:	1cd3      	adds	r3, r2, #3
 8005c88:	db02      	blt.n	8005c90 <_printf_float+0x140>
 8005c8a:	686b      	ldr	r3, [r5, #4]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	dd47      	ble.n	8005d20 <_printf_float+0x1d0>
 8005c90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005c92:	3b02      	subs	r3, #2
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	930c      	str	r3, [sp, #48]	@ 0x30
 8005c98:	0028      	movs	r0, r5
 8005c9a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005c9c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005c9e:	3901      	subs	r1, #1
 8005ca0:	3050      	adds	r0, #80	@ 0x50
 8005ca2:	9113      	str	r1, [sp, #76]	@ 0x4c
 8005ca4:	f7ff ff14 	bl	8005ad0 <__exponent>
 8005ca8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005caa:	0004      	movs	r4, r0
 8005cac:	1813      	adds	r3, r2, r0
 8005cae:	612b      	str	r3, [r5, #16]
 8005cb0:	2a01      	cmp	r2, #1
 8005cb2:	dc02      	bgt.n	8005cba <_printf_float+0x16a>
 8005cb4:	682a      	ldr	r2, [r5, #0]
 8005cb6:	07d2      	lsls	r2, r2, #31
 8005cb8:	d501      	bpl.n	8005cbe <_printf_float+0x16e>
 8005cba:	3301      	adds	r3, #1
 8005cbc:	612b      	str	r3, [r5, #16]
 8005cbe:	2323      	movs	r3, #35	@ 0x23
 8005cc0:	aa0a      	add	r2, sp, #40	@ 0x28
 8005cc2:	189b      	adds	r3, r3, r2
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d100      	bne.n	8005ccc <_printf_float+0x17c>
 8005cca:	e792      	b.n	8005bf2 <_printf_float+0xa2>
 8005ccc:	002b      	movs	r3, r5
 8005cce:	222d      	movs	r2, #45	@ 0x2d
 8005cd0:	3343      	adds	r3, #67	@ 0x43
 8005cd2:	701a      	strb	r2, [r3, #0]
 8005cd4:	e78d      	b.n	8005bf2 <_printf_float+0xa2>
 8005cd6:	2c47      	cmp	r4, #71	@ 0x47
 8005cd8:	d1b8      	bne.n	8005c4c <_printf_float+0xfc>
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1b6      	bne.n	8005c4c <_printf_float+0xfc>
 8005cde:	3301      	adds	r3, #1
 8005ce0:	e7b3      	b.n	8005c4a <_printf_float+0xfa>
 8005ce2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005ce4:	2b65      	cmp	r3, #101	@ 0x65
 8005ce6:	d9d7      	bls.n	8005c98 <_printf_float+0x148>
 8005ce8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005cea:	2b66      	cmp	r3, #102	@ 0x66
 8005cec:	d11a      	bne.n	8005d24 <_printf_float+0x1d4>
 8005cee:	686b      	ldr	r3, [r5, #4]
 8005cf0:	2a00      	cmp	r2, #0
 8005cf2:	dd09      	ble.n	8005d08 <_printf_float+0x1b8>
 8005cf4:	612a      	str	r2, [r5, #16]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d102      	bne.n	8005d00 <_printf_float+0x1b0>
 8005cfa:	6829      	ldr	r1, [r5, #0]
 8005cfc:	07c9      	lsls	r1, r1, #31
 8005cfe:	d50b      	bpl.n	8005d18 <_printf_float+0x1c8>
 8005d00:	3301      	adds	r3, #1
 8005d02:	189b      	adds	r3, r3, r2
 8005d04:	612b      	str	r3, [r5, #16]
 8005d06:	e007      	b.n	8005d18 <_printf_float+0x1c8>
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d103      	bne.n	8005d14 <_printf_float+0x1c4>
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	6829      	ldr	r1, [r5, #0]
 8005d10:	4211      	tst	r1, r2
 8005d12:	d000      	beq.n	8005d16 <_printf_float+0x1c6>
 8005d14:	1c9a      	adds	r2, r3, #2
 8005d16:	612a      	str	r2, [r5, #16]
 8005d18:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005d1a:	2400      	movs	r4, #0
 8005d1c:	65ab      	str	r3, [r5, #88]	@ 0x58
 8005d1e:	e7ce      	b.n	8005cbe <_printf_float+0x16e>
 8005d20:	2367      	movs	r3, #103	@ 0x67
 8005d22:	930c      	str	r3, [sp, #48]	@ 0x30
 8005d24:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005d26:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005d28:	4299      	cmp	r1, r3
 8005d2a:	db06      	blt.n	8005d3a <_printf_float+0x1ea>
 8005d2c:	682b      	ldr	r3, [r5, #0]
 8005d2e:	6129      	str	r1, [r5, #16]
 8005d30:	07db      	lsls	r3, r3, #31
 8005d32:	d5f1      	bpl.n	8005d18 <_printf_float+0x1c8>
 8005d34:	3101      	adds	r1, #1
 8005d36:	6129      	str	r1, [r5, #16]
 8005d38:	e7ee      	b.n	8005d18 <_printf_float+0x1c8>
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	2900      	cmp	r1, #0
 8005d3e:	dce0      	bgt.n	8005d02 <_printf_float+0x1b2>
 8005d40:	1892      	adds	r2, r2, r2
 8005d42:	1a52      	subs	r2, r2, r1
 8005d44:	e7dd      	b.n	8005d02 <_printf_float+0x1b2>
 8005d46:	682a      	ldr	r2, [r5, #0]
 8005d48:	0553      	lsls	r3, r2, #21
 8005d4a:	d408      	bmi.n	8005d5e <_printf_float+0x20e>
 8005d4c:	692b      	ldr	r3, [r5, #16]
 8005d4e:	003a      	movs	r2, r7
 8005d50:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005d52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d54:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005d56:	47a0      	blx	r4
 8005d58:	3001      	adds	r0, #1
 8005d5a:	d129      	bne.n	8005db0 <_printf_float+0x260>
 8005d5c:	e754      	b.n	8005c08 <_printf_float+0xb8>
 8005d5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005d60:	2b65      	cmp	r3, #101	@ 0x65
 8005d62:	d800      	bhi.n	8005d66 <_printf_float+0x216>
 8005d64:	e0db      	b.n	8005f1e <_printf_float+0x3ce>
 8005d66:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8005d68:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	f7fa fb6d 	bl	800044c <__aeabi_dcmpeq>
 8005d72:	2800      	cmp	r0, #0
 8005d74:	d033      	beq.n	8005dde <_printf_float+0x28e>
 8005d76:	2301      	movs	r3, #1
 8005d78:	4a37      	ldr	r2, [pc, #220]	@ (8005e58 <_printf_float+0x308>)
 8005d7a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005d7c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d7e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005d80:	47a0      	blx	r4
 8005d82:	3001      	adds	r0, #1
 8005d84:	d100      	bne.n	8005d88 <_printf_float+0x238>
 8005d86:	e73f      	b.n	8005c08 <_printf_float+0xb8>
 8005d88:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8005d8a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005d8c:	42b3      	cmp	r3, r6
 8005d8e:	db02      	blt.n	8005d96 <_printf_float+0x246>
 8005d90:	682b      	ldr	r3, [r5, #0]
 8005d92:	07db      	lsls	r3, r3, #31
 8005d94:	d50c      	bpl.n	8005db0 <_printf_float+0x260>
 8005d96:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005d98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005d9a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005d9c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005d9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005da0:	47a0      	blx	r4
 8005da2:	2400      	movs	r4, #0
 8005da4:	3001      	adds	r0, #1
 8005da6:	d100      	bne.n	8005daa <_printf_float+0x25a>
 8005da8:	e72e      	b.n	8005c08 <_printf_float+0xb8>
 8005daa:	1e73      	subs	r3, r6, #1
 8005dac:	42a3      	cmp	r3, r4
 8005dae:	dc0a      	bgt.n	8005dc6 <_printf_float+0x276>
 8005db0:	682b      	ldr	r3, [r5, #0]
 8005db2:	079b      	lsls	r3, r3, #30
 8005db4:	d500      	bpl.n	8005db8 <_printf_float+0x268>
 8005db6:	e106      	b.n	8005fc6 <_printf_float+0x476>
 8005db8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005dba:	68e8      	ldr	r0, [r5, #12]
 8005dbc:	4298      	cmp	r0, r3
 8005dbe:	db00      	blt.n	8005dc2 <_printf_float+0x272>
 8005dc0:	e724      	b.n	8005c0c <_printf_float+0xbc>
 8005dc2:	0018      	movs	r0, r3
 8005dc4:	e722      	b.n	8005c0c <_printf_float+0xbc>
 8005dc6:	002a      	movs	r2, r5
 8005dc8:	2301      	movs	r3, #1
 8005dca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005dcc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005dce:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8005dd0:	321a      	adds	r2, #26
 8005dd2:	47b8      	blx	r7
 8005dd4:	3001      	adds	r0, #1
 8005dd6:	d100      	bne.n	8005dda <_printf_float+0x28a>
 8005dd8:	e716      	b.n	8005c08 <_printf_float+0xb8>
 8005dda:	3401      	adds	r4, #1
 8005ddc:	e7e5      	b.n	8005daa <_printf_float+0x25a>
 8005dde:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	dc3b      	bgt.n	8005e5c <_printf_float+0x30c>
 8005de4:	2301      	movs	r3, #1
 8005de6:	4a1c      	ldr	r2, [pc, #112]	@ (8005e58 <_printf_float+0x308>)
 8005de8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005dea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005dec:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005dee:	47a0      	blx	r4
 8005df0:	3001      	adds	r0, #1
 8005df2:	d100      	bne.n	8005df6 <_printf_float+0x2a6>
 8005df4:	e708      	b.n	8005c08 <_printf_float+0xb8>
 8005df6:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8005df8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005dfa:	4333      	orrs	r3, r6
 8005dfc:	d102      	bne.n	8005e04 <_printf_float+0x2b4>
 8005dfe:	682b      	ldr	r3, [r5, #0]
 8005e00:	07db      	lsls	r3, r3, #31
 8005e02:	d5d5      	bpl.n	8005db0 <_printf_float+0x260>
 8005e04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e06:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005e08:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005e0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e0c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005e0e:	47a0      	blx	r4
 8005e10:	2300      	movs	r3, #0
 8005e12:	3001      	adds	r0, #1
 8005e14:	d100      	bne.n	8005e18 <_printf_float+0x2c8>
 8005e16:	e6f7      	b.n	8005c08 <_printf_float+0xb8>
 8005e18:	930c      	str	r3, [sp, #48]	@ 0x30
 8005e1a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005e1c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005e1e:	425b      	negs	r3, r3
 8005e20:	4293      	cmp	r3, r2
 8005e22:	dc01      	bgt.n	8005e28 <_printf_float+0x2d8>
 8005e24:	0033      	movs	r3, r6
 8005e26:	e792      	b.n	8005d4e <_printf_float+0x1fe>
 8005e28:	002a      	movs	r2, r5
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005e2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e30:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005e32:	321a      	adds	r2, #26
 8005e34:	47a0      	blx	r4
 8005e36:	3001      	adds	r0, #1
 8005e38:	d100      	bne.n	8005e3c <_printf_float+0x2ec>
 8005e3a:	e6e5      	b.n	8005c08 <_printf_float+0xb8>
 8005e3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005e3e:	3301      	adds	r3, #1
 8005e40:	e7ea      	b.n	8005e18 <_printf_float+0x2c8>
 8005e42:	46c0      	nop			@ (mov r8, r8)
 8005e44:	7fefffff 	.word	0x7fefffff
 8005e48:	08008660 	.word	0x08008660
 8005e4c:	0800865c 	.word	0x0800865c
 8005e50:	08008668 	.word	0x08008668
 8005e54:	08008664 	.word	0x08008664
 8005e58:	0800866c 	.word	0x0800866c
 8005e5c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005e5e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8005e60:	930c      	str	r3, [sp, #48]	@ 0x30
 8005e62:	429e      	cmp	r6, r3
 8005e64:	dd00      	ble.n	8005e68 <_printf_float+0x318>
 8005e66:	001e      	movs	r6, r3
 8005e68:	2e00      	cmp	r6, #0
 8005e6a:	dc31      	bgt.n	8005ed0 <_printf_float+0x380>
 8005e6c:	43f3      	mvns	r3, r6
 8005e6e:	2400      	movs	r4, #0
 8005e70:	17db      	asrs	r3, r3, #31
 8005e72:	4033      	ands	r3, r6
 8005e74:	930e      	str	r3, [sp, #56]	@ 0x38
 8005e76:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8005e78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e7a:	1af3      	subs	r3, r6, r3
 8005e7c:	42a3      	cmp	r3, r4
 8005e7e:	dc30      	bgt.n	8005ee2 <_printf_float+0x392>
 8005e80:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005e82:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005e84:	429a      	cmp	r2, r3
 8005e86:	dc38      	bgt.n	8005efa <_printf_float+0x3aa>
 8005e88:	682b      	ldr	r3, [r5, #0]
 8005e8a:	07db      	lsls	r3, r3, #31
 8005e8c:	d435      	bmi.n	8005efa <_printf_float+0x3aa>
 8005e8e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8005e90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005e92:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005e94:	1b9b      	subs	r3, r3, r6
 8005e96:	1b14      	subs	r4, r2, r4
 8005e98:	429c      	cmp	r4, r3
 8005e9a:	dd00      	ble.n	8005e9e <_printf_float+0x34e>
 8005e9c:	001c      	movs	r4, r3
 8005e9e:	2c00      	cmp	r4, #0
 8005ea0:	dc34      	bgt.n	8005f0c <_printf_float+0x3bc>
 8005ea2:	43e3      	mvns	r3, r4
 8005ea4:	2600      	movs	r6, #0
 8005ea6:	17db      	asrs	r3, r3, #31
 8005ea8:	401c      	ands	r4, r3
 8005eaa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005eac:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	1b1b      	subs	r3, r3, r4
 8005eb2:	42b3      	cmp	r3, r6
 8005eb4:	dc00      	bgt.n	8005eb8 <_printf_float+0x368>
 8005eb6:	e77b      	b.n	8005db0 <_printf_float+0x260>
 8005eb8:	002a      	movs	r2, r5
 8005eba:	2301      	movs	r3, #1
 8005ebc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005ebe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ec0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8005ec2:	321a      	adds	r2, #26
 8005ec4:	47b8      	blx	r7
 8005ec6:	3001      	adds	r0, #1
 8005ec8:	d100      	bne.n	8005ecc <_printf_float+0x37c>
 8005eca:	e69d      	b.n	8005c08 <_printf_float+0xb8>
 8005ecc:	3601      	adds	r6, #1
 8005ece:	e7ec      	b.n	8005eaa <_printf_float+0x35a>
 8005ed0:	0033      	movs	r3, r6
 8005ed2:	003a      	movs	r2, r7
 8005ed4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005ed6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ed8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005eda:	47a0      	blx	r4
 8005edc:	3001      	adds	r0, #1
 8005ede:	d1c5      	bne.n	8005e6c <_printf_float+0x31c>
 8005ee0:	e692      	b.n	8005c08 <_printf_float+0xb8>
 8005ee2:	002a      	movs	r2, r5
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005ee8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005eea:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005eec:	321a      	adds	r2, #26
 8005eee:	47b0      	blx	r6
 8005ef0:	3001      	adds	r0, #1
 8005ef2:	d100      	bne.n	8005ef6 <_printf_float+0x3a6>
 8005ef4:	e688      	b.n	8005c08 <_printf_float+0xb8>
 8005ef6:	3401      	adds	r4, #1
 8005ef8:	e7bd      	b.n	8005e76 <_printf_float+0x326>
 8005efa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005efc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005efe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005f00:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f02:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005f04:	47a0      	blx	r4
 8005f06:	3001      	adds	r0, #1
 8005f08:	d1c1      	bne.n	8005e8e <_printf_float+0x33e>
 8005f0a:	e67d      	b.n	8005c08 <_printf_float+0xb8>
 8005f0c:	19ba      	adds	r2, r7, r6
 8005f0e:	0023      	movs	r3, r4
 8005f10:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005f12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f14:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005f16:	47b0      	blx	r6
 8005f18:	3001      	adds	r0, #1
 8005f1a:	d1c2      	bne.n	8005ea2 <_printf_float+0x352>
 8005f1c:	e674      	b.n	8005c08 <_printf_float+0xb8>
 8005f1e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005f20:	930c      	str	r3, [sp, #48]	@ 0x30
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	dc02      	bgt.n	8005f2c <_printf_float+0x3dc>
 8005f26:	2301      	movs	r3, #1
 8005f28:	421a      	tst	r2, r3
 8005f2a:	d039      	beq.n	8005fa0 <_printf_float+0x450>
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	003a      	movs	r2, r7
 8005f30:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005f32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f34:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005f36:	47b0      	blx	r6
 8005f38:	3001      	adds	r0, #1
 8005f3a:	d100      	bne.n	8005f3e <_printf_float+0x3ee>
 8005f3c:	e664      	b.n	8005c08 <_printf_float+0xb8>
 8005f3e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f40:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005f42:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005f44:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f46:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005f48:	47b0      	blx	r6
 8005f4a:	3001      	adds	r0, #1
 8005f4c:	d100      	bne.n	8005f50 <_printf_float+0x400>
 8005f4e:	e65b      	b.n	8005c08 <_printf_float+0xb8>
 8005f50:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8005f52:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8005f54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005f56:	2200      	movs	r2, #0
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	930c      	str	r3, [sp, #48]	@ 0x30
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	f7fa fa75 	bl	800044c <__aeabi_dcmpeq>
 8005f62:	2800      	cmp	r0, #0
 8005f64:	d11a      	bne.n	8005f9c <_printf_float+0x44c>
 8005f66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005f68:	1c7a      	adds	r2, r7, #1
 8005f6a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005f6c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f6e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005f70:	47b0      	blx	r6
 8005f72:	3001      	adds	r0, #1
 8005f74:	d10e      	bne.n	8005f94 <_printf_float+0x444>
 8005f76:	e647      	b.n	8005c08 <_printf_float+0xb8>
 8005f78:	002a      	movs	r2, r5
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005f7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f80:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8005f82:	321a      	adds	r2, #26
 8005f84:	47b8      	blx	r7
 8005f86:	3001      	adds	r0, #1
 8005f88:	d100      	bne.n	8005f8c <_printf_float+0x43c>
 8005f8a:	e63d      	b.n	8005c08 <_printf_float+0xb8>
 8005f8c:	3601      	adds	r6, #1
 8005f8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005f90:	429e      	cmp	r6, r3
 8005f92:	dbf1      	blt.n	8005f78 <_printf_float+0x428>
 8005f94:	002a      	movs	r2, r5
 8005f96:	0023      	movs	r3, r4
 8005f98:	3250      	adds	r2, #80	@ 0x50
 8005f9a:	e6d9      	b.n	8005d50 <_printf_float+0x200>
 8005f9c:	2600      	movs	r6, #0
 8005f9e:	e7f6      	b.n	8005f8e <_printf_float+0x43e>
 8005fa0:	003a      	movs	r2, r7
 8005fa2:	e7e2      	b.n	8005f6a <_printf_float+0x41a>
 8005fa4:	002a      	movs	r2, r5
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005faa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005fac:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005fae:	3219      	adds	r2, #25
 8005fb0:	47b0      	blx	r6
 8005fb2:	3001      	adds	r0, #1
 8005fb4:	d100      	bne.n	8005fb8 <_printf_float+0x468>
 8005fb6:	e627      	b.n	8005c08 <_printf_float+0xb8>
 8005fb8:	3401      	adds	r4, #1
 8005fba:	68eb      	ldr	r3, [r5, #12]
 8005fbc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005fbe:	1a9b      	subs	r3, r3, r2
 8005fc0:	42a3      	cmp	r3, r4
 8005fc2:	dcef      	bgt.n	8005fa4 <_printf_float+0x454>
 8005fc4:	e6f8      	b.n	8005db8 <_printf_float+0x268>
 8005fc6:	2400      	movs	r4, #0
 8005fc8:	e7f7      	b.n	8005fba <_printf_float+0x46a>
 8005fca:	46c0      	nop			@ (mov r8, r8)

08005fcc <_printf_common>:
 8005fcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fce:	0016      	movs	r6, r2
 8005fd0:	9301      	str	r3, [sp, #4]
 8005fd2:	688a      	ldr	r2, [r1, #8]
 8005fd4:	690b      	ldr	r3, [r1, #16]
 8005fd6:	000c      	movs	r4, r1
 8005fd8:	9000      	str	r0, [sp, #0]
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	da00      	bge.n	8005fe0 <_printf_common+0x14>
 8005fde:	0013      	movs	r3, r2
 8005fe0:	0022      	movs	r2, r4
 8005fe2:	6033      	str	r3, [r6, #0]
 8005fe4:	3243      	adds	r2, #67	@ 0x43
 8005fe6:	7812      	ldrb	r2, [r2, #0]
 8005fe8:	2a00      	cmp	r2, #0
 8005fea:	d001      	beq.n	8005ff0 <_printf_common+0x24>
 8005fec:	3301      	adds	r3, #1
 8005fee:	6033      	str	r3, [r6, #0]
 8005ff0:	6823      	ldr	r3, [r4, #0]
 8005ff2:	069b      	lsls	r3, r3, #26
 8005ff4:	d502      	bpl.n	8005ffc <_printf_common+0x30>
 8005ff6:	6833      	ldr	r3, [r6, #0]
 8005ff8:	3302      	adds	r3, #2
 8005ffa:	6033      	str	r3, [r6, #0]
 8005ffc:	6822      	ldr	r2, [r4, #0]
 8005ffe:	2306      	movs	r3, #6
 8006000:	0015      	movs	r5, r2
 8006002:	401d      	ands	r5, r3
 8006004:	421a      	tst	r2, r3
 8006006:	d027      	beq.n	8006058 <_printf_common+0x8c>
 8006008:	0023      	movs	r3, r4
 800600a:	3343      	adds	r3, #67	@ 0x43
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	1e5a      	subs	r2, r3, #1
 8006010:	4193      	sbcs	r3, r2
 8006012:	6822      	ldr	r2, [r4, #0]
 8006014:	0692      	lsls	r2, r2, #26
 8006016:	d430      	bmi.n	800607a <_printf_common+0xae>
 8006018:	0022      	movs	r2, r4
 800601a:	9901      	ldr	r1, [sp, #4]
 800601c:	9800      	ldr	r0, [sp, #0]
 800601e:	9d08      	ldr	r5, [sp, #32]
 8006020:	3243      	adds	r2, #67	@ 0x43
 8006022:	47a8      	blx	r5
 8006024:	3001      	adds	r0, #1
 8006026:	d025      	beq.n	8006074 <_printf_common+0xa8>
 8006028:	2206      	movs	r2, #6
 800602a:	6823      	ldr	r3, [r4, #0]
 800602c:	2500      	movs	r5, #0
 800602e:	4013      	ands	r3, r2
 8006030:	2b04      	cmp	r3, #4
 8006032:	d105      	bne.n	8006040 <_printf_common+0x74>
 8006034:	6833      	ldr	r3, [r6, #0]
 8006036:	68e5      	ldr	r5, [r4, #12]
 8006038:	1aed      	subs	r5, r5, r3
 800603a:	43eb      	mvns	r3, r5
 800603c:	17db      	asrs	r3, r3, #31
 800603e:	401d      	ands	r5, r3
 8006040:	68a3      	ldr	r3, [r4, #8]
 8006042:	6922      	ldr	r2, [r4, #16]
 8006044:	4293      	cmp	r3, r2
 8006046:	dd01      	ble.n	800604c <_printf_common+0x80>
 8006048:	1a9b      	subs	r3, r3, r2
 800604a:	18ed      	adds	r5, r5, r3
 800604c:	2600      	movs	r6, #0
 800604e:	42b5      	cmp	r5, r6
 8006050:	d120      	bne.n	8006094 <_printf_common+0xc8>
 8006052:	2000      	movs	r0, #0
 8006054:	e010      	b.n	8006078 <_printf_common+0xac>
 8006056:	3501      	adds	r5, #1
 8006058:	68e3      	ldr	r3, [r4, #12]
 800605a:	6832      	ldr	r2, [r6, #0]
 800605c:	1a9b      	subs	r3, r3, r2
 800605e:	42ab      	cmp	r3, r5
 8006060:	ddd2      	ble.n	8006008 <_printf_common+0x3c>
 8006062:	0022      	movs	r2, r4
 8006064:	2301      	movs	r3, #1
 8006066:	9901      	ldr	r1, [sp, #4]
 8006068:	9800      	ldr	r0, [sp, #0]
 800606a:	9f08      	ldr	r7, [sp, #32]
 800606c:	3219      	adds	r2, #25
 800606e:	47b8      	blx	r7
 8006070:	3001      	adds	r0, #1
 8006072:	d1f0      	bne.n	8006056 <_printf_common+0x8a>
 8006074:	2001      	movs	r0, #1
 8006076:	4240      	negs	r0, r0
 8006078:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800607a:	2030      	movs	r0, #48	@ 0x30
 800607c:	18e1      	adds	r1, r4, r3
 800607e:	3143      	adds	r1, #67	@ 0x43
 8006080:	7008      	strb	r0, [r1, #0]
 8006082:	0021      	movs	r1, r4
 8006084:	1c5a      	adds	r2, r3, #1
 8006086:	3145      	adds	r1, #69	@ 0x45
 8006088:	7809      	ldrb	r1, [r1, #0]
 800608a:	18a2      	adds	r2, r4, r2
 800608c:	3243      	adds	r2, #67	@ 0x43
 800608e:	3302      	adds	r3, #2
 8006090:	7011      	strb	r1, [r2, #0]
 8006092:	e7c1      	b.n	8006018 <_printf_common+0x4c>
 8006094:	0022      	movs	r2, r4
 8006096:	2301      	movs	r3, #1
 8006098:	9901      	ldr	r1, [sp, #4]
 800609a:	9800      	ldr	r0, [sp, #0]
 800609c:	9f08      	ldr	r7, [sp, #32]
 800609e:	321a      	adds	r2, #26
 80060a0:	47b8      	blx	r7
 80060a2:	3001      	adds	r0, #1
 80060a4:	d0e6      	beq.n	8006074 <_printf_common+0xa8>
 80060a6:	3601      	adds	r6, #1
 80060a8:	e7d1      	b.n	800604e <_printf_common+0x82>
	...

080060ac <_printf_i>:
 80060ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060ae:	b08b      	sub	sp, #44	@ 0x2c
 80060b0:	9206      	str	r2, [sp, #24]
 80060b2:	000a      	movs	r2, r1
 80060b4:	3243      	adds	r2, #67	@ 0x43
 80060b6:	9307      	str	r3, [sp, #28]
 80060b8:	9005      	str	r0, [sp, #20]
 80060ba:	9203      	str	r2, [sp, #12]
 80060bc:	7e0a      	ldrb	r2, [r1, #24]
 80060be:	000c      	movs	r4, r1
 80060c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80060c2:	2a78      	cmp	r2, #120	@ 0x78
 80060c4:	d809      	bhi.n	80060da <_printf_i+0x2e>
 80060c6:	2a62      	cmp	r2, #98	@ 0x62
 80060c8:	d80b      	bhi.n	80060e2 <_printf_i+0x36>
 80060ca:	2a00      	cmp	r2, #0
 80060cc:	d100      	bne.n	80060d0 <_printf_i+0x24>
 80060ce:	e0ba      	b.n	8006246 <_printf_i+0x19a>
 80060d0:	497a      	ldr	r1, [pc, #488]	@ (80062bc <_printf_i+0x210>)
 80060d2:	9104      	str	r1, [sp, #16]
 80060d4:	2a58      	cmp	r2, #88	@ 0x58
 80060d6:	d100      	bne.n	80060da <_printf_i+0x2e>
 80060d8:	e08e      	b.n	80061f8 <_printf_i+0x14c>
 80060da:	0025      	movs	r5, r4
 80060dc:	3542      	adds	r5, #66	@ 0x42
 80060de:	702a      	strb	r2, [r5, #0]
 80060e0:	e022      	b.n	8006128 <_printf_i+0x7c>
 80060e2:	0010      	movs	r0, r2
 80060e4:	3863      	subs	r0, #99	@ 0x63
 80060e6:	2815      	cmp	r0, #21
 80060e8:	d8f7      	bhi.n	80060da <_printf_i+0x2e>
 80060ea:	f7fa f81f 	bl	800012c <__gnu_thumb1_case_shi>
 80060ee:	0016      	.short	0x0016
 80060f0:	fff6001f 	.word	0xfff6001f
 80060f4:	fff6fff6 	.word	0xfff6fff6
 80060f8:	001ffff6 	.word	0x001ffff6
 80060fc:	fff6fff6 	.word	0xfff6fff6
 8006100:	fff6fff6 	.word	0xfff6fff6
 8006104:	0036009f 	.word	0x0036009f
 8006108:	fff6007e 	.word	0xfff6007e
 800610c:	00b0fff6 	.word	0x00b0fff6
 8006110:	0036fff6 	.word	0x0036fff6
 8006114:	fff6fff6 	.word	0xfff6fff6
 8006118:	0082      	.short	0x0082
 800611a:	0025      	movs	r5, r4
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	3542      	adds	r5, #66	@ 0x42
 8006120:	1d11      	adds	r1, r2, #4
 8006122:	6019      	str	r1, [r3, #0]
 8006124:	6813      	ldr	r3, [r2, #0]
 8006126:	702b      	strb	r3, [r5, #0]
 8006128:	2301      	movs	r3, #1
 800612a:	e09e      	b.n	800626a <_printf_i+0x1be>
 800612c:	6818      	ldr	r0, [r3, #0]
 800612e:	6809      	ldr	r1, [r1, #0]
 8006130:	1d02      	adds	r2, r0, #4
 8006132:	060d      	lsls	r5, r1, #24
 8006134:	d50b      	bpl.n	800614e <_printf_i+0xa2>
 8006136:	6806      	ldr	r6, [r0, #0]
 8006138:	601a      	str	r2, [r3, #0]
 800613a:	2e00      	cmp	r6, #0
 800613c:	da03      	bge.n	8006146 <_printf_i+0x9a>
 800613e:	232d      	movs	r3, #45	@ 0x2d
 8006140:	9a03      	ldr	r2, [sp, #12]
 8006142:	4276      	negs	r6, r6
 8006144:	7013      	strb	r3, [r2, #0]
 8006146:	4b5d      	ldr	r3, [pc, #372]	@ (80062bc <_printf_i+0x210>)
 8006148:	270a      	movs	r7, #10
 800614a:	9304      	str	r3, [sp, #16]
 800614c:	e018      	b.n	8006180 <_printf_i+0xd4>
 800614e:	6806      	ldr	r6, [r0, #0]
 8006150:	601a      	str	r2, [r3, #0]
 8006152:	0649      	lsls	r1, r1, #25
 8006154:	d5f1      	bpl.n	800613a <_printf_i+0x8e>
 8006156:	b236      	sxth	r6, r6
 8006158:	e7ef      	b.n	800613a <_printf_i+0x8e>
 800615a:	6808      	ldr	r0, [r1, #0]
 800615c:	6819      	ldr	r1, [r3, #0]
 800615e:	c940      	ldmia	r1!, {r6}
 8006160:	0605      	lsls	r5, r0, #24
 8006162:	d402      	bmi.n	800616a <_printf_i+0xbe>
 8006164:	0640      	lsls	r0, r0, #25
 8006166:	d500      	bpl.n	800616a <_printf_i+0xbe>
 8006168:	b2b6      	uxth	r6, r6
 800616a:	6019      	str	r1, [r3, #0]
 800616c:	4b53      	ldr	r3, [pc, #332]	@ (80062bc <_printf_i+0x210>)
 800616e:	270a      	movs	r7, #10
 8006170:	9304      	str	r3, [sp, #16]
 8006172:	2a6f      	cmp	r2, #111	@ 0x6f
 8006174:	d100      	bne.n	8006178 <_printf_i+0xcc>
 8006176:	3f02      	subs	r7, #2
 8006178:	0023      	movs	r3, r4
 800617a:	2200      	movs	r2, #0
 800617c:	3343      	adds	r3, #67	@ 0x43
 800617e:	701a      	strb	r2, [r3, #0]
 8006180:	6863      	ldr	r3, [r4, #4]
 8006182:	60a3      	str	r3, [r4, #8]
 8006184:	2b00      	cmp	r3, #0
 8006186:	db06      	blt.n	8006196 <_printf_i+0xea>
 8006188:	2104      	movs	r1, #4
 800618a:	6822      	ldr	r2, [r4, #0]
 800618c:	9d03      	ldr	r5, [sp, #12]
 800618e:	438a      	bics	r2, r1
 8006190:	6022      	str	r2, [r4, #0]
 8006192:	4333      	orrs	r3, r6
 8006194:	d00c      	beq.n	80061b0 <_printf_i+0x104>
 8006196:	9d03      	ldr	r5, [sp, #12]
 8006198:	0030      	movs	r0, r6
 800619a:	0039      	movs	r1, r7
 800619c:	f7fa f856 	bl	800024c <__aeabi_uidivmod>
 80061a0:	9b04      	ldr	r3, [sp, #16]
 80061a2:	3d01      	subs	r5, #1
 80061a4:	5c5b      	ldrb	r3, [r3, r1]
 80061a6:	702b      	strb	r3, [r5, #0]
 80061a8:	0033      	movs	r3, r6
 80061aa:	0006      	movs	r6, r0
 80061ac:	429f      	cmp	r7, r3
 80061ae:	d9f3      	bls.n	8006198 <_printf_i+0xec>
 80061b0:	2f08      	cmp	r7, #8
 80061b2:	d109      	bne.n	80061c8 <_printf_i+0x11c>
 80061b4:	6823      	ldr	r3, [r4, #0]
 80061b6:	07db      	lsls	r3, r3, #31
 80061b8:	d506      	bpl.n	80061c8 <_printf_i+0x11c>
 80061ba:	6862      	ldr	r2, [r4, #4]
 80061bc:	6923      	ldr	r3, [r4, #16]
 80061be:	429a      	cmp	r2, r3
 80061c0:	dc02      	bgt.n	80061c8 <_printf_i+0x11c>
 80061c2:	2330      	movs	r3, #48	@ 0x30
 80061c4:	3d01      	subs	r5, #1
 80061c6:	702b      	strb	r3, [r5, #0]
 80061c8:	9b03      	ldr	r3, [sp, #12]
 80061ca:	1b5b      	subs	r3, r3, r5
 80061cc:	6123      	str	r3, [r4, #16]
 80061ce:	9b07      	ldr	r3, [sp, #28]
 80061d0:	0021      	movs	r1, r4
 80061d2:	9300      	str	r3, [sp, #0]
 80061d4:	9805      	ldr	r0, [sp, #20]
 80061d6:	9b06      	ldr	r3, [sp, #24]
 80061d8:	aa09      	add	r2, sp, #36	@ 0x24
 80061da:	f7ff fef7 	bl	8005fcc <_printf_common>
 80061de:	3001      	adds	r0, #1
 80061e0:	d148      	bne.n	8006274 <_printf_i+0x1c8>
 80061e2:	2001      	movs	r0, #1
 80061e4:	4240      	negs	r0, r0
 80061e6:	b00b      	add	sp, #44	@ 0x2c
 80061e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061ea:	2220      	movs	r2, #32
 80061ec:	6809      	ldr	r1, [r1, #0]
 80061ee:	430a      	orrs	r2, r1
 80061f0:	6022      	str	r2, [r4, #0]
 80061f2:	2278      	movs	r2, #120	@ 0x78
 80061f4:	4932      	ldr	r1, [pc, #200]	@ (80062c0 <_printf_i+0x214>)
 80061f6:	9104      	str	r1, [sp, #16]
 80061f8:	0021      	movs	r1, r4
 80061fa:	3145      	adds	r1, #69	@ 0x45
 80061fc:	700a      	strb	r2, [r1, #0]
 80061fe:	6819      	ldr	r1, [r3, #0]
 8006200:	6822      	ldr	r2, [r4, #0]
 8006202:	c940      	ldmia	r1!, {r6}
 8006204:	0610      	lsls	r0, r2, #24
 8006206:	d402      	bmi.n	800620e <_printf_i+0x162>
 8006208:	0650      	lsls	r0, r2, #25
 800620a:	d500      	bpl.n	800620e <_printf_i+0x162>
 800620c:	b2b6      	uxth	r6, r6
 800620e:	6019      	str	r1, [r3, #0]
 8006210:	07d3      	lsls	r3, r2, #31
 8006212:	d502      	bpl.n	800621a <_printf_i+0x16e>
 8006214:	2320      	movs	r3, #32
 8006216:	4313      	orrs	r3, r2
 8006218:	6023      	str	r3, [r4, #0]
 800621a:	2e00      	cmp	r6, #0
 800621c:	d001      	beq.n	8006222 <_printf_i+0x176>
 800621e:	2710      	movs	r7, #16
 8006220:	e7aa      	b.n	8006178 <_printf_i+0xcc>
 8006222:	2220      	movs	r2, #32
 8006224:	6823      	ldr	r3, [r4, #0]
 8006226:	4393      	bics	r3, r2
 8006228:	6023      	str	r3, [r4, #0]
 800622a:	e7f8      	b.n	800621e <_printf_i+0x172>
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	680d      	ldr	r5, [r1, #0]
 8006230:	1d10      	adds	r0, r2, #4
 8006232:	6949      	ldr	r1, [r1, #20]
 8006234:	6018      	str	r0, [r3, #0]
 8006236:	6813      	ldr	r3, [r2, #0]
 8006238:	062e      	lsls	r6, r5, #24
 800623a:	d501      	bpl.n	8006240 <_printf_i+0x194>
 800623c:	6019      	str	r1, [r3, #0]
 800623e:	e002      	b.n	8006246 <_printf_i+0x19a>
 8006240:	066d      	lsls	r5, r5, #25
 8006242:	d5fb      	bpl.n	800623c <_printf_i+0x190>
 8006244:	8019      	strh	r1, [r3, #0]
 8006246:	2300      	movs	r3, #0
 8006248:	9d03      	ldr	r5, [sp, #12]
 800624a:	6123      	str	r3, [r4, #16]
 800624c:	e7bf      	b.n	80061ce <_printf_i+0x122>
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	1d11      	adds	r1, r2, #4
 8006252:	6019      	str	r1, [r3, #0]
 8006254:	6815      	ldr	r5, [r2, #0]
 8006256:	2100      	movs	r1, #0
 8006258:	0028      	movs	r0, r5
 800625a:	6862      	ldr	r2, [r4, #4]
 800625c:	f000 fad9 	bl	8006812 <memchr>
 8006260:	2800      	cmp	r0, #0
 8006262:	d001      	beq.n	8006268 <_printf_i+0x1bc>
 8006264:	1b40      	subs	r0, r0, r5
 8006266:	6060      	str	r0, [r4, #4]
 8006268:	6863      	ldr	r3, [r4, #4]
 800626a:	6123      	str	r3, [r4, #16]
 800626c:	2300      	movs	r3, #0
 800626e:	9a03      	ldr	r2, [sp, #12]
 8006270:	7013      	strb	r3, [r2, #0]
 8006272:	e7ac      	b.n	80061ce <_printf_i+0x122>
 8006274:	002a      	movs	r2, r5
 8006276:	6923      	ldr	r3, [r4, #16]
 8006278:	9906      	ldr	r1, [sp, #24]
 800627a:	9805      	ldr	r0, [sp, #20]
 800627c:	9d07      	ldr	r5, [sp, #28]
 800627e:	47a8      	blx	r5
 8006280:	3001      	adds	r0, #1
 8006282:	d0ae      	beq.n	80061e2 <_printf_i+0x136>
 8006284:	6823      	ldr	r3, [r4, #0]
 8006286:	079b      	lsls	r3, r3, #30
 8006288:	d415      	bmi.n	80062b6 <_printf_i+0x20a>
 800628a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800628c:	68e0      	ldr	r0, [r4, #12]
 800628e:	4298      	cmp	r0, r3
 8006290:	daa9      	bge.n	80061e6 <_printf_i+0x13a>
 8006292:	0018      	movs	r0, r3
 8006294:	e7a7      	b.n	80061e6 <_printf_i+0x13a>
 8006296:	0022      	movs	r2, r4
 8006298:	2301      	movs	r3, #1
 800629a:	9906      	ldr	r1, [sp, #24]
 800629c:	9805      	ldr	r0, [sp, #20]
 800629e:	9e07      	ldr	r6, [sp, #28]
 80062a0:	3219      	adds	r2, #25
 80062a2:	47b0      	blx	r6
 80062a4:	3001      	adds	r0, #1
 80062a6:	d09c      	beq.n	80061e2 <_printf_i+0x136>
 80062a8:	3501      	adds	r5, #1
 80062aa:	68e3      	ldr	r3, [r4, #12]
 80062ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062ae:	1a9b      	subs	r3, r3, r2
 80062b0:	42ab      	cmp	r3, r5
 80062b2:	dcf0      	bgt.n	8006296 <_printf_i+0x1ea>
 80062b4:	e7e9      	b.n	800628a <_printf_i+0x1de>
 80062b6:	2500      	movs	r5, #0
 80062b8:	e7f7      	b.n	80062aa <_printf_i+0x1fe>
 80062ba:	46c0      	nop			@ (mov r8, r8)
 80062bc:	0800866e 	.word	0x0800866e
 80062c0:	0800867f 	.word	0x0800867f

080062c4 <std>:
 80062c4:	2300      	movs	r3, #0
 80062c6:	b510      	push	{r4, lr}
 80062c8:	0004      	movs	r4, r0
 80062ca:	6003      	str	r3, [r0, #0]
 80062cc:	6043      	str	r3, [r0, #4]
 80062ce:	6083      	str	r3, [r0, #8]
 80062d0:	8181      	strh	r1, [r0, #12]
 80062d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80062d4:	81c2      	strh	r2, [r0, #14]
 80062d6:	6103      	str	r3, [r0, #16]
 80062d8:	6143      	str	r3, [r0, #20]
 80062da:	6183      	str	r3, [r0, #24]
 80062dc:	0019      	movs	r1, r3
 80062de:	2208      	movs	r2, #8
 80062e0:	305c      	adds	r0, #92	@ 0x5c
 80062e2:	f000 fa0f 	bl	8006704 <memset>
 80062e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006314 <std+0x50>)
 80062e8:	6224      	str	r4, [r4, #32]
 80062ea:	6263      	str	r3, [r4, #36]	@ 0x24
 80062ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006318 <std+0x54>)
 80062ee:	62a3      	str	r3, [r4, #40]	@ 0x28
 80062f0:	4b0a      	ldr	r3, [pc, #40]	@ (800631c <std+0x58>)
 80062f2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80062f4:	4b0a      	ldr	r3, [pc, #40]	@ (8006320 <std+0x5c>)
 80062f6:	6323      	str	r3, [r4, #48]	@ 0x30
 80062f8:	4b0a      	ldr	r3, [pc, #40]	@ (8006324 <std+0x60>)
 80062fa:	429c      	cmp	r4, r3
 80062fc:	d005      	beq.n	800630a <std+0x46>
 80062fe:	4b0a      	ldr	r3, [pc, #40]	@ (8006328 <std+0x64>)
 8006300:	429c      	cmp	r4, r3
 8006302:	d002      	beq.n	800630a <std+0x46>
 8006304:	4b09      	ldr	r3, [pc, #36]	@ (800632c <std+0x68>)
 8006306:	429c      	cmp	r4, r3
 8006308:	d103      	bne.n	8006312 <std+0x4e>
 800630a:	0020      	movs	r0, r4
 800630c:	3058      	adds	r0, #88	@ 0x58
 800630e:	f000 fa7d 	bl	800680c <__retarget_lock_init_recursive>
 8006312:	bd10      	pop	{r4, pc}
 8006314:	0800652d 	.word	0x0800652d
 8006318:	08006555 	.word	0x08006555
 800631c:	0800658d 	.word	0x0800658d
 8006320:	080065b9 	.word	0x080065b9
 8006324:	20000378 	.word	0x20000378
 8006328:	200003e0 	.word	0x200003e0
 800632c:	20000448 	.word	0x20000448

08006330 <stdio_exit_handler>:
 8006330:	b510      	push	{r4, lr}
 8006332:	4a03      	ldr	r2, [pc, #12]	@ (8006340 <stdio_exit_handler+0x10>)
 8006334:	4903      	ldr	r1, [pc, #12]	@ (8006344 <stdio_exit_handler+0x14>)
 8006336:	4804      	ldr	r0, [pc, #16]	@ (8006348 <stdio_exit_handler+0x18>)
 8006338:	f000 f86c 	bl	8006414 <_fwalk_sglue>
 800633c:	bd10      	pop	{r4, pc}
 800633e:	46c0      	nop			@ (mov r8, r8)
 8006340:	2000000c 	.word	0x2000000c
 8006344:	080081ed 	.word	0x080081ed
 8006348:	2000001c 	.word	0x2000001c

0800634c <cleanup_stdio>:
 800634c:	6841      	ldr	r1, [r0, #4]
 800634e:	4b0b      	ldr	r3, [pc, #44]	@ (800637c <cleanup_stdio+0x30>)
 8006350:	b510      	push	{r4, lr}
 8006352:	0004      	movs	r4, r0
 8006354:	4299      	cmp	r1, r3
 8006356:	d001      	beq.n	800635c <cleanup_stdio+0x10>
 8006358:	f001 ff48 	bl	80081ec <_fflush_r>
 800635c:	68a1      	ldr	r1, [r4, #8]
 800635e:	4b08      	ldr	r3, [pc, #32]	@ (8006380 <cleanup_stdio+0x34>)
 8006360:	4299      	cmp	r1, r3
 8006362:	d002      	beq.n	800636a <cleanup_stdio+0x1e>
 8006364:	0020      	movs	r0, r4
 8006366:	f001 ff41 	bl	80081ec <_fflush_r>
 800636a:	68e1      	ldr	r1, [r4, #12]
 800636c:	4b05      	ldr	r3, [pc, #20]	@ (8006384 <cleanup_stdio+0x38>)
 800636e:	4299      	cmp	r1, r3
 8006370:	d002      	beq.n	8006378 <cleanup_stdio+0x2c>
 8006372:	0020      	movs	r0, r4
 8006374:	f001 ff3a 	bl	80081ec <_fflush_r>
 8006378:	bd10      	pop	{r4, pc}
 800637a:	46c0      	nop			@ (mov r8, r8)
 800637c:	20000378 	.word	0x20000378
 8006380:	200003e0 	.word	0x200003e0
 8006384:	20000448 	.word	0x20000448

08006388 <global_stdio_init.part.0>:
 8006388:	b510      	push	{r4, lr}
 800638a:	4b09      	ldr	r3, [pc, #36]	@ (80063b0 <global_stdio_init.part.0+0x28>)
 800638c:	4a09      	ldr	r2, [pc, #36]	@ (80063b4 <global_stdio_init.part.0+0x2c>)
 800638e:	2104      	movs	r1, #4
 8006390:	601a      	str	r2, [r3, #0]
 8006392:	4809      	ldr	r0, [pc, #36]	@ (80063b8 <global_stdio_init.part.0+0x30>)
 8006394:	2200      	movs	r2, #0
 8006396:	f7ff ff95 	bl	80062c4 <std>
 800639a:	2201      	movs	r2, #1
 800639c:	2109      	movs	r1, #9
 800639e:	4807      	ldr	r0, [pc, #28]	@ (80063bc <global_stdio_init.part.0+0x34>)
 80063a0:	f7ff ff90 	bl	80062c4 <std>
 80063a4:	2202      	movs	r2, #2
 80063a6:	2112      	movs	r1, #18
 80063a8:	4805      	ldr	r0, [pc, #20]	@ (80063c0 <global_stdio_init.part.0+0x38>)
 80063aa:	f7ff ff8b 	bl	80062c4 <std>
 80063ae:	bd10      	pop	{r4, pc}
 80063b0:	200004b0 	.word	0x200004b0
 80063b4:	08006331 	.word	0x08006331
 80063b8:	20000378 	.word	0x20000378
 80063bc:	200003e0 	.word	0x200003e0
 80063c0:	20000448 	.word	0x20000448

080063c4 <__sfp_lock_acquire>:
 80063c4:	b510      	push	{r4, lr}
 80063c6:	4802      	ldr	r0, [pc, #8]	@ (80063d0 <__sfp_lock_acquire+0xc>)
 80063c8:	f000 fa21 	bl	800680e <__retarget_lock_acquire_recursive>
 80063cc:	bd10      	pop	{r4, pc}
 80063ce:	46c0      	nop			@ (mov r8, r8)
 80063d0:	200004b9 	.word	0x200004b9

080063d4 <__sfp_lock_release>:
 80063d4:	b510      	push	{r4, lr}
 80063d6:	4802      	ldr	r0, [pc, #8]	@ (80063e0 <__sfp_lock_release+0xc>)
 80063d8:	f000 fa1a 	bl	8006810 <__retarget_lock_release_recursive>
 80063dc:	bd10      	pop	{r4, pc}
 80063de:	46c0      	nop			@ (mov r8, r8)
 80063e0:	200004b9 	.word	0x200004b9

080063e4 <__sinit>:
 80063e4:	b510      	push	{r4, lr}
 80063e6:	0004      	movs	r4, r0
 80063e8:	f7ff ffec 	bl	80063c4 <__sfp_lock_acquire>
 80063ec:	6a23      	ldr	r3, [r4, #32]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d002      	beq.n	80063f8 <__sinit+0x14>
 80063f2:	f7ff ffef 	bl	80063d4 <__sfp_lock_release>
 80063f6:	bd10      	pop	{r4, pc}
 80063f8:	4b04      	ldr	r3, [pc, #16]	@ (800640c <__sinit+0x28>)
 80063fa:	6223      	str	r3, [r4, #32]
 80063fc:	4b04      	ldr	r3, [pc, #16]	@ (8006410 <__sinit+0x2c>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1f6      	bne.n	80063f2 <__sinit+0xe>
 8006404:	f7ff ffc0 	bl	8006388 <global_stdio_init.part.0>
 8006408:	e7f3      	b.n	80063f2 <__sinit+0xe>
 800640a:	46c0      	nop			@ (mov r8, r8)
 800640c:	0800634d 	.word	0x0800634d
 8006410:	200004b0 	.word	0x200004b0

08006414 <_fwalk_sglue>:
 8006414:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006416:	0014      	movs	r4, r2
 8006418:	2600      	movs	r6, #0
 800641a:	9000      	str	r0, [sp, #0]
 800641c:	9101      	str	r1, [sp, #4]
 800641e:	68a5      	ldr	r5, [r4, #8]
 8006420:	6867      	ldr	r7, [r4, #4]
 8006422:	3f01      	subs	r7, #1
 8006424:	d504      	bpl.n	8006430 <_fwalk_sglue+0x1c>
 8006426:	6824      	ldr	r4, [r4, #0]
 8006428:	2c00      	cmp	r4, #0
 800642a:	d1f8      	bne.n	800641e <_fwalk_sglue+0xa>
 800642c:	0030      	movs	r0, r6
 800642e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006430:	89ab      	ldrh	r3, [r5, #12]
 8006432:	2b01      	cmp	r3, #1
 8006434:	d908      	bls.n	8006448 <_fwalk_sglue+0x34>
 8006436:	220e      	movs	r2, #14
 8006438:	5eab      	ldrsh	r3, [r5, r2]
 800643a:	3301      	adds	r3, #1
 800643c:	d004      	beq.n	8006448 <_fwalk_sglue+0x34>
 800643e:	0029      	movs	r1, r5
 8006440:	9800      	ldr	r0, [sp, #0]
 8006442:	9b01      	ldr	r3, [sp, #4]
 8006444:	4798      	blx	r3
 8006446:	4306      	orrs	r6, r0
 8006448:	3568      	adds	r5, #104	@ 0x68
 800644a:	e7ea      	b.n	8006422 <_fwalk_sglue+0xe>

0800644c <iprintf>:
 800644c:	b40f      	push	{r0, r1, r2, r3}
 800644e:	b507      	push	{r0, r1, r2, lr}
 8006450:	4905      	ldr	r1, [pc, #20]	@ (8006468 <iprintf+0x1c>)
 8006452:	ab04      	add	r3, sp, #16
 8006454:	6808      	ldr	r0, [r1, #0]
 8006456:	cb04      	ldmia	r3!, {r2}
 8006458:	6881      	ldr	r1, [r0, #8]
 800645a:	9301      	str	r3, [sp, #4]
 800645c:	f001 fd24 	bl	8007ea8 <_vfiprintf_r>
 8006460:	b003      	add	sp, #12
 8006462:	bc08      	pop	{r3}
 8006464:	b004      	add	sp, #16
 8006466:	4718      	bx	r3
 8006468:	20000018 	.word	0x20000018

0800646c <_puts_r>:
 800646c:	6a03      	ldr	r3, [r0, #32]
 800646e:	b570      	push	{r4, r5, r6, lr}
 8006470:	0005      	movs	r5, r0
 8006472:	000e      	movs	r6, r1
 8006474:	6884      	ldr	r4, [r0, #8]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d101      	bne.n	800647e <_puts_r+0x12>
 800647a:	f7ff ffb3 	bl	80063e4 <__sinit>
 800647e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006480:	07db      	lsls	r3, r3, #31
 8006482:	d405      	bmi.n	8006490 <_puts_r+0x24>
 8006484:	89a3      	ldrh	r3, [r4, #12]
 8006486:	059b      	lsls	r3, r3, #22
 8006488:	d402      	bmi.n	8006490 <_puts_r+0x24>
 800648a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800648c:	f000 f9bf 	bl	800680e <__retarget_lock_acquire_recursive>
 8006490:	89a3      	ldrh	r3, [r4, #12]
 8006492:	071b      	lsls	r3, r3, #28
 8006494:	d502      	bpl.n	800649c <_puts_r+0x30>
 8006496:	6923      	ldr	r3, [r4, #16]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d11f      	bne.n	80064dc <_puts_r+0x70>
 800649c:	0021      	movs	r1, r4
 800649e:	0028      	movs	r0, r5
 80064a0:	f000 f8d2 	bl	8006648 <__swsetup_r>
 80064a4:	2800      	cmp	r0, #0
 80064a6:	d019      	beq.n	80064dc <_puts_r+0x70>
 80064a8:	2501      	movs	r5, #1
 80064aa:	426d      	negs	r5, r5
 80064ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80064ae:	07db      	lsls	r3, r3, #31
 80064b0:	d405      	bmi.n	80064be <_puts_r+0x52>
 80064b2:	89a3      	ldrh	r3, [r4, #12]
 80064b4:	059b      	lsls	r3, r3, #22
 80064b6:	d402      	bmi.n	80064be <_puts_r+0x52>
 80064b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80064ba:	f000 f9a9 	bl	8006810 <__retarget_lock_release_recursive>
 80064be:	0028      	movs	r0, r5
 80064c0:	bd70      	pop	{r4, r5, r6, pc}
 80064c2:	3601      	adds	r6, #1
 80064c4:	60a3      	str	r3, [r4, #8]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	da04      	bge.n	80064d4 <_puts_r+0x68>
 80064ca:	69a2      	ldr	r2, [r4, #24]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	dc16      	bgt.n	80064fe <_puts_r+0x92>
 80064d0:	290a      	cmp	r1, #10
 80064d2:	d014      	beq.n	80064fe <_puts_r+0x92>
 80064d4:	6823      	ldr	r3, [r4, #0]
 80064d6:	1c5a      	adds	r2, r3, #1
 80064d8:	6022      	str	r2, [r4, #0]
 80064da:	7019      	strb	r1, [r3, #0]
 80064dc:	68a3      	ldr	r3, [r4, #8]
 80064de:	7831      	ldrb	r1, [r6, #0]
 80064e0:	3b01      	subs	r3, #1
 80064e2:	2900      	cmp	r1, #0
 80064e4:	d1ed      	bne.n	80064c2 <_puts_r+0x56>
 80064e6:	60a3      	str	r3, [r4, #8]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	da0f      	bge.n	800650c <_puts_r+0xa0>
 80064ec:	0022      	movs	r2, r4
 80064ee:	0028      	movs	r0, r5
 80064f0:	310a      	adds	r1, #10
 80064f2:	f000 f867 	bl	80065c4 <__swbuf_r>
 80064f6:	3001      	adds	r0, #1
 80064f8:	d0d6      	beq.n	80064a8 <_puts_r+0x3c>
 80064fa:	250a      	movs	r5, #10
 80064fc:	e7d6      	b.n	80064ac <_puts_r+0x40>
 80064fe:	0022      	movs	r2, r4
 8006500:	0028      	movs	r0, r5
 8006502:	f000 f85f 	bl	80065c4 <__swbuf_r>
 8006506:	3001      	adds	r0, #1
 8006508:	d1e8      	bne.n	80064dc <_puts_r+0x70>
 800650a:	e7cd      	b.n	80064a8 <_puts_r+0x3c>
 800650c:	6823      	ldr	r3, [r4, #0]
 800650e:	1c5a      	adds	r2, r3, #1
 8006510:	6022      	str	r2, [r4, #0]
 8006512:	220a      	movs	r2, #10
 8006514:	701a      	strb	r2, [r3, #0]
 8006516:	e7f0      	b.n	80064fa <_puts_r+0x8e>

08006518 <puts>:
 8006518:	b510      	push	{r4, lr}
 800651a:	4b03      	ldr	r3, [pc, #12]	@ (8006528 <puts+0x10>)
 800651c:	0001      	movs	r1, r0
 800651e:	6818      	ldr	r0, [r3, #0]
 8006520:	f7ff ffa4 	bl	800646c <_puts_r>
 8006524:	bd10      	pop	{r4, pc}
 8006526:	46c0      	nop			@ (mov r8, r8)
 8006528:	20000018 	.word	0x20000018

0800652c <__sread>:
 800652c:	b570      	push	{r4, r5, r6, lr}
 800652e:	000c      	movs	r4, r1
 8006530:	250e      	movs	r5, #14
 8006532:	5f49      	ldrsh	r1, [r1, r5]
 8006534:	f000 f918 	bl	8006768 <_read_r>
 8006538:	2800      	cmp	r0, #0
 800653a:	db03      	blt.n	8006544 <__sread+0x18>
 800653c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800653e:	181b      	adds	r3, r3, r0
 8006540:	6563      	str	r3, [r4, #84]	@ 0x54
 8006542:	bd70      	pop	{r4, r5, r6, pc}
 8006544:	89a3      	ldrh	r3, [r4, #12]
 8006546:	4a02      	ldr	r2, [pc, #8]	@ (8006550 <__sread+0x24>)
 8006548:	4013      	ands	r3, r2
 800654a:	81a3      	strh	r3, [r4, #12]
 800654c:	e7f9      	b.n	8006542 <__sread+0x16>
 800654e:	46c0      	nop			@ (mov r8, r8)
 8006550:	ffffefff 	.word	0xffffefff

08006554 <__swrite>:
 8006554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006556:	001f      	movs	r7, r3
 8006558:	898b      	ldrh	r3, [r1, #12]
 800655a:	0005      	movs	r5, r0
 800655c:	000c      	movs	r4, r1
 800655e:	0016      	movs	r6, r2
 8006560:	05db      	lsls	r3, r3, #23
 8006562:	d505      	bpl.n	8006570 <__swrite+0x1c>
 8006564:	230e      	movs	r3, #14
 8006566:	5ec9      	ldrsh	r1, [r1, r3]
 8006568:	2200      	movs	r2, #0
 800656a:	2302      	movs	r3, #2
 800656c:	f000 f8e8 	bl	8006740 <_lseek_r>
 8006570:	89a3      	ldrh	r3, [r4, #12]
 8006572:	4a05      	ldr	r2, [pc, #20]	@ (8006588 <__swrite+0x34>)
 8006574:	0028      	movs	r0, r5
 8006576:	4013      	ands	r3, r2
 8006578:	81a3      	strh	r3, [r4, #12]
 800657a:	0032      	movs	r2, r6
 800657c:	230e      	movs	r3, #14
 800657e:	5ee1      	ldrsh	r1, [r4, r3]
 8006580:	003b      	movs	r3, r7
 8006582:	f000 f905 	bl	8006790 <_write_r>
 8006586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006588:	ffffefff 	.word	0xffffefff

0800658c <__sseek>:
 800658c:	b570      	push	{r4, r5, r6, lr}
 800658e:	000c      	movs	r4, r1
 8006590:	250e      	movs	r5, #14
 8006592:	5f49      	ldrsh	r1, [r1, r5]
 8006594:	f000 f8d4 	bl	8006740 <_lseek_r>
 8006598:	89a3      	ldrh	r3, [r4, #12]
 800659a:	1c42      	adds	r2, r0, #1
 800659c:	d103      	bne.n	80065a6 <__sseek+0x1a>
 800659e:	4a05      	ldr	r2, [pc, #20]	@ (80065b4 <__sseek+0x28>)
 80065a0:	4013      	ands	r3, r2
 80065a2:	81a3      	strh	r3, [r4, #12]
 80065a4:	bd70      	pop	{r4, r5, r6, pc}
 80065a6:	2280      	movs	r2, #128	@ 0x80
 80065a8:	0152      	lsls	r2, r2, #5
 80065aa:	4313      	orrs	r3, r2
 80065ac:	81a3      	strh	r3, [r4, #12]
 80065ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80065b0:	e7f8      	b.n	80065a4 <__sseek+0x18>
 80065b2:	46c0      	nop			@ (mov r8, r8)
 80065b4:	ffffefff 	.word	0xffffefff

080065b8 <__sclose>:
 80065b8:	b510      	push	{r4, lr}
 80065ba:	230e      	movs	r3, #14
 80065bc:	5ec9      	ldrsh	r1, [r1, r3]
 80065be:	f000 f8ad 	bl	800671c <_close_r>
 80065c2:	bd10      	pop	{r4, pc}

080065c4 <__swbuf_r>:
 80065c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065c6:	0006      	movs	r6, r0
 80065c8:	000d      	movs	r5, r1
 80065ca:	0014      	movs	r4, r2
 80065cc:	2800      	cmp	r0, #0
 80065ce:	d004      	beq.n	80065da <__swbuf_r+0x16>
 80065d0:	6a03      	ldr	r3, [r0, #32]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d101      	bne.n	80065da <__swbuf_r+0x16>
 80065d6:	f7ff ff05 	bl	80063e4 <__sinit>
 80065da:	69a3      	ldr	r3, [r4, #24]
 80065dc:	60a3      	str	r3, [r4, #8]
 80065de:	89a3      	ldrh	r3, [r4, #12]
 80065e0:	071b      	lsls	r3, r3, #28
 80065e2:	d502      	bpl.n	80065ea <__swbuf_r+0x26>
 80065e4:	6923      	ldr	r3, [r4, #16]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d109      	bne.n	80065fe <__swbuf_r+0x3a>
 80065ea:	0021      	movs	r1, r4
 80065ec:	0030      	movs	r0, r6
 80065ee:	f000 f82b 	bl	8006648 <__swsetup_r>
 80065f2:	2800      	cmp	r0, #0
 80065f4:	d003      	beq.n	80065fe <__swbuf_r+0x3a>
 80065f6:	2501      	movs	r5, #1
 80065f8:	426d      	negs	r5, r5
 80065fa:	0028      	movs	r0, r5
 80065fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065fe:	6923      	ldr	r3, [r4, #16]
 8006600:	6820      	ldr	r0, [r4, #0]
 8006602:	b2ef      	uxtb	r7, r5
 8006604:	1ac0      	subs	r0, r0, r3
 8006606:	6963      	ldr	r3, [r4, #20]
 8006608:	b2ed      	uxtb	r5, r5
 800660a:	4283      	cmp	r3, r0
 800660c:	dc05      	bgt.n	800661a <__swbuf_r+0x56>
 800660e:	0021      	movs	r1, r4
 8006610:	0030      	movs	r0, r6
 8006612:	f001 fdeb 	bl	80081ec <_fflush_r>
 8006616:	2800      	cmp	r0, #0
 8006618:	d1ed      	bne.n	80065f6 <__swbuf_r+0x32>
 800661a:	68a3      	ldr	r3, [r4, #8]
 800661c:	3001      	adds	r0, #1
 800661e:	3b01      	subs	r3, #1
 8006620:	60a3      	str	r3, [r4, #8]
 8006622:	6823      	ldr	r3, [r4, #0]
 8006624:	1c5a      	adds	r2, r3, #1
 8006626:	6022      	str	r2, [r4, #0]
 8006628:	701f      	strb	r7, [r3, #0]
 800662a:	6963      	ldr	r3, [r4, #20]
 800662c:	4283      	cmp	r3, r0
 800662e:	d004      	beq.n	800663a <__swbuf_r+0x76>
 8006630:	89a3      	ldrh	r3, [r4, #12]
 8006632:	07db      	lsls	r3, r3, #31
 8006634:	d5e1      	bpl.n	80065fa <__swbuf_r+0x36>
 8006636:	2d0a      	cmp	r5, #10
 8006638:	d1df      	bne.n	80065fa <__swbuf_r+0x36>
 800663a:	0021      	movs	r1, r4
 800663c:	0030      	movs	r0, r6
 800663e:	f001 fdd5 	bl	80081ec <_fflush_r>
 8006642:	2800      	cmp	r0, #0
 8006644:	d0d9      	beq.n	80065fa <__swbuf_r+0x36>
 8006646:	e7d6      	b.n	80065f6 <__swbuf_r+0x32>

08006648 <__swsetup_r>:
 8006648:	4b2d      	ldr	r3, [pc, #180]	@ (8006700 <__swsetup_r+0xb8>)
 800664a:	b570      	push	{r4, r5, r6, lr}
 800664c:	0005      	movs	r5, r0
 800664e:	6818      	ldr	r0, [r3, #0]
 8006650:	000c      	movs	r4, r1
 8006652:	2800      	cmp	r0, #0
 8006654:	d004      	beq.n	8006660 <__swsetup_r+0x18>
 8006656:	6a03      	ldr	r3, [r0, #32]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d101      	bne.n	8006660 <__swsetup_r+0x18>
 800665c:	f7ff fec2 	bl	80063e4 <__sinit>
 8006660:	220c      	movs	r2, #12
 8006662:	5ea3      	ldrsh	r3, [r4, r2]
 8006664:	071a      	lsls	r2, r3, #28
 8006666:	d423      	bmi.n	80066b0 <__swsetup_r+0x68>
 8006668:	06da      	lsls	r2, r3, #27
 800666a:	d407      	bmi.n	800667c <__swsetup_r+0x34>
 800666c:	2209      	movs	r2, #9
 800666e:	602a      	str	r2, [r5, #0]
 8006670:	2240      	movs	r2, #64	@ 0x40
 8006672:	2001      	movs	r0, #1
 8006674:	4313      	orrs	r3, r2
 8006676:	81a3      	strh	r3, [r4, #12]
 8006678:	4240      	negs	r0, r0
 800667a:	e03a      	b.n	80066f2 <__swsetup_r+0xaa>
 800667c:	075b      	lsls	r3, r3, #29
 800667e:	d513      	bpl.n	80066a8 <__swsetup_r+0x60>
 8006680:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006682:	2900      	cmp	r1, #0
 8006684:	d008      	beq.n	8006698 <__swsetup_r+0x50>
 8006686:	0023      	movs	r3, r4
 8006688:	3344      	adds	r3, #68	@ 0x44
 800668a:	4299      	cmp	r1, r3
 800668c:	d002      	beq.n	8006694 <__swsetup_r+0x4c>
 800668e:	0028      	movs	r0, r5
 8006690:	f000 ff40 	bl	8007514 <_free_r>
 8006694:	2300      	movs	r3, #0
 8006696:	6363      	str	r3, [r4, #52]	@ 0x34
 8006698:	2224      	movs	r2, #36	@ 0x24
 800669a:	89a3      	ldrh	r3, [r4, #12]
 800669c:	4393      	bics	r3, r2
 800669e:	81a3      	strh	r3, [r4, #12]
 80066a0:	2300      	movs	r3, #0
 80066a2:	6063      	str	r3, [r4, #4]
 80066a4:	6923      	ldr	r3, [r4, #16]
 80066a6:	6023      	str	r3, [r4, #0]
 80066a8:	2308      	movs	r3, #8
 80066aa:	89a2      	ldrh	r2, [r4, #12]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	81a3      	strh	r3, [r4, #12]
 80066b0:	6923      	ldr	r3, [r4, #16]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d10b      	bne.n	80066ce <__swsetup_r+0x86>
 80066b6:	21a0      	movs	r1, #160	@ 0xa0
 80066b8:	2280      	movs	r2, #128	@ 0x80
 80066ba:	89a3      	ldrh	r3, [r4, #12]
 80066bc:	0089      	lsls	r1, r1, #2
 80066be:	0092      	lsls	r2, r2, #2
 80066c0:	400b      	ands	r3, r1
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d003      	beq.n	80066ce <__swsetup_r+0x86>
 80066c6:	0021      	movs	r1, r4
 80066c8:	0028      	movs	r0, r5
 80066ca:	f001 fde5 	bl	8008298 <__smakebuf_r>
 80066ce:	220c      	movs	r2, #12
 80066d0:	5ea3      	ldrsh	r3, [r4, r2]
 80066d2:	2101      	movs	r1, #1
 80066d4:	001a      	movs	r2, r3
 80066d6:	400a      	ands	r2, r1
 80066d8:	420b      	tst	r3, r1
 80066da:	d00b      	beq.n	80066f4 <__swsetup_r+0xac>
 80066dc:	2200      	movs	r2, #0
 80066de:	60a2      	str	r2, [r4, #8]
 80066e0:	6962      	ldr	r2, [r4, #20]
 80066e2:	4252      	negs	r2, r2
 80066e4:	61a2      	str	r2, [r4, #24]
 80066e6:	2000      	movs	r0, #0
 80066e8:	6922      	ldr	r2, [r4, #16]
 80066ea:	4282      	cmp	r2, r0
 80066ec:	d101      	bne.n	80066f2 <__swsetup_r+0xaa>
 80066ee:	061a      	lsls	r2, r3, #24
 80066f0:	d4be      	bmi.n	8006670 <__swsetup_r+0x28>
 80066f2:	bd70      	pop	{r4, r5, r6, pc}
 80066f4:	0799      	lsls	r1, r3, #30
 80066f6:	d400      	bmi.n	80066fa <__swsetup_r+0xb2>
 80066f8:	6962      	ldr	r2, [r4, #20]
 80066fa:	60a2      	str	r2, [r4, #8]
 80066fc:	e7f3      	b.n	80066e6 <__swsetup_r+0x9e>
 80066fe:	46c0      	nop			@ (mov r8, r8)
 8006700:	20000018 	.word	0x20000018

08006704 <memset>:
 8006704:	0003      	movs	r3, r0
 8006706:	1882      	adds	r2, r0, r2
 8006708:	4293      	cmp	r3, r2
 800670a:	d100      	bne.n	800670e <memset+0xa>
 800670c:	4770      	bx	lr
 800670e:	7019      	strb	r1, [r3, #0]
 8006710:	3301      	adds	r3, #1
 8006712:	e7f9      	b.n	8006708 <memset+0x4>

08006714 <_localeconv_r>:
 8006714:	4800      	ldr	r0, [pc, #0]	@ (8006718 <_localeconv_r+0x4>)
 8006716:	4770      	bx	lr
 8006718:	20000158 	.word	0x20000158

0800671c <_close_r>:
 800671c:	2300      	movs	r3, #0
 800671e:	b570      	push	{r4, r5, r6, lr}
 8006720:	4d06      	ldr	r5, [pc, #24]	@ (800673c <_close_r+0x20>)
 8006722:	0004      	movs	r4, r0
 8006724:	0008      	movs	r0, r1
 8006726:	602b      	str	r3, [r5, #0]
 8006728:	f7fc fcd7 	bl	80030da <_close>
 800672c:	1c43      	adds	r3, r0, #1
 800672e:	d103      	bne.n	8006738 <_close_r+0x1c>
 8006730:	682b      	ldr	r3, [r5, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d000      	beq.n	8006738 <_close_r+0x1c>
 8006736:	6023      	str	r3, [r4, #0]
 8006738:	bd70      	pop	{r4, r5, r6, pc}
 800673a:	46c0      	nop			@ (mov r8, r8)
 800673c:	200004b4 	.word	0x200004b4

08006740 <_lseek_r>:
 8006740:	b570      	push	{r4, r5, r6, lr}
 8006742:	0004      	movs	r4, r0
 8006744:	0008      	movs	r0, r1
 8006746:	0011      	movs	r1, r2
 8006748:	001a      	movs	r2, r3
 800674a:	2300      	movs	r3, #0
 800674c:	4d05      	ldr	r5, [pc, #20]	@ (8006764 <_lseek_r+0x24>)
 800674e:	602b      	str	r3, [r5, #0]
 8006750:	f7fc fce4 	bl	800311c <_lseek>
 8006754:	1c43      	adds	r3, r0, #1
 8006756:	d103      	bne.n	8006760 <_lseek_r+0x20>
 8006758:	682b      	ldr	r3, [r5, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d000      	beq.n	8006760 <_lseek_r+0x20>
 800675e:	6023      	str	r3, [r4, #0]
 8006760:	bd70      	pop	{r4, r5, r6, pc}
 8006762:	46c0      	nop			@ (mov r8, r8)
 8006764:	200004b4 	.word	0x200004b4

08006768 <_read_r>:
 8006768:	b570      	push	{r4, r5, r6, lr}
 800676a:	0004      	movs	r4, r0
 800676c:	0008      	movs	r0, r1
 800676e:	0011      	movs	r1, r2
 8006770:	001a      	movs	r2, r3
 8006772:	2300      	movs	r3, #0
 8006774:	4d05      	ldr	r5, [pc, #20]	@ (800678c <_read_r+0x24>)
 8006776:	602b      	str	r3, [r5, #0]
 8006778:	f7fc fc76 	bl	8003068 <_read>
 800677c:	1c43      	adds	r3, r0, #1
 800677e:	d103      	bne.n	8006788 <_read_r+0x20>
 8006780:	682b      	ldr	r3, [r5, #0]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d000      	beq.n	8006788 <_read_r+0x20>
 8006786:	6023      	str	r3, [r4, #0]
 8006788:	bd70      	pop	{r4, r5, r6, pc}
 800678a:	46c0      	nop			@ (mov r8, r8)
 800678c:	200004b4 	.word	0x200004b4

08006790 <_write_r>:
 8006790:	b570      	push	{r4, r5, r6, lr}
 8006792:	0004      	movs	r4, r0
 8006794:	0008      	movs	r0, r1
 8006796:	0011      	movs	r1, r2
 8006798:	001a      	movs	r2, r3
 800679a:	2300      	movs	r3, #0
 800679c:	4d05      	ldr	r5, [pc, #20]	@ (80067b4 <_write_r+0x24>)
 800679e:	602b      	str	r3, [r5, #0]
 80067a0:	f7fc fc7f 	bl	80030a2 <_write>
 80067a4:	1c43      	adds	r3, r0, #1
 80067a6:	d103      	bne.n	80067b0 <_write_r+0x20>
 80067a8:	682b      	ldr	r3, [r5, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d000      	beq.n	80067b0 <_write_r+0x20>
 80067ae:	6023      	str	r3, [r4, #0]
 80067b0:	bd70      	pop	{r4, r5, r6, pc}
 80067b2:	46c0      	nop			@ (mov r8, r8)
 80067b4:	200004b4 	.word	0x200004b4

080067b8 <__errno>:
 80067b8:	4b01      	ldr	r3, [pc, #4]	@ (80067c0 <__errno+0x8>)
 80067ba:	6818      	ldr	r0, [r3, #0]
 80067bc:	4770      	bx	lr
 80067be:	46c0      	nop			@ (mov r8, r8)
 80067c0:	20000018 	.word	0x20000018

080067c4 <__libc_init_array>:
 80067c4:	b570      	push	{r4, r5, r6, lr}
 80067c6:	2600      	movs	r6, #0
 80067c8:	4c0c      	ldr	r4, [pc, #48]	@ (80067fc <__libc_init_array+0x38>)
 80067ca:	4d0d      	ldr	r5, [pc, #52]	@ (8006800 <__libc_init_array+0x3c>)
 80067cc:	1b64      	subs	r4, r4, r5
 80067ce:	10a4      	asrs	r4, r4, #2
 80067d0:	42a6      	cmp	r6, r4
 80067d2:	d109      	bne.n	80067e8 <__libc_init_array+0x24>
 80067d4:	2600      	movs	r6, #0
 80067d6:	f001 feab 	bl	8008530 <_init>
 80067da:	4c0a      	ldr	r4, [pc, #40]	@ (8006804 <__libc_init_array+0x40>)
 80067dc:	4d0a      	ldr	r5, [pc, #40]	@ (8006808 <__libc_init_array+0x44>)
 80067de:	1b64      	subs	r4, r4, r5
 80067e0:	10a4      	asrs	r4, r4, #2
 80067e2:	42a6      	cmp	r6, r4
 80067e4:	d105      	bne.n	80067f2 <__libc_init_array+0x2e>
 80067e6:	bd70      	pop	{r4, r5, r6, pc}
 80067e8:	00b3      	lsls	r3, r6, #2
 80067ea:	58eb      	ldr	r3, [r5, r3]
 80067ec:	4798      	blx	r3
 80067ee:	3601      	adds	r6, #1
 80067f0:	e7ee      	b.n	80067d0 <__libc_init_array+0xc>
 80067f2:	00b3      	lsls	r3, r6, #2
 80067f4:	58eb      	ldr	r3, [r5, r3]
 80067f6:	4798      	blx	r3
 80067f8:	3601      	adds	r6, #1
 80067fa:	e7f2      	b.n	80067e2 <__libc_init_array+0x1e>
 80067fc:	080089d4 	.word	0x080089d4
 8006800:	080089d4 	.word	0x080089d4
 8006804:	080089d8 	.word	0x080089d8
 8006808:	080089d4 	.word	0x080089d4

0800680c <__retarget_lock_init_recursive>:
 800680c:	4770      	bx	lr

0800680e <__retarget_lock_acquire_recursive>:
 800680e:	4770      	bx	lr

08006810 <__retarget_lock_release_recursive>:
 8006810:	4770      	bx	lr

08006812 <memchr>:
 8006812:	b2c9      	uxtb	r1, r1
 8006814:	1882      	adds	r2, r0, r2
 8006816:	4290      	cmp	r0, r2
 8006818:	d101      	bne.n	800681e <memchr+0xc>
 800681a:	2000      	movs	r0, #0
 800681c:	4770      	bx	lr
 800681e:	7803      	ldrb	r3, [r0, #0]
 8006820:	428b      	cmp	r3, r1
 8006822:	d0fb      	beq.n	800681c <memchr+0xa>
 8006824:	3001      	adds	r0, #1
 8006826:	e7f6      	b.n	8006816 <memchr+0x4>

08006828 <quorem>:
 8006828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800682a:	6903      	ldr	r3, [r0, #16]
 800682c:	690c      	ldr	r4, [r1, #16]
 800682e:	b089      	sub	sp, #36	@ 0x24
 8006830:	9003      	str	r0, [sp, #12]
 8006832:	9106      	str	r1, [sp, #24]
 8006834:	2000      	movs	r0, #0
 8006836:	42a3      	cmp	r3, r4
 8006838:	db63      	blt.n	8006902 <quorem+0xda>
 800683a:	000b      	movs	r3, r1
 800683c:	3c01      	subs	r4, #1
 800683e:	3314      	adds	r3, #20
 8006840:	00a5      	lsls	r5, r4, #2
 8006842:	9304      	str	r3, [sp, #16]
 8006844:	195b      	adds	r3, r3, r5
 8006846:	9305      	str	r3, [sp, #20]
 8006848:	9b03      	ldr	r3, [sp, #12]
 800684a:	3314      	adds	r3, #20
 800684c:	9301      	str	r3, [sp, #4]
 800684e:	195d      	adds	r5, r3, r5
 8006850:	9b05      	ldr	r3, [sp, #20]
 8006852:	682f      	ldr	r7, [r5, #0]
 8006854:	681e      	ldr	r6, [r3, #0]
 8006856:	0038      	movs	r0, r7
 8006858:	3601      	adds	r6, #1
 800685a:	0031      	movs	r1, r6
 800685c:	f7f9 fc70 	bl	8000140 <__udivsi3>
 8006860:	9002      	str	r0, [sp, #8]
 8006862:	42b7      	cmp	r7, r6
 8006864:	d327      	bcc.n	80068b6 <quorem+0x8e>
 8006866:	9b04      	ldr	r3, [sp, #16]
 8006868:	2700      	movs	r7, #0
 800686a:	469c      	mov	ip, r3
 800686c:	9e01      	ldr	r6, [sp, #4]
 800686e:	9707      	str	r7, [sp, #28]
 8006870:	4662      	mov	r2, ip
 8006872:	ca08      	ldmia	r2!, {r3}
 8006874:	6830      	ldr	r0, [r6, #0]
 8006876:	4694      	mov	ip, r2
 8006878:	9a02      	ldr	r2, [sp, #8]
 800687a:	b299      	uxth	r1, r3
 800687c:	4351      	muls	r1, r2
 800687e:	0c1b      	lsrs	r3, r3, #16
 8006880:	4353      	muls	r3, r2
 8006882:	19c9      	adds	r1, r1, r7
 8006884:	0c0a      	lsrs	r2, r1, #16
 8006886:	189b      	adds	r3, r3, r2
 8006888:	b289      	uxth	r1, r1
 800688a:	b282      	uxth	r2, r0
 800688c:	1a52      	subs	r2, r2, r1
 800688e:	9907      	ldr	r1, [sp, #28]
 8006890:	0c1f      	lsrs	r7, r3, #16
 8006892:	1852      	adds	r2, r2, r1
 8006894:	0c00      	lsrs	r0, r0, #16
 8006896:	b29b      	uxth	r3, r3
 8006898:	1411      	asrs	r1, r2, #16
 800689a:	1ac3      	subs	r3, r0, r3
 800689c:	185b      	adds	r3, r3, r1
 800689e:	1419      	asrs	r1, r3, #16
 80068a0:	b292      	uxth	r2, r2
 80068a2:	041b      	lsls	r3, r3, #16
 80068a4:	431a      	orrs	r2, r3
 80068a6:	9b05      	ldr	r3, [sp, #20]
 80068a8:	9107      	str	r1, [sp, #28]
 80068aa:	c604      	stmia	r6!, {r2}
 80068ac:	4563      	cmp	r3, ip
 80068ae:	d2df      	bcs.n	8006870 <quorem+0x48>
 80068b0:	682b      	ldr	r3, [r5, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d02b      	beq.n	800690e <quorem+0xe6>
 80068b6:	9906      	ldr	r1, [sp, #24]
 80068b8:	9803      	ldr	r0, [sp, #12]
 80068ba:	f001 f9b7 	bl	8007c2c <__mcmp>
 80068be:	2800      	cmp	r0, #0
 80068c0:	db1e      	blt.n	8006900 <quorem+0xd8>
 80068c2:	2600      	movs	r6, #0
 80068c4:	9d01      	ldr	r5, [sp, #4]
 80068c6:	9904      	ldr	r1, [sp, #16]
 80068c8:	c901      	ldmia	r1!, {r0}
 80068ca:	682b      	ldr	r3, [r5, #0]
 80068cc:	b287      	uxth	r7, r0
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	1bd2      	subs	r2, r2, r7
 80068d2:	1992      	adds	r2, r2, r6
 80068d4:	0c00      	lsrs	r0, r0, #16
 80068d6:	0c1b      	lsrs	r3, r3, #16
 80068d8:	1a1b      	subs	r3, r3, r0
 80068da:	1410      	asrs	r0, r2, #16
 80068dc:	181b      	adds	r3, r3, r0
 80068de:	141e      	asrs	r6, r3, #16
 80068e0:	b292      	uxth	r2, r2
 80068e2:	041b      	lsls	r3, r3, #16
 80068e4:	431a      	orrs	r2, r3
 80068e6:	9b05      	ldr	r3, [sp, #20]
 80068e8:	c504      	stmia	r5!, {r2}
 80068ea:	428b      	cmp	r3, r1
 80068ec:	d2ec      	bcs.n	80068c8 <quorem+0xa0>
 80068ee:	9a01      	ldr	r2, [sp, #4]
 80068f0:	00a3      	lsls	r3, r4, #2
 80068f2:	18d3      	adds	r3, r2, r3
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	2a00      	cmp	r2, #0
 80068f8:	d014      	beq.n	8006924 <quorem+0xfc>
 80068fa:	9b02      	ldr	r3, [sp, #8]
 80068fc:	3301      	adds	r3, #1
 80068fe:	9302      	str	r3, [sp, #8]
 8006900:	9802      	ldr	r0, [sp, #8]
 8006902:	b009      	add	sp, #36	@ 0x24
 8006904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006906:	682b      	ldr	r3, [r5, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d104      	bne.n	8006916 <quorem+0xee>
 800690c:	3c01      	subs	r4, #1
 800690e:	9b01      	ldr	r3, [sp, #4]
 8006910:	3d04      	subs	r5, #4
 8006912:	42ab      	cmp	r3, r5
 8006914:	d3f7      	bcc.n	8006906 <quorem+0xde>
 8006916:	9b03      	ldr	r3, [sp, #12]
 8006918:	611c      	str	r4, [r3, #16]
 800691a:	e7cc      	b.n	80068b6 <quorem+0x8e>
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	2a00      	cmp	r2, #0
 8006920:	d104      	bne.n	800692c <quorem+0x104>
 8006922:	3c01      	subs	r4, #1
 8006924:	9a01      	ldr	r2, [sp, #4]
 8006926:	3b04      	subs	r3, #4
 8006928:	429a      	cmp	r2, r3
 800692a:	d3f7      	bcc.n	800691c <quorem+0xf4>
 800692c:	9b03      	ldr	r3, [sp, #12]
 800692e:	611c      	str	r4, [r3, #16]
 8006930:	e7e3      	b.n	80068fa <quorem+0xd2>
	...

08006934 <_dtoa_r>:
 8006934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006936:	0014      	movs	r4, r2
 8006938:	001d      	movs	r5, r3
 800693a:	69c6      	ldr	r6, [r0, #28]
 800693c:	b09d      	sub	sp, #116	@ 0x74
 800693e:	940a      	str	r4, [sp, #40]	@ 0x28
 8006940:	950b      	str	r5, [sp, #44]	@ 0x2c
 8006942:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8006944:	9003      	str	r0, [sp, #12]
 8006946:	2e00      	cmp	r6, #0
 8006948:	d10f      	bne.n	800696a <_dtoa_r+0x36>
 800694a:	2010      	movs	r0, #16
 800694c:	f000 fe2c 	bl	80075a8 <malloc>
 8006950:	9b03      	ldr	r3, [sp, #12]
 8006952:	1e02      	subs	r2, r0, #0
 8006954:	61d8      	str	r0, [r3, #28]
 8006956:	d104      	bne.n	8006962 <_dtoa_r+0x2e>
 8006958:	21ef      	movs	r1, #239	@ 0xef
 800695a:	4bc7      	ldr	r3, [pc, #796]	@ (8006c78 <_dtoa_r+0x344>)
 800695c:	48c7      	ldr	r0, [pc, #796]	@ (8006c7c <_dtoa_r+0x348>)
 800695e:	f001 fd1d 	bl	800839c <__assert_func>
 8006962:	6046      	str	r6, [r0, #4]
 8006964:	6086      	str	r6, [r0, #8]
 8006966:	6006      	str	r6, [r0, #0]
 8006968:	60c6      	str	r6, [r0, #12]
 800696a:	9b03      	ldr	r3, [sp, #12]
 800696c:	69db      	ldr	r3, [r3, #28]
 800696e:	6819      	ldr	r1, [r3, #0]
 8006970:	2900      	cmp	r1, #0
 8006972:	d00b      	beq.n	800698c <_dtoa_r+0x58>
 8006974:	685a      	ldr	r2, [r3, #4]
 8006976:	2301      	movs	r3, #1
 8006978:	4093      	lsls	r3, r2
 800697a:	604a      	str	r2, [r1, #4]
 800697c:	608b      	str	r3, [r1, #8]
 800697e:	9803      	ldr	r0, [sp, #12]
 8006980:	f000 ff12 	bl	80077a8 <_Bfree>
 8006984:	2200      	movs	r2, #0
 8006986:	9b03      	ldr	r3, [sp, #12]
 8006988:	69db      	ldr	r3, [r3, #28]
 800698a:	601a      	str	r2, [r3, #0]
 800698c:	2d00      	cmp	r5, #0
 800698e:	da1e      	bge.n	80069ce <_dtoa_r+0x9a>
 8006990:	2301      	movs	r3, #1
 8006992:	603b      	str	r3, [r7, #0]
 8006994:	006b      	lsls	r3, r5, #1
 8006996:	085b      	lsrs	r3, r3, #1
 8006998:	930b      	str	r3, [sp, #44]	@ 0x2c
 800699a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800699c:	4bb8      	ldr	r3, [pc, #736]	@ (8006c80 <_dtoa_r+0x34c>)
 800699e:	4ab8      	ldr	r2, [pc, #736]	@ (8006c80 <_dtoa_r+0x34c>)
 80069a0:	403b      	ands	r3, r7
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d116      	bne.n	80069d4 <_dtoa_r+0xa0>
 80069a6:	4bb7      	ldr	r3, [pc, #732]	@ (8006c84 <_dtoa_r+0x350>)
 80069a8:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80069aa:	6013      	str	r3, [r2, #0]
 80069ac:	033b      	lsls	r3, r7, #12
 80069ae:	0b1b      	lsrs	r3, r3, #12
 80069b0:	4323      	orrs	r3, r4
 80069b2:	d101      	bne.n	80069b8 <_dtoa_r+0x84>
 80069b4:	f000 fd80 	bl	80074b8 <_dtoa_r+0xb84>
 80069b8:	4bb3      	ldr	r3, [pc, #716]	@ (8006c88 <_dtoa_r+0x354>)
 80069ba:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80069bc:	9308      	str	r3, [sp, #32]
 80069be:	2a00      	cmp	r2, #0
 80069c0:	d002      	beq.n	80069c8 <_dtoa_r+0x94>
 80069c2:	4bb2      	ldr	r3, [pc, #712]	@ (8006c8c <_dtoa_r+0x358>)
 80069c4:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80069c6:	6013      	str	r3, [r2, #0]
 80069c8:	9808      	ldr	r0, [sp, #32]
 80069ca:	b01d      	add	sp, #116	@ 0x74
 80069cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069ce:	2300      	movs	r3, #0
 80069d0:	603b      	str	r3, [r7, #0]
 80069d2:	e7e2      	b.n	800699a <_dtoa_r+0x66>
 80069d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80069d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80069d8:	9212      	str	r2, [sp, #72]	@ 0x48
 80069da:	9313      	str	r3, [sp, #76]	@ 0x4c
 80069dc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80069de:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80069e0:	2200      	movs	r2, #0
 80069e2:	2300      	movs	r3, #0
 80069e4:	f7f9 fd32 	bl	800044c <__aeabi_dcmpeq>
 80069e8:	1e06      	subs	r6, r0, #0
 80069ea:	d00b      	beq.n	8006a04 <_dtoa_r+0xd0>
 80069ec:	2301      	movs	r3, #1
 80069ee:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80069f0:	6013      	str	r3, [r2, #0]
 80069f2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d002      	beq.n	80069fe <_dtoa_r+0xca>
 80069f8:	4ba5      	ldr	r3, [pc, #660]	@ (8006c90 <_dtoa_r+0x35c>)
 80069fa:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80069fc:	6013      	str	r3, [r2, #0]
 80069fe:	4ba5      	ldr	r3, [pc, #660]	@ (8006c94 <_dtoa_r+0x360>)
 8006a00:	9308      	str	r3, [sp, #32]
 8006a02:	e7e1      	b.n	80069c8 <_dtoa_r+0x94>
 8006a04:	ab1a      	add	r3, sp, #104	@ 0x68
 8006a06:	9301      	str	r3, [sp, #4]
 8006a08:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006a0a:	9300      	str	r3, [sp, #0]
 8006a0c:	9803      	ldr	r0, [sp, #12]
 8006a0e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006a10:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006a12:	f001 f9c1 	bl	8007d98 <__d2b>
 8006a16:	007a      	lsls	r2, r7, #1
 8006a18:	9005      	str	r0, [sp, #20]
 8006a1a:	0d52      	lsrs	r2, r2, #21
 8006a1c:	d100      	bne.n	8006a20 <_dtoa_r+0xec>
 8006a1e:	e07b      	b.n	8006b18 <_dtoa_r+0x1e4>
 8006a20:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006a22:	9618      	str	r6, [sp, #96]	@ 0x60
 8006a24:	0319      	lsls	r1, r3, #12
 8006a26:	4b9c      	ldr	r3, [pc, #624]	@ (8006c98 <_dtoa_r+0x364>)
 8006a28:	0b09      	lsrs	r1, r1, #12
 8006a2a:	430b      	orrs	r3, r1
 8006a2c:	499b      	ldr	r1, [pc, #620]	@ (8006c9c <_dtoa_r+0x368>)
 8006a2e:	1857      	adds	r7, r2, r1
 8006a30:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006a32:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006a34:	0019      	movs	r1, r3
 8006a36:	2200      	movs	r2, #0
 8006a38:	4b99      	ldr	r3, [pc, #612]	@ (8006ca0 <_dtoa_r+0x36c>)
 8006a3a:	f7fb fadb 	bl	8001ff4 <__aeabi_dsub>
 8006a3e:	4a99      	ldr	r2, [pc, #612]	@ (8006ca4 <_dtoa_r+0x370>)
 8006a40:	4b99      	ldr	r3, [pc, #612]	@ (8006ca8 <_dtoa_r+0x374>)
 8006a42:	f7fa fff1 	bl	8001a28 <__aeabi_dmul>
 8006a46:	4a99      	ldr	r2, [pc, #612]	@ (8006cac <_dtoa_r+0x378>)
 8006a48:	4b99      	ldr	r3, [pc, #612]	@ (8006cb0 <_dtoa_r+0x37c>)
 8006a4a:	f7f9 ffed 	bl	8000a28 <__aeabi_dadd>
 8006a4e:	0004      	movs	r4, r0
 8006a50:	0038      	movs	r0, r7
 8006a52:	000d      	movs	r5, r1
 8006a54:	f7fb ff36 	bl	80028c4 <__aeabi_i2d>
 8006a58:	4a96      	ldr	r2, [pc, #600]	@ (8006cb4 <_dtoa_r+0x380>)
 8006a5a:	4b97      	ldr	r3, [pc, #604]	@ (8006cb8 <_dtoa_r+0x384>)
 8006a5c:	f7fa ffe4 	bl	8001a28 <__aeabi_dmul>
 8006a60:	0002      	movs	r2, r0
 8006a62:	000b      	movs	r3, r1
 8006a64:	0020      	movs	r0, r4
 8006a66:	0029      	movs	r1, r5
 8006a68:	f7f9 ffde 	bl	8000a28 <__aeabi_dadd>
 8006a6c:	0004      	movs	r4, r0
 8006a6e:	000d      	movs	r5, r1
 8006a70:	f7fb feec 	bl	800284c <__aeabi_d2iz>
 8006a74:	2200      	movs	r2, #0
 8006a76:	9004      	str	r0, [sp, #16]
 8006a78:	2300      	movs	r3, #0
 8006a7a:	0020      	movs	r0, r4
 8006a7c:	0029      	movs	r1, r5
 8006a7e:	f7f9 fceb 	bl	8000458 <__aeabi_dcmplt>
 8006a82:	2800      	cmp	r0, #0
 8006a84:	d00b      	beq.n	8006a9e <_dtoa_r+0x16a>
 8006a86:	9804      	ldr	r0, [sp, #16]
 8006a88:	f7fb ff1c 	bl	80028c4 <__aeabi_i2d>
 8006a8c:	002b      	movs	r3, r5
 8006a8e:	0022      	movs	r2, r4
 8006a90:	f7f9 fcdc 	bl	800044c <__aeabi_dcmpeq>
 8006a94:	4243      	negs	r3, r0
 8006a96:	4158      	adcs	r0, r3
 8006a98:	9b04      	ldr	r3, [sp, #16]
 8006a9a:	1a1b      	subs	r3, r3, r0
 8006a9c:	9304      	str	r3, [sp, #16]
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	9315      	str	r3, [sp, #84]	@ 0x54
 8006aa2:	9b04      	ldr	r3, [sp, #16]
 8006aa4:	2b16      	cmp	r3, #22
 8006aa6:	d810      	bhi.n	8006aca <_dtoa_r+0x196>
 8006aa8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006aaa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006aac:	9a04      	ldr	r2, [sp, #16]
 8006aae:	4b83      	ldr	r3, [pc, #524]	@ (8006cbc <_dtoa_r+0x388>)
 8006ab0:	00d2      	lsls	r2, r2, #3
 8006ab2:	189b      	adds	r3, r3, r2
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	f7f9 fcce 	bl	8000458 <__aeabi_dcmplt>
 8006abc:	2800      	cmp	r0, #0
 8006abe:	d047      	beq.n	8006b50 <_dtoa_r+0x21c>
 8006ac0:	9b04      	ldr	r3, [sp, #16]
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	9304      	str	r3, [sp, #16]
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	9315      	str	r3, [sp, #84]	@ 0x54
 8006aca:	2200      	movs	r2, #0
 8006acc:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8006ace:	9206      	str	r2, [sp, #24]
 8006ad0:	1bdb      	subs	r3, r3, r7
 8006ad2:	1e5a      	subs	r2, r3, #1
 8006ad4:	d53e      	bpl.n	8006b54 <_dtoa_r+0x220>
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	9306      	str	r3, [sp, #24]
 8006adc:	2300      	movs	r3, #0
 8006ade:	930d      	str	r3, [sp, #52]	@ 0x34
 8006ae0:	9b04      	ldr	r3, [sp, #16]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	db38      	blt.n	8006b58 <_dtoa_r+0x224>
 8006ae6:	9a04      	ldr	r2, [sp, #16]
 8006ae8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006aea:	4694      	mov	ip, r2
 8006aec:	4463      	add	r3, ip
 8006aee:	930d      	str	r3, [sp, #52]	@ 0x34
 8006af0:	2300      	movs	r3, #0
 8006af2:	9214      	str	r2, [sp, #80]	@ 0x50
 8006af4:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006af6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006af8:	2401      	movs	r4, #1
 8006afa:	2b09      	cmp	r3, #9
 8006afc:	d862      	bhi.n	8006bc4 <_dtoa_r+0x290>
 8006afe:	2b05      	cmp	r3, #5
 8006b00:	dd02      	ble.n	8006b08 <_dtoa_r+0x1d4>
 8006b02:	2400      	movs	r4, #0
 8006b04:	3b04      	subs	r3, #4
 8006b06:	9322      	str	r3, [sp, #136]	@ 0x88
 8006b08:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006b0a:	1e98      	subs	r0, r3, #2
 8006b0c:	2803      	cmp	r0, #3
 8006b0e:	d863      	bhi.n	8006bd8 <_dtoa_r+0x2a4>
 8006b10:	f7f9 fb02 	bl	8000118 <__gnu_thumb1_case_uqi>
 8006b14:	2b385654 	.word	0x2b385654
 8006b18:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8006b1a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8006b1c:	18f6      	adds	r6, r6, r3
 8006b1e:	4b68      	ldr	r3, [pc, #416]	@ (8006cc0 <_dtoa_r+0x38c>)
 8006b20:	18f2      	adds	r2, r6, r3
 8006b22:	2a20      	cmp	r2, #32
 8006b24:	dd0f      	ble.n	8006b46 <_dtoa_r+0x212>
 8006b26:	2340      	movs	r3, #64	@ 0x40
 8006b28:	1a9b      	subs	r3, r3, r2
 8006b2a:	409f      	lsls	r7, r3
 8006b2c:	4b65      	ldr	r3, [pc, #404]	@ (8006cc4 <_dtoa_r+0x390>)
 8006b2e:	0038      	movs	r0, r7
 8006b30:	18f3      	adds	r3, r6, r3
 8006b32:	40dc      	lsrs	r4, r3
 8006b34:	4320      	orrs	r0, r4
 8006b36:	f7fb fef3 	bl	8002920 <__aeabi_ui2d>
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	4b62      	ldr	r3, [pc, #392]	@ (8006cc8 <_dtoa_r+0x394>)
 8006b3e:	1e77      	subs	r7, r6, #1
 8006b40:	18cb      	adds	r3, r1, r3
 8006b42:	9218      	str	r2, [sp, #96]	@ 0x60
 8006b44:	e776      	b.n	8006a34 <_dtoa_r+0x100>
 8006b46:	2320      	movs	r3, #32
 8006b48:	0020      	movs	r0, r4
 8006b4a:	1a9b      	subs	r3, r3, r2
 8006b4c:	4098      	lsls	r0, r3
 8006b4e:	e7f2      	b.n	8006b36 <_dtoa_r+0x202>
 8006b50:	9015      	str	r0, [sp, #84]	@ 0x54
 8006b52:	e7ba      	b.n	8006aca <_dtoa_r+0x196>
 8006b54:	920d      	str	r2, [sp, #52]	@ 0x34
 8006b56:	e7c3      	b.n	8006ae0 <_dtoa_r+0x1ac>
 8006b58:	9b06      	ldr	r3, [sp, #24]
 8006b5a:	9a04      	ldr	r2, [sp, #16]
 8006b5c:	1a9b      	subs	r3, r3, r2
 8006b5e:	9306      	str	r3, [sp, #24]
 8006b60:	4253      	negs	r3, r2
 8006b62:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006b64:	2300      	movs	r3, #0
 8006b66:	9314      	str	r3, [sp, #80]	@ 0x50
 8006b68:	e7c5      	b.n	8006af6 <_dtoa_r+0x1c2>
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006b6e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006b70:	4694      	mov	ip, r2
 8006b72:	9b04      	ldr	r3, [sp, #16]
 8006b74:	4463      	add	r3, ip
 8006b76:	930e      	str	r3, [sp, #56]	@ 0x38
 8006b78:	3301      	adds	r3, #1
 8006b7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	dc08      	bgt.n	8006b92 <_dtoa_r+0x25e>
 8006b80:	2301      	movs	r3, #1
 8006b82:	e006      	b.n	8006b92 <_dtoa_r+0x25e>
 8006b84:	2301      	movs	r3, #1
 8006b86:	9310      	str	r3, [sp, #64]	@ 0x40
 8006b88:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	dd28      	ble.n	8006be0 <_dtoa_r+0x2ac>
 8006b8e:	930e      	str	r3, [sp, #56]	@ 0x38
 8006b90:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b92:	9a03      	ldr	r2, [sp, #12]
 8006b94:	2100      	movs	r1, #0
 8006b96:	69d0      	ldr	r0, [r2, #28]
 8006b98:	2204      	movs	r2, #4
 8006b9a:	0015      	movs	r5, r2
 8006b9c:	3514      	adds	r5, #20
 8006b9e:	429d      	cmp	r5, r3
 8006ba0:	d923      	bls.n	8006bea <_dtoa_r+0x2b6>
 8006ba2:	6041      	str	r1, [r0, #4]
 8006ba4:	9803      	ldr	r0, [sp, #12]
 8006ba6:	f000 fdbb 	bl	8007720 <_Balloc>
 8006baa:	9008      	str	r0, [sp, #32]
 8006bac:	2800      	cmp	r0, #0
 8006bae:	d11f      	bne.n	8006bf0 <_dtoa_r+0x2bc>
 8006bb0:	21b0      	movs	r1, #176	@ 0xb0
 8006bb2:	4b46      	ldr	r3, [pc, #280]	@ (8006ccc <_dtoa_r+0x398>)
 8006bb4:	4831      	ldr	r0, [pc, #196]	@ (8006c7c <_dtoa_r+0x348>)
 8006bb6:	9a08      	ldr	r2, [sp, #32]
 8006bb8:	31ff      	adds	r1, #255	@ 0xff
 8006bba:	e6d0      	b.n	800695e <_dtoa_r+0x2a>
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	e7e2      	b.n	8006b86 <_dtoa_r+0x252>
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	e7d3      	b.n	8006b6c <_dtoa_r+0x238>
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	9410      	str	r4, [sp, #64]	@ 0x40
 8006bc8:	9322      	str	r3, [sp, #136]	@ 0x88
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	2200      	movs	r2, #0
 8006bce:	930e      	str	r3, [sp, #56]	@ 0x38
 8006bd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bd2:	3313      	adds	r3, #19
 8006bd4:	9223      	str	r2, [sp, #140]	@ 0x8c
 8006bd6:	e7dc      	b.n	8006b92 <_dtoa_r+0x25e>
 8006bd8:	2301      	movs	r3, #1
 8006bda:	9310      	str	r3, [sp, #64]	@ 0x40
 8006bdc:	3b02      	subs	r3, #2
 8006bde:	e7f5      	b.n	8006bcc <_dtoa_r+0x298>
 8006be0:	2301      	movs	r3, #1
 8006be2:	001a      	movs	r2, r3
 8006be4:	930e      	str	r3, [sp, #56]	@ 0x38
 8006be6:	9309      	str	r3, [sp, #36]	@ 0x24
 8006be8:	e7f4      	b.n	8006bd4 <_dtoa_r+0x2a0>
 8006bea:	3101      	adds	r1, #1
 8006bec:	0052      	lsls	r2, r2, #1
 8006bee:	e7d4      	b.n	8006b9a <_dtoa_r+0x266>
 8006bf0:	9b03      	ldr	r3, [sp, #12]
 8006bf2:	9a08      	ldr	r2, [sp, #32]
 8006bf4:	69db      	ldr	r3, [r3, #28]
 8006bf6:	601a      	str	r2, [r3, #0]
 8006bf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bfa:	2b0e      	cmp	r3, #14
 8006bfc:	d900      	bls.n	8006c00 <_dtoa_r+0x2cc>
 8006bfe:	e0d6      	b.n	8006dae <_dtoa_r+0x47a>
 8006c00:	2c00      	cmp	r4, #0
 8006c02:	d100      	bne.n	8006c06 <_dtoa_r+0x2d2>
 8006c04:	e0d3      	b.n	8006dae <_dtoa_r+0x47a>
 8006c06:	9b04      	ldr	r3, [sp, #16]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	dd63      	ble.n	8006cd4 <_dtoa_r+0x3a0>
 8006c0c:	210f      	movs	r1, #15
 8006c0e:	9a04      	ldr	r2, [sp, #16]
 8006c10:	4b2a      	ldr	r3, [pc, #168]	@ (8006cbc <_dtoa_r+0x388>)
 8006c12:	400a      	ands	r2, r1
 8006c14:	00d2      	lsls	r2, r2, #3
 8006c16:	189b      	adds	r3, r3, r2
 8006c18:	681e      	ldr	r6, [r3, #0]
 8006c1a:	685f      	ldr	r7, [r3, #4]
 8006c1c:	9b04      	ldr	r3, [sp, #16]
 8006c1e:	2402      	movs	r4, #2
 8006c20:	111d      	asrs	r5, r3, #4
 8006c22:	05db      	lsls	r3, r3, #23
 8006c24:	d50a      	bpl.n	8006c3c <_dtoa_r+0x308>
 8006c26:	4b2a      	ldr	r3, [pc, #168]	@ (8006cd0 <_dtoa_r+0x39c>)
 8006c28:	400d      	ands	r5, r1
 8006c2a:	6a1a      	ldr	r2, [r3, #32]
 8006c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c2e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006c30:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006c32:	f7fa fabf 	bl	80011b4 <__aeabi_ddiv>
 8006c36:	900a      	str	r0, [sp, #40]	@ 0x28
 8006c38:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006c3a:	3401      	adds	r4, #1
 8006c3c:	4b24      	ldr	r3, [pc, #144]	@ (8006cd0 <_dtoa_r+0x39c>)
 8006c3e:	930c      	str	r3, [sp, #48]	@ 0x30
 8006c40:	2d00      	cmp	r5, #0
 8006c42:	d108      	bne.n	8006c56 <_dtoa_r+0x322>
 8006c44:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006c46:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006c48:	0032      	movs	r2, r6
 8006c4a:	003b      	movs	r3, r7
 8006c4c:	f7fa fab2 	bl	80011b4 <__aeabi_ddiv>
 8006c50:	900a      	str	r0, [sp, #40]	@ 0x28
 8006c52:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006c54:	e059      	b.n	8006d0a <_dtoa_r+0x3d6>
 8006c56:	2301      	movs	r3, #1
 8006c58:	421d      	tst	r5, r3
 8006c5a:	d009      	beq.n	8006c70 <_dtoa_r+0x33c>
 8006c5c:	18e4      	adds	r4, r4, r3
 8006c5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006c60:	0030      	movs	r0, r6
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	0039      	movs	r1, r7
 8006c68:	f7fa fede 	bl	8001a28 <__aeabi_dmul>
 8006c6c:	0006      	movs	r6, r0
 8006c6e:	000f      	movs	r7, r1
 8006c70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006c72:	106d      	asrs	r5, r5, #1
 8006c74:	3308      	adds	r3, #8
 8006c76:	e7e2      	b.n	8006c3e <_dtoa_r+0x30a>
 8006c78:	0800869d 	.word	0x0800869d
 8006c7c:	080086b4 	.word	0x080086b4
 8006c80:	7ff00000 	.word	0x7ff00000
 8006c84:	0000270f 	.word	0x0000270f
 8006c88:	08008699 	.word	0x08008699
 8006c8c:	0800869c 	.word	0x0800869c
 8006c90:	0800866d 	.word	0x0800866d
 8006c94:	0800866c 	.word	0x0800866c
 8006c98:	3ff00000 	.word	0x3ff00000
 8006c9c:	fffffc01 	.word	0xfffffc01
 8006ca0:	3ff80000 	.word	0x3ff80000
 8006ca4:	636f4361 	.word	0x636f4361
 8006ca8:	3fd287a7 	.word	0x3fd287a7
 8006cac:	8b60c8b3 	.word	0x8b60c8b3
 8006cb0:	3fc68a28 	.word	0x3fc68a28
 8006cb4:	509f79fb 	.word	0x509f79fb
 8006cb8:	3fd34413 	.word	0x3fd34413
 8006cbc:	08008808 	.word	0x08008808
 8006cc0:	00000432 	.word	0x00000432
 8006cc4:	00000412 	.word	0x00000412
 8006cc8:	fe100000 	.word	0xfe100000
 8006ccc:	0800870c 	.word	0x0800870c
 8006cd0:	080087e0 	.word	0x080087e0
 8006cd4:	9b04      	ldr	r3, [sp, #16]
 8006cd6:	2402      	movs	r4, #2
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d016      	beq.n	8006d0a <_dtoa_r+0x3d6>
 8006cdc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006cde:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006ce0:	220f      	movs	r2, #15
 8006ce2:	425d      	negs	r5, r3
 8006ce4:	402a      	ands	r2, r5
 8006ce6:	4bd5      	ldr	r3, [pc, #852]	@ (800703c <_dtoa_r+0x708>)
 8006ce8:	00d2      	lsls	r2, r2, #3
 8006cea:	189b      	adds	r3, r3, r2
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	f7fa fe9a 	bl	8001a28 <__aeabi_dmul>
 8006cf4:	2701      	movs	r7, #1
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	900a      	str	r0, [sp, #40]	@ 0x28
 8006cfa:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006cfc:	4ed0      	ldr	r6, [pc, #832]	@ (8007040 <_dtoa_r+0x70c>)
 8006cfe:	112d      	asrs	r5, r5, #4
 8006d00:	2d00      	cmp	r5, #0
 8006d02:	d000      	beq.n	8006d06 <_dtoa_r+0x3d2>
 8006d04:	e095      	b.n	8006e32 <_dtoa_r+0x4fe>
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d1a2      	bne.n	8006c50 <_dtoa_r+0x31c>
 8006d0a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006d0c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006d0e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d100      	bne.n	8006d16 <_dtoa_r+0x3e2>
 8006d14:	e098      	b.n	8006e48 <_dtoa_r+0x514>
 8006d16:	2200      	movs	r2, #0
 8006d18:	0030      	movs	r0, r6
 8006d1a:	0039      	movs	r1, r7
 8006d1c:	4bc9      	ldr	r3, [pc, #804]	@ (8007044 <_dtoa_r+0x710>)
 8006d1e:	f7f9 fb9b 	bl	8000458 <__aeabi_dcmplt>
 8006d22:	2800      	cmp	r0, #0
 8006d24:	d100      	bne.n	8006d28 <_dtoa_r+0x3f4>
 8006d26:	e08f      	b.n	8006e48 <_dtoa_r+0x514>
 8006d28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d100      	bne.n	8006d30 <_dtoa_r+0x3fc>
 8006d2e:	e08b      	b.n	8006e48 <_dtoa_r+0x514>
 8006d30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	dd37      	ble.n	8006da6 <_dtoa_r+0x472>
 8006d36:	9b04      	ldr	r3, [sp, #16]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	930c      	str	r3, [sp, #48]	@ 0x30
 8006d3e:	0030      	movs	r0, r6
 8006d40:	4bc1      	ldr	r3, [pc, #772]	@ (8007048 <_dtoa_r+0x714>)
 8006d42:	0039      	movs	r1, r7
 8006d44:	f7fa fe70 	bl	8001a28 <__aeabi_dmul>
 8006d48:	900a      	str	r0, [sp, #40]	@ 0x28
 8006d4a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006d4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d4e:	3401      	adds	r4, #1
 8006d50:	0020      	movs	r0, r4
 8006d52:	9311      	str	r3, [sp, #68]	@ 0x44
 8006d54:	f7fb fdb6 	bl	80028c4 <__aeabi_i2d>
 8006d58:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d5c:	f7fa fe64 	bl	8001a28 <__aeabi_dmul>
 8006d60:	4bba      	ldr	r3, [pc, #744]	@ (800704c <_dtoa_r+0x718>)
 8006d62:	2200      	movs	r2, #0
 8006d64:	f7f9 fe60 	bl	8000a28 <__aeabi_dadd>
 8006d68:	4bb9      	ldr	r3, [pc, #740]	@ (8007050 <_dtoa_r+0x71c>)
 8006d6a:	0006      	movs	r6, r0
 8006d6c:	18cf      	adds	r7, r1, r3
 8006d6e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d16d      	bne.n	8006e50 <_dtoa_r+0x51c>
 8006d74:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006d76:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006d78:	2200      	movs	r2, #0
 8006d7a:	4bb6      	ldr	r3, [pc, #728]	@ (8007054 <_dtoa_r+0x720>)
 8006d7c:	f7fb f93a 	bl	8001ff4 <__aeabi_dsub>
 8006d80:	0032      	movs	r2, r6
 8006d82:	003b      	movs	r3, r7
 8006d84:	0004      	movs	r4, r0
 8006d86:	000d      	movs	r5, r1
 8006d88:	f7f9 fb7a 	bl	8000480 <__aeabi_dcmpgt>
 8006d8c:	2800      	cmp	r0, #0
 8006d8e:	d000      	beq.n	8006d92 <_dtoa_r+0x45e>
 8006d90:	e2b6      	b.n	8007300 <_dtoa_r+0x9cc>
 8006d92:	2180      	movs	r1, #128	@ 0x80
 8006d94:	0609      	lsls	r1, r1, #24
 8006d96:	187b      	adds	r3, r7, r1
 8006d98:	0032      	movs	r2, r6
 8006d9a:	0020      	movs	r0, r4
 8006d9c:	0029      	movs	r1, r5
 8006d9e:	f7f9 fb5b 	bl	8000458 <__aeabi_dcmplt>
 8006da2:	2800      	cmp	r0, #0
 8006da4:	d128      	bne.n	8006df8 <_dtoa_r+0x4c4>
 8006da6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006da8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8006daa:	930a      	str	r3, [sp, #40]	@ 0x28
 8006dac:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006dae:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	da00      	bge.n	8006db6 <_dtoa_r+0x482>
 8006db4:	e174      	b.n	80070a0 <_dtoa_r+0x76c>
 8006db6:	9a04      	ldr	r2, [sp, #16]
 8006db8:	2a0e      	cmp	r2, #14
 8006dba:	dd00      	ble.n	8006dbe <_dtoa_r+0x48a>
 8006dbc:	e170      	b.n	80070a0 <_dtoa_r+0x76c>
 8006dbe:	4b9f      	ldr	r3, [pc, #636]	@ (800703c <_dtoa_r+0x708>)
 8006dc0:	00d2      	lsls	r2, r2, #3
 8006dc2:	189b      	adds	r3, r3, r2
 8006dc4:	685c      	ldr	r4, [r3, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	9306      	str	r3, [sp, #24]
 8006dca:	9407      	str	r4, [sp, #28]
 8006dcc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	db00      	blt.n	8006dd4 <_dtoa_r+0x4a0>
 8006dd2:	e0e7      	b.n	8006fa4 <_dtoa_r+0x670>
 8006dd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	dd00      	ble.n	8006ddc <_dtoa_r+0x4a8>
 8006dda:	e0e3      	b.n	8006fa4 <_dtoa_r+0x670>
 8006ddc:	d10c      	bne.n	8006df8 <_dtoa_r+0x4c4>
 8006dde:	9806      	ldr	r0, [sp, #24]
 8006de0:	9907      	ldr	r1, [sp, #28]
 8006de2:	2200      	movs	r2, #0
 8006de4:	4b9b      	ldr	r3, [pc, #620]	@ (8007054 <_dtoa_r+0x720>)
 8006de6:	f7fa fe1f 	bl	8001a28 <__aeabi_dmul>
 8006dea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006dec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006dee:	f7f9 fb51 	bl	8000494 <__aeabi_dcmpge>
 8006df2:	2800      	cmp	r0, #0
 8006df4:	d100      	bne.n	8006df8 <_dtoa_r+0x4c4>
 8006df6:	e286      	b.n	8007306 <_dtoa_r+0x9d2>
 8006df8:	2600      	movs	r6, #0
 8006dfa:	0037      	movs	r7, r6
 8006dfc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006dfe:	9c08      	ldr	r4, [sp, #32]
 8006e00:	43db      	mvns	r3, r3
 8006e02:	930c      	str	r3, [sp, #48]	@ 0x30
 8006e04:	9704      	str	r7, [sp, #16]
 8006e06:	2700      	movs	r7, #0
 8006e08:	0031      	movs	r1, r6
 8006e0a:	9803      	ldr	r0, [sp, #12]
 8006e0c:	f000 fccc 	bl	80077a8 <_Bfree>
 8006e10:	9b04      	ldr	r3, [sp, #16]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d100      	bne.n	8006e18 <_dtoa_r+0x4e4>
 8006e16:	e0bb      	b.n	8006f90 <_dtoa_r+0x65c>
 8006e18:	2f00      	cmp	r7, #0
 8006e1a:	d005      	beq.n	8006e28 <_dtoa_r+0x4f4>
 8006e1c:	429f      	cmp	r7, r3
 8006e1e:	d003      	beq.n	8006e28 <_dtoa_r+0x4f4>
 8006e20:	0039      	movs	r1, r7
 8006e22:	9803      	ldr	r0, [sp, #12]
 8006e24:	f000 fcc0 	bl	80077a8 <_Bfree>
 8006e28:	9904      	ldr	r1, [sp, #16]
 8006e2a:	9803      	ldr	r0, [sp, #12]
 8006e2c:	f000 fcbc 	bl	80077a8 <_Bfree>
 8006e30:	e0ae      	b.n	8006f90 <_dtoa_r+0x65c>
 8006e32:	423d      	tst	r5, r7
 8006e34:	d005      	beq.n	8006e42 <_dtoa_r+0x50e>
 8006e36:	6832      	ldr	r2, [r6, #0]
 8006e38:	6873      	ldr	r3, [r6, #4]
 8006e3a:	f7fa fdf5 	bl	8001a28 <__aeabi_dmul>
 8006e3e:	003b      	movs	r3, r7
 8006e40:	3401      	adds	r4, #1
 8006e42:	106d      	asrs	r5, r5, #1
 8006e44:	3608      	adds	r6, #8
 8006e46:	e75b      	b.n	8006d00 <_dtoa_r+0x3cc>
 8006e48:	9b04      	ldr	r3, [sp, #16]
 8006e4a:	930c      	str	r3, [sp, #48]	@ 0x30
 8006e4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e4e:	e77f      	b.n	8006d50 <_dtoa_r+0x41c>
 8006e50:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006e52:	4b7a      	ldr	r3, [pc, #488]	@ (800703c <_dtoa_r+0x708>)
 8006e54:	3a01      	subs	r2, #1
 8006e56:	00d2      	lsls	r2, r2, #3
 8006e58:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8006e5a:	189b      	adds	r3, r3, r2
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	2900      	cmp	r1, #0
 8006e62:	d04c      	beq.n	8006efe <_dtoa_r+0x5ca>
 8006e64:	2000      	movs	r0, #0
 8006e66:	497c      	ldr	r1, [pc, #496]	@ (8007058 <_dtoa_r+0x724>)
 8006e68:	f7fa f9a4 	bl	80011b4 <__aeabi_ddiv>
 8006e6c:	0032      	movs	r2, r6
 8006e6e:	003b      	movs	r3, r7
 8006e70:	f7fb f8c0 	bl	8001ff4 <__aeabi_dsub>
 8006e74:	9a08      	ldr	r2, [sp, #32]
 8006e76:	0006      	movs	r6, r0
 8006e78:	4694      	mov	ip, r2
 8006e7a:	000f      	movs	r7, r1
 8006e7c:	9b08      	ldr	r3, [sp, #32]
 8006e7e:	9316      	str	r3, [sp, #88]	@ 0x58
 8006e80:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006e82:	4463      	add	r3, ip
 8006e84:	9311      	str	r3, [sp, #68]	@ 0x44
 8006e86:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006e88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006e8a:	f7fb fcdf 	bl	800284c <__aeabi_d2iz>
 8006e8e:	0005      	movs	r5, r0
 8006e90:	f7fb fd18 	bl	80028c4 <__aeabi_i2d>
 8006e94:	0002      	movs	r2, r0
 8006e96:	000b      	movs	r3, r1
 8006e98:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006e9a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006e9c:	f7fb f8aa 	bl	8001ff4 <__aeabi_dsub>
 8006ea0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006ea2:	3530      	adds	r5, #48	@ 0x30
 8006ea4:	1c5c      	adds	r4, r3, #1
 8006ea6:	701d      	strb	r5, [r3, #0]
 8006ea8:	0032      	movs	r2, r6
 8006eaa:	003b      	movs	r3, r7
 8006eac:	900a      	str	r0, [sp, #40]	@ 0x28
 8006eae:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006eb0:	f7f9 fad2 	bl	8000458 <__aeabi_dcmplt>
 8006eb4:	2800      	cmp	r0, #0
 8006eb6:	d16b      	bne.n	8006f90 <_dtoa_r+0x65c>
 8006eb8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006eba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ebc:	2000      	movs	r0, #0
 8006ebe:	4961      	ldr	r1, [pc, #388]	@ (8007044 <_dtoa_r+0x710>)
 8006ec0:	f7fb f898 	bl	8001ff4 <__aeabi_dsub>
 8006ec4:	0032      	movs	r2, r6
 8006ec6:	003b      	movs	r3, r7
 8006ec8:	f7f9 fac6 	bl	8000458 <__aeabi_dcmplt>
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	d000      	beq.n	8006ed2 <_dtoa_r+0x59e>
 8006ed0:	e0c6      	b.n	8007060 <_dtoa_r+0x72c>
 8006ed2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006ed4:	42a3      	cmp	r3, r4
 8006ed6:	d100      	bne.n	8006eda <_dtoa_r+0x5a6>
 8006ed8:	e765      	b.n	8006da6 <_dtoa_r+0x472>
 8006eda:	2200      	movs	r2, #0
 8006edc:	0030      	movs	r0, r6
 8006ede:	0039      	movs	r1, r7
 8006ee0:	4b59      	ldr	r3, [pc, #356]	@ (8007048 <_dtoa_r+0x714>)
 8006ee2:	f7fa fda1 	bl	8001a28 <__aeabi_dmul>
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	0006      	movs	r6, r0
 8006eea:	000f      	movs	r7, r1
 8006eec:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006eee:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006ef0:	4b55      	ldr	r3, [pc, #340]	@ (8007048 <_dtoa_r+0x714>)
 8006ef2:	f7fa fd99 	bl	8001a28 <__aeabi_dmul>
 8006ef6:	9416      	str	r4, [sp, #88]	@ 0x58
 8006ef8:	900a      	str	r0, [sp, #40]	@ 0x28
 8006efa:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006efc:	e7c3      	b.n	8006e86 <_dtoa_r+0x552>
 8006efe:	0030      	movs	r0, r6
 8006f00:	0039      	movs	r1, r7
 8006f02:	f7fa fd91 	bl	8001a28 <__aeabi_dmul>
 8006f06:	9d08      	ldr	r5, [sp, #32]
 8006f08:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006f0a:	002b      	movs	r3, r5
 8006f0c:	4694      	mov	ip, r2
 8006f0e:	9016      	str	r0, [sp, #88]	@ 0x58
 8006f10:	9117      	str	r1, [sp, #92]	@ 0x5c
 8006f12:	4463      	add	r3, ip
 8006f14:	9319      	str	r3, [sp, #100]	@ 0x64
 8006f16:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006f18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f1a:	f7fb fc97 	bl	800284c <__aeabi_d2iz>
 8006f1e:	0004      	movs	r4, r0
 8006f20:	f7fb fcd0 	bl	80028c4 <__aeabi_i2d>
 8006f24:	000b      	movs	r3, r1
 8006f26:	0002      	movs	r2, r0
 8006f28:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006f2a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f2c:	f7fb f862 	bl	8001ff4 <__aeabi_dsub>
 8006f30:	3430      	adds	r4, #48	@ 0x30
 8006f32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006f34:	702c      	strb	r4, [r5, #0]
 8006f36:	3501      	adds	r5, #1
 8006f38:	0006      	movs	r6, r0
 8006f3a:	000f      	movs	r7, r1
 8006f3c:	42ab      	cmp	r3, r5
 8006f3e:	d12a      	bne.n	8006f96 <_dtoa_r+0x662>
 8006f40:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8006f42:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8006f44:	9b08      	ldr	r3, [sp, #32]
 8006f46:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8006f48:	469c      	mov	ip, r3
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	4b42      	ldr	r3, [pc, #264]	@ (8007058 <_dtoa_r+0x724>)
 8006f4e:	4464      	add	r4, ip
 8006f50:	f7f9 fd6a 	bl	8000a28 <__aeabi_dadd>
 8006f54:	0002      	movs	r2, r0
 8006f56:	000b      	movs	r3, r1
 8006f58:	0030      	movs	r0, r6
 8006f5a:	0039      	movs	r1, r7
 8006f5c:	f7f9 fa90 	bl	8000480 <__aeabi_dcmpgt>
 8006f60:	2800      	cmp	r0, #0
 8006f62:	d000      	beq.n	8006f66 <_dtoa_r+0x632>
 8006f64:	e07c      	b.n	8007060 <_dtoa_r+0x72c>
 8006f66:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006f68:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006f6a:	2000      	movs	r0, #0
 8006f6c:	493a      	ldr	r1, [pc, #232]	@ (8007058 <_dtoa_r+0x724>)
 8006f6e:	f7fb f841 	bl	8001ff4 <__aeabi_dsub>
 8006f72:	0002      	movs	r2, r0
 8006f74:	000b      	movs	r3, r1
 8006f76:	0030      	movs	r0, r6
 8006f78:	0039      	movs	r1, r7
 8006f7a:	f7f9 fa6d 	bl	8000458 <__aeabi_dcmplt>
 8006f7e:	2800      	cmp	r0, #0
 8006f80:	d100      	bne.n	8006f84 <_dtoa_r+0x650>
 8006f82:	e710      	b.n	8006da6 <_dtoa_r+0x472>
 8006f84:	0023      	movs	r3, r4
 8006f86:	3c01      	subs	r4, #1
 8006f88:	7822      	ldrb	r2, [r4, #0]
 8006f8a:	2a30      	cmp	r2, #48	@ 0x30
 8006f8c:	d0fa      	beq.n	8006f84 <_dtoa_r+0x650>
 8006f8e:	001c      	movs	r4, r3
 8006f90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006f92:	9304      	str	r3, [sp, #16]
 8006f94:	e042      	b.n	800701c <_dtoa_r+0x6e8>
 8006f96:	2200      	movs	r2, #0
 8006f98:	4b2b      	ldr	r3, [pc, #172]	@ (8007048 <_dtoa_r+0x714>)
 8006f9a:	f7fa fd45 	bl	8001a28 <__aeabi_dmul>
 8006f9e:	900a      	str	r0, [sp, #40]	@ 0x28
 8006fa0:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006fa2:	e7b8      	b.n	8006f16 <_dtoa_r+0x5e2>
 8006fa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fa6:	9d08      	ldr	r5, [sp, #32]
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	195b      	adds	r3, r3, r5
 8006fac:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006fae:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006fb0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fb2:	9a06      	ldr	r2, [sp, #24]
 8006fb4:	9b07      	ldr	r3, [sp, #28]
 8006fb6:	0030      	movs	r0, r6
 8006fb8:	0039      	movs	r1, r7
 8006fba:	f7fa f8fb 	bl	80011b4 <__aeabi_ddiv>
 8006fbe:	f7fb fc45 	bl	800284c <__aeabi_d2iz>
 8006fc2:	9009      	str	r0, [sp, #36]	@ 0x24
 8006fc4:	f7fb fc7e 	bl	80028c4 <__aeabi_i2d>
 8006fc8:	9a06      	ldr	r2, [sp, #24]
 8006fca:	9b07      	ldr	r3, [sp, #28]
 8006fcc:	f7fa fd2c 	bl	8001a28 <__aeabi_dmul>
 8006fd0:	0002      	movs	r2, r0
 8006fd2:	000b      	movs	r3, r1
 8006fd4:	0030      	movs	r0, r6
 8006fd6:	0039      	movs	r1, r7
 8006fd8:	f7fb f80c 	bl	8001ff4 <__aeabi_dsub>
 8006fdc:	002b      	movs	r3, r5
 8006fde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006fe0:	3501      	adds	r5, #1
 8006fe2:	3230      	adds	r2, #48	@ 0x30
 8006fe4:	701a      	strb	r2, [r3, #0]
 8006fe6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006fe8:	002c      	movs	r4, r5
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d14b      	bne.n	8007086 <_dtoa_r+0x752>
 8006fee:	0002      	movs	r2, r0
 8006ff0:	000b      	movs	r3, r1
 8006ff2:	f7f9 fd19 	bl	8000a28 <__aeabi_dadd>
 8006ff6:	9a06      	ldr	r2, [sp, #24]
 8006ff8:	9b07      	ldr	r3, [sp, #28]
 8006ffa:	0006      	movs	r6, r0
 8006ffc:	000f      	movs	r7, r1
 8006ffe:	f7f9 fa3f 	bl	8000480 <__aeabi_dcmpgt>
 8007002:	2800      	cmp	r0, #0
 8007004:	d12a      	bne.n	800705c <_dtoa_r+0x728>
 8007006:	9a06      	ldr	r2, [sp, #24]
 8007008:	9b07      	ldr	r3, [sp, #28]
 800700a:	0030      	movs	r0, r6
 800700c:	0039      	movs	r1, r7
 800700e:	f7f9 fa1d 	bl	800044c <__aeabi_dcmpeq>
 8007012:	2800      	cmp	r0, #0
 8007014:	d002      	beq.n	800701c <_dtoa_r+0x6e8>
 8007016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007018:	07dd      	lsls	r5, r3, #31
 800701a:	d41f      	bmi.n	800705c <_dtoa_r+0x728>
 800701c:	9905      	ldr	r1, [sp, #20]
 800701e:	9803      	ldr	r0, [sp, #12]
 8007020:	f000 fbc2 	bl	80077a8 <_Bfree>
 8007024:	2300      	movs	r3, #0
 8007026:	7023      	strb	r3, [r4, #0]
 8007028:	9b04      	ldr	r3, [sp, #16]
 800702a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800702c:	3301      	adds	r3, #1
 800702e:	6013      	str	r3, [r2, #0]
 8007030:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8007032:	2b00      	cmp	r3, #0
 8007034:	d100      	bne.n	8007038 <_dtoa_r+0x704>
 8007036:	e4c7      	b.n	80069c8 <_dtoa_r+0x94>
 8007038:	601c      	str	r4, [r3, #0]
 800703a:	e4c5      	b.n	80069c8 <_dtoa_r+0x94>
 800703c:	08008808 	.word	0x08008808
 8007040:	080087e0 	.word	0x080087e0
 8007044:	3ff00000 	.word	0x3ff00000
 8007048:	40240000 	.word	0x40240000
 800704c:	401c0000 	.word	0x401c0000
 8007050:	fcc00000 	.word	0xfcc00000
 8007054:	40140000 	.word	0x40140000
 8007058:	3fe00000 	.word	0x3fe00000
 800705c:	9b04      	ldr	r3, [sp, #16]
 800705e:	930c      	str	r3, [sp, #48]	@ 0x30
 8007060:	0023      	movs	r3, r4
 8007062:	001c      	movs	r4, r3
 8007064:	3b01      	subs	r3, #1
 8007066:	781a      	ldrb	r2, [r3, #0]
 8007068:	2a39      	cmp	r2, #57	@ 0x39
 800706a:	d108      	bne.n	800707e <_dtoa_r+0x74a>
 800706c:	9a08      	ldr	r2, [sp, #32]
 800706e:	429a      	cmp	r2, r3
 8007070:	d1f7      	bne.n	8007062 <_dtoa_r+0x72e>
 8007072:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007074:	9908      	ldr	r1, [sp, #32]
 8007076:	3201      	adds	r2, #1
 8007078:	920c      	str	r2, [sp, #48]	@ 0x30
 800707a:	2230      	movs	r2, #48	@ 0x30
 800707c:	700a      	strb	r2, [r1, #0]
 800707e:	781a      	ldrb	r2, [r3, #0]
 8007080:	3201      	adds	r2, #1
 8007082:	701a      	strb	r2, [r3, #0]
 8007084:	e784      	b.n	8006f90 <_dtoa_r+0x65c>
 8007086:	2200      	movs	r2, #0
 8007088:	4bc6      	ldr	r3, [pc, #792]	@ (80073a4 <_dtoa_r+0xa70>)
 800708a:	f7fa fccd 	bl	8001a28 <__aeabi_dmul>
 800708e:	2200      	movs	r2, #0
 8007090:	2300      	movs	r3, #0
 8007092:	0006      	movs	r6, r0
 8007094:	000f      	movs	r7, r1
 8007096:	f7f9 f9d9 	bl	800044c <__aeabi_dcmpeq>
 800709a:	2800      	cmp	r0, #0
 800709c:	d089      	beq.n	8006fb2 <_dtoa_r+0x67e>
 800709e:	e7bd      	b.n	800701c <_dtoa_r+0x6e8>
 80070a0:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80070a2:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80070a4:	9c06      	ldr	r4, [sp, #24]
 80070a6:	2f00      	cmp	r7, #0
 80070a8:	d014      	beq.n	80070d4 <_dtoa_r+0x7a0>
 80070aa:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80070ac:	2a01      	cmp	r2, #1
 80070ae:	dd00      	ble.n	80070b2 <_dtoa_r+0x77e>
 80070b0:	e0e4      	b.n	800727c <_dtoa_r+0x948>
 80070b2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80070b4:	2a00      	cmp	r2, #0
 80070b6:	d100      	bne.n	80070ba <_dtoa_r+0x786>
 80070b8:	e0da      	b.n	8007270 <_dtoa_r+0x93c>
 80070ba:	4abb      	ldr	r2, [pc, #748]	@ (80073a8 <_dtoa_r+0xa74>)
 80070bc:	189b      	adds	r3, r3, r2
 80070be:	9a06      	ldr	r2, [sp, #24]
 80070c0:	2101      	movs	r1, #1
 80070c2:	18d2      	adds	r2, r2, r3
 80070c4:	9206      	str	r2, [sp, #24]
 80070c6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80070c8:	9803      	ldr	r0, [sp, #12]
 80070ca:	18d3      	adds	r3, r2, r3
 80070cc:	930d      	str	r3, [sp, #52]	@ 0x34
 80070ce:	f000 fc23 	bl	8007918 <__i2b>
 80070d2:	0007      	movs	r7, r0
 80070d4:	2c00      	cmp	r4, #0
 80070d6:	d00e      	beq.n	80070f6 <_dtoa_r+0x7c2>
 80070d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80070da:	2b00      	cmp	r3, #0
 80070dc:	dd0b      	ble.n	80070f6 <_dtoa_r+0x7c2>
 80070de:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80070e0:	0023      	movs	r3, r4
 80070e2:	4294      	cmp	r4, r2
 80070e4:	dd00      	ble.n	80070e8 <_dtoa_r+0x7b4>
 80070e6:	0013      	movs	r3, r2
 80070e8:	9a06      	ldr	r2, [sp, #24]
 80070ea:	1ae4      	subs	r4, r4, r3
 80070ec:	1ad2      	subs	r2, r2, r3
 80070ee:	9206      	str	r2, [sp, #24]
 80070f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80070f2:	1ad3      	subs	r3, r2, r3
 80070f4:	930d      	str	r3, [sp, #52]	@ 0x34
 80070f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d021      	beq.n	8007140 <_dtoa_r+0x80c>
 80070fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d100      	bne.n	8007104 <_dtoa_r+0x7d0>
 8007102:	e0d3      	b.n	80072ac <_dtoa_r+0x978>
 8007104:	9e05      	ldr	r6, [sp, #20]
 8007106:	2d00      	cmp	r5, #0
 8007108:	d014      	beq.n	8007134 <_dtoa_r+0x800>
 800710a:	0039      	movs	r1, r7
 800710c:	002a      	movs	r2, r5
 800710e:	9803      	ldr	r0, [sp, #12]
 8007110:	f000 fcc4 	bl	8007a9c <__pow5mult>
 8007114:	9a05      	ldr	r2, [sp, #20]
 8007116:	0001      	movs	r1, r0
 8007118:	0007      	movs	r7, r0
 800711a:	9803      	ldr	r0, [sp, #12]
 800711c:	f000 fc14 	bl	8007948 <__multiply>
 8007120:	0006      	movs	r6, r0
 8007122:	9905      	ldr	r1, [sp, #20]
 8007124:	9803      	ldr	r0, [sp, #12]
 8007126:	f000 fb3f 	bl	80077a8 <_Bfree>
 800712a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800712c:	9605      	str	r6, [sp, #20]
 800712e:	1b5b      	subs	r3, r3, r5
 8007130:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007132:	d005      	beq.n	8007140 <_dtoa_r+0x80c>
 8007134:	0031      	movs	r1, r6
 8007136:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007138:	9803      	ldr	r0, [sp, #12]
 800713a:	f000 fcaf 	bl	8007a9c <__pow5mult>
 800713e:	9005      	str	r0, [sp, #20]
 8007140:	2101      	movs	r1, #1
 8007142:	9803      	ldr	r0, [sp, #12]
 8007144:	f000 fbe8 	bl	8007918 <__i2b>
 8007148:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800714a:	0006      	movs	r6, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d100      	bne.n	8007152 <_dtoa_r+0x81e>
 8007150:	e1bc      	b.n	80074cc <_dtoa_r+0xb98>
 8007152:	001a      	movs	r2, r3
 8007154:	0001      	movs	r1, r0
 8007156:	9803      	ldr	r0, [sp, #12]
 8007158:	f000 fca0 	bl	8007a9c <__pow5mult>
 800715c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800715e:	0006      	movs	r6, r0
 8007160:	2500      	movs	r5, #0
 8007162:	2b01      	cmp	r3, #1
 8007164:	dc16      	bgt.n	8007194 <_dtoa_r+0x860>
 8007166:	2500      	movs	r5, #0
 8007168:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800716a:	42ab      	cmp	r3, r5
 800716c:	d10e      	bne.n	800718c <_dtoa_r+0x858>
 800716e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007170:	031b      	lsls	r3, r3, #12
 8007172:	42ab      	cmp	r3, r5
 8007174:	d10a      	bne.n	800718c <_dtoa_r+0x858>
 8007176:	4b8d      	ldr	r3, [pc, #564]	@ (80073ac <_dtoa_r+0xa78>)
 8007178:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800717a:	4213      	tst	r3, r2
 800717c:	d006      	beq.n	800718c <_dtoa_r+0x858>
 800717e:	9b06      	ldr	r3, [sp, #24]
 8007180:	3501      	adds	r5, #1
 8007182:	3301      	adds	r3, #1
 8007184:	9306      	str	r3, [sp, #24]
 8007186:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007188:	3301      	adds	r3, #1
 800718a:	930d      	str	r3, [sp, #52]	@ 0x34
 800718c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800718e:	2001      	movs	r0, #1
 8007190:	2b00      	cmp	r3, #0
 8007192:	d008      	beq.n	80071a6 <_dtoa_r+0x872>
 8007194:	6933      	ldr	r3, [r6, #16]
 8007196:	3303      	adds	r3, #3
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	18f3      	adds	r3, r6, r3
 800719c:	6858      	ldr	r0, [r3, #4]
 800719e:	f000 fb6b 	bl	8007878 <__hi0bits>
 80071a2:	2320      	movs	r3, #32
 80071a4:	1a18      	subs	r0, r3, r0
 80071a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80071a8:	1818      	adds	r0, r3, r0
 80071aa:	0002      	movs	r2, r0
 80071ac:	231f      	movs	r3, #31
 80071ae:	401a      	ands	r2, r3
 80071b0:	4218      	tst	r0, r3
 80071b2:	d100      	bne.n	80071b6 <_dtoa_r+0x882>
 80071b4:	e081      	b.n	80072ba <_dtoa_r+0x986>
 80071b6:	3301      	adds	r3, #1
 80071b8:	1a9b      	subs	r3, r3, r2
 80071ba:	2b04      	cmp	r3, #4
 80071bc:	dd79      	ble.n	80072b2 <_dtoa_r+0x97e>
 80071be:	231c      	movs	r3, #28
 80071c0:	1a9b      	subs	r3, r3, r2
 80071c2:	9a06      	ldr	r2, [sp, #24]
 80071c4:	18e4      	adds	r4, r4, r3
 80071c6:	18d2      	adds	r2, r2, r3
 80071c8:	9206      	str	r2, [sp, #24]
 80071ca:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80071cc:	18d3      	adds	r3, r2, r3
 80071ce:	930d      	str	r3, [sp, #52]	@ 0x34
 80071d0:	9b06      	ldr	r3, [sp, #24]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	dd05      	ble.n	80071e2 <_dtoa_r+0x8ae>
 80071d6:	001a      	movs	r2, r3
 80071d8:	9905      	ldr	r1, [sp, #20]
 80071da:	9803      	ldr	r0, [sp, #12]
 80071dc:	f000 fcba 	bl	8007b54 <__lshift>
 80071e0:	9005      	str	r0, [sp, #20]
 80071e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	dd05      	ble.n	80071f4 <_dtoa_r+0x8c0>
 80071e8:	0031      	movs	r1, r6
 80071ea:	001a      	movs	r2, r3
 80071ec:	9803      	ldr	r0, [sp, #12]
 80071ee:	f000 fcb1 	bl	8007b54 <__lshift>
 80071f2:	0006      	movs	r6, r0
 80071f4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d061      	beq.n	80072be <_dtoa_r+0x98a>
 80071fa:	0031      	movs	r1, r6
 80071fc:	9805      	ldr	r0, [sp, #20]
 80071fe:	f000 fd15 	bl	8007c2c <__mcmp>
 8007202:	2800      	cmp	r0, #0
 8007204:	da5b      	bge.n	80072be <_dtoa_r+0x98a>
 8007206:	9b04      	ldr	r3, [sp, #16]
 8007208:	220a      	movs	r2, #10
 800720a:	3b01      	subs	r3, #1
 800720c:	930c      	str	r3, [sp, #48]	@ 0x30
 800720e:	9905      	ldr	r1, [sp, #20]
 8007210:	2300      	movs	r3, #0
 8007212:	9803      	ldr	r0, [sp, #12]
 8007214:	f000 faec 	bl	80077f0 <__multadd>
 8007218:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800721a:	9005      	str	r0, [sp, #20]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d100      	bne.n	8007222 <_dtoa_r+0x8ee>
 8007220:	e15b      	b.n	80074da <_dtoa_r+0xba6>
 8007222:	2300      	movs	r3, #0
 8007224:	0039      	movs	r1, r7
 8007226:	220a      	movs	r2, #10
 8007228:	9803      	ldr	r0, [sp, #12]
 800722a:	f000 fae1 	bl	80077f0 <__multadd>
 800722e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007230:	0007      	movs	r7, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	dc4d      	bgt.n	80072d2 <_dtoa_r+0x99e>
 8007236:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007238:	2b02      	cmp	r3, #2
 800723a:	dd46      	ble.n	80072ca <_dtoa_r+0x996>
 800723c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800723e:	2b00      	cmp	r3, #0
 8007240:	d000      	beq.n	8007244 <_dtoa_r+0x910>
 8007242:	e5db      	b.n	8006dfc <_dtoa_r+0x4c8>
 8007244:	0031      	movs	r1, r6
 8007246:	2205      	movs	r2, #5
 8007248:	9803      	ldr	r0, [sp, #12]
 800724a:	f000 fad1 	bl	80077f0 <__multadd>
 800724e:	0006      	movs	r6, r0
 8007250:	0001      	movs	r1, r0
 8007252:	9805      	ldr	r0, [sp, #20]
 8007254:	f000 fcea 	bl	8007c2c <__mcmp>
 8007258:	2800      	cmp	r0, #0
 800725a:	dc00      	bgt.n	800725e <_dtoa_r+0x92a>
 800725c:	e5ce      	b.n	8006dfc <_dtoa_r+0x4c8>
 800725e:	9b08      	ldr	r3, [sp, #32]
 8007260:	9a08      	ldr	r2, [sp, #32]
 8007262:	1c5c      	adds	r4, r3, #1
 8007264:	2331      	movs	r3, #49	@ 0x31
 8007266:	7013      	strb	r3, [r2, #0]
 8007268:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800726a:	3301      	adds	r3, #1
 800726c:	930c      	str	r3, [sp, #48]	@ 0x30
 800726e:	e5c9      	b.n	8006e04 <_dtoa_r+0x4d0>
 8007270:	2336      	movs	r3, #54	@ 0x36
 8007272:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007274:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8007276:	1a9b      	subs	r3, r3, r2
 8007278:	9c06      	ldr	r4, [sp, #24]
 800727a:	e720      	b.n	80070be <_dtoa_r+0x78a>
 800727c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800727e:	1e5d      	subs	r5, r3, #1
 8007280:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007282:	42ab      	cmp	r3, r5
 8007284:	db08      	blt.n	8007298 <_dtoa_r+0x964>
 8007286:	1b5d      	subs	r5, r3, r5
 8007288:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800728a:	2b00      	cmp	r3, #0
 800728c:	daf4      	bge.n	8007278 <_dtoa_r+0x944>
 800728e:	9b06      	ldr	r3, [sp, #24]
 8007290:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007292:	1a9c      	subs	r4, r3, r2
 8007294:	2300      	movs	r3, #0
 8007296:	e712      	b.n	80070be <_dtoa_r+0x78a>
 8007298:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800729a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800729c:	1aeb      	subs	r3, r5, r3
 800729e:	18d3      	adds	r3, r2, r3
 80072a0:	9314      	str	r3, [sp, #80]	@ 0x50
 80072a2:	950f      	str	r5, [sp, #60]	@ 0x3c
 80072a4:	9c06      	ldr	r4, [sp, #24]
 80072a6:	2500      	movs	r5, #0
 80072a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072aa:	e708      	b.n	80070be <_dtoa_r+0x78a>
 80072ac:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80072ae:	9905      	ldr	r1, [sp, #20]
 80072b0:	e742      	b.n	8007138 <_dtoa_r+0x804>
 80072b2:	2b04      	cmp	r3, #4
 80072b4:	d08c      	beq.n	80071d0 <_dtoa_r+0x89c>
 80072b6:	331c      	adds	r3, #28
 80072b8:	e783      	b.n	80071c2 <_dtoa_r+0x88e>
 80072ba:	0013      	movs	r3, r2
 80072bc:	e7fb      	b.n	80072b6 <_dtoa_r+0x982>
 80072be:	9b04      	ldr	r3, [sp, #16]
 80072c0:	930c      	str	r3, [sp, #48]	@ 0x30
 80072c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072c4:	930e      	str	r3, [sp, #56]	@ 0x38
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	ddb5      	ble.n	8007236 <_dtoa_r+0x902>
 80072ca:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d100      	bne.n	80072d2 <_dtoa_r+0x99e>
 80072d0:	e107      	b.n	80074e2 <_dtoa_r+0xbae>
 80072d2:	2c00      	cmp	r4, #0
 80072d4:	dd05      	ble.n	80072e2 <_dtoa_r+0x9ae>
 80072d6:	0039      	movs	r1, r7
 80072d8:	0022      	movs	r2, r4
 80072da:	9803      	ldr	r0, [sp, #12]
 80072dc:	f000 fc3a 	bl	8007b54 <__lshift>
 80072e0:	0007      	movs	r7, r0
 80072e2:	9704      	str	r7, [sp, #16]
 80072e4:	2d00      	cmp	r5, #0
 80072e6:	d020      	beq.n	800732a <_dtoa_r+0x9f6>
 80072e8:	6879      	ldr	r1, [r7, #4]
 80072ea:	9803      	ldr	r0, [sp, #12]
 80072ec:	f000 fa18 	bl	8007720 <_Balloc>
 80072f0:	1e04      	subs	r4, r0, #0
 80072f2:	d10c      	bne.n	800730e <_dtoa_r+0x9da>
 80072f4:	0022      	movs	r2, r4
 80072f6:	4b2e      	ldr	r3, [pc, #184]	@ (80073b0 <_dtoa_r+0xa7c>)
 80072f8:	482e      	ldr	r0, [pc, #184]	@ (80073b4 <_dtoa_r+0xa80>)
 80072fa:	492f      	ldr	r1, [pc, #188]	@ (80073b8 <_dtoa_r+0xa84>)
 80072fc:	f7ff fb2f 	bl	800695e <_dtoa_r+0x2a>
 8007300:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8007302:	0037      	movs	r7, r6
 8007304:	e7ab      	b.n	800725e <_dtoa_r+0x92a>
 8007306:	9b04      	ldr	r3, [sp, #16]
 8007308:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800730a:	930c      	str	r3, [sp, #48]	@ 0x30
 800730c:	e7f9      	b.n	8007302 <_dtoa_r+0x9ce>
 800730e:	0039      	movs	r1, r7
 8007310:	693a      	ldr	r2, [r7, #16]
 8007312:	310c      	adds	r1, #12
 8007314:	3202      	adds	r2, #2
 8007316:	0092      	lsls	r2, r2, #2
 8007318:	300c      	adds	r0, #12
 800731a:	f001 f835 	bl	8008388 <memcpy>
 800731e:	2201      	movs	r2, #1
 8007320:	0021      	movs	r1, r4
 8007322:	9803      	ldr	r0, [sp, #12]
 8007324:	f000 fc16 	bl	8007b54 <__lshift>
 8007328:	9004      	str	r0, [sp, #16]
 800732a:	9b08      	ldr	r3, [sp, #32]
 800732c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800732e:	9306      	str	r3, [sp, #24]
 8007330:	3b01      	subs	r3, #1
 8007332:	189b      	adds	r3, r3, r2
 8007334:	2201      	movs	r2, #1
 8007336:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007338:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800733a:	4013      	ands	r3, r2
 800733c:	930e      	str	r3, [sp, #56]	@ 0x38
 800733e:	0031      	movs	r1, r6
 8007340:	9805      	ldr	r0, [sp, #20]
 8007342:	f7ff fa71 	bl	8006828 <quorem>
 8007346:	0039      	movs	r1, r7
 8007348:	0005      	movs	r5, r0
 800734a:	900a      	str	r0, [sp, #40]	@ 0x28
 800734c:	9805      	ldr	r0, [sp, #20]
 800734e:	f000 fc6d 	bl	8007c2c <__mcmp>
 8007352:	9a04      	ldr	r2, [sp, #16]
 8007354:	900d      	str	r0, [sp, #52]	@ 0x34
 8007356:	0031      	movs	r1, r6
 8007358:	9803      	ldr	r0, [sp, #12]
 800735a:	f000 fc83 	bl	8007c64 <__mdiff>
 800735e:	2201      	movs	r2, #1
 8007360:	68c3      	ldr	r3, [r0, #12]
 8007362:	0004      	movs	r4, r0
 8007364:	3530      	adds	r5, #48	@ 0x30
 8007366:	9209      	str	r2, [sp, #36]	@ 0x24
 8007368:	2b00      	cmp	r3, #0
 800736a:	d104      	bne.n	8007376 <_dtoa_r+0xa42>
 800736c:	0001      	movs	r1, r0
 800736e:	9805      	ldr	r0, [sp, #20]
 8007370:	f000 fc5c 	bl	8007c2c <__mcmp>
 8007374:	9009      	str	r0, [sp, #36]	@ 0x24
 8007376:	0021      	movs	r1, r4
 8007378:	9803      	ldr	r0, [sp, #12]
 800737a:	f000 fa15 	bl	80077a8 <_Bfree>
 800737e:	9b06      	ldr	r3, [sp, #24]
 8007380:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007382:	1c5c      	adds	r4, r3, #1
 8007384:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007386:	4313      	orrs	r3, r2
 8007388:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800738a:	4313      	orrs	r3, r2
 800738c:	d116      	bne.n	80073bc <_dtoa_r+0xa88>
 800738e:	2d39      	cmp	r5, #57	@ 0x39
 8007390:	d02f      	beq.n	80073f2 <_dtoa_r+0xabe>
 8007392:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007394:	2b00      	cmp	r3, #0
 8007396:	dd01      	ble.n	800739c <_dtoa_r+0xa68>
 8007398:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800739a:	3531      	adds	r5, #49	@ 0x31
 800739c:	9b06      	ldr	r3, [sp, #24]
 800739e:	701d      	strb	r5, [r3, #0]
 80073a0:	e532      	b.n	8006e08 <_dtoa_r+0x4d4>
 80073a2:	46c0      	nop			@ (mov r8, r8)
 80073a4:	40240000 	.word	0x40240000
 80073a8:	00000433 	.word	0x00000433
 80073ac:	7ff00000 	.word	0x7ff00000
 80073b0:	0800870c 	.word	0x0800870c
 80073b4:	080086b4 	.word	0x080086b4
 80073b8:	000002ef 	.word	0x000002ef
 80073bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80073be:	2b00      	cmp	r3, #0
 80073c0:	db04      	blt.n	80073cc <_dtoa_r+0xa98>
 80073c2:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80073c4:	4313      	orrs	r3, r2
 80073c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80073c8:	4313      	orrs	r3, r2
 80073ca:	d11e      	bne.n	800740a <_dtoa_r+0xad6>
 80073cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	dde4      	ble.n	800739c <_dtoa_r+0xa68>
 80073d2:	9905      	ldr	r1, [sp, #20]
 80073d4:	2201      	movs	r2, #1
 80073d6:	9803      	ldr	r0, [sp, #12]
 80073d8:	f000 fbbc 	bl	8007b54 <__lshift>
 80073dc:	0031      	movs	r1, r6
 80073de:	9005      	str	r0, [sp, #20]
 80073e0:	f000 fc24 	bl	8007c2c <__mcmp>
 80073e4:	2800      	cmp	r0, #0
 80073e6:	dc02      	bgt.n	80073ee <_dtoa_r+0xaba>
 80073e8:	d1d8      	bne.n	800739c <_dtoa_r+0xa68>
 80073ea:	07eb      	lsls	r3, r5, #31
 80073ec:	d5d6      	bpl.n	800739c <_dtoa_r+0xa68>
 80073ee:	2d39      	cmp	r5, #57	@ 0x39
 80073f0:	d1d2      	bne.n	8007398 <_dtoa_r+0xa64>
 80073f2:	2339      	movs	r3, #57	@ 0x39
 80073f4:	9a06      	ldr	r2, [sp, #24]
 80073f6:	7013      	strb	r3, [r2, #0]
 80073f8:	0023      	movs	r3, r4
 80073fa:	001c      	movs	r4, r3
 80073fc:	3b01      	subs	r3, #1
 80073fe:	781a      	ldrb	r2, [r3, #0]
 8007400:	2a39      	cmp	r2, #57	@ 0x39
 8007402:	d050      	beq.n	80074a6 <_dtoa_r+0xb72>
 8007404:	3201      	adds	r2, #1
 8007406:	701a      	strb	r2, [r3, #0]
 8007408:	e4fe      	b.n	8006e08 <_dtoa_r+0x4d4>
 800740a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800740c:	2b00      	cmp	r3, #0
 800740e:	dd03      	ble.n	8007418 <_dtoa_r+0xae4>
 8007410:	2d39      	cmp	r5, #57	@ 0x39
 8007412:	d0ee      	beq.n	80073f2 <_dtoa_r+0xabe>
 8007414:	3501      	adds	r5, #1
 8007416:	e7c1      	b.n	800739c <_dtoa_r+0xa68>
 8007418:	9b06      	ldr	r3, [sp, #24]
 800741a:	9a06      	ldr	r2, [sp, #24]
 800741c:	701d      	strb	r5, [r3, #0]
 800741e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007420:	4293      	cmp	r3, r2
 8007422:	d02b      	beq.n	800747c <_dtoa_r+0xb48>
 8007424:	2300      	movs	r3, #0
 8007426:	220a      	movs	r2, #10
 8007428:	9905      	ldr	r1, [sp, #20]
 800742a:	9803      	ldr	r0, [sp, #12]
 800742c:	f000 f9e0 	bl	80077f0 <__multadd>
 8007430:	9b04      	ldr	r3, [sp, #16]
 8007432:	9005      	str	r0, [sp, #20]
 8007434:	429f      	cmp	r7, r3
 8007436:	d109      	bne.n	800744c <_dtoa_r+0xb18>
 8007438:	0039      	movs	r1, r7
 800743a:	2300      	movs	r3, #0
 800743c:	220a      	movs	r2, #10
 800743e:	9803      	ldr	r0, [sp, #12]
 8007440:	f000 f9d6 	bl	80077f0 <__multadd>
 8007444:	0007      	movs	r7, r0
 8007446:	9004      	str	r0, [sp, #16]
 8007448:	9406      	str	r4, [sp, #24]
 800744a:	e778      	b.n	800733e <_dtoa_r+0xa0a>
 800744c:	0039      	movs	r1, r7
 800744e:	2300      	movs	r3, #0
 8007450:	220a      	movs	r2, #10
 8007452:	9803      	ldr	r0, [sp, #12]
 8007454:	f000 f9cc 	bl	80077f0 <__multadd>
 8007458:	2300      	movs	r3, #0
 800745a:	0007      	movs	r7, r0
 800745c:	220a      	movs	r2, #10
 800745e:	9904      	ldr	r1, [sp, #16]
 8007460:	9803      	ldr	r0, [sp, #12]
 8007462:	f000 f9c5 	bl	80077f0 <__multadd>
 8007466:	9004      	str	r0, [sp, #16]
 8007468:	e7ee      	b.n	8007448 <_dtoa_r+0xb14>
 800746a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800746c:	2401      	movs	r4, #1
 800746e:	2b00      	cmp	r3, #0
 8007470:	dd00      	ble.n	8007474 <_dtoa_r+0xb40>
 8007472:	001c      	movs	r4, r3
 8007474:	9704      	str	r7, [sp, #16]
 8007476:	2700      	movs	r7, #0
 8007478:	9b08      	ldr	r3, [sp, #32]
 800747a:	191c      	adds	r4, r3, r4
 800747c:	9905      	ldr	r1, [sp, #20]
 800747e:	2201      	movs	r2, #1
 8007480:	9803      	ldr	r0, [sp, #12]
 8007482:	f000 fb67 	bl	8007b54 <__lshift>
 8007486:	0031      	movs	r1, r6
 8007488:	9005      	str	r0, [sp, #20]
 800748a:	f000 fbcf 	bl	8007c2c <__mcmp>
 800748e:	2800      	cmp	r0, #0
 8007490:	dcb2      	bgt.n	80073f8 <_dtoa_r+0xac4>
 8007492:	d101      	bne.n	8007498 <_dtoa_r+0xb64>
 8007494:	07ed      	lsls	r5, r5, #31
 8007496:	d4af      	bmi.n	80073f8 <_dtoa_r+0xac4>
 8007498:	0023      	movs	r3, r4
 800749a:	001c      	movs	r4, r3
 800749c:	3b01      	subs	r3, #1
 800749e:	781a      	ldrb	r2, [r3, #0]
 80074a0:	2a30      	cmp	r2, #48	@ 0x30
 80074a2:	d0fa      	beq.n	800749a <_dtoa_r+0xb66>
 80074a4:	e4b0      	b.n	8006e08 <_dtoa_r+0x4d4>
 80074a6:	9a08      	ldr	r2, [sp, #32]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d1a6      	bne.n	80073fa <_dtoa_r+0xac6>
 80074ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80074ae:	3301      	adds	r3, #1
 80074b0:	930c      	str	r3, [sp, #48]	@ 0x30
 80074b2:	2331      	movs	r3, #49	@ 0x31
 80074b4:	7013      	strb	r3, [r2, #0]
 80074b6:	e4a7      	b.n	8006e08 <_dtoa_r+0x4d4>
 80074b8:	4b14      	ldr	r3, [pc, #80]	@ (800750c <_dtoa_r+0xbd8>)
 80074ba:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80074bc:	9308      	str	r3, [sp, #32]
 80074be:	4b14      	ldr	r3, [pc, #80]	@ (8007510 <_dtoa_r+0xbdc>)
 80074c0:	2a00      	cmp	r2, #0
 80074c2:	d001      	beq.n	80074c8 <_dtoa_r+0xb94>
 80074c4:	f7ff fa7e 	bl	80069c4 <_dtoa_r+0x90>
 80074c8:	f7ff fa7e 	bl	80069c8 <_dtoa_r+0x94>
 80074cc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	dc00      	bgt.n	80074d4 <_dtoa_r+0xba0>
 80074d2:	e648      	b.n	8007166 <_dtoa_r+0x832>
 80074d4:	2001      	movs	r0, #1
 80074d6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80074d8:	e665      	b.n	80071a6 <_dtoa_r+0x872>
 80074da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074dc:	2b00      	cmp	r3, #0
 80074de:	dc00      	bgt.n	80074e2 <_dtoa_r+0xbae>
 80074e0:	e6a9      	b.n	8007236 <_dtoa_r+0x902>
 80074e2:	2400      	movs	r4, #0
 80074e4:	0031      	movs	r1, r6
 80074e6:	9805      	ldr	r0, [sp, #20]
 80074e8:	f7ff f99e 	bl	8006828 <quorem>
 80074ec:	9b08      	ldr	r3, [sp, #32]
 80074ee:	3030      	adds	r0, #48	@ 0x30
 80074f0:	5518      	strb	r0, [r3, r4]
 80074f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074f4:	3401      	adds	r4, #1
 80074f6:	0005      	movs	r5, r0
 80074f8:	42a3      	cmp	r3, r4
 80074fa:	ddb6      	ble.n	800746a <_dtoa_r+0xb36>
 80074fc:	2300      	movs	r3, #0
 80074fe:	220a      	movs	r2, #10
 8007500:	9905      	ldr	r1, [sp, #20]
 8007502:	9803      	ldr	r0, [sp, #12]
 8007504:	f000 f974 	bl	80077f0 <__multadd>
 8007508:	9005      	str	r0, [sp, #20]
 800750a:	e7eb      	b.n	80074e4 <_dtoa_r+0xbb0>
 800750c:	08008690 	.word	0x08008690
 8007510:	08008698 	.word	0x08008698

08007514 <_free_r>:
 8007514:	b570      	push	{r4, r5, r6, lr}
 8007516:	0005      	movs	r5, r0
 8007518:	1e0c      	subs	r4, r1, #0
 800751a:	d010      	beq.n	800753e <_free_r+0x2a>
 800751c:	3c04      	subs	r4, #4
 800751e:	6823      	ldr	r3, [r4, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	da00      	bge.n	8007526 <_free_r+0x12>
 8007524:	18e4      	adds	r4, r4, r3
 8007526:	0028      	movs	r0, r5
 8007528:	f000 f8ea 	bl	8007700 <__malloc_lock>
 800752c:	4a1d      	ldr	r2, [pc, #116]	@ (80075a4 <_free_r+0x90>)
 800752e:	6813      	ldr	r3, [r2, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d105      	bne.n	8007540 <_free_r+0x2c>
 8007534:	6063      	str	r3, [r4, #4]
 8007536:	6014      	str	r4, [r2, #0]
 8007538:	0028      	movs	r0, r5
 800753a:	f000 f8e9 	bl	8007710 <__malloc_unlock>
 800753e:	bd70      	pop	{r4, r5, r6, pc}
 8007540:	42a3      	cmp	r3, r4
 8007542:	d908      	bls.n	8007556 <_free_r+0x42>
 8007544:	6820      	ldr	r0, [r4, #0]
 8007546:	1821      	adds	r1, r4, r0
 8007548:	428b      	cmp	r3, r1
 800754a:	d1f3      	bne.n	8007534 <_free_r+0x20>
 800754c:	6819      	ldr	r1, [r3, #0]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	1809      	adds	r1, r1, r0
 8007552:	6021      	str	r1, [r4, #0]
 8007554:	e7ee      	b.n	8007534 <_free_r+0x20>
 8007556:	001a      	movs	r2, r3
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d001      	beq.n	8007562 <_free_r+0x4e>
 800755e:	42a3      	cmp	r3, r4
 8007560:	d9f9      	bls.n	8007556 <_free_r+0x42>
 8007562:	6811      	ldr	r1, [r2, #0]
 8007564:	1850      	adds	r0, r2, r1
 8007566:	42a0      	cmp	r0, r4
 8007568:	d10b      	bne.n	8007582 <_free_r+0x6e>
 800756a:	6820      	ldr	r0, [r4, #0]
 800756c:	1809      	adds	r1, r1, r0
 800756e:	1850      	adds	r0, r2, r1
 8007570:	6011      	str	r1, [r2, #0]
 8007572:	4283      	cmp	r3, r0
 8007574:	d1e0      	bne.n	8007538 <_free_r+0x24>
 8007576:	6818      	ldr	r0, [r3, #0]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	1841      	adds	r1, r0, r1
 800757c:	6011      	str	r1, [r2, #0]
 800757e:	6053      	str	r3, [r2, #4]
 8007580:	e7da      	b.n	8007538 <_free_r+0x24>
 8007582:	42a0      	cmp	r0, r4
 8007584:	d902      	bls.n	800758c <_free_r+0x78>
 8007586:	230c      	movs	r3, #12
 8007588:	602b      	str	r3, [r5, #0]
 800758a:	e7d5      	b.n	8007538 <_free_r+0x24>
 800758c:	6820      	ldr	r0, [r4, #0]
 800758e:	1821      	adds	r1, r4, r0
 8007590:	428b      	cmp	r3, r1
 8007592:	d103      	bne.n	800759c <_free_r+0x88>
 8007594:	6819      	ldr	r1, [r3, #0]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	1809      	adds	r1, r1, r0
 800759a:	6021      	str	r1, [r4, #0]
 800759c:	6063      	str	r3, [r4, #4]
 800759e:	6054      	str	r4, [r2, #4]
 80075a0:	e7ca      	b.n	8007538 <_free_r+0x24>
 80075a2:	46c0      	nop			@ (mov r8, r8)
 80075a4:	200004c0 	.word	0x200004c0

080075a8 <malloc>:
 80075a8:	b510      	push	{r4, lr}
 80075aa:	4b03      	ldr	r3, [pc, #12]	@ (80075b8 <malloc+0x10>)
 80075ac:	0001      	movs	r1, r0
 80075ae:	6818      	ldr	r0, [r3, #0]
 80075b0:	f000 f826 	bl	8007600 <_malloc_r>
 80075b4:	bd10      	pop	{r4, pc}
 80075b6:	46c0      	nop			@ (mov r8, r8)
 80075b8:	20000018 	.word	0x20000018

080075bc <sbrk_aligned>:
 80075bc:	b570      	push	{r4, r5, r6, lr}
 80075be:	4e0f      	ldr	r6, [pc, #60]	@ (80075fc <sbrk_aligned+0x40>)
 80075c0:	000d      	movs	r5, r1
 80075c2:	6831      	ldr	r1, [r6, #0]
 80075c4:	0004      	movs	r4, r0
 80075c6:	2900      	cmp	r1, #0
 80075c8:	d102      	bne.n	80075d0 <sbrk_aligned+0x14>
 80075ca:	f000 fecb 	bl	8008364 <_sbrk_r>
 80075ce:	6030      	str	r0, [r6, #0]
 80075d0:	0029      	movs	r1, r5
 80075d2:	0020      	movs	r0, r4
 80075d4:	f000 fec6 	bl	8008364 <_sbrk_r>
 80075d8:	1c43      	adds	r3, r0, #1
 80075da:	d103      	bne.n	80075e4 <sbrk_aligned+0x28>
 80075dc:	2501      	movs	r5, #1
 80075de:	426d      	negs	r5, r5
 80075e0:	0028      	movs	r0, r5
 80075e2:	bd70      	pop	{r4, r5, r6, pc}
 80075e4:	2303      	movs	r3, #3
 80075e6:	1cc5      	adds	r5, r0, #3
 80075e8:	439d      	bics	r5, r3
 80075ea:	42a8      	cmp	r0, r5
 80075ec:	d0f8      	beq.n	80075e0 <sbrk_aligned+0x24>
 80075ee:	1a29      	subs	r1, r5, r0
 80075f0:	0020      	movs	r0, r4
 80075f2:	f000 feb7 	bl	8008364 <_sbrk_r>
 80075f6:	3001      	adds	r0, #1
 80075f8:	d1f2      	bne.n	80075e0 <sbrk_aligned+0x24>
 80075fa:	e7ef      	b.n	80075dc <sbrk_aligned+0x20>
 80075fc:	200004bc 	.word	0x200004bc

08007600 <_malloc_r>:
 8007600:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007602:	2203      	movs	r2, #3
 8007604:	1ccb      	adds	r3, r1, #3
 8007606:	4393      	bics	r3, r2
 8007608:	3308      	adds	r3, #8
 800760a:	0005      	movs	r5, r0
 800760c:	001f      	movs	r7, r3
 800760e:	2b0c      	cmp	r3, #12
 8007610:	d234      	bcs.n	800767c <_malloc_r+0x7c>
 8007612:	270c      	movs	r7, #12
 8007614:	42b9      	cmp	r1, r7
 8007616:	d833      	bhi.n	8007680 <_malloc_r+0x80>
 8007618:	0028      	movs	r0, r5
 800761a:	f000 f871 	bl	8007700 <__malloc_lock>
 800761e:	4e37      	ldr	r6, [pc, #220]	@ (80076fc <_malloc_r+0xfc>)
 8007620:	6833      	ldr	r3, [r6, #0]
 8007622:	001c      	movs	r4, r3
 8007624:	2c00      	cmp	r4, #0
 8007626:	d12f      	bne.n	8007688 <_malloc_r+0x88>
 8007628:	0039      	movs	r1, r7
 800762a:	0028      	movs	r0, r5
 800762c:	f7ff ffc6 	bl	80075bc <sbrk_aligned>
 8007630:	0004      	movs	r4, r0
 8007632:	1c43      	adds	r3, r0, #1
 8007634:	d15f      	bne.n	80076f6 <_malloc_r+0xf6>
 8007636:	6834      	ldr	r4, [r6, #0]
 8007638:	9400      	str	r4, [sp, #0]
 800763a:	9b00      	ldr	r3, [sp, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d14a      	bne.n	80076d6 <_malloc_r+0xd6>
 8007640:	2c00      	cmp	r4, #0
 8007642:	d052      	beq.n	80076ea <_malloc_r+0xea>
 8007644:	6823      	ldr	r3, [r4, #0]
 8007646:	0028      	movs	r0, r5
 8007648:	18e3      	adds	r3, r4, r3
 800764a:	9900      	ldr	r1, [sp, #0]
 800764c:	9301      	str	r3, [sp, #4]
 800764e:	f000 fe89 	bl	8008364 <_sbrk_r>
 8007652:	9b01      	ldr	r3, [sp, #4]
 8007654:	4283      	cmp	r3, r0
 8007656:	d148      	bne.n	80076ea <_malloc_r+0xea>
 8007658:	6823      	ldr	r3, [r4, #0]
 800765a:	0028      	movs	r0, r5
 800765c:	1aff      	subs	r7, r7, r3
 800765e:	0039      	movs	r1, r7
 8007660:	f7ff ffac 	bl	80075bc <sbrk_aligned>
 8007664:	3001      	adds	r0, #1
 8007666:	d040      	beq.n	80076ea <_malloc_r+0xea>
 8007668:	6823      	ldr	r3, [r4, #0]
 800766a:	19db      	adds	r3, r3, r7
 800766c:	6023      	str	r3, [r4, #0]
 800766e:	6833      	ldr	r3, [r6, #0]
 8007670:	685a      	ldr	r2, [r3, #4]
 8007672:	2a00      	cmp	r2, #0
 8007674:	d133      	bne.n	80076de <_malloc_r+0xde>
 8007676:	9b00      	ldr	r3, [sp, #0]
 8007678:	6033      	str	r3, [r6, #0]
 800767a:	e019      	b.n	80076b0 <_malloc_r+0xb0>
 800767c:	2b00      	cmp	r3, #0
 800767e:	dac9      	bge.n	8007614 <_malloc_r+0x14>
 8007680:	230c      	movs	r3, #12
 8007682:	602b      	str	r3, [r5, #0]
 8007684:	2000      	movs	r0, #0
 8007686:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007688:	6821      	ldr	r1, [r4, #0]
 800768a:	1bc9      	subs	r1, r1, r7
 800768c:	d420      	bmi.n	80076d0 <_malloc_r+0xd0>
 800768e:	290b      	cmp	r1, #11
 8007690:	d90a      	bls.n	80076a8 <_malloc_r+0xa8>
 8007692:	19e2      	adds	r2, r4, r7
 8007694:	6027      	str	r7, [r4, #0]
 8007696:	42a3      	cmp	r3, r4
 8007698:	d104      	bne.n	80076a4 <_malloc_r+0xa4>
 800769a:	6032      	str	r2, [r6, #0]
 800769c:	6863      	ldr	r3, [r4, #4]
 800769e:	6011      	str	r1, [r2, #0]
 80076a0:	6053      	str	r3, [r2, #4]
 80076a2:	e005      	b.n	80076b0 <_malloc_r+0xb0>
 80076a4:	605a      	str	r2, [r3, #4]
 80076a6:	e7f9      	b.n	800769c <_malloc_r+0x9c>
 80076a8:	6862      	ldr	r2, [r4, #4]
 80076aa:	42a3      	cmp	r3, r4
 80076ac:	d10e      	bne.n	80076cc <_malloc_r+0xcc>
 80076ae:	6032      	str	r2, [r6, #0]
 80076b0:	0028      	movs	r0, r5
 80076b2:	f000 f82d 	bl	8007710 <__malloc_unlock>
 80076b6:	0020      	movs	r0, r4
 80076b8:	2207      	movs	r2, #7
 80076ba:	300b      	adds	r0, #11
 80076bc:	1d23      	adds	r3, r4, #4
 80076be:	4390      	bics	r0, r2
 80076c0:	1ac2      	subs	r2, r0, r3
 80076c2:	4298      	cmp	r0, r3
 80076c4:	d0df      	beq.n	8007686 <_malloc_r+0x86>
 80076c6:	1a1b      	subs	r3, r3, r0
 80076c8:	50a3      	str	r3, [r4, r2]
 80076ca:	e7dc      	b.n	8007686 <_malloc_r+0x86>
 80076cc:	605a      	str	r2, [r3, #4]
 80076ce:	e7ef      	b.n	80076b0 <_malloc_r+0xb0>
 80076d0:	0023      	movs	r3, r4
 80076d2:	6864      	ldr	r4, [r4, #4]
 80076d4:	e7a6      	b.n	8007624 <_malloc_r+0x24>
 80076d6:	9c00      	ldr	r4, [sp, #0]
 80076d8:	6863      	ldr	r3, [r4, #4]
 80076da:	9300      	str	r3, [sp, #0]
 80076dc:	e7ad      	b.n	800763a <_malloc_r+0x3a>
 80076de:	001a      	movs	r2, r3
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	42a3      	cmp	r3, r4
 80076e4:	d1fb      	bne.n	80076de <_malloc_r+0xde>
 80076e6:	2300      	movs	r3, #0
 80076e8:	e7da      	b.n	80076a0 <_malloc_r+0xa0>
 80076ea:	230c      	movs	r3, #12
 80076ec:	0028      	movs	r0, r5
 80076ee:	602b      	str	r3, [r5, #0]
 80076f0:	f000 f80e 	bl	8007710 <__malloc_unlock>
 80076f4:	e7c6      	b.n	8007684 <_malloc_r+0x84>
 80076f6:	6007      	str	r7, [r0, #0]
 80076f8:	e7da      	b.n	80076b0 <_malloc_r+0xb0>
 80076fa:	46c0      	nop			@ (mov r8, r8)
 80076fc:	200004c0 	.word	0x200004c0

08007700 <__malloc_lock>:
 8007700:	b510      	push	{r4, lr}
 8007702:	4802      	ldr	r0, [pc, #8]	@ (800770c <__malloc_lock+0xc>)
 8007704:	f7ff f883 	bl	800680e <__retarget_lock_acquire_recursive>
 8007708:	bd10      	pop	{r4, pc}
 800770a:	46c0      	nop			@ (mov r8, r8)
 800770c:	200004b8 	.word	0x200004b8

08007710 <__malloc_unlock>:
 8007710:	b510      	push	{r4, lr}
 8007712:	4802      	ldr	r0, [pc, #8]	@ (800771c <__malloc_unlock+0xc>)
 8007714:	f7ff f87c 	bl	8006810 <__retarget_lock_release_recursive>
 8007718:	bd10      	pop	{r4, pc}
 800771a:	46c0      	nop			@ (mov r8, r8)
 800771c:	200004b8 	.word	0x200004b8

08007720 <_Balloc>:
 8007720:	b570      	push	{r4, r5, r6, lr}
 8007722:	69c5      	ldr	r5, [r0, #28]
 8007724:	0006      	movs	r6, r0
 8007726:	000c      	movs	r4, r1
 8007728:	2d00      	cmp	r5, #0
 800772a:	d10e      	bne.n	800774a <_Balloc+0x2a>
 800772c:	2010      	movs	r0, #16
 800772e:	f7ff ff3b 	bl	80075a8 <malloc>
 8007732:	1e02      	subs	r2, r0, #0
 8007734:	61f0      	str	r0, [r6, #28]
 8007736:	d104      	bne.n	8007742 <_Balloc+0x22>
 8007738:	216b      	movs	r1, #107	@ 0x6b
 800773a:	4b19      	ldr	r3, [pc, #100]	@ (80077a0 <_Balloc+0x80>)
 800773c:	4819      	ldr	r0, [pc, #100]	@ (80077a4 <_Balloc+0x84>)
 800773e:	f000 fe2d 	bl	800839c <__assert_func>
 8007742:	6045      	str	r5, [r0, #4]
 8007744:	6085      	str	r5, [r0, #8]
 8007746:	6005      	str	r5, [r0, #0]
 8007748:	60c5      	str	r5, [r0, #12]
 800774a:	69f5      	ldr	r5, [r6, #28]
 800774c:	68eb      	ldr	r3, [r5, #12]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d013      	beq.n	800777a <_Balloc+0x5a>
 8007752:	69f3      	ldr	r3, [r6, #28]
 8007754:	00a2      	lsls	r2, r4, #2
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	189b      	adds	r3, r3, r2
 800775a:	6818      	ldr	r0, [r3, #0]
 800775c:	2800      	cmp	r0, #0
 800775e:	d118      	bne.n	8007792 <_Balloc+0x72>
 8007760:	2101      	movs	r1, #1
 8007762:	000d      	movs	r5, r1
 8007764:	40a5      	lsls	r5, r4
 8007766:	1d6a      	adds	r2, r5, #5
 8007768:	0030      	movs	r0, r6
 800776a:	0092      	lsls	r2, r2, #2
 800776c:	f000 fe34 	bl	80083d8 <_calloc_r>
 8007770:	2800      	cmp	r0, #0
 8007772:	d00c      	beq.n	800778e <_Balloc+0x6e>
 8007774:	6044      	str	r4, [r0, #4]
 8007776:	6085      	str	r5, [r0, #8]
 8007778:	e00d      	b.n	8007796 <_Balloc+0x76>
 800777a:	2221      	movs	r2, #33	@ 0x21
 800777c:	2104      	movs	r1, #4
 800777e:	0030      	movs	r0, r6
 8007780:	f000 fe2a 	bl	80083d8 <_calloc_r>
 8007784:	69f3      	ldr	r3, [r6, #28]
 8007786:	60e8      	str	r0, [r5, #12]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1e1      	bne.n	8007752 <_Balloc+0x32>
 800778e:	2000      	movs	r0, #0
 8007790:	bd70      	pop	{r4, r5, r6, pc}
 8007792:	6802      	ldr	r2, [r0, #0]
 8007794:	601a      	str	r2, [r3, #0]
 8007796:	2300      	movs	r3, #0
 8007798:	6103      	str	r3, [r0, #16]
 800779a:	60c3      	str	r3, [r0, #12]
 800779c:	e7f8      	b.n	8007790 <_Balloc+0x70>
 800779e:	46c0      	nop			@ (mov r8, r8)
 80077a0:	0800869d 	.word	0x0800869d
 80077a4:	0800871d 	.word	0x0800871d

080077a8 <_Bfree>:
 80077a8:	b570      	push	{r4, r5, r6, lr}
 80077aa:	69c6      	ldr	r6, [r0, #28]
 80077ac:	0005      	movs	r5, r0
 80077ae:	000c      	movs	r4, r1
 80077b0:	2e00      	cmp	r6, #0
 80077b2:	d10e      	bne.n	80077d2 <_Bfree+0x2a>
 80077b4:	2010      	movs	r0, #16
 80077b6:	f7ff fef7 	bl	80075a8 <malloc>
 80077ba:	1e02      	subs	r2, r0, #0
 80077bc:	61e8      	str	r0, [r5, #28]
 80077be:	d104      	bne.n	80077ca <_Bfree+0x22>
 80077c0:	218f      	movs	r1, #143	@ 0x8f
 80077c2:	4b09      	ldr	r3, [pc, #36]	@ (80077e8 <_Bfree+0x40>)
 80077c4:	4809      	ldr	r0, [pc, #36]	@ (80077ec <_Bfree+0x44>)
 80077c6:	f000 fde9 	bl	800839c <__assert_func>
 80077ca:	6046      	str	r6, [r0, #4]
 80077cc:	6086      	str	r6, [r0, #8]
 80077ce:	6006      	str	r6, [r0, #0]
 80077d0:	60c6      	str	r6, [r0, #12]
 80077d2:	2c00      	cmp	r4, #0
 80077d4:	d007      	beq.n	80077e6 <_Bfree+0x3e>
 80077d6:	69eb      	ldr	r3, [r5, #28]
 80077d8:	6862      	ldr	r2, [r4, #4]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	0092      	lsls	r2, r2, #2
 80077de:	189b      	adds	r3, r3, r2
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	6022      	str	r2, [r4, #0]
 80077e4:	601c      	str	r4, [r3, #0]
 80077e6:	bd70      	pop	{r4, r5, r6, pc}
 80077e8:	0800869d 	.word	0x0800869d
 80077ec:	0800871d 	.word	0x0800871d

080077f0 <__multadd>:
 80077f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077f2:	000f      	movs	r7, r1
 80077f4:	9001      	str	r0, [sp, #4]
 80077f6:	000c      	movs	r4, r1
 80077f8:	001e      	movs	r6, r3
 80077fa:	2000      	movs	r0, #0
 80077fc:	690d      	ldr	r5, [r1, #16]
 80077fe:	3714      	adds	r7, #20
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	3001      	adds	r0, #1
 8007804:	b299      	uxth	r1, r3
 8007806:	4351      	muls	r1, r2
 8007808:	0c1b      	lsrs	r3, r3, #16
 800780a:	4353      	muls	r3, r2
 800780c:	1989      	adds	r1, r1, r6
 800780e:	0c0e      	lsrs	r6, r1, #16
 8007810:	199b      	adds	r3, r3, r6
 8007812:	0c1e      	lsrs	r6, r3, #16
 8007814:	b289      	uxth	r1, r1
 8007816:	041b      	lsls	r3, r3, #16
 8007818:	185b      	adds	r3, r3, r1
 800781a:	c708      	stmia	r7!, {r3}
 800781c:	4285      	cmp	r5, r0
 800781e:	dcef      	bgt.n	8007800 <__multadd+0x10>
 8007820:	2e00      	cmp	r6, #0
 8007822:	d022      	beq.n	800786a <__multadd+0x7a>
 8007824:	68a3      	ldr	r3, [r4, #8]
 8007826:	42ab      	cmp	r3, r5
 8007828:	dc19      	bgt.n	800785e <__multadd+0x6e>
 800782a:	6861      	ldr	r1, [r4, #4]
 800782c:	9801      	ldr	r0, [sp, #4]
 800782e:	3101      	adds	r1, #1
 8007830:	f7ff ff76 	bl	8007720 <_Balloc>
 8007834:	1e07      	subs	r7, r0, #0
 8007836:	d105      	bne.n	8007844 <__multadd+0x54>
 8007838:	003a      	movs	r2, r7
 800783a:	21ba      	movs	r1, #186	@ 0xba
 800783c:	4b0c      	ldr	r3, [pc, #48]	@ (8007870 <__multadd+0x80>)
 800783e:	480d      	ldr	r0, [pc, #52]	@ (8007874 <__multadd+0x84>)
 8007840:	f000 fdac 	bl	800839c <__assert_func>
 8007844:	0021      	movs	r1, r4
 8007846:	6922      	ldr	r2, [r4, #16]
 8007848:	310c      	adds	r1, #12
 800784a:	3202      	adds	r2, #2
 800784c:	0092      	lsls	r2, r2, #2
 800784e:	300c      	adds	r0, #12
 8007850:	f000 fd9a 	bl	8008388 <memcpy>
 8007854:	0021      	movs	r1, r4
 8007856:	9801      	ldr	r0, [sp, #4]
 8007858:	f7ff ffa6 	bl	80077a8 <_Bfree>
 800785c:	003c      	movs	r4, r7
 800785e:	1d2b      	adds	r3, r5, #4
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	18e3      	adds	r3, r4, r3
 8007864:	3501      	adds	r5, #1
 8007866:	605e      	str	r6, [r3, #4]
 8007868:	6125      	str	r5, [r4, #16]
 800786a:	0020      	movs	r0, r4
 800786c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800786e:	46c0      	nop			@ (mov r8, r8)
 8007870:	0800870c 	.word	0x0800870c
 8007874:	0800871d 	.word	0x0800871d

08007878 <__hi0bits>:
 8007878:	2280      	movs	r2, #128	@ 0x80
 800787a:	0003      	movs	r3, r0
 800787c:	0252      	lsls	r2, r2, #9
 800787e:	2000      	movs	r0, #0
 8007880:	4293      	cmp	r3, r2
 8007882:	d201      	bcs.n	8007888 <__hi0bits+0x10>
 8007884:	041b      	lsls	r3, r3, #16
 8007886:	3010      	adds	r0, #16
 8007888:	2280      	movs	r2, #128	@ 0x80
 800788a:	0452      	lsls	r2, r2, #17
 800788c:	4293      	cmp	r3, r2
 800788e:	d201      	bcs.n	8007894 <__hi0bits+0x1c>
 8007890:	3008      	adds	r0, #8
 8007892:	021b      	lsls	r3, r3, #8
 8007894:	2280      	movs	r2, #128	@ 0x80
 8007896:	0552      	lsls	r2, r2, #21
 8007898:	4293      	cmp	r3, r2
 800789a:	d201      	bcs.n	80078a0 <__hi0bits+0x28>
 800789c:	3004      	adds	r0, #4
 800789e:	011b      	lsls	r3, r3, #4
 80078a0:	2280      	movs	r2, #128	@ 0x80
 80078a2:	05d2      	lsls	r2, r2, #23
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d201      	bcs.n	80078ac <__hi0bits+0x34>
 80078a8:	3002      	adds	r0, #2
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	db03      	blt.n	80078b8 <__hi0bits+0x40>
 80078b0:	3001      	adds	r0, #1
 80078b2:	4213      	tst	r3, r2
 80078b4:	d100      	bne.n	80078b8 <__hi0bits+0x40>
 80078b6:	2020      	movs	r0, #32
 80078b8:	4770      	bx	lr

080078ba <__lo0bits>:
 80078ba:	6803      	ldr	r3, [r0, #0]
 80078bc:	0001      	movs	r1, r0
 80078be:	2207      	movs	r2, #7
 80078c0:	0018      	movs	r0, r3
 80078c2:	4010      	ands	r0, r2
 80078c4:	4213      	tst	r3, r2
 80078c6:	d00d      	beq.n	80078e4 <__lo0bits+0x2a>
 80078c8:	3a06      	subs	r2, #6
 80078ca:	2000      	movs	r0, #0
 80078cc:	4213      	tst	r3, r2
 80078ce:	d105      	bne.n	80078dc <__lo0bits+0x22>
 80078d0:	3002      	adds	r0, #2
 80078d2:	4203      	tst	r3, r0
 80078d4:	d003      	beq.n	80078de <__lo0bits+0x24>
 80078d6:	40d3      	lsrs	r3, r2
 80078d8:	0010      	movs	r0, r2
 80078da:	600b      	str	r3, [r1, #0]
 80078dc:	4770      	bx	lr
 80078de:	089b      	lsrs	r3, r3, #2
 80078e0:	600b      	str	r3, [r1, #0]
 80078e2:	e7fb      	b.n	80078dc <__lo0bits+0x22>
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	2a00      	cmp	r2, #0
 80078e8:	d101      	bne.n	80078ee <__lo0bits+0x34>
 80078ea:	2010      	movs	r0, #16
 80078ec:	0c1b      	lsrs	r3, r3, #16
 80078ee:	b2da      	uxtb	r2, r3
 80078f0:	2a00      	cmp	r2, #0
 80078f2:	d101      	bne.n	80078f8 <__lo0bits+0x3e>
 80078f4:	3008      	adds	r0, #8
 80078f6:	0a1b      	lsrs	r3, r3, #8
 80078f8:	071a      	lsls	r2, r3, #28
 80078fa:	d101      	bne.n	8007900 <__lo0bits+0x46>
 80078fc:	3004      	adds	r0, #4
 80078fe:	091b      	lsrs	r3, r3, #4
 8007900:	079a      	lsls	r2, r3, #30
 8007902:	d101      	bne.n	8007908 <__lo0bits+0x4e>
 8007904:	3002      	adds	r0, #2
 8007906:	089b      	lsrs	r3, r3, #2
 8007908:	07da      	lsls	r2, r3, #31
 800790a:	d4e9      	bmi.n	80078e0 <__lo0bits+0x26>
 800790c:	3001      	adds	r0, #1
 800790e:	085b      	lsrs	r3, r3, #1
 8007910:	d1e6      	bne.n	80078e0 <__lo0bits+0x26>
 8007912:	2020      	movs	r0, #32
 8007914:	e7e2      	b.n	80078dc <__lo0bits+0x22>
	...

08007918 <__i2b>:
 8007918:	b510      	push	{r4, lr}
 800791a:	000c      	movs	r4, r1
 800791c:	2101      	movs	r1, #1
 800791e:	f7ff feff 	bl	8007720 <_Balloc>
 8007922:	2800      	cmp	r0, #0
 8007924:	d107      	bne.n	8007936 <__i2b+0x1e>
 8007926:	2146      	movs	r1, #70	@ 0x46
 8007928:	4c05      	ldr	r4, [pc, #20]	@ (8007940 <__i2b+0x28>)
 800792a:	0002      	movs	r2, r0
 800792c:	4b05      	ldr	r3, [pc, #20]	@ (8007944 <__i2b+0x2c>)
 800792e:	0020      	movs	r0, r4
 8007930:	31ff      	adds	r1, #255	@ 0xff
 8007932:	f000 fd33 	bl	800839c <__assert_func>
 8007936:	2301      	movs	r3, #1
 8007938:	6144      	str	r4, [r0, #20]
 800793a:	6103      	str	r3, [r0, #16]
 800793c:	bd10      	pop	{r4, pc}
 800793e:	46c0      	nop			@ (mov r8, r8)
 8007940:	0800871d 	.word	0x0800871d
 8007944:	0800870c 	.word	0x0800870c

08007948 <__multiply>:
 8007948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800794a:	0014      	movs	r4, r2
 800794c:	690a      	ldr	r2, [r1, #16]
 800794e:	6923      	ldr	r3, [r4, #16]
 8007950:	000d      	movs	r5, r1
 8007952:	b089      	sub	sp, #36	@ 0x24
 8007954:	429a      	cmp	r2, r3
 8007956:	db02      	blt.n	800795e <__multiply+0x16>
 8007958:	0023      	movs	r3, r4
 800795a:	000c      	movs	r4, r1
 800795c:	001d      	movs	r5, r3
 800795e:	6927      	ldr	r7, [r4, #16]
 8007960:	692e      	ldr	r6, [r5, #16]
 8007962:	6861      	ldr	r1, [r4, #4]
 8007964:	19bb      	adds	r3, r7, r6
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	68a3      	ldr	r3, [r4, #8]
 800796a:	19ba      	adds	r2, r7, r6
 800796c:	4293      	cmp	r3, r2
 800796e:	da00      	bge.n	8007972 <__multiply+0x2a>
 8007970:	3101      	adds	r1, #1
 8007972:	f7ff fed5 	bl	8007720 <_Balloc>
 8007976:	4684      	mov	ip, r0
 8007978:	2800      	cmp	r0, #0
 800797a:	d106      	bne.n	800798a <__multiply+0x42>
 800797c:	21b1      	movs	r1, #177	@ 0xb1
 800797e:	4662      	mov	r2, ip
 8007980:	4b44      	ldr	r3, [pc, #272]	@ (8007a94 <__multiply+0x14c>)
 8007982:	4845      	ldr	r0, [pc, #276]	@ (8007a98 <__multiply+0x150>)
 8007984:	0049      	lsls	r1, r1, #1
 8007986:	f000 fd09 	bl	800839c <__assert_func>
 800798a:	0002      	movs	r2, r0
 800798c:	19bb      	adds	r3, r7, r6
 800798e:	3214      	adds	r2, #20
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	18d3      	adds	r3, r2, r3
 8007994:	9301      	str	r3, [sp, #4]
 8007996:	2100      	movs	r1, #0
 8007998:	0013      	movs	r3, r2
 800799a:	9801      	ldr	r0, [sp, #4]
 800799c:	4283      	cmp	r3, r0
 800799e:	d328      	bcc.n	80079f2 <__multiply+0xaa>
 80079a0:	0023      	movs	r3, r4
 80079a2:	00bf      	lsls	r7, r7, #2
 80079a4:	3314      	adds	r3, #20
 80079a6:	9304      	str	r3, [sp, #16]
 80079a8:	3514      	adds	r5, #20
 80079aa:	19db      	adds	r3, r3, r7
 80079ac:	00b6      	lsls	r6, r6, #2
 80079ae:	9302      	str	r3, [sp, #8]
 80079b0:	19ab      	adds	r3, r5, r6
 80079b2:	9307      	str	r3, [sp, #28]
 80079b4:	2304      	movs	r3, #4
 80079b6:	9305      	str	r3, [sp, #20]
 80079b8:	0023      	movs	r3, r4
 80079ba:	9902      	ldr	r1, [sp, #8]
 80079bc:	3315      	adds	r3, #21
 80079be:	4299      	cmp	r1, r3
 80079c0:	d305      	bcc.n	80079ce <__multiply+0x86>
 80079c2:	1b0c      	subs	r4, r1, r4
 80079c4:	3c15      	subs	r4, #21
 80079c6:	08a4      	lsrs	r4, r4, #2
 80079c8:	3401      	adds	r4, #1
 80079ca:	00a3      	lsls	r3, r4, #2
 80079cc:	9305      	str	r3, [sp, #20]
 80079ce:	9b07      	ldr	r3, [sp, #28]
 80079d0:	429d      	cmp	r5, r3
 80079d2:	d310      	bcc.n	80079f6 <__multiply+0xae>
 80079d4:	9b00      	ldr	r3, [sp, #0]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	dd05      	ble.n	80079e6 <__multiply+0x9e>
 80079da:	9b01      	ldr	r3, [sp, #4]
 80079dc:	3b04      	subs	r3, #4
 80079de:	9301      	str	r3, [sp, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d052      	beq.n	8007a8c <__multiply+0x144>
 80079e6:	4663      	mov	r3, ip
 80079e8:	4660      	mov	r0, ip
 80079ea:	9a00      	ldr	r2, [sp, #0]
 80079ec:	611a      	str	r2, [r3, #16]
 80079ee:	b009      	add	sp, #36	@ 0x24
 80079f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079f2:	c302      	stmia	r3!, {r1}
 80079f4:	e7d1      	b.n	800799a <__multiply+0x52>
 80079f6:	682c      	ldr	r4, [r5, #0]
 80079f8:	b2a4      	uxth	r4, r4
 80079fa:	2c00      	cmp	r4, #0
 80079fc:	d01f      	beq.n	8007a3e <__multiply+0xf6>
 80079fe:	2300      	movs	r3, #0
 8007a00:	0017      	movs	r7, r2
 8007a02:	9e04      	ldr	r6, [sp, #16]
 8007a04:	9303      	str	r3, [sp, #12]
 8007a06:	ce08      	ldmia	r6!, {r3}
 8007a08:	6839      	ldr	r1, [r7, #0]
 8007a0a:	9306      	str	r3, [sp, #24]
 8007a0c:	466b      	mov	r3, sp
 8007a0e:	8b1b      	ldrh	r3, [r3, #24]
 8007a10:	b288      	uxth	r0, r1
 8007a12:	4363      	muls	r3, r4
 8007a14:	181b      	adds	r3, r3, r0
 8007a16:	9803      	ldr	r0, [sp, #12]
 8007a18:	0c09      	lsrs	r1, r1, #16
 8007a1a:	181b      	adds	r3, r3, r0
 8007a1c:	9806      	ldr	r0, [sp, #24]
 8007a1e:	0c00      	lsrs	r0, r0, #16
 8007a20:	4360      	muls	r0, r4
 8007a22:	1840      	adds	r0, r0, r1
 8007a24:	0c19      	lsrs	r1, r3, #16
 8007a26:	1841      	adds	r1, r0, r1
 8007a28:	0c08      	lsrs	r0, r1, #16
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	0409      	lsls	r1, r1, #16
 8007a2e:	4319      	orrs	r1, r3
 8007a30:	9b02      	ldr	r3, [sp, #8]
 8007a32:	9003      	str	r0, [sp, #12]
 8007a34:	c702      	stmia	r7!, {r1}
 8007a36:	42b3      	cmp	r3, r6
 8007a38:	d8e5      	bhi.n	8007a06 <__multiply+0xbe>
 8007a3a:	9b05      	ldr	r3, [sp, #20]
 8007a3c:	50d0      	str	r0, [r2, r3]
 8007a3e:	682c      	ldr	r4, [r5, #0]
 8007a40:	0c24      	lsrs	r4, r4, #16
 8007a42:	d020      	beq.n	8007a86 <__multiply+0x13e>
 8007a44:	2100      	movs	r1, #0
 8007a46:	0010      	movs	r0, r2
 8007a48:	6813      	ldr	r3, [r2, #0]
 8007a4a:	9e04      	ldr	r6, [sp, #16]
 8007a4c:	9103      	str	r1, [sp, #12]
 8007a4e:	6831      	ldr	r1, [r6, #0]
 8007a50:	6807      	ldr	r7, [r0, #0]
 8007a52:	b289      	uxth	r1, r1
 8007a54:	4361      	muls	r1, r4
 8007a56:	0c3f      	lsrs	r7, r7, #16
 8007a58:	19c9      	adds	r1, r1, r7
 8007a5a:	9f03      	ldr	r7, [sp, #12]
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	19c9      	adds	r1, r1, r7
 8007a60:	040f      	lsls	r7, r1, #16
 8007a62:	431f      	orrs	r7, r3
 8007a64:	6007      	str	r7, [r0, #0]
 8007a66:	ce80      	ldmia	r6!, {r7}
 8007a68:	6843      	ldr	r3, [r0, #4]
 8007a6a:	0c3f      	lsrs	r7, r7, #16
 8007a6c:	4367      	muls	r7, r4
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	0c09      	lsrs	r1, r1, #16
 8007a72:	18fb      	adds	r3, r7, r3
 8007a74:	185b      	adds	r3, r3, r1
 8007a76:	0c19      	lsrs	r1, r3, #16
 8007a78:	9103      	str	r1, [sp, #12]
 8007a7a:	9902      	ldr	r1, [sp, #8]
 8007a7c:	3004      	adds	r0, #4
 8007a7e:	42b1      	cmp	r1, r6
 8007a80:	d8e5      	bhi.n	8007a4e <__multiply+0x106>
 8007a82:	9905      	ldr	r1, [sp, #20]
 8007a84:	5053      	str	r3, [r2, r1]
 8007a86:	3504      	adds	r5, #4
 8007a88:	3204      	adds	r2, #4
 8007a8a:	e7a0      	b.n	80079ce <__multiply+0x86>
 8007a8c:	9b00      	ldr	r3, [sp, #0]
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	9300      	str	r3, [sp, #0]
 8007a92:	e79f      	b.n	80079d4 <__multiply+0x8c>
 8007a94:	0800870c 	.word	0x0800870c
 8007a98:	0800871d 	.word	0x0800871d

08007a9c <__pow5mult>:
 8007a9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a9e:	2303      	movs	r3, #3
 8007aa0:	0015      	movs	r5, r2
 8007aa2:	0007      	movs	r7, r0
 8007aa4:	000e      	movs	r6, r1
 8007aa6:	401a      	ands	r2, r3
 8007aa8:	421d      	tst	r5, r3
 8007aaa:	d008      	beq.n	8007abe <__pow5mult+0x22>
 8007aac:	4925      	ldr	r1, [pc, #148]	@ (8007b44 <__pow5mult+0xa8>)
 8007aae:	3a01      	subs	r2, #1
 8007ab0:	0092      	lsls	r2, r2, #2
 8007ab2:	5852      	ldr	r2, [r2, r1]
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	0031      	movs	r1, r6
 8007ab8:	f7ff fe9a 	bl	80077f0 <__multadd>
 8007abc:	0006      	movs	r6, r0
 8007abe:	10ad      	asrs	r5, r5, #2
 8007ac0:	d03d      	beq.n	8007b3e <__pow5mult+0xa2>
 8007ac2:	69fc      	ldr	r4, [r7, #28]
 8007ac4:	2c00      	cmp	r4, #0
 8007ac6:	d10f      	bne.n	8007ae8 <__pow5mult+0x4c>
 8007ac8:	2010      	movs	r0, #16
 8007aca:	f7ff fd6d 	bl	80075a8 <malloc>
 8007ace:	1e02      	subs	r2, r0, #0
 8007ad0:	61f8      	str	r0, [r7, #28]
 8007ad2:	d105      	bne.n	8007ae0 <__pow5mult+0x44>
 8007ad4:	21b4      	movs	r1, #180	@ 0xb4
 8007ad6:	4b1c      	ldr	r3, [pc, #112]	@ (8007b48 <__pow5mult+0xac>)
 8007ad8:	481c      	ldr	r0, [pc, #112]	@ (8007b4c <__pow5mult+0xb0>)
 8007ada:	31ff      	adds	r1, #255	@ 0xff
 8007adc:	f000 fc5e 	bl	800839c <__assert_func>
 8007ae0:	6044      	str	r4, [r0, #4]
 8007ae2:	6084      	str	r4, [r0, #8]
 8007ae4:	6004      	str	r4, [r0, #0]
 8007ae6:	60c4      	str	r4, [r0, #12]
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	689c      	ldr	r4, [r3, #8]
 8007aec:	9301      	str	r3, [sp, #4]
 8007aee:	2c00      	cmp	r4, #0
 8007af0:	d108      	bne.n	8007b04 <__pow5mult+0x68>
 8007af2:	0038      	movs	r0, r7
 8007af4:	4916      	ldr	r1, [pc, #88]	@ (8007b50 <__pow5mult+0xb4>)
 8007af6:	f7ff ff0f 	bl	8007918 <__i2b>
 8007afa:	9b01      	ldr	r3, [sp, #4]
 8007afc:	0004      	movs	r4, r0
 8007afe:	6098      	str	r0, [r3, #8]
 8007b00:	2300      	movs	r3, #0
 8007b02:	6003      	str	r3, [r0, #0]
 8007b04:	2301      	movs	r3, #1
 8007b06:	421d      	tst	r5, r3
 8007b08:	d00a      	beq.n	8007b20 <__pow5mult+0x84>
 8007b0a:	0031      	movs	r1, r6
 8007b0c:	0022      	movs	r2, r4
 8007b0e:	0038      	movs	r0, r7
 8007b10:	f7ff ff1a 	bl	8007948 <__multiply>
 8007b14:	0031      	movs	r1, r6
 8007b16:	9001      	str	r0, [sp, #4]
 8007b18:	0038      	movs	r0, r7
 8007b1a:	f7ff fe45 	bl	80077a8 <_Bfree>
 8007b1e:	9e01      	ldr	r6, [sp, #4]
 8007b20:	106d      	asrs	r5, r5, #1
 8007b22:	d00c      	beq.n	8007b3e <__pow5mult+0xa2>
 8007b24:	6820      	ldr	r0, [r4, #0]
 8007b26:	2800      	cmp	r0, #0
 8007b28:	d107      	bne.n	8007b3a <__pow5mult+0x9e>
 8007b2a:	0022      	movs	r2, r4
 8007b2c:	0021      	movs	r1, r4
 8007b2e:	0038      	movs	r0, r7
 8007b30:	f7ff ff0a 	bl	8007948 <__multiply>
 8007b34:	2300      	movs	r3, #0
 8007b36:	6020      	str	r0, [r4, #0]
 8007b38:	6003      	str	r3, [r0, #0]
 8007b3a:	0004      	movs	r4, r0
 8007b3c:	e7e2      	b.n	8007b04 <__pow5mult+0x68>
 8007b3e:	0030      	movs	r0, r6
 8007b40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007b42:	46c0      	nop			@ (mov r8, r8)
 8007b44:	080087d0 	.word	0x080087d0
 8007b48:	0800869d 	.word	0x0800869d
 8007b4c:	0800871d 	.word	0x0800871d
 8007b50:	00000271 	.word	0x00000271

08007b54 <__lshift>:
 8007b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b56:	000c      	movs	r4, r1
 8007b58:	0016      	movs	r6, r2
 8007b5a:	6923      	ldr	r3, [r4, #16]
 8007b5c:	1157      	asrs	r7, r2, #5
 8007b5e:	b085      	sub	sp, #20
 8007b60:	18fb      	adds	r3, r7, r3
 8007b62:	9301      	str	r3, [sp, #4]
 8007b64:	3301      	adds	r3, #1
 8007b66:	9300      	str	r3, [sp, #0]
 8007b68:	6849      	ldr	r1, [r1, #4]
 8007b6a:	68a3      	ldr	r3, [r4, #8]
 8007b6c:	9002      	str	r0, [sp, #8]
 8007b6e:	9a00      	ldr	r2, [sp, #0]
 8007b70:	4293      	cmp	r3, r2
 8007b72:	db10      	blt.n	8007b96 <__lshift+0x42>
 8007b74:	9802      	ldr	r0, [sp, #8]
 8007b76:	f7ff fdd3 	bl	8007720 <_Balloc>
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	0001      	movs	r1, r0
 8007b7e:	0005      	movs	r5, r0
 8007b80:	001a      	movs	r2, r3
 8007b82:	3114      	adds	r1, #20
 8007b84:	4298      	cmp	r0, r3
 8007b86:	d10c      	bne.n	8007ba2 <__lshift+0x4e>
 8007b88:	21ef      	movs	r1, #239	@ 0xef
 8007b8a:	002a      	movs	r2, r5
 8007b8c:	4b25      	ldr	r3, [pc, #148]	@ (8007c24 <__lshift+0xd0>)
 8007b8e:	4826      	ldr	r0, [pc, #152]	@ (8007c28 <__lshift+0xd4>)
 8007b90:	0049      	lsls	r1, r1, #1
 8007b92:	f000 fc03 	bl	800839c <__assert_func>
 8007b96:	3101      	adds	r1, #1
 8007b98:	005b      	lsls	r3, r3, #1
 8007b9a:	e7e8      	b.n	8007b6e <__lshift+0x1a>
 8007b9c:	0098      	lsls	r0, r3, #2
 8007b9e:	500a      	str	r2, [r1, r0]
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	42bb      	cmp	r3, r7
 8007ba4:	dbfa      	blt.n	8007b9c <__lshift+0x48>
 8007ba6:	43fb      	mvns	r3, r7
 8007ba8:	17db      	asrs	r3, r3, #31
 8007baa:	401f      	ands	r7, r3
 8007bac:	00bf      	lsls	r7, r7, #2
 8007bae:	0023      	movs	r3, r4
 8007bb0:	201f      	movs	r0, #31
 8007bb2:	19c9      	adds	r1, r1, r7
 8007bb4:	0037      	movs	r7, r6
 8007bb6:	6922      	ldr	r2, [r4, #16]
 8007bb8:	3314      	adds	r3, #20
 8007bba:	0092      	lsls	r2, r2, #2
 8007bbc:	189a      	adds	r2, r3, r2
 8007bbe:	4007      	ands	r7, r0
 8007bc0:	4206      	tst	r6, r0
 8007bc2:	d029      	beq.n	8007c18 <__lshift+0xc4>
 8007bc4:	3001      	adds	r0, #1
 8007bc6:	1bc0      	subs	r0, r0, r7
 8007bc8:	9003      	str	r0, [sp, #12]
 8007bca:	468c      	mov	ip, r1
 8007bcc:	2000      	movs	r0, #0
 8007bce:	681e      	ldr	r6, [r3, #0]
 8007bd0:	40be      	lsls	r6, r7
 8007bd2:	4306      	orrs	r6, r0
 8007bd4:	4660      	mov	r0, ip
 8007bd6:	c040      	stmia	r0!, {r6}
 8007bd8:	4684      	mov	ip, r0
 8007bda:	9e03      	ldr	r6, [sp, #12]
 8007bdc:	cb01      	ldmia	r3!, {r0}
 8007bde:	40f0      	lsrs	r0, r6
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d8f4      	bhi.n	8007bce <__lshift+0x7a>
 8007be4:	0026      	movs	r6, r4
 8007be6:	3615      	adds	r6, #21
 8007be8:	2304      	movs	r3, #4
 8007bea:	42b2      	cmp	r2, r6
 8007bec:	d304      	bcc.n	8007bf8 <__lshift+0xa4>
 8007bee:	1b13      	subs	r3, r2, r4
 8007bf0:	3b15      	subs	r3, #21
 8007bf2:	089b      	lsrs	r3, r3, #2
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	50c8      	str	r0, [r1, r3]
 8007bfa:	2800      	cmp	r0, #0
 8007bfc:	d002      	beq.n	8007c04 <__lshift+0xb0>
 8007bfe:	9b01      	ldr	r3, [sp, #4]
 8007c00:	3302      	adds	r3, #2
 8007c02:	9300      	str	r3, [sp, #0]
 8007c04:	9b00      	ldr	r3, [sp, #0]
 8007c06:	9802      	ldr	r0, [sp, #8]
 8007c08:	3b01      	subs	r3, #1
 8007c0a:	0021      	movs	r1, r4
 8007c0c:	612b      	str	r3, [r5, #16]
 8007c0e:	f7ff fdcb 	bl	80077a8 <_Bfree>
 8007c12:	0028      	movs	r0, r5
 8007c14:	b005      	add	sp, #20
 8007c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c18:	cb01      	ldmia	r3!, {r0}
 8007c1a:	c101      	stmia	r1!, {r0}
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d8fb      	bhi.n	8007c18 <__lshift+0xc4>
 8007c20:	e7f0      	b.n	8007c04 <__lshift+0xb0>
 8007c22:	46c0      	nop			@ (mov r8, r8)
 8007c24:	0800870c 	.word	0x0800870c
 8007c28:	0800871d 	.word	0x0800871d

08007c2c <__mcmp>:
 8007c2c:	b530      	push	{r4, r5, lr}
 8007c2e:	690b      	ldr	r3, [r1, #16]
 8007c30:	6904      	ldr	r4, [r0, #16]
 8007c32:	0002      	movs	r2, r0
 8007c34:	1ae0      	subs	r0, r4, r3
 8007c36:	429c      	cmp	r4, r3
 8007c38:	d10f      	bne.n	8007c5a <__mcmp+0x2e>
 8007c3a:	3214      	adds	r2, #20
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	3114      	adds	r1, #20
 8007c40:	0014      	movs	r4, r2
 8007c42:	18c9      	adds	r1, r1, r3
 8007c44:	18d2      	adds	r2, r2, r3
 8007c46:	3a04      	subs	r2, #4
 8007c48:	3904      	subs	r1, #4
 8007c4a:	6815      	ldr	r5, [r2, #0]
 8007c4c:	680b      	ldr	r3, [r1, #0]
 8007c4e:	429d      	cmp	r5, r3
 8007c50:	d004      	beq.n	8007c5c <__mcmp+0x30>
 8007c52:	2001      	movs	r0, #1
 8007c54:	429d      	cmp	r5, r3
 8007c56:	d200      	bcs.n	8007c5a <__mcmp+0x2e>
 8007c58:	3802      	subs	r0, #2
 8007c5a:	bd30      	pop	{r4, r5, pc}
 8007c5c:	4294      	cmp	r4, r2
 8007c5e:	d3f2      	bcc.n	8007c46 <__mcmp+0x1a>
 8007c60:	e7fb      	b.n	8007c5a <__mcmp+0x2e>
	...

08007c64 <__mdiff>:
 8007c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c66:	000c      	movs	r4, r1
 8007c68:	b087      	sub	sp, #28
 8007c6a:	9000      	str	r0, [sp, #0]
 8007c6c:	0011      	movs	r1, r2
 8007c6e:	0020      	movs	r0, r4
 8007c70:	0017      	movs	r7, r2
 8007c72:	f7ff ffdb 	bl	8007c2c <__mcmp>
 8007c76:	1e05      	subs	r5, r0, #0
 8007c78:	d110      	bne.n	8007c9c <__mdiff+0x38>
 8007c7a:	0001      	movs	r1, r0
 8007c7c:	9800      	ldr	r0, [sp, #0]
 8007c7e:	f7ff fd4f 	bl	8007720 <_Balloc>
 8007c82:	1e02      	subs	r2, r0, #0
 8007c84:	d104      	bne.n	8007c90 <__mdiff+0x2c>
 8007c86:	4b40      	ldr	r3, [pc, #256]	@ (8007d88 <__mdiff+0x124>)
 8007c88:	4840      	ldr	r0, [pc, #256]	@ (8007d8c <__mdiff+0x128>)
 8007c8a:	4941      	ldr	r1, [pc, #260]	@ (8007d90 <__mdiff+0x12c>)
 8007c8c:	f000 fb86 	bl	800839c <__assert_func>
 8007c90:	2301      	movs	r3, #1
 8007c92:	6145      	str	r5, [r0, #20]
 8007c94:	6103      	str	r3, [r0, #16]
 8007c96:	0010      	movs	r0, r2
 8007c98:	b007      	add	sp, #28
 8007c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c9c:	2600      	movs	r6, #0
 8007c9e:	42b0      	cmp	r0, r6
 8007ca0:	da03      	bge.n	8007caa <__mdiff+0x46>
 8007ca2:	0023      	movs	r3, r4
 8007ca4:	003c      	movs	r4, r7
 8007ca6:	001f      	movs	r7, r3
 8007ca8:	3601      	adds	r6, #1
 8007caa:	6861      	ldr	r1, [r4, #4]
 8007cac:	9800      	ldr	r0, [sp, #0]
 8007cae:	f7ff fd37 	bl	8007720 <_Balloc>
 8007cb2:	1e02      	subs	r2, r0, #0
 8007cb4:	d103      	bne.n	8007cbe <__mdiff+0x5a>
 8007cb6:	4b34      	ldr	r3, [pc, #208]	@ (8007d88 <__mdiff+0x124>)
 8007cb8:	4834      	ldr	r0, [pc, #208]	@ (8007d8c <__mdiff+0x128>)
 8007cba:	4936      	ldr	r1, [pc, #216]	@ (8007d94 <__mdiff+0x130>)
 8007cbc:	e7e6      	b.n	8007c8c <__mdiff+0x28>
 8007cbe:	6923      	ldr	r3, [r4, #16]
 8007cc0:	3414      	adds	r4, #20
 8007cc2:	9300      	str	r3, [sp, #0]
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	18e3      	adds	r3, r4, r3
 8007cc8:	0021      	movs	r1, r4
 8007cca:	9401      	str	r4, [sp, #4]
 8007ccc:	003c      	movs	r4, r7
 8007cce:	9302      	str	r3, [sp, #8]
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	3414      	adds	r4, #20
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	18e3      	adds	r3, r4, r3
 8007cd8:	9303      	str	r3, [sp, #12]
 8007cda:	0003      	movs	r3, r0
 8007cdc:	60c6      	str	r6, [r0, #12]
 8007cde:	468c      	mov	ip, r1
 8007ce0:	2000      	movs	r0, #0
 8007ce2:	3314      	adds	r3, #20
 8007ce4:	9304      	str	r3, [sp, #16]
 8007ce6:	9305      	str	r3, [sp, #20]
 8007ce8:	4663      	mov	r3, ip
 8007cea:	cb20      	ldmia	r3!, {r5}
 8007cec:	b2a9      	uxth	r1, r5
 8007cee:	000e      	movs	r6, r1
 8007cf0:	469c      	mov	ip, r3
 8007cf2:	cc08      	ldmia	r4!, {r3}
 8007cf4:	0c2d      	lsrs	r5, r5, #16
 8007cf6:	b299      	uxth	r1, r3
 8007cf8:	1a71      	subs	r1, r6, r1
 8007cfa:	1809      	adds	r1, r1, r0
 8007cfc:	0c1b      	lsrs	r3, r3, #16
 8007cfe:	1408      	asrs	r0, r1, #16
 8007d00:	1aeb      	subs	r3, r5, r3
 8007d02:	181b      	adds	r3, r3, r0
 8007d04:	1418      	asrs	r0, r3, #16
 8007d06:	b289      	uxth	r1, r1
 8007d08:	041b      	lsls	r3, r3, #16
 8007d0a:	4319      	orrs	r1, r3
 8007d0c:	9b05      	ldr	r3, [sp, #20]
 8007d0e:	c302      	stmia	r3!, {r1}
 8007d10:	9305      	str	r3, [sp, #20]
 8007d12:	9b03      	ldr	r3, [sp, #12]
 8007d14:	42a3      	cmp	r3, r4
 8007d16:	d8e7      	bhi.n	8007ce8 <__mdiff+0x84>
 8007d18:	0039      	movs	r1, r7
 8007d1a:	9c03      	ldr	r4, [sp, #12]
 8007d1c:	3115      	adds	r1, #21
 8007d1e:	2304      	movs	r3, #4
 8007d20:	428c      	cmp	r4, r1
 8007d22:	d304      	bcc.n	8007d2e <__mdiff+0xca>
 8007d24:	1be3      	subs	r3, r4, r7
 8007d26:	3b15      	subs	r3, #21
 8007d28:	089b      	lsrs	r3, r3, #2
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	9901      	ldr	r1, [sp, #4]
 8007d30:	18cd      	adds	r5, r1, r3
 8007d32:	9904      	ldr	r1, [sp, #16]
 8007d34:	002e      	movs	r6, r5
 8007d36:	18cb      	adds	r3, r1, r3
 8007d38:	001f      	movs	r7, r3
 8007d3a:	9902      	ldr	r1, [sp, #8]
 8007d3c:	428e      	cmp	r6, r1
 8007d3e:	d311      	bcc.n	8007d64 <__mdiff+0x100>
 8007d40:	9c02      	ldr	r4, [sp, #8]
 8007d42:	1ee9      	subs	r1, r5, #3
 8007d44:	2000      	movs	r0, #0
 8007d46:	428c      	cmp	r4, r1
 8007d48:	d304      	bcc.n	8007d54 <__mdiff+0xf0>
 8007d4a:	0021      	movs	r1, r4
 8007d4c:	3103      	adds	r1, #3
 8007d4e:	1b49      	subs	r1, r1, r5
 8007d50:	0889      	lsrs	r1, r1, #2
 8007d52:	0088      	lsls	r0, r1, #2
 8007d54:	181b      	adds	r3, r3, r0
 8007d56:	3b04      	subs	r3, #4
 8007d58:	6819      	ldr	r1, [r3, #0]
 8007d5a:	2900      	cmp	r1, #0
 8007d5c:	d010      	beq.n	8007d80 <__mdiff+0x11c>
 8007d5e:	9b00      	ldr	r3, [sp, #0]
 8007d60:	6113      	str	r3, [r2, #16]
 8007d62:	e798      	b.n	8007c96 <__mdiff+0x32>
 8007d64:	4684      	mov	ip, r0
 8007d66:	ce02      	ldmia	r6!, {r1}
 8007d68:	b288      	uxth	r0, r1
 8007d6a:	4460      	add	r0, ip
 8007d6c:	1400      	asrs	r0, r0, #16
 8007d6e:	0c0c      	lsrs	r4, r1, #16
 8007d70:	1904      	adds	r4, r0, r4
 8007d72:	4461      	add	r1, ip
 8007d74:	1420      	asrs	r0, r4, #16
 8007d76:	b289      	uxth	r1, r1
 8007d78:	0424      	lsls	r4, r4, #16
 8007d7a:	4321      	orrs	r1, r4
 8007d7c:	c702      	stmia	r7!, {r1}
 8007d7e:	e7dc      	b.n	8007d3a <__mdiff+0xd6>
 8007d80:	9900      	ldr	r1, [sp, #0]
 8007d82:	3901      	subs	r1, #1
 8007d84:	9100      	str	r1, [sp, #0]
 8007d86:	e7e6      	b.n	8007d56 <__mdiff+0xf2>
 8007d88:	0800870c 	.word	0x0800870c
 8007d8c:	0800871d 	.word	0x0800871d
 8007d90:	00000237 	.word	0x00000237
 8007d94:	00000245 	.word	0x00000245

08007d98 <__d2b>:
 8007d98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d9a:	2101      	movs	r1, #1
 8007d9c:	0016      	movs	r6, r2
 8007d9e:	001f      	movs	r7, r3
 8007da0:	f7ff fcbe 	bl	8007720 <_Balloc>
 8007da4:	1e04      	subs	r4, r0, #0
 8007da6:	d105      	bne.n	8007db4 <__d2b+0x1c>
 8007da8:	0022      	movs	r2, r4
 8007daa:	4b25      	ldr	r3, [pc, #148]	@ (8007e40 <__d2b+0xa8>)
 8007dac:	4825      	ldr	r0, [pc, #148]	@ (8007e44 <__d2b+0xac>)
 8007dae:	4926      	ldr	r1, [pc, #152]	@ (8007e48 <__d2b+0xb0>)
 8007db0:	f000 faf4 	bl	800839c <__assert_func>
 8007db4:	033b      	lsls	r3, r7, #12
 8007db6:	007d      	lsls	r5, r7, #1
 8007db8:	0b1b      	lsrs	r3, r3, #12
 8007dba:	0d6d      	lsrs	r5, r5, #21
 8007dbc:	d002      	beq.n	8007dc4 <__d2b+0x2c>
 8007dbe:	2280      	movs	r2, #128	@ 0x80
 8007dc0:	0352      	lsls	r2, r2, #13
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	9301      	str	r3, [sp, #4]
 8007dc6:	2e00      	cmp	r6, #0
 8007dc8:	d025      	beq.n	8007e16 <__d2b+0x7e>
 8007dca:	4668      	mov	r0, sp
 8007dcc:	9600      	str	r6, [sp, #0]
 8007dce:	f7ff fd74 	bl	80078ba <__lo0bits>
 8007dd2:	9b01      	ldr	r3, [sp, #4]
 8007dd4:	9900      	ldr	r1, [sp, #0]
 8007dd6:	2800      	cmp	r0, #0
 8007dd8:	d01b      	beq.n	8007e12 <__d2b+0x7a>
 8007dda:	2220      	movs	r2, #32
 8007ddc:	001e      	movs	r6, r3
 8007dde:	1a12      	subs	r2, r2, r0
 8007de0:	4096      	lsls	r6, r2
 8007de2:	0032      	movs	r2, r6
 8007de4:	40c3      	lsrs	r3, r0
 8007de6:	430a      	orrs	r2, r1
 8007de8:	6162      	str	r2, [r4, #20]
 8007dea:	9301      	str	r3, [sp, #4]
 8007dec:	9e01      	ldr	r6, [sp, #4]
 8007dee:	61a6      	str	r6, [r4, #24]
 8007df0:	1e73      	subs	r3, r6, #1
 8007df2:	419e      	sbcs	r6, r3
 8007df4:	3601      	adds	r6, #1
 8007df6:	6126      	str	r6, [r4, #16]
 8007df8:	2d00      	cmp	r5, #0
 8007dfa:	d014      	beq.n	8007e26 <__d2b+0x8e>
 8007dfc:	2635      	movs	r6, #53	@ 0x35
 8007dfe:	4b13      	ldr	r3, [pc, #76]	@ (8007e4c <__d2b+0xb4>)
 8007e00:	18ed      	adds	r5, r5, r3
 8007e02:	9b08      	ldr	r3, [sp, #32]
 8007e04:	182d      	adds	r5, r5, r0
 8007e06:	601d      	str	r5, [r3, #0]
 8007e08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e0a:	1a36      	subs	r6, r6, r0
 8007e0c:	601e      	str	r6, [r3, #0]
 8007e0e:	0020      	movs	r0, r4
 8007e10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007e12:	6161      	str	r1, [r4, #20]
 8007e14:	e7ea      	b.n	8007dec <__d2b+0x54>
 8007e16:	a801      	add	r0, sp, #4
 8007e18:	f7ff fd4f 	bl	80078ba <__lo0bits>
 8007e1c:	9b01      	ldr	r3, [sp, #4]
 8007e1e:	2601      	movs	r6, #1
 8007e20:	6163      	str	r3, [r4, #20]
 8007e22:	3020      	adds	r0, #32
 8007e24:	e7e7      	b.n	8007df6 <__d2b+0x5e>
 8007e26:	4b0a      	ldr	r3, [pc, #40]	@ (8007e50 <__d2b+0xb8>)
 8007e28:	18c0      	adds	r0, r0, r3
 8007e2a:	9b08      	ldr	r3, [sp, #32]
 8007e2c:	6018      	str	r0, [r3, #0]
 8007e2e:	4b09      	ldr	r3, [pc, #36]	@ (8007e54 <__d2b+0xbc>)
 8007e30:	18f3      	adds	r3, r6, r3
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	18e3      	adds	r3, r4, r3
 8007e36:	6958      	ldr	r0, [r3, #20]
 8007e38:	f7ff fd1e 	bl	8007878 <__hi0bits>
 8007e3c:	0176      	lsls	r6, r6, #5
 8007e3e:	e7e3      	b.n	8007e08 <__d2b+0x70>
 8007e40:	0800870c 	.word	0x0800870c
 8007e44:	0800871d 	.word	0x0800871d
 8007e48:	0000030f 	.word	0x0000030f
 8007e4c:	fffffbcd 	.word	0xfffffbcd
 8007e50:	fffffbce 	.word	0xfffffbce
 8007e54:	3fffffff 	.word	0x3fffffff

08007e58 <__sfputc_r>:
 8007e58:	6893      	ldr	r3, [r2, #8]
 8007e5a:	b510      	push	{r4, lr}
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	6093      	str	r3, [r2, #8]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	da04      	bge.n	8007e6e <__sfputc_r+0x16>
 8007e64:	6994      	ldr	r4, [r2, #24]
 8007e66:	42a3      	cmp	r3, r4
 8007e68:	db07      	blt.n	8007e7a <__sfputc_r+0x22>
 8007e6a:	290a      	cmp	r1, #10
 8007e6c:	d005      	beq.n	8007e7a <__sfputc_r+0x22>
 8007e6e:	6813      	ldr	r3, [r2, #0]
 8007e70:	1c58      	adds	r0, r3, #1
 8007e72:	6010      	str	r0, [r2, #0]
 8007e74:	7019      	strb	r1, [r3, #0]
 8007e76:	0008      	movs	r0, r1
 8007e78:	bd10      	pop	{r4, pc}
 8007e7a:	f7fe fba3 	bl	80065c4 <__swbuf_r>
 8007e7e:	0001      	movs	r1, r0
 8007e80:	e7f9      	b.n	8007e76 <__sfputc_r+0x1e>

08007e82 <__sfputs_r>:
 8007e82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e84:	0006      	movs	r6, r0
 8007e86:	000f      	movs	r7, r1
 8007e88:	0014      	movs	r4, r2
 8007e8a:	18d5      	adds	r5, r2, r3
 8007e8c:	42ac      	cmp	r4, r5
 8007e8e:	d101      	bne.n	8007e94 <__sfputs_r+0x12>
 8007e90:	2000      	movs	r0, #0
 8007e92:	e007      	b.n	8007ea4 <__sfputs_r+0x22>
 8007e94:	7821      	ldrb	r1, [r4, #0]
 8007e96:	003a      	movs	r2, r7
 8007e98:	0030      	movs	r0, r6
 8007e9a:	f7ff ffdd 	bl	8007e58 <__sfputc_r>
 8007e9e:	3401      	adds	r4, #1
 8007ea0:	1c43      	adds	r3, r0, #1
 8007ea2:	d1f3      	bne.n	8007e8c <__sfputs_r+0xa>
 8007ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007ea8 <_vfiprintf_r>:
 8007ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007eaa:	b0a1      	sub	sp, #132	@ 0x84
 8007eac:	000f      	movs	r7, r1
 8007eae:	0015      	movs	r5, r2
 8007eb0:	001e      	movs	r6, r3
 8007eb2:	9003      	str	r0, [sp, #12]
 8007eb4:	2800      	cmp	r0, #0
 8007eb6:	d004      	beq.n	8007ec2 <_vfiprintf_r+0x1a>
 8007eb8:	6a03      	ldr	r3, [r0, #32]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d101      	bne.n	8007ec2 <_vfiprintf_r+0x1a>
 8007ebe:	f7fe fa91 	bl	80063e4 <__sinit>
 8007ec2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ec4:	07db      	lsls	r3, r3, #31
 8007ec6:	d405      	bmi.n	8007ed4 <_vfiprintf_r+0x2c>
 8007ec8:	89bb      	ldrh	r3, [r7, #12]
 8007eca:	059b      	lsls	r3, r3, #22
 8007ecc:	d402      	bmi.n	8007ed4 <_vfiprintf_r+0x2c>
 8007ece:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007ed0:	f7fe fc9d 	bl	800680e <__retarget_lock_acquire_recursive>
 8007ed4:	89bb      	ldrh	r3, [r7, #12]
 8007ed6:	071b      	lsls	r3, r3, #28
 8007ed8:	d502      	bpl.n	8007ee0 <_vfiprintf_r+0x38>
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d113      	bne.n	8007f08 <_vfiprintf_r+0x60>
 8007ee0:	0039      	movs	r1, r7
 8007ee2:	9803      	ldr	r0, [sp, #12]
 8007ee4:	f7fe fbb0 	bl	8006648 <__swsetup_r>
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	d00d      	beq.n	8007f08 <_vfiprintf_r+0x60>
 8007eec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007eee:	07db      	lsls	r3, r3, #31
 8007ef0:	d503      	bpl.n	8007efa <_vfiprintf_r+0x52>
 8007ef2:	2001      	movs	r0, #1
 8007ef4:	4240      	negs	r0, r0
 8007ef6:	b021      	add	sp, #132	@ 0x84
 8007ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007efa:	89bb      	ldrh	r3, [r7, #12]
 8007efc:	059b      	lsls	r3, r3, #22
 8007efe:	d4f8      	bmi.n	8007ef2 <_vfiprintf_r+0x4a>
 8007f00:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007f02:	f7fe fc85 	bl	8006810 <__retarget_lock_release_recursive>
 8007f06:	e7f4      	b.n	8007ef2 <_vfiprintf_r+0x4a>
 8007f08:	2300      	movs	r3, #0
 8007f0a:	ac08      	add	r4, sp, #32
 8007f0c:	6163      	str	r3, [r4, #20]
 8007f0e:	3320      	adds	r3, #32
 8007f10:	7663      	strb	r3, [r4, #25]
 8007f12:	3310      	adds	r3, #16
 8007f14:	76a3      	strb	r3, [r4, #26]
 8007f16:	9607      	str	r6, [sp, #28]
 8007f18:	002e      	movs	r6, r5
 8007f1a:	7833      	ldrb	r3, [r6, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d001      	beq.n	8007f24 <_vfiprintf_r+0x7c>
 8007f20:	2b25      	cmp	r3, #37	@ 0x25
 8007f22:	d148      	bne.n	8007fb6 <_vfiprintf_r+0x10e>
 8007f24:	1b73      	subs	r3, r6, r5
 8007f26:	9305      	str	r3, [sp, #20]
 8007f28:	42ae      	cmp	r6, r5
 8007f2a:	d00b      	beq.n	8007f44 <_vfiprintf_r+0x9c>
 8007f2c:	002a      	movs	r2, r5
 8007f2e:	0039      	movs	r1, r7
 8007f30:	9803      	ldr	r0, [sp, #12]
 8007f32:	f7ff ffa6 	bl	8007e82 <__sfputs_r>
 8007f36:	3001      	adds	r0, #1
 8007f38:	d100      	bne.n	8007f3c <_vfiprintf_r+0x94>
 8007f3a:	e0ae      	b.n	800809a <_vfiprintf_r+0x1f2>
 8007f3c:	6963      	ldr	r3, [r4, #20]
 8007f3e:	9a05      	ldr	r2, [sp, #20]
 8007f40:	189b      	adds	r3, r3, r2
 8007f42:	6163      	str	r3, [r4, #20]
 8007f44:	7833      	ldrb	r3, [r6, #0]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d100      	bne.n	8007f4c <_vfiprintf_r+0xa4>
 8007f4a:	e0a6      	b.n	800809a <_vfiprintf_r+0x1f2>
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	2300      	movs	r3, #0
 8007f50:	4252      	negs	r2, r2
 8007f52:	6062      	str	r2, [r4, #4]
 8007f54:	a904      	add	r1, sp, #16
 8007f56:	3254      	adds	r2, #84	@ 0x54
 8007f58:	1852      	adds	r2, r2, r1
 8007f5a:	1c75      	adds	r5, r6, #1
 8007f5c:	6023      	str	r3, [r4, #0]
 8007f5e:	60e3      	str	r3, [r4, #12]
 8007f60:	60a3      	str	r3, [r4, #8]
 8007f62:	7013      	strb	r3, [r2, #0]
 8007f64:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007f66:	4b59      	ldr	r3, [pc, #356]	@ (80080cc <_vfiprintf_r+0x224>)
 8007f68:	2205      	movs	r2, #5
 8007f6a:	0018      	movs	r0, r3
 8007f6c:	7829      	ldrb	r1, [r5, #0]
 8007f6e:	9305      	str	r3, [sp, #20]
 8007f70:	f7fe fc4f 	bl	8006812 <memchr>
 8007f74:	1c6e      	adds	r6, r5, #1
 8007f76:	2800      	cmp	r0, #0
 8007f78:	d11f      	bne.n	8007fba <_vfiprintf_r+0x112>
 8007f7a:	6822      	ldr	r2, [r4, #0]
 8007f7c:	06d3      	lsls	r3, r2, #27
 8007f7e:	d504      	bpl.n	8007f8a <_vfiprintf_r+0xe2>
 8007f80:	2353      	movs	r3, #83	@ 0x53
 8007f82:	a904      	add	r1, sp, #16
 8007f84:	185b      	adds	r3, r3, r1
 8007f86:	2120      	movs	r1, #32
 8007f88:	7019      	strb	r1, [r3, #0]
 8007f8a:	0713      	lsls	r3, r2, #28
 8007f8c:	d504      	bpl.n	8007f98 <_vfiprintf_r+0xf0>
 8007f8e:	2353      	movs	r3, #83	@ 0x53
 8007f90:	a904      	add	r1, sp, #16
 8007f92:	185b      	adds	r3, r3, r1
 8007f94:	212b      	movs	r1, #43	@ 0x2b
 8007f96:	7019      	strb	r1, [r3, #0]
 8007f98:	782b      	ldrb	r3, [r5, #0]
 8007f9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f9c:	d016      	beq.n	8007fcc <_vfiprintf_r+0x124>
 8007f9e:	002e      	movs	r6, r5
 8007fa0:	2100      	movs	r1, #0
 8007fa2:	200a      	movs	r0, #10
 8007fa4:	68e3      	ldr	r3, [r4, #12]
 8007fa6:	7832      	ldrb	r2, [r6, #0]
 8007fa8:	1c75      	adds	r5, r6, #1
 8007faa:	3a30      	subs	r2, #48	@ 0x30
 8007fac:	2a09      	cmp	r2, #9
 8007fae:	d950      	bls.n	8008052 <_vfiprintf_r+0x1aa>
 8007fb0:	2900      	cmp	r1, #0
 8007fb2:	d111      	bne.n	8007fd8 <_vfiprintf_r+0x130>
 8007fb4:	e017      	b.n	8007fe6 <_vfiprintf_r+0x13e>
 8007fb6:	3601      	adds	r6, #1
 8007fb8:	e7af      	b.n	8007f1a <_vfiprintf_r+0x72>
 8007fba:	9b05      	ldr	r3, [sp, #20]
 8007fbc:	6822      	ldr	r2, [r4, #0]
 8007fbe:	1ac0      	subs	r0, r0, r3
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	4083      	lsls	r3, r0
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	0035      	movs	r5, r6
 8007fc8:	6023      	str	r3, [r4, #0]
 8007fca:	e7cc      	b.n	8007f66 <_vfiprintf_r+0xbe>
 8007fcc:	9b07      	ldr	r3, [sp, #28]
 8007fce:	1d19      	adds	r1, r3, #4
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	9107      	str	r1, [sp, #28]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	db01      	blt.n	8007fdc <_vfiprintf_r+0x134>
 8007fd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007fda:	e004      	b.n	8007fe6 <_vfiprintf_r+0x13e>
 8007fdc:	425b      	negs	r3, r3
 8007fde:	60e3      	str	r3, [r4, #12]
 8007fe0:	2302      	movs	r3, #2
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	6023      	str	r3, [r4, #0]
 8007fe6:	7833      	ldrb	r3, [r6, #0]
 8007fe8:	2b2e      	cmp	r3, #46	@ 0x2e
 8007fea:	d10c      	bne.n	8008006 <_vfiprintf_r+0x15e>
 8007fec:	7873      	ldrb	r3, [r6, #1]
 8007fee:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ff0:	d134      	bne.n	800805c <_vfiprintf_r+0x1b4>
 8007ff2:	9b07      	ldr	r3, [sp, #28]
 8007ff4:	3602      	adds	r6, #2
 8007ff6:	1d1a      	adds	r2, r3, #4
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	9207      	str	r2, [sp, #28]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	da01      	bge.n	8008004 <_vfiprintf_r+0x15c>
 8008000:	2301      	movs	r3, #1
 8008002:	425b      	negs	r3, r3
 8008004:	9309      	str	r3, [sp, #36]	@ 0x24
 8008006:	4d32      	ldr	r5, [pc, #200]	@ (80080d0 <_vfiprintf_r+0x228>)
 8008008:	2203      	movs	r2, #3
 800800a:	0028      	movs	r0, r5
 800800c:	7831      	ldrb	r1, [r6, #0]
 800800e:	f7fe fc00 	bl	8006812 <memchr>
 8008012:	2800      	cmp	r0, #0
 8008014:	d006      	beq.n	8008024 <_vfiprintf_r+0x17c>
 8008016:	2340      	movs	r3, #64	@ 0x40
 8008018:	1b40      	subs	r0, r0, r5
 800801a:	4083      	lsls	r3, r0
 800801c:	6822      	ldr	r2, [r4, #0]
 800801e:	3601      	adds	r6, #1
 8008020:	4313      	orrs	r3, r2
 8008022:	6023      	str	r3, [r4, #0]
 8008024:	7831      	ldrb	r1, [r6, #0]
 8008026:	2206      	movs	r2, #6
 8008028:	482a      	ldr	r0, [pc, #168]	@ (80080d4 <_vfiprintf_r+0x22c>)
 800802a:	1c75      	adds	r5, r6, #1
 800802c:	7621      	strb	r1, [r4, #24]
 800802e:	f7fe fbf0 	bl	8006812 <memchr>
 8008032:	2800      	cmp	r0, #0
 8008034:	d040      	beq.n	80080b8 <_vfiprintf_r+0x210>
 8008036:	4b28      	ldr	r3, [pc, #160]	@ (80080d8 <_vfiprintf_r+0x230>)
 8008038:	2b00      	cmp	r3, #0
 800803a:	d122      	bne.n	8008082 <_vfiprintf_r+0x1da>
 800803c:	2207      	movs	r2, #7
 800803e:	9b07      	ldr	r3, [sp, #28]
 8008040:	3307      	adds	r3, #7
 8008042:	4393      	bics	r3, r2
 8008044:	3308      	adds	r3, #8
 8008046:	9307      	str	r3, [sp, #28]
 8008048:	6963      	ldr	r3, [r4, #20]
 800804a:	9a04      	ldr	r2, [sp, #16]
 800804c:	189b      	adds	r3, r3, r2
 800804e:	6163      	str	r3, [r4, #20]
 8008050:	e762      	b.n	8007f18 <_vfiprintf_r+0x70>
 8008052:	4343      	muls	r3, r0
 8008054:	002e      	movs	r6, r5
 8008056:	2101      	movs	r1, #1
 8008058:	189b      	adds	r3, r3, r2
 800805a:	e7a4      	b.n	8007fa6 <_vfiprintf_r+0xfe>
 800805c:	2300      	movs	r3, #0
 800805e:	200a      	movs	r0, #10
 8008060:	0019      	movs	r1, r3
 8008062:	3601      	adds	r6, #1
 8008064:	6063      	str	r3, [r4, #4]
 8008066:	7832      	ldrb	r2, [r6, #0]
 8008068:	1c75      	adds	r5, r6, #1
 800806a:	3a30      	subs	r2, #48	@ 0x30
 800806c:	2a09      	cmp	r2, #9
 800806e:	d903      	bls.n	8008078 <_vfiprintf_r+0x1d0>
 8008070:	2b00      	cmp	r3, #0
 8008072:	d0c8      	beq.n	8008006 <_vfiprintf_r+0x15e>
 8008074:	9109      	str	r1, [sp, #36]	@ 0x24
 8008076:	e7c6      	b.n	8008006 <_vfiprintf_r+0x15e>
 8008078:	4341      	muls	r1, r0
 800807a:	002e      	movs	r6, r5
 800807c:	2301      	movs	r3, #1
 800807e:	1889      	adds	r1, r1, r2
 8008080:	e7f1      	b.n	8008066 <_vfiprintf_r+0x1be>
 8008082:	aa07      	add	r2, sp, #28
 8008084:	9200      	str	r2, [sp, #0]
 8008086:	0021      	movs	r1, r4
 8008088:	003a      	movs	r2, r7
 800808a:	4b14      	ldr	r3, [pc, #80]	@ (80080dc <_vfiprintf_r+0x234>)
 800808c:	9803      	ldr	r0, [sp, #12]
 800808e:	f7fd fd5f 	bl	8005b50 <_printf_float>
 8008092:	9004      	str	r0, [sp, #16]
 8008094:	9b04      	ldr	r3, [sp, #16]
 8008096:	3301      	adds	r3, #1
 8008098:	d1d6      	bne.n	8008048 <_vfiprintf_r+0x1a0>
 800809a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800809c:	07db      	lsls	r3, r3, #31
 800809e:	d405      	bmi.n	80080ac <_vfiprintf_r+0x204>
 80080a0:	89bb      	ldrh	r3, [r7, #12]
 80080a2:	059b      	lsls	r3, r3, #22
 80080a4:	d402      	bmi.n	80080ac <_vfiprintf_r+0x204>
 80080a6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80080a8:	f7fe fbb2 	bl	8006810 <__retarget_lock_release_recursive>
 80080ac:	89bb      	ldrh	r3, [r7, #12]
 80080ae:	065b      	lsls	r3, r3, #25
 80080b0:	d500      	bpl.n	80080b4 <_vfiprintf_r+0x20c>
 80080b2:	e71e      	b.n	8007ef2 <_vfiprintf_r+0x4a>
 80080b4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80080b6:	e71e      	b.n	8007ef6 <_vfiprintf_r+0x4e>
 80080b8:	aa07      	add	r2, sp, #28
 80080ba:	9200      	str	r2, [sp, #0]
 80080bc:	0021      	movs	r1, r4
 80080be:	003a      	movs	r2, r7
 80080c0:	4b06      	ldr	r3, [pc, #24]	@ (80080dc <_vfiprintf_r+0x234>)
 80080c2:	9803      	ldr	r0, [sp, #12]
 80080c4:	f7fd fff2 	bl	80060ac <_printf_i>
 80080c8:	e7e3      	b.n	8008092 <_vfiprintf_r+0x1ea>
 80080ca:	46c0      	nop			@ (mov r8, r8)
 80080cc:	08008776 	.word	0x08008776
 80080d0:	0800877c 	.word	0x0800877c
 80080d4:	08008780 	.word	0x08008780
 80080d8:	08005b51 	.word	0x08005b51
 80080dc:	08007e83 	.word	0x08007e83

080080e0 <__sflush_r>:
 80080e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080e2:	220c      	movs	r2, #12
 80080e4:	5e8b      	ldrsh	r3, [r1, r2]
 80080e6:	0005      	movs	r5, r0
 80080e8:	000c      	movs	r4, r1
 80080ea:	071a      	lsls	r2, r3, #28
 80080ec:	d456      	bmi.n	800819c <__sflush_r+0xbc>
 80080ee:	684a      	ldr	r2, [r1, #4]
 80080f0:	2a00      	cmp	r2, #0
 80080f2:	dc02      	bgt.n	80080fa <__sflush_r+0x1a>
 80080f4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80080f6:	2a00      	cmp	r2, #0
 80080f8:	dd4e      	ble.n	8008198 <__sflush_r+0xb8>
 80080fa:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80080fc:	2f00      	cmp	r7, #0
 80080fe:	d04b      	beq.n	8008198 <__sflush_r+0xb8>
 8008100:	2200      	movs	r2, #0
 8008102:	2080      	movs	r0, #128	@ 0x80
 8008104:	682e      	ldr	r6, [r5, #0]
 8008106:	602a      	str	r2, [r5, #0]
 8008108:	001a      	movs	r2, r3
 800810a:	0140      	lsls	r0, r0, #5
 800810c:	6a21      	ldr	r1, [r4, #32]
 800810e:	4002      	ands	r2, r0
 8008110:	4203      	tst	r3, r0
 8008112:	d033      	beq.n	800817c <__sflush_r+0x9c>
 8008114:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008116:	89a3      	ldrh	r3, [r4, #12]
 8008118:	075b      	lsls	r3, r3, #29
 800811a:	d506      	bpl.n	800812a <__sflush_r+0x4a>
 800811c:	6863      	ldr	r3, [r4, #4]
 800811e:	1ad2      	subs	r2, r2, r3
 8008120:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008122:	2b00      	cmp	r3, #0
 8008124:	d001      	beq.n	800812a <__sflush_r+0x4a>
 8008126:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008128:	1ad2      	subs	r2, r2, r3
 800812a:	2300      	movs	r3, #0
 800812c:	0028      	movs	r0, r5
 800812e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8008130:	6a21      	ldr	r1, [r4, #32]
 8008132:	47b8      	blx	r7
 8008134:	89a2      	ldrh	r2, [r4, #12]
 8008136:	1c43      	adds	r3, r0, #1
 8008138:	d106      	bne.n	8008148 <__sflush_r+0x68>
 800813a:	6829      	ldr	r1, [r5, #0]
 800813c:	291d      	cmp	r1, #29
 800813e:	d846      	bhi.n	80081ce <__sflush_r+0xee>
 8008140:	4b29      	ldr	r3, [pc, #164]	@ (80081e8 <__sflush_r+0x108>)
 8008142:	40cb      	lsrs	r3, r1
 8008144:	07db      	lsls	r3, r3, #31
 8008146:	d542      	bpl.n	80081ce <__sflush_r+0xee>
 8008148:	2300      	movs	r3, #0
 800814a:	6063      	str	r3, [r4, #4]
 800814c:	6923      	ldr	r3, [r4, #16]
 800814e:	6023      	str	r3, [r4, #0]
 8008150:	04d2      	lsls	r2, r2, #19
 8008152:	d505      	bpl.n	8008160 <__sflush_r+0x80>
 8008154:	1c43      	adds	r3, r0, #1
 8008156:	d102      	bne.n	800815e <__sflush_r+0x7e>
 8008158:	682b      	ldr	r3, [r5, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d100      	bne.n	8008160 <__sflush_r+0x80>
 800815e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008160:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008162:	602e      	str	r6, [r5, #0]
 8008164:	2900      	cmp	r1, #0
 8008166:	d017      	beq.n	8008198 <__sflush_r+0xb8>
 8008168:	0023      	movs	r3, r4
 800816a:	3344      	adds	r3, #68	@ 0x44
 800816c:	4299      	cmp	r1, r3
 800816e:	d002      	beq.n	8008176 <__sflush_r+0x96>
 8008170:	0028      	movs	r0, r5
 8008172:	f7ff f9cf 	bl	8007514 <_free_r>
 8008176:	2300      	movs	r3, #0
 8008178:	6363      	str	r3, [r4, #52]	@ 0x34
 800817a:	e00d      	b.n	8008198 <__sflush_r+0xb8>
 800817c:	2301      	movs	r3, #1
 800817e:	0028      	movs	r0, r5
 8008180:	47b8      	blx	r7
 8008182:	0002      	movs	r2, r0
 8008184:	1c43      	adds	r3, r0, #1
 8008186:	d1c6      	bne.n	8008116 <__sflush_r+0x36>
 8008188:	682b      	ldr	r3, [r5, #0]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d0c3      	beq.n	8008116 <__sflush_r+0x36>
 800818e:	2b1d      	cmp	r3, #29
 8008190:	d001      	beq.n	8008196 <__sflush_r+0xb6>
 8008192:	2b16      	cmp	r3, #22
 8008194:	d11a      	bne.n	80081cc <__sflush_r+0xec>
 8008196:	602e      	str	r6, [r5, #0]
 8008198:	2000      	movs	r0, #0
 800819a:	e01e      	b.n	80081da <__sflush_r+0xfa>
 800819c:	690e      	ldr	r6, [r1, #16]
 800819e:	2e00      	cmp	r6, #0
 80081a0:	d0fa      	beq.n	8008198 <__sflush_r+0xb8>
 80081a2:	680f      	ldr	r7, [r1, #0]
 80081a4:	600e      	str	r6, [r1, #0]
 80081a6:	1bba      	subs	r2, r7, r6
 80081a8:	9201      	str	r2, [sp, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	079b      	lsls	r3, r3, #30
 80081ae:	d100      	bne.n	80081b2 <__sflush_r+0xd2>
 80081b0:	694a      	ldr	r2, [r1, #20]
 80081b2:	60a2      	str	r2, [r4, #8]
 80081b4:	9b01      	ldr	r3, [sp, #4]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	ddee      	ble.n	8008198 <__sflush_r+0xb8>
 80081ba:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80081bc:	0032      	movs	r2, r6
 80081be:	001f      	movs	r7, r3
 80081c0:	0028      	movs	r0, r5
 80081c2:	9b01      	ldr	r3, [sp, #4]
 80081c4:	6a21      	ldr	r1, [r4, #32]
 80081c6:	47b8      	blx	r7
 80081c8:	2800      	cmp	r0, #0
 80081ca:	dc07      	bgt.n	80081dc <__sflush_r+0xfc>
 80081cc:	89a2      	ldrh	r2, [r4, #12]
 80081ce:	2340      	movs	r3, #64	@ 0x40
 80081d0:	2001      	movs	r0, #1
 80081d2:	4313      	orrs	r3, r2
 80081d4:	b21b      	sxth	r3, r3
 80081d6:	81a3      	strh	r3, [r4, #12]
 80081d8:	4240      	negs	r0, r0
 80081da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80081dc:	9b01      	ldr	r3, [sp, #4]
 80081de:	1836      	adds	r6, r6, r0
 80081e0:	1a1b      	subs	r3, r3, r0
 80081e2:	9301      	str	r3, [sp, #4]
 80081e4:	e7e6      	b.n	80081b4 <__sflush_r+0xd4>
 80081e6:	46c0      	nop			@ (mov r8, r8)
 80081e8:	20400001 	.word	0x20400001

080081ec <_fflush_r>:
 80081ec:	690b      	ldr	r3, [r1, #16]
 80081ee:	b570      	push	{r4, r5, r6, lr}
 80081f0:	0005      	movs	r5, r0
 80081f2:	000c      	movs	r4, r1
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d102      	bne.n	80081fe <_fflush_r+0x12>
 80081f8:	2500      	movs	r5, #0
 80081fa:	0028      	movs	r0, r5
 80081fc:	bd70      	pop	{r4, r5, r6, pc}
 80081fe:	2800      	cmp	r0, #0
 8008200:	d004      	beq.n	800820c <_fflush_r+0x20>
 8008202:	6a03      	ldr	r3, [r0, #32]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d101      	bne.n	800820c <_fflush_r+0x20>
 8008208:	f7fe f8ec 	bl	80063e4 <__sinit>
 800820c:	220c      	movs	r2, #12
 800820e:	5ea3      	ldrsh	r3, [r4, r2]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d0f1      	beq.n	80081f8 <_fflush_r+0xc>
 8008214:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008216:	07d2      	lsls	r2, r2, #31
 8008218:	d404      	bmi.n	8008224 <_fflush_r+0x38>
 800821a:	059b      	lsls	r3, r3, #22
 800821c:	d402      	bmi.n	8008224 <_fflush_r+0x38>
 800821e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008220:	f7fe faf5 	bl	800680e <__retarget_lock_acquire_recursive>
 8008224:	0028      	movs	r0, r5
 8008226:	0021      	movs	r1, r4
 8008228:	f7ff ff5a 	bl	80080e0 <__sflush_r>
 800822c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800822e:	0005      	movs	r5, r0
 8008230:	07db      	lsls	r3, r3, #31
 8008232:	d4e2      	bmi.n	80081fa <_fflush_r+0xe>
 8008234:	89a3      	ldrh	r3, [r4, #12]
 8008236:	059b      	lsls	r3, r3, #22
 8008238:	d4df      	bmi.n	80081fa <_fflush_r+0xe>
 800823a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800823c:	f7fe fae8 	bl	8006810 <__retarget_lock_release_recursive>
 8008240:	e7db      	b.n	80081fa <_fflush_r+0xe>
	...

08008244 <__swhatbuf_r>:
 8008244:	b570      	push	{r4, r5, r6, lr}
 8008246:	000e      	movs	r6, r1
 8008248:	001d      	movs	r5, r3
 800824a:	230e      	movs	r3, #14
 800824c:	5ec9      	ldrsh	r1, [r1, r3]
 800824e:	0014      	movs	r4, r2
 8008250:	b096      	sub	sp, #88	@ 0x58
 8008252:	2900      	cmp	r1, #0
 8008254:	da0c      	bge.n	8008270 <__swhatbuf_r+0x2c>
 8008256:	89b2      	ldrh	r2, [r6, #12]
 8008258:	2380      	movs	r3, #128	@ 0x80
 800825a:	0011      	movs	r1, r2
 800825c:	4019      	ands	r1, r3
 800825e:	421a      	tst	r2, r3
 8008260:	d114      	bne.n	800828c <__swhatbuf_r+0x48>
 8008262:	2380      	movs	r3, #128	@ 0x80
 8008264:	00db      	lsls	r3, r3, #3
 8008266:	2000      	movs	r0, #0
 8008268:	6029      	str	r1, [r5, #0]
 800826a:	6023      	str	r3, [r4, #0]
 800826c:	b016      	add	sp, #88	@ 0x58
 800826e:	bd70      	pop	{r4, r5, r6, pc}
 8008270:	466a      	mov	r2, sp
 8008272:	f000 f853 	bl	800831c <_fstat_r>
 8008276:	2800      	cmp	r0, #0
 8008278:	dbed      	blt.n	8008256 <__swhatbuf_r+0x12>
 800827a:	23f0      	movs	r3, #240	@ 0xf0
 800827c:	9901      	ldr	r1, [sp, #4]
 800827e:	021b      	lsls	r3, r3, #8
 8008280:	4019      	ands	r1, r3
 8008282:	4b04      	ldr	r3, [pc, #16]	@ (8008294 <__swhatbuf_r+0x50>)
 8008284:	18c9      	adds	r1, r1, r3
 8008286:	424b      	negs	r3, r1
 8008288:	4159      	adcs	r1, r3
 800828a:	e7ea      	b.n	8008262 <__swhatbuf_r+0x1e>
 800828c:	2100      	movs	r1, #0
 800828e:	2340      	movs	r3, #64	@ 0x40
 8008290:	e7e9      	b.n	8008266 <__swhatbuf_r+0x22>
 8008292:	46c0      	nop			@ (mov r8, r8)
 8008294:	ffffe000 	.word	0xffffe000

08008298 <__smakebuf_r>:
 8008298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800829a:	2602      	movs	r6, #2
 800829c:	898b      	ldrh	r3, [r1, #12]
 800829e:	0005      	movs	r5, r0
 80082a0:	000c      	movs	r4, r1
 80082a2:	b085      	sub	sp, #20
 80082a4:	4233      	tst	r3, r6
 80082a6:	d007      	beq.n	80082b8 <__smakebuf_r+0x20>
 80082a8:	0023      	movs	r3, r4
 80082aa:	3347      	adds	r3, #71	@ 0x47
 80082ac:	6023      	str	r3, [r4, #0]
 80082ae:	6123      	str	r3, [r4, #16]
 80082b0:	2301      	movs	r3, #1
 80082b2:	6163      	str	r3, [r4, #20]
 80082b4:	b005      	add	sp, #20
 80082b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082b8:	ab03      	add	r3, sp, #12
 80082ba:	aa02      	add	r2, sp, #8
 80082bc:	f7ff ffc2 	bl	8008244 <__swhatbuf_r>
 80082c0:	9f02      	ldr	r7, [sp, #8]
 80082c2:	9001      	str	r0, [sp, #4]
 80082c4:	0039      	movs	r1, r7
 80082c6:	0028      	movs	r0, r5
 80082c8:	f7ff f99a 	bl	8007600 <_malloc_r>
 80082cc:	2800      	cmp	r0, #0
 80082ce:	d108      	bne.n	80082e2 <__smakebuf_r+0x4a>
 80082d0:	220c      	movs	r2, #12
 80082d2:	5ea3      	ldrsh	r3, [r4, r2]
 80082d4:	059a      	lsls	r2, r3, #22
 80082d6:	d4ed      	bmi.n	80082b4 <__smakebuf_r+0x1c>
 80082d8:	2203      	movs	r2, #3
 80082da:	4393      	bics	r3, r2
 80082dc:	431e      	orrs	r6, r3
 80082de:	81a6      	strh	r6, [r4, #12]
 80082e0:	e7e2      	b.n	80082a8 <__smakebuf_r+0x10>
 80082e2:	2380      	movs	r3, #128	@ 0x80
 80082e4:	89a2      	ldrh	r2, [r4, #12]
 80082e6:	6020      	str	r0, [r4, #0]
 80082e8:	4313      	orrs	r3, r2
 80082ea:	81a3      	strh	r3, [r4, #12]
 80082ec:	9b03      	ldr	r3, [sp, #12]
 80082ee:	6120      	str	r0, [r4, #16]
 80082f0:	6167      	str	r7, [r4, #20]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00c      	beq.n	8008310 <__smakebuf_r+0x78>
 80082f6:	0028      	movs	r0, r5
 80082f8:	230e      	movs	r3, #14
 80082fa:	5ee1      	ldrsh	r1, [r4, r3]
 80082fc:	f000 f820 	bl	8008340 <_isatty_r>
 8008300:	2800      	cmp	r0, #0
 8008302:	d005      	beq.n	8008310 <__smakebuf_r+0x78>
 8008304:	2303      	movs	r3, #3
 8008306:	89a2      	ldrh	r2, [r4, #12]
 8008308:	439a      	bics	r2, r3
 800830a:	3b02      	subs	r3, #2
 800830c:	4313      	orrs	r3, r2
 800830e:	81a3      	strh	r3, [r4, #12]
 8008310:	89a3      	ldrh	r3, [r4, #12]
 8008312:	9a01      	ldr	r2, [sp, #4]
 8008314:	4313      	orrs	r3, r2
 8008316:	81a3      	strh	r3, [r4, #12]
 8008318:	e7cc      	b.n	80082b4 <__smakebuf_r+0x1c>
	...

0800831c <_fstat_r>:
 800831c:	2300      	movs	r3, #0
 800831e:	b570      	push	{r4, r5, r6, lr}
 8008320:	4d06      	ldr	r5, [pc, #24]	@ (800833c <_fstat_r+0x20>)
 8008322:	0004      	movs	r4, r0
 8008324:	0008      	movs	r0, r1
 8008326:	0011      	movs	r1, r2
 8008328:	602b      	str	r3, [r5, #0]
 800832a:	f7fa fee0 	bl	80030ee <_fstat>
 800832e:	1c43      	adds	r3, r0, #1
 8008330:	d103      	bne.n	800833a <_fstat_r+0x1e>
 8008332:	682b      	ldr	r3, [r5, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d000      	beq.n	800833a <_fstat_r+0x1e>
 8008338:	6023      	str	r3, [r4, #0]
 800833a:	bd70      	pop	{r4, r5, r6, pc}
 800833c:	200004b4 	.word	0x200004b4

08008340 <_isatty_r>:
 8008340:	2300      	movs	r3, #0
 8008342:	b570      	push	{r4, r5, r6, lr}
 8008344:	4d06      	ldr	r5, [pc, #24]	@ (8008360 <_isatty_r+0x20>)
 8008346:	0004      	movs	r4, r0
 8008348:	0008      	movs	r0, r1
 800834a:	602b      	str	r3, [r5, #0]
 800834c:	f7fa fedd 	bl	800310a <_isatty>
 8008350:	1c43      	adds	r3, r0, #1
 8008352:	d103      	bne.n	800835c <_isatty_r+0x1c>
 8008354:	682b      	ldr	r3, [r5, #0]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d000      	beq.n	800835c <_isatty_r+0x1c>
 800835a:	6023      	str	r3, [r4, #0]
 800835c:	bd70      	pop	{r4, r5, r6, pc}
 800835e:	46c0      	nop			@ (mov r8, r8)
 8008360:	200004b4 	.word	0x200004b4

08008364 <_sbrk_r>:
 8008364:	2300      	movs	r3, #0
 8008366:	b570      	push	{r4, r5, r6, lr}
 8008368:	4d06      	ldr	r5, [pc, #24]	@ (8008384 <_sbrk_r+0x20>)
 800836a:	0004      	movs	r4, r0
 800836c:	0008      	movs	r0, r1
 800836e:	602b      	str	r3, [r5, #0]
 8008370:	f7fa fee0 	bl	8003134 <_sbrk>
 8008374:	1c43      	adds	r3, r0, #1
 8008376:	d103      	bne.n	8008380 <_sbrk_r+0x1c>
 8008378:	682b      	ldr	r3, [r5, #0]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d000      	beq.n	8008380 <_sbrk_r+0x1c>
 800837e:	6023      	str	r3, [r4, #0]
 8008380:	bd70      	pop	{r4, r5, r6, pc}
 8008382:	46c0      	nop			@ (mov r8, r8)
 8008384:	200004b4 	.word	0x200004b4

08008388 <memcpy>:
 8008388:	2300      	movs	r3, #0
 800838a:	b510      	push	{r4, lr}
 800838c:	429a      	cmp	r2, r3
 800838e:	d100      	bne.n	8008392 <memcpy+0xa>
 8008390:	bd10      	pop	{r4, pc}
 8008392:	5ccc      	ldrb	r4, [r1, r3]
 8008394:	54c4      	strb	r4, [r0, r3]
 8008396:	3301      	adds	r3, #1
 8008398:	e7f8      	b.n	800838c <memcpy+0x4>
	...

0800839c <__assert_func>:
 800839c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800839e:	0014      	movs	r4, r2
 80083a0:	001a      	movs	r2, r3
 80083a2:	4b09      	ldr	r3, [pc, #36]	@ (80083c8 <__assert_func+0x2c>)
 80083a4:	0005      	movs	r5, r0
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	000e      	movs	r6, r1
 80083aa:	68d8      	ldr	r0, [r3, #12]
 80083ac:	4b07      	ldr	r3, [pc, #28]	@ (80083cc <__assert_func+0x30>)
 80083ae:	2c00      	cmp	r4, #0
 80083b0:	d101      	bne.n	80083b6 <__assert_func+0x1a>
 80083b2:	4b07      	ldr	r3, [pc, #28]	@ (80083d0 <__assert_func+0x34>)
 80083b4:	001c      	movs	r4, r3
 80083b6:	4907      	ldr	r1, [pc, #28]	@ (80083d4 <__assert_func+0x38>)
 80083b8:	9301      	str	r3, [sp, #4]
 80083ba:	9402      	str	r4, [sp, #8]
 80083bc:	002b      	movs	r3, r5
 80083be:	9600      	str	r6, [sp, #0]
 80083c0:	f000 f856 	bl	8008470 <fiprintf>
 80083c4:	f000 f864 	bl	8008490 <abort>
 80083c8:	20000018 	.word	0x20000018
 80083cc:	08008791 	.word	0x08008791
 80083d0:	080087cc 	.word	0x080087cc
 80083d4:	0800879e 	.word	0x0800879e

080083d8 <_calloc_r>:
 80083d8:	b570      	push	{r4, r5, r6, lr}
 80083da:	0c0b      	lsrs	r3, r1, #16
 80083dc:	0c15      	lsrs	r5, r2, #16
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d11e      	bne.n	8008420 <_calloc_r+0x48>
 80083e2:	2d00      	cmp	r5, #0
 80083e4:	d10c      	bne.n	8008400 <_calloc_r+0x28>
 80083e6:	b289      	uxth	r1, r1
 80083e8:	b294      	uxth	r4, r2
 80083ea:	434c      	muls	r4, r1
 80083ec:	0021      	movs	r1, r4
 80083ee:	f7ff f907 	bl	8007600 <_malloc_r>
 80083f2:	1e05      	subs	r5, r0, #0
 80083f4:	d01b      	beq.n	800842e <_calloc_r+0x56>
 80083f6:	0022      	movs	r2, r4
 80083f8:	2100      	movs	r1, #0
 80083fa:	f7fe f983 	bl	8006704 <memset>
 80083fe:	e016      	b.n	800842e <_calloc_r+0x56>
 8008400:	1c2b      	adds	r3, r5, #0
 8008402:	1c0c      	adds	r4, r1, #0
 8008404:	b289      	uxth	r1, r1
 8008406:	b292      	uxth	r2, r2
 8008408:	434a      	muls	r2, r1
 800840a:	b29b      	uxth	r3, r3
 800840c:	b2a1      	uxth	r1, r4
 800840e:	4359      	muls	r1, r3
 8008410:	0c14      	lsrs	r4, r2, #16
 8008412:	190c      	adds	r4, r1, r4
 8008414:	0c23      	lsrs	r3, r4, #16
 8008416:	d107      	bne.n	8008428 <_calloc_r+0x50>
 8008418:	0424      	lsls	r4, r4, #16
 800841a:	b292      	uxth	r2, r2
 800841c:	4314      	orrs	r4, r2
 800841e:	e7e5      	b.n	80083ec <_calloc_r+0x14>
 8008420:	2d00      	cmp	r5, #0
 8008422:	d101      	bne.n	8008428 <_calloc_r+0x50>
 8008424:	1c14      	adds	r4, r2, #0
 8008426:	e7ed      	b.n	8008404 <_calloc_r+0x2c>
 8008428:	230c      	movs	r3, #12
 800842a:	2500      	movs	r5, #0
 800842c:	6003      	str	r3, [r0, #0]
 800842e:	0028      	movs	r0, r5
 8008430:	bd70      	pop	{r4, r5, r6, pc}

08008432 <__ascii_mbtowc>:
 8008432:	b082      	sub	sp, #8
 8008434:	2900      	cmp	r1, #0
 8008436:	d100      	bne.n	800843a <__ascii_mbtowc+0x8>
 8008438:	a901      	add	r1, sp, #4
 800843a:	1e10      	subs	r0, r2, #0
 800843c:	d006      	beq.n	800844c <__ascii_mbtowc+0x1a>
 800843e:	2b00      	cmp	r3, #0
 8008440:	d006      	beq.n	8008450 <__ascii_mbtowc+0x1e>
 8008442:	7813      	ldrb	r3, [r2, #0]
 8008444:	600b      	str	r3, [r1, #0]
 8008446:	7810      	ldrb	r0, [r2, #0]
 8008448:	1e43      	subs	r3, r0, #1
 800844a:	4198      	sbcs	r0, r3
 800844c:	b002      	add	sp, #8
 800844e:	4770      	bx	lr
 8008450:	2002      	movs	r0, #2
 8008452:	4240      	negs	r0, r0
 8008454:	e7fa      	b.n	800844c <__ascii_mbtowc+0x1a>

08008456 <__ascii_wctomb>:
 8008456:	0003      	movs	r3, r0
 8008458:	1e08      	subs	r0, r1, #0
 800845a:	d005      	beq.n	8008468 <__ascii_wctomb+0x12>
 800845c:	2aff      	cmp	r2, #255	@ 0xff
 800845e:	d904      	bls.n	800846a <__ascii_wctomb+0x14>
 8008460:	228a      	movs	r2, #138	@ 0x8a
 8008462:	2001      	movs	r0, #1
 8008464:	601a      	str	r2, [r3, #0]
 8008466:	4240      	negs	r0, r0
 8008468:	4770      	bx	lr
 800846a:	2001      	movs	r0, #1
 800846c:	700a      	strb	r2, [r1, #0]
 800846e:	e7fb      	b.n	8008468 <__ascii_wctomb+0x12>

08008470 <fiprintf>:
 8008470:	b40e      	push	{r1, r2, r3}
 8008472:	b517      	push	{r0, r1, r2, r4, lr}
 8008474:	4c05      	ldr	r4, [pc, #20]	@ (800848c <fiprintf+0x1c>)
 8008476:	ab05      	add	r3, sp, #20
 8008478:	cb04      	ldmia	r3!, {r2}
 800847a:	0001      	movs	r1, r0
 800847c:	6820      	ldr	r0, [r4, #0]
 800847e:	9301      	str	r3, [sp, #4]
 8008480:	f7ff fd12 	bl	8007ea8 <_vfiprintf_r>
 8008484:	bc1e      	pop	{r1, r2, r3, r4}
 8008486:	bc08      	pop	{r3}
 8008488:	b003      	add	sp, #12
 800848a:	4718      	bx	r3
 800848c:	20000018 	.word	0x20000018

08008490 <abort>:
 8008490:	2006      	movs	r0, #6
 8008492:	b510      	push	{r4, lr}
 8008494:	f000 f82c 	bl	80084f0 <raise>
 8008498:	2001      	movs	r0, #1
 800849a:	f7fa fdd8 	bl	800304e <_exit>

0800849e <_raise_r>:
 800849e:	b570      	push	{r4, r5, r6, lr}
 80084a0:	0004      	movs	r4, r0
 80084a2:	000d      	movs	r5, r1
 80084a4:	291f      	cmp	r1, #31
 80084a6:	d904      	bls.n	80084b2 <_raise_r+0x14>
 80084a8:	2316      	movs	r3, #22
 80084aa:	6003      	str	r3, [r0, #0]
 80084ac:	2001      	movs	r0, #1
 80084ae:	4240      	negs	r0, r0
 80084b0:	bd70      	pop	{r4, r5, r6, pc}
 80084b2:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d004      	beq.n	80084c2 <_raise_r+0x24>
 80084b8:	008a      	lsls	r2, r1, #2
 80084ba:	189b      	adds	r3, r3, r2
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	2a00      	cmp	r2, #0
 80084c0:	d108      	bne.n	80084d4 <_raise_r+0x36>
 80084c2:	0020      	movs	r0, r4
 80084c4:	f000 f830 	bl	8008528 <_getpid_r>
 80084c8:	002a      	movs	r2, r5
 80084ca:	0001      	movs	r1, r0
 80084cc:	0020      	movs	r0, r4
 80084ce:	f000 f819 	bl	8008504 <_kill_r>
 80084d2:	e7ed      	b.n	80084b0 <_raise_r+0x12>
 80084d4:	2a01      	cmp	r2, #1
 80084d6:	d009      	beq.n	80084ec <_raise_r+0x4e>
 80084d8:	1c51      	adds	r1, r2, #1
 80084da:	d103      	bne.n	80084e4 <_raise_r+0x46>
 80084dc:	2316      	movs	r3, #22
 80084de:	6003      	str	r3, [r0, #0]
 80084e0:	2001      	movs	r0, #1
 80084e2:	e7e5      	b.n	80084b0 <_raise_r+0x12>
 80084e4:	2100      	movs	r1, #0
 80084e6:	0028      	movs	r0, r5
 80084e8:	6019      	str	r1, [r3, #0]
 80084ea:	4790      	blx	r2
 80084ec:	2000      	movs	r0, #0
 80084ee:	e7df      	b.n	80084b0 <_raise_r+0x12>

080084f0 <raise>:
 80084f0:	b510      	push	{r4, lr}
 80084f2:	4b03      	ldr	r3, [pc, #12]	@ (8008500 <raise+0x10>)
 80084f4:	0001      	movs	r1, r0
 80084f6:	6818      	ldr	r0, [r3, #0]
 80084f8:	f7ff ffd1 	bl	800849e <_raise_r>
 80084fc:	bd10      	pop	{r4, pc}
 80084fe:	46c0      	nop			@ (mov r8, r8)
 8008500:	20000018 	.word	0x20000018

08008504 <_kill_r>:
 8008504:	2300      	movs	r3, #0
 8008506:	b570      	push	{r4, r5, r6, lr}
 8008508:	4d06      	ldr	r5, [pc, #24]	@ (8008524 <_kill_r+0x20>)
 800850a:	0004      	movs	r4, r0
 800850c:	0008      	movs	r0, r1
 800850e:	0011      	movs	r1, r2
 8008510:	602b      	str	r3, [r5, #0]
 8008512:	f7fa fd8c 	bl	800302e <_kill>
 8008516:	1c43      	adds	r3, r0, #1
 8008518:	d103      	bne.n	8008522 <_kill_r+0x1e>
 800851a:	682b      	ldr	r3, [r5, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d000      	beq.n	8008522 <_kill_r+0x1e>
 8008520:	6023      	str	r3, [r4, #0]
 8008522:	bd70      	pop	{r4, r5, r6, pc}
 8008524:	200004b4 	.word	0x200004b4

08008528 <_getpid_r>:
 8008528:	b510      	push	{r4, lr}
 800852a:	f7fa fd7a 	bl	8003022 <_getpid>
 800852e:	bd10      	pop	{r4, pc}

08008530 <_init>:
 8008530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008532:	46c0      	nop			@ (mov r8, r8)
 8008534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008536:	bc08      	pop	{r3}
 8008538:	469e      	mov	lr, r3
 800853a:	4770      	bx	lr

0800853c <_fini>:
 800853c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800853e:	46c0      	nop			@ (mov r8, r8)
 8008540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008542:	bc08      	pop	{r3}
 8008544:	469e      	mov	lr, r3
 8008546:	4770      	bx	lr
